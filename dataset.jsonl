{"prompt": "I want to see events where a process named \"touch\" on macOS changes file timestamps, especially if it uses flags like -t, -acmr, -d, or -r.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/touch\" and (action_process_image_command_line contains \"-t\" or action_process_image_command_line contains \"-acmr\" or action_process_image_command_line contains \"-d\" or action_process_image_command_line contains \"-r\"))\n\n\n\n"}
{"prompt": "I want to find out if there are any external port scans happening between external IPs that are being allowed by our security devices. I'm looking for patterns where at least 5 different ports are scanned on a target IP within a 30-minute window.", "response": "datamodel dataset in (cisco_asa_raw)\n\n| join type = inner\n(dataset = wl_ip_cidrs\n| filter wl_logsrc = \"cnx_ext_pub_ip\" and wl_type = \"ipv4\"\n) as cnxextips cnxextips.wl_value = xdm.target.ipv4\n| filter (xdm.source.is_internal_ip = false and xdm.target.is_internal_ip = false) and xdm.observer.action in (\"accept\") and len(to_string(xdm.target.port)) <= 4 and wl_value = xdm.target.ipv4\n| comp first(_time) as FirstTimestamp,\nlatest(_time) as LatestTimestamp,\nvalues(xdm.target.port) as TargetPorts,\ncount() as EventCount by xdm.source.ipv4,\nxdm.target.ipv4,\nxdm.network.ip_protocol,\nxdm.event.original_event_type,\nxdm.observer.product,\nxdm.observer.action\n| filter array_length(TargetPorts) >= 5 and timestamp_diff(LatestTimestamp, FirstTimestamp, \"MINUTE\") <= 30"}
{"prompt": "I want to find events where attackers are enumerating Active Directory computers using the `Get-AdComputer` command.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Get-AdComputer \" and (ScriptBlockText contains \"-Filter \" or ScriptBlockText contains \"-LDAPFilter \" or ScriptBlockText contains \"-Properties \"))\n\n\n\n"}
{"prompt": "I want to see CyberArk privileged activities performed by users other than 'skyboxlb' where the target user is either 'Administrator' or 'administrator', excluding events from IP address 10.64.103.83.", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_src = xdm.target.user.username,\nuser_dst = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station != \"10.64.103.83\" and device_ip != \"10.64.103.83\"\n| filter user_dst in (\"Administrator\", \"administrator\") and user_src not in (\"skyboxlb\", null, \"\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see when Cisco Catalyst routers or switches are restarted, including their hostname, IP address, and any relevant description from the event log.", "response": "datamodel dataset = cisco_catalyst_raw\n| alter Reporting_Device_IP = cisco_catalyst_raw._final_reporting_device_ip,\nBVM_Device_Hostname = cisco_catalyst_raw._broker_device_name,\nBVM_Device_IP = cisco_catalyst_raw._broker_ip_address\n| alter Desc_String = if(cisco_catalyst_raw._broker_device_name contains \"NEWAVLON\", \"New Avalon\", \".\")\n| filter xdm.event.description ~= \"System restarted\"\n| fields _time, _vendor, _product, BVM_Device_Hostname,\nBVM_Device_IP, Reporting_Device_IP, xdm.event.description,\nxdm.event.type, Desc_String"}
{"prompt": "I want to detect potential SAM database dumps by identifying files with suspicious names and patterns.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*\\\\Temp\\\\sam\" or xdm.target.file.filename ~= \".*\\\\sam\\.sav\" or xdm.target.file.filename ~= \".*\\\\Intel\\\\sam\" or xdm.target.file.filename ~= \".*\\\\sam\\.hive\" or xdm.target.file.filename ~= \".*\\\\Perflogs\\\\sam\" or xdm.target.file.filename ~= \".*\\\\ProgramData\\\\sam\" or xdm.target.file.filename ~= \".*\\\\Users\\\\Public\\\\sam\" or xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\sam\" or xdm.target.file.filename ~= \".*\\\\AppData\\\\Roaming\\\\sam\" or xdm.target.file.filename ~= \".*\\_ShadowSteal\\.zip\" or xdm.target.file.filename ~= \".*\\\\Documents\\\\SAM\\.export\" or xdm.target.file.filename ~= \".*\\:\\\\sam\") or (xdm.target.file.filename contains \"\\\\hive_sam_\" or xdm.target.file.filename contains \"\\\\sam.save\" or xdm.target.file.filename contains \"\\\\sam.export\" or xdm.target.file.filename contains \"\\\\~reg_sam.save\" or xdm.target.file.filename contains \"\\\\sam_backup\" or xdm.target.file.filename contains \"\\\\sam.bck\" or xdm.target.file.filename contains \"\\\\sam.backup\"))\n\n\n\n"}
{"prompt": "I want to see activity related to Hurricane Panda, especially anything involving attempts to escalate privileges by adding users to administrators groups.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"localgroup\" and action_process_image_command_line contains \"admin\" and action_process_image_command_line contains \"/add\") or action_process_image_command_line contains \"\\\\Win64.exe\")\n\n\n\n"}
{"prompt": " I want to see alerts about new user profiles being created for enterprise O365 admins in Azure AD. ", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Operation ~= \"Add user\"\n| filter userid !~= \"^sync*\"\n| alter source_user = json_extract_scalar(`Target`, \"$[3].ID\")\n| fields UserId, source_user, ObjectId, ResultStatus, Operation,\n_time, CreationTime, `Target`\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to detect suspicious activities related to shell commands.", "response": "datamodel\n| filter ( contains \"wget \\* - http\\* | perl\" or  contains \"wget \\* - http\\* | sh\" or  contains \"wget \\* - http\\* | bash\" or  contains \"python -m SimpleHTTPServer\" or  contains \"-m http.server\" or  contains \"import pty; pty.spawn\\*\" or  contains \"socat exec:\\*\" or  contains \"socat -O /tmp/\\*\" or  contains \"socat tcp-connect\\*\" or  contains \"\\*echo binary >>\\*\" or  contains \"\\*wget \\*; chmod +x\\*\" or  contains \"\\*wget \\*; chmod 777 \\*\" or  contains \"\\*cd /tmp || cd /var/run || cd /mnt\\*\" or  contains \"\\*stop;service iptables stop;\\*\" or  contains \"\\*stop;SuSEfirewall2 stop;\\*\" or  contains \"chmod 777 2020\\*\" or  contains \"\\*>>/etc/rc.local\" or  contains \"\\*base64 -d /tmp/\\*\" or  contains \"\\* | base64 -d \\*\" or  contains \"\\*/chmod u+s \\*\" or  contains \"\\*chmod +s /tmp/\\*\" or  contains \"\\*chmod u+s /tmp/\\*\" or  contains \"\\* /tmp/haxhax\\*\" or  contains \"\\* /tmp/ns_sploit\\*\" or  contains \"nc -l -p \\*\" or  contains \"cp /bin/ksh \\*\" or  contains \"cp /bin/sh \\*\" or  contains \"\\* /tmp/\\*.b64 \\*\" or  contains \"\\*/tmp/ysocereal.jar\\*\" or  contains \"\\*/tmp/x \\*\" or  contains \"\\*; chmod +x /tmp/\\*\" or  contains \"\\*;chmod +x /tmp/\\*\")\n\n\n\n"}
{"prompt": "I want to see all MFA privileged changes made by red carpet users, including details about the operation performed, outcome, usernames involved, and location information.", "response": "config case_sensitive = false\n| datamodel dataset = mfa_mfa2_raw\n| filter xdm.event.operation in (\"changed user\") and xdm.event.operation in (\"pinHash\", \"phoneNumber\", \"mode3\")\n| fields xdm.event.type, xdm.event.description, xdm.event.operation,\nxdm.event.outcome, xdm.source.user.username, xdm.target.user.username,\nxdm.observer.action, xdm.source.host.hostname, xdm.event.original_event_type,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.source.ipv4, _time, _insert_time\n| alter target_username = if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<ID>\", ltrim(xdm.target.user.username, \"<id>\\\\\"), xdm.target.user.username)))\n| join\n(dataset = redcarpet_users_list\n| alter username_field = if(username ~= \"<domain>\", rtrim(username, \"@<domain>\"), if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<user id>\", ltrim(username, \"<user id>\\\\\"), username)))\n) as red_carpet red_carpet.username_field = target_username\n| filter username_field != null\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see indicators associated with Equation Group attacks, specifically those related to Linux systems.", "response": "datamodel\n| filter ( contains \"chown root\\*chmod 4777 \" or  contains \"cp /bin/sh .;chown\" or  contains \"chmod 4777 /tmp/.scsi/dev/bin/gsh\" or  contains \"chown root:root /tmp/.scsi/dev/bin/\" or  contains \"chown root:root x;\" or  contains \"/bin/telnet locip locport < /dev/console | /bin/sh\" or  contains \"/tmp/ratload\" or  contains \"ewok -t \" or  contains \"xspy -display \" or  contains \"cat > /dev/tcp/127.0.0.1/80 <<END\" or  contains \"rm -f /current/tmp/ftshell.latest\" or  contains \"ghost_\\* -v \" or  contains \" --wipe > /dev/null\" or  contains \"ping -c 2 \\*; grep \\* /proc/net/arp >/tmp/gx\" or  contains \"iptables \\* OUTPUT -p tcp -d 127.0.0.1 --tcp-flags RST RST -j DROP;\" or  contains \"> /var/log/audit/audit.log; rm -f .\" or  contains \"cp /var/log/audit/audit.log .tmp\" or  contains \"sh >/dev/tcp/\\* <&1 2>&1\" or  contains \"ncat -vv -l -p \\* <\" or  contains \"nc -vv -l -p \\* <\" or  contains \"< /dev/console | uudecode && uncompress\" or  contains \"sendmail -osendmail;chmod +x sendmail\" or  contains \"/usr/bin/wget -O /tmp/a http\\* && chmod 755 /tmp/cron\" or  contains \"chmod 666 /var/run/utmp~\" or  contains \"chmod 700 nscd crond\" or  contains \"cp /etc/shadow /tmp/.\" or  contains \"</dev/console |uudecode > /dev/null 2>&1 && uncompress\" or  contains \"chmod 700 jp&&netstat -an|grep\" or  contains \"uudecode > /dev/null 2>&1 && uncompress -f \\* && chmod 755\" or  contains \"chmod 700 crond\" or  contains \"wget http\\*; chmod +x /tmp/sendmail\" or  contains \"chmod 700 fp sendmail pt\" or  contains \"chmod 755 /usr/vmsys/bin/pipe\" or  contains \"chmod -R 755 /usr/vmsys\" or  contains \"chmod 755 $opbin/\\*tunnel\" or  contains \"chmod 700 sendmail\" or  contains \"chmod 0700 sendmail\" or  contains \"/usr/bin/wget http\\*sendmail;chmod +x sendmail;\" or  contains \"&& telnet \\* 2>&1 </dev/console\")\n\n\n\n"}
{"prompt": "I want to find instances of malicious VMGuestLib DLL sideloading on Windows systems.", "response": "preset = xdr_image_load\n| filter ((action_module_path contains \"\\\\VMware\\\\VMware Tools\\\\vmStatsProvider\\\\win32\" and action_module_path contains \"\\\\vmGuestLib.dll\") and actor_process_image_path ~= \".*\\\\Windows\\\\System32\\\\wbem\\\\WmiApSrv\\.exe\") and  not (actor_process_signature_status = \"true\")\n\n\n\n"}
{"prompt": "I want to see alerts about unauthorized changes to group permissions, like someone changing a group from Security to Distribution or vice versa.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.source.user.username not in (\"_vfmadmin\", \"dl_automation\") and xdm.event.id = \"4764\"\n| join type = left\n(dataset = device_group_static_list\n) as wingrps(wingrps.HOSTNAME = xdm.source.host.hostname or wingrps.IP = microsoft_windows_raw._reporting_device_ip)\n| filter TYPE in (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n) as ent_admin_dst ent_admin_dst.username = xdm.source.user.username or ent_admin_dst.sam_account_name = xdm.source.user.username\n| filter admin_type = null and security_groups = null or (admin_type not in (\"domain_admin_win_admin\", \"win_accop\", \"win_admin\", \"win_admin_accop\") and security_groups !~= \"Tier0Users|Tier1Users\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where reg.exe is used to query registry keys related to system configurations and services like Windows startup, login settings, and service delays.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and action_process_image_command_line contains \"query\" and (action_process_image_command_line contains \"currentVersion\\\\windows\" or action_process_image_command_line ~= \".*winlogon\\\\.*\" or action_process_image_command_line contains \"currentVersion\\\\shellServiceObjectDelayLoad\" or action_process_image_command_line contains \"currentVersion\\\\run\" or action_process_image_command_line contains \"currentVersion\\\\policies\\\\explorer\\\\run\" or action_process_image_command_line contains \"currentcontrolset\\\\services\"))\n\n\n\n"}
{"prompt": "I want to detect if someone is trying to tamper with Windows services.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"143Svc\" or action_process_image_command_line contains \"Acronis VSS Provider\" or action_process_image_command_line contains \"AcronisAgent\" or action_process_image_command_line contains \"AcrSch2Svc\" or action_process_image_command_line contains \"Antivirus\" or action_process_image_command_line contains \"ARSM\" or action_process_image_command_line contains \"aswBcc\" or action_process_image_command_line contains \"Avast Business Console Client Antivirus Service\" or action_process_image_command_line contains \"avast! Antivirus\" or action_process_image_command_line contains \"AVG Antivirus\" or action_process_image_command_line contains \"avgAdminClient\" or action_process_image_command_line contains \"AvgAdminServer\" or action_process_image_command_line contains \"AVP1\" or action_process_image_command_line contains \"BackupExec\" or action_process_image_command_line contains \"bedbg\" or action_process_image_command_line contains \"BITS\" or action_process_image_command_line contains \"BrokerInfrastructure\" or action_process_image_command_line contains \"Client Agent 7.60\" or action_process_image_command_line contains \"Core Browsing Protection\" or action_process_image_command_line contains \"Core Mail Protection\" or action_process_image_command_line contains \"Core Scanning Server\" or action_process_image_command_line contains \"DCAgent\" or action_process_image_command_line contains \"EhttpSr\" or action_process_image_command_line contains \"ekrn\" or action_process_image_command_line contains \"Enterprise Client Service\" or action_process_image_command_line contains \"epag\" or action_process_image_command_line contains \"EPIntegrationService\" or action_process_image_command_line contains \"EPProtectedService\" or action_process_image_command_line contains \"EPRedline\" or action_process_image_command_line contains \"EPSecurityService\" or action_process_image_command_line contains \"EPUpdateService\" or action_process_image_command_line contains \"EraserSvc11710\" or action_process_image_command_line contains \"EsgShKernel\" or action_process_image_command_line contains \"ESHASRV\" or action_process_image_command_line contains \"FA_Scheduler\" or action_process_image_command_line contains \"FirebirdGuardianDefaultInstance\" or action_process_image_command_line contains \"FirebirdServerDefaultInstance\" or action_process_image_command_line contains \"HealthTLService\" or action_process_image_command_line contains \"MSSQLFDLauncher$\" or action_process_image_command_line contains \"hmpalertsvc\" or action_process_image_command_line contains \"HMS\" or action_process_image_command_line contains \"IISAdmin\" or action_process_image_command_line contains \"IMANSVC\" or action_process_image_command_line contains \"IMAP4Svc\" or action_process_image_command_line contains \"KAVFS\" or action_process_image_command_line contains \"KAVFSGT\" or action_process_image_command_line contains \"kavfsslp\" or action_process_image_command_line contains \"klbackupdisk\" or action_process_image_command_line contains \"klbackupflt\" or action_process_image_command_line contains \"klflt\" or action_process_image_command_line contains \"klhk\" or action_process_image_command_line contains \"KLIF\" or action_process_image_command_line contains \"klim6\" or action_process_image_command_line contains \"klkbdflt\" or action_process_image_command_line contains \"klmouflt\" or action_process_image_command_line contains \"klnagent\" or action_process_image_command_line contains \"klpd\" or action_process_image_command_line contains \"kltap\" or action_process_image_command_line contains \"KSDE1.0.0\" or action_process_image_command_line contains \"LogProcessorService\" or action_process_image_command_line contains \"M8EndpointAgent\" or action_process_image_command_line contains \"macmnsvc\" or action_process_image_command_line contains \"masvc\" or action_process_image_command_line contains \"MBAMService\" or action_process_image_command_line contains \"MBCloudEA\" or action_process_image_command_line contains \"MBEndpointAgent\" or action_process_image_command_line contains \"McAfeeDLPAgentService\" or action_process_image_command_line contains \"McAfeeEngineService\" or action_process_image_command_line contains \"MCAFEEEVENTPARSERSRV\" or action_process_image_command_line contains \"McAfeeFramework\" or action_process_image_command_line contains \"MCAFEETOMCATSRV530\" or action_process_image_command_line contains \"McShield\" or action_process_image_command_line contains \"McTaskManager\" or action_process_image_command_line contains \"mfefire\" or action_process_image_command_line contains \"mfemms\" or action_process_image_command_line contains \"mfevto\" or action_process_image_command_line contains \"mfevtp\" or action_process_image_command_line contains \"mfewc\" or action_process_image_command_line contains \"MMS\" or action_process_image_command_line contains \"mozyprobackup\" or action_process_image_command_line contains \"MsDtsServer\" or action_process_image_command_line contains \"MSExchange\" or action_process_image_command_line contains \"msftesq1SPROO\" or action_process_image_command_line contains \"msftesql$PROD\" or action_process_image_command_line contains \"MSOLAP$SQL_2008\" or action_process_image_command_line contains \"MSOLAP$SYSTEM_BGC\" or action_process_image_command_line contains \"MSOLAP$TPS\" or action_process_image_command_line contains \"MSOLAP$TPSAMA\" or action_process_image_command_line contains \"MSOLAPSTPS\" or action_process_image_command_line contains \"MSOLAPSTPSAMA\" or action_process_image_command_line contains \"mssecflt\" or action_process_image_command_line contains \"MSSQ!I.SPROFXENGAGEMEHT\" or action_process_image_command_line contains \"MSSQ0SHAREPOINT\" or action_process_image_command_line contains \"MSSQ0SOPHOS\" or action_process_image_command_line contains \"MSSQL\" or action_process_image_command_line contains \"MySQL\" or action_process_image_command_line contains \"NanoServiceMain\" or action_process_image_command_line contains \"NetMsmqActivator\" or action_process_image_command_line contains \"ntrtscan\" or action_process_image_command_line contains \"ofcservice\" or action_process_image_command_line contains \"Online Protection System\" or action_process_image_command_line contains \"OracleClientCache80\" or action_process_image_command_line contains \"PandaAetherAgent\" or action_process_image_command_line contains \"PccNTUpd\" or action_process_image_command_line contains \"PDVFSService\" or action_process_image_command_line contains \"POP3Svc\" or action_process_image_command_line contains \"POVFSService\" or action_process_image_command_line contains \"PSUAService\" or action_process_image_command_line contains \"Quick Update Service\" or action_process_image_command_line contains \"RepairService\" or action_process_image_command_line contains \"ReportServer\" or action_process_image_command_line contains \"ReportServer$\" or action_process_image_command_line contains \"RESvc\" or action_process_image_command_line contains \"RpcEptMapper\" or action_process_image_command_line contains \"sacsvr\" or action_process_image_command_line contains \"SamSs\" or action_process_image_command_line contains \"SAVAdminService\" or action_process_image_command_line contains \"SAVService\" or action_process_image_command_line contains \"ScSecSvc\" or action_process_image_command_line contains \"SDRSVC\" or action_process_image_command_line contains \"sense\" or action_process_image_command_line contains \"SentinelAgent\" or action_process_image_command_line contains \"SentinelHelperService\" or action_process_image_command_line contains \"SepMasterService\" or action_process_image_command_line contains \"ShMonitor\" or action_process_image_command_line contains \"Smcinst\" or action_process_image_command_line contains \"SmcService\" or action_process_image_command_line contains \"SMTPSvc\" or action_process_image_command_line contains \"SNAC\" or action_process_image_command_line contains \"SntpService\" or action_process_image_command_line contains \"Sophos\" or action_process_image_command_line contains \"SQ1SafeOLRService\" or action_process_image_command_line contains \"SQL Backups\" or action_process_image_command_line contains \"SQL Server\" or action_process_image_command_line contains \"SQLAgent\" or action_process_image_command_line contains \"SQLBrowser\" or action_process_image_command_line contains \"SQLsafe\" or action_process_image_command_line contains \"SQLSERVERAGENT\" or action_process_image_command_line contains \"SQLTELEMETRY\" or action_process_image_command_line contains \"SQLWriter\" or action_process_image_command_line contains \"SSISTELEMETRY130\" or action_process_image_command_line contains \"SstpSvc\" or action_process_image_command_line contains \"svcGenericHost\" or action_process_image_command_line contains \"swc_service\" or action_process_image_command_line contains \"swi_filter\" or action_process_image_command_line contains \"swi_service\" or action_process_image_command_line contains \"swi_update\" or action_process_image_command_line contains \"Symantec\" or action_process_image_command_line contains \"Telemetryserver\" or action_process_image_command_line contains \"ThreatLockerService\" or action_process_image_command_line contains \"TMBMServer\" or action_process_image_command_line contains \"TmCCSF\" or action_process_image_command_line contains \"TmFilter\" or action_process_image_command_line contains \"TMiCRCScanService\" or action_process_image_command_line contains \"tmlisten\" or action_process_image_command_line contains \"TMLWCSService\" or action_process_image_command_line contains \"TmPfw\" or action_process_image_command_line contains \"TmPreFilter\" or action_process_image_command_line contains \"TmProxy\" or action_process_image_command_line contains \"TMSmartRelayService\" or action_process_image_command_line contains \"tmusa\" or action_process_image_command_line contains \"Trend Micro Deep Security Manager\" or action_process_image_command_line contains \"TrueKey\" or action_process_image_command_line contains \"UI0Detect\" or action_process_image_command_line contains \"UTODetect\" or action_process_image_command_line contains \"Veeam\" or action_process_image_command_line contains \"VeeamDeploySvc\" or action_process_image_command_line contains \"Veritas System Recovery\" or action_process_image_command_line contains \"VSApiNt\" or action_process_image_command_line contains \"VSS\" or action_process_image_command_line contains \"W3Svc\" or action_process_image_command_line contains \"wbengine\" or action_process_image_command_line contains \"WdNisSvc\" or action_process_image_command_line contains \"WeanClOudSve\" or action_process_image_command_line contains \"Weems JY\" or action_process_image_command_line contains \"WinDefend\" or action_process_image_command_line contains \"wozyprobackup\" or action_process_image_command_line contains \"WRSVC\" or action_process_image_command_line contains \"Zoolz 2 Service\") and (((actor_process_file_original_name in (\"net.exe\", \"net1.exe\") or (action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\")) and action_process_image_command_line contains \" stop \") or ((actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\") or (action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\")) and (action_process_image_command_line contains \"Stop-Service \" or action_process_image_command_line contains \"Remove-Service \")) or ((actor_process_file_original_name = \"sc.exe\" or action_process_image_path ~= \".*\\\\sc\\.exe\") and (action_process_image_command_line contains \" stop \" or action_process_image_command_line contains \" delete \" or action_process_image_command_line contains \" pause \")))\n\n\n\n"}
{"prompt": "I want to see events where the Sysinternals tool \"sdelete\" is executed after being renamed.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"sdelete.exe\" and  not ((action_process_image_path ~= \".*\\\\sdelete\\.exe\" or action_process_image_path ~= \".*\\\\sdelete64\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see indicators of processes on Mac endpoints that are clearing system logs by using commands like 'rm', 'unlink', or 'shred', and targeting paths related to /var/log or /Users/Library/Logs/. ", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/rm\" or action_process_image_path ~= \".*\\/unlink\" or action_process_image_path ~= \".*\\/shred\") and (action_process_image_command_line contains \"/var/log\" or (action_process_image_command_line contains \"/Users/\" and action_process_image_command_line contains \"/Library/Logs/\"))\n\n\n\n"}
{"prompt": "I want to find instances where someone starts a network trace capture using netsh.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and (action_process_image_command_line contains \"trace\" and action_process_image_command_line contains \"start\"))\n\n\n\n"}
{"prompt": " I want to see alerts when there are 3 or more unauthorized denied access attempts via Telnet or SNMP on Cisco Catalyst devices within a two minute window. ", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 2m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"IP-4-PERMITFAIL\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to see alerts when OSPF entries on Cisco Catalyst switches exceed the threshold defined by CCD.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter msg_id in (\"XDR-SW1_DFC5-3-XDROOS\", \"XDR-SW2_DFC5-3-XDROOS\", \"XDR-SW1_DFC4-3-XDROOS\", \"XDR-SW2_DFC4-3-XDROOS\", \"XDR-SW1_DFC3-3-XDROOS\", \"XDR-SW2_DFC3-3-XDROOS\", \"XDR-SW1_DFC2-3-XDROOS\", \"XDR-SW2_DFC2-3-XDROOS\", \"XDR-SW1_DFC1-3-XDROOS\", \"XDR-SW2_DFC1-3-XDROOS\") or xdm.event.description ~= \"XDR\"\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to see alerts for when there are more than 35 instances of AAA max retries detected on my Cisco WLCs within a 5 minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_wlc_raw\n| alter msg_id = concat(xdm.event.original_event_type, \"-\", xdm.alert.severity, \"-\", xdm.event.operation_sub_type),\ndevice_ip = cisco_wlc_raw._final_reporting_device_ip,\nserver_name = arrayindex(regextract(cisco_wlc_raw._raw_log, \"\\<\\d+\\>([^\\:]+)\"), 0),\nmac_address = arrayindex(regextract(cisco_wlc_raw._raw_log, \"for\\s+client\\s([^\\s]+)\"), 0),\nxdm.source.user.username = if(xdm.source.user.username = null, arrayindex(regextract(cisco_wlc_raw._raw_log, \"user\\saccount\\s\\(([^\\)]+)\"), 0), xdm.source.user.username)\n| alter mac_address = coalesce(mac_address, if(xdm.source.host.mac_addresses = null, null, to_string(xdm.source.host.mac_addresses)))\n| filter msg_id in (\"DOT1X-4-AAA_MAX_RETRY\", \"DOT1X-4-DOT1X_MAX_RETRY\") and device_ip NOT IN (\"<ip>\") and mac_address not in (\"<mac addr>\")\n| alter xdm.target.host.mac_addresses = to_string(xdm.target.host.mac_addresses),\nxdm.target.host.ipv4_addresses = to_string(xdm.target.host.ipv4_addresses),\nxdm.target.host.ipv6_addresses = to_string(xdm.target.host.ipv6_addresses)\n| fields msg_id, xdm.event.original_event_type, xdm.alert.severity,\nxdm.event.operation_sub_type, xdm.event.description,\nxdm.event.log_level, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.source.ipv4, xdm.source.ipv6, xdm.source.port,\nmac_address, xdm.source.process.name, xdm.source.user.username,\nxdm.source.agent.identifier, xdm.source.agent.type,\nxdm.target.ipv4, xdm.target.ipv6, xdm.target.port,\nxdm.target.host.ipv4_addresses, xdm.target.host.ipv6_addresses,\nxdm.target.interface, xdm.target.agent.identifier,\nxdm.target.host.hostname, xdm.target.host.mac_addresses,\nxdm.target.resource.type, xdm.target.resource_before.value,\nxdm.target.resource.value, xdm.session_context_id,\nxdm.alert.description, xdm.network.rule, xdm.network.ip_protocol,\nxdm.network.tls.cipher, cisco_wlc_raw._raw_log, device_ip,\nserver_name, _time, _insert_time, _product, _vendor\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestTime,\nvalues(*) as *,\ncount() as matched_events by mac_address,\n_time\n| filter matched_events >= 35\n| alter aggregation_criteria1 = \"ildeviceip\",\naggregation_criteria2 = \"eth_src\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 35)), 1)"}
{"prompt": "I want to find events related to HackTool - KrbRelay Execution, specifically looking for processes named \"KrbRelay.exe\" or command lines containing specific arguments like \"-spn\", \"-clsid\", and \"shadowcred\".", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\KrbRelay\\.exe\" or actor_process_file_original_name = \"KrbRelay.exe\") or (action_process_image_command_line contains \" -spn \" and action_process_image_command_line contains \" -clsid \" and action_process_image_command_line contains \" -rbcd \") or (action_process_image_command_line contains \"shadowcred\" and action_process_image_command_line contains \"clsid\" and action_process_image_command_line contains \"spn\") or (action_process_image_command_line contains \"spn \" and action_process_image_command_line contains \"session \" and action_process_image_command_line contains \"clsid \"))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious rundll32 executions that use UNC paths.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\" or action_process_image_command_line contains \"rundll32\") and action_process_image_command_line ~= \".*\\ \\\\\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find any activities related to network sniffing on Cisco devices.", "response": "datamodel\n| filter ( contains \"monitor capture point\" or  contains \"set span\" or  contains \"set rspan\")\n\n\n\n"}
{"prompt": "I want to see events that potentially indicate obfuscation of PowerShell commands using WCHAR characters.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"(WCHAR)0x\"\n\n\n\n"}
{"prompt": "I want to see all instances of SSH connections from my internal network to the internet across my Cisco ASA, Fortinet Fortigate, and SonicWall NS devices.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter xdm.target.port in (22) and xdm.target.is_internal_ip = false and xdm.source.is_internal_ip = false\n| fields *"}
{"prompt": "I want to find users who have accessed suspicious URLs categorized as Gambling, Adult Content, Marijuana, Criminal Activities, Weapons, Abortion, or Child Abuse through Netskope, and filter out those that are images.", "response": "dataset = Netskope_Netskope_raw\n| filter category in (\"Gambling\", \"Adult Content\", \"Marijuana\", \"Criminal Activities\", \"Weapons\", \"Abortion\", \"Child Abuse\")\n| filter url not contains \".jpg\" and url not contains \".png\" and url not contains \".jpeg\"\n| comp min(_time) as FirstEventTime,\nmax(_time) as LatestEventTime,\ncount() as EventCount by user,\nhostname,\ncategory,\nNetskope_pop\n| filter EventCount >= 10"}
{"prompt": " I want to see all instances of network communication initiated to the Portmap.IO domain. ", "response": "#N/A"}
{"prompt": "I want to find processes on endpoints that are using a proxy connection by looking for \"http_proxy=\" or \"https_proxy=\" in their command lines.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"http_proxy=\" or action_process_image_command_line contains \"https_proxy=\")\n\n\n\n"}
{"prompt": "I want to see events related to TeamViewer sessions starting on Linux hosts.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\/TeamViewer\\_Service\" and action_process_image_path ~= \".*\\/TeamViewer\\_Desktop\" and action_process_image_command_line ~= \".*\\/TeamViewer\\_Desktop\\ \\-\\-IPCport\\ 5939\\ \\-\\-Module\\ 1\")\n\n\n\n"}
{"prompt": "I want to find users who accessed multiple Zscaler Remote Access category URLs within a day based on behavioral analysis.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category ~= \"Remote Access\" and host_dst not contains \".teamviewer.com\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 5"}
{"prompt": "I want to find suspicious processes that use AdvancedRun with specific arguments like /RunAs 8, 4, 10 or 11.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"/EXEFilename\" or action_process_image_command_line contains \"/CommandLine\") and ((action_process_image_command_line contains \" /RunAs 8 \" or action_process_image_command_line contains \" /RunAs 4 \" or action_process_image_command_line contains \" /RunAs 10 \" or action_process_image_command_line contains \" /RunAs 11 \") or (action_process_image_command_line ~= \".*\\/RunAs\\ 8\" or action_process_image_command_line ~= \".*\\/RunAs\\ 4\" or action_process_image_command_line ~= \".*\\/RunAs\\ 10\" or action_process_image_command_line ~= \".*\\/RunAs\\ 11\")))\n\n\n\n"}
{"prompt": "I want to see all successful remote login attempts from public IPs on Unix servers.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"edgeverve_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type in (\"sshd\", \"sudo\", \"su\", \"ssh\") and xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS and xdm.source.ipv4 != null and xdm.source.is_internal_ip = false and incidr(xdm.source.ipv4, \"169.254.0.0/16\") = false and xdm.source.ipv4 !~= \"(100)\\.(64)\\.([0-9]{1,3})\\.([0-9]{1,3})\" and xdm.source.ipv4 !~= \"(100)\\.(65)\\.([0-9]{1,3})\\.([0-9]{1,3})\"\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address as ip\n) as dmz_ips dmz_ips.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_ips incidr(xdm.source.ipv4, vpn_ips.cidr_range) = true\n| filter cidr_range = null\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, device_ip, _vendor, _product\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\naggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see how many times Azure resources are being created or deployed.", "response": "dataset = msft_azure_raw\n| filter ( contains \"Microsoft.Compute/virtualMachines/write\" or  contains \"Microsoft.Resources/deployments/write\")\n\n\n\n"}
{"prompt": "I want to see alerts for potential Svchost DLL Search Order Hijack attacks based on Windows Event Log data.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and (action_module_path ~= \".*\\\\tsmsisrv\\.dll\" or action_module_path ~= \".*\\\\tsvipsrv\\.dll\" or action_module_path ~= \".*\\\\wlbsctrl\\.dll\")) and  not (action_module_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect attempts to execute MSDT using an answer file.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\msdt\\.exe\" and action_process_image_command_line contains \"\\\\WINDOWS\\\\diagnostics\\\\index\\\\PCWDiagnostic.xml\") and (action_process_image_command_line contains \" -af \" or action_process_image_command_line contains \" /af \")) and  not (actor_process_image_path ~= \".*\\\\pcwrun\\.exe\")\n\n\n\n"}
{"prompt": "I want to see all files created by Microsoft Sync Center (mobsync.exe) that are DLL or EXE files.", "response": "datamodel\n| filter (xdm.target.process.name ~= \".*\\\\mobsync\\.exe\" or xdm.source.process.name ~= \".*\\\\mobsync\\.exe\") and (xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\")\n\n\n\n"}
{"prompt": "I want to find instances where files are written to the Startup folder during system startup.", "response": "datamodel\n| filter xdm.target.file.filename contains \"\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\StartUp\" and  not (((xdm.target.process.name = \"C:\\\\Windows\\\\System32\\\\wuauclt.exe\" or xdm.source.process.name = \"C:\\\\Windows\\\\System32\\\\wuauclt.exe\") or xdm.target.file.filename ~= \"C\\:\\\\\\$WINDOWS\\.\\~BT\\\\NewOS\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find indicators of compromise related to the REvil Kaseya incident, specifically focusing on process creation activities.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"C:\\\\Windows\\\\cert.exe\" or action_process_image_command_line contains \"del /q /f c:\\\\kworking\\\\agent.crt\" or action_process_image_command_line contains \"Kaseya VSA Agent Hot-fix\" or action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\\\\MsMpEng.exe\" or action_process_image_command_line contains \"rmdir /s /q %SystemDrive%\\\\inetpub\\\\logs\" or action_process_image_command_line contains \"del /s /q /f %SystemDrive%\\\\*.log\" or action_process_image_command_line contains \"c:\\\\kworking1\\\\agent.exe\" or action_process_image_command_line contains \"c:\\\\kworking1\\\\agent.crt\") or action_process_image_path in (\"C:\\\\Windows\\\\MsMpEng.exe\", \"C:\\\\Windows\\\\cert.exe\", \"C:\\\\kworking\\\\agent.exe\", \"C:\\\\kworking1\\\\agent.exe\") or (action_process_image_command_line contains \"del /s /q /f\" and action_process_image_command_line contains \"WebPages\\\\Errors\\\\webErrorLog.txt\"))\n\n\n\n"}
{"prompt": "I want to see all instances of VNC traffic going to the internet from Cisco ASA, Fortinet Fortigate, or SonicWall NS firewalls.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter (xdm.target.port >= 5900 and xdm.target.port <= 5910) and xdm.target.is_internal_ip = false and xdm.source.is_internal_ip = false\n| fields *"}
{"prompt": "I want to find indicators of Cobalt Strike using DNS beaconing techniques.", "response": "datamodel\n| filter ((xdm.network.dns.dns_question.name ~= \"aaa\\.stage\\..*\" or xdm.network.dns.dns_question.name ~= \"post\\.1.*\") or xdm.network.dns.dns_question.name contains \".stage.123456.\")\n\n\n\n"}
{"prompt": "I want to find instances of malware using Rundll32 to execute obfuscated code.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName contains \"&&\" and ServiceFileName contains \"rundll32\" and ServiceFileName contains \"shell32.dll\" and ServiceFileName contains \"shellexec_rundll\") and (ServiceFileName contains \"value\" or ServiceFileName contains \"invoke\" or ServiceFileName contains \"comspec\" or ServiceFileName contains \"iex\"))\n\n\n\n"}
{"prompt": "{I want to see all events where an attempt to add SID History to an account failed.} \n\n\nLet me know if you need any further assistance!", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4766\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name,\ntarget_domain\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to identify potentially malicious PowerShell scripts based on the list of known dangerous names and functionalities you provided.", "response": "preset = xdr_event_log\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter ((ContextInfo contains \"Add-ConstrainedDelegationBackdoor.ps1\" or ContextInfo contains \"Add-Exfiltration.ps1\" or ContextInfo contains \"Add-Persistence.ps1\" or ContextInfo contains \"Add-RegBackdoor.ps1\" or ContextInfo contains \"Add-RemoteRegBackdoor.ps1\" or ContextInfo contains \"Add-ScrnSaveBackdoor.ps1\" or ContextInfo contains \"Check-VM.ps1\" or ContextInfo contains \"ConvertTo-ROT13.ps1\" or ContextInfo contains \"Copy-VSS.ps1\" or ContextInfo contains \"Create-MultipleSessions.ps1\" or ContextInfo contains \"DNS_TXT_Pwnage.ps1\" or ContextInfo contains \"dnscat2.ps1\" or ContextInfo contains \"Do-Exfiltration.ps1\" or ContextInfo contains \"DomainPasswordSpray.ps1\" or ContextInfo contains \"Download_Execute.ps1\" or ContextInfo contains \"Download-Execute-PS.ps1\" or ContextInfo contains \"Enabled-DuplicateToken.ps1\" or ContextInfo contains \"Enable-DuplicateToken.ps1\" or ContextInfo contains \"Execute-Command-MSSQL.ps1\" or ContextInfo contains \"Execute-DNSTXT-Code.ps1\" or ContextInfo contains \"Execute-OnTime.ps1\" or ContextInfo contains \"ExetoText.ps1\" or ContextInfo contains \"Exploit-Jboss.ps1\" or ContextInfo contains \"Find-AVSignature.ps1\" or ContextInfo contains \"Find-Fruit.ps1\" or ContextInfo contains \"Find-GPOLocation.ps1\" or ContextInfo contains \"Find-TrustedDocuments.ps1\" or ContextInfo contains \"FireBuster.ps1\" or ContextInfo contains \"FireListener.ps1\" or ContextInfo contains \"Get-ApplicationHost.ps1\" or ContextInfo contains \"Get-ChromeDump.ps1\" or ContextInfo contains \"Get-ClipboardContents.ps1\" or ContextInfo contains \"Get-ComputerDetail.ps1\" or ContextInfo contains \"Get-FoxDump.ps1\" or ContextInfo contains \"Get-GPPAutologon.ps1\" or ContextInfo contains \"Get-GPPPassword.ps1\" or ContextInfo contains \"Get-IndexedItem.ps1\" or ContextInfo contains \"Get-Keystrokes.ps1\" or ContextInfo contains \"Get-LSASecret.ps1\" or ContextInfo contains \"Get-MicrophoneAudio.ps1\" or ContextInfo contains \"Get-PassHashes.ps1\" or ContextInfo contains \"Get-PassHints.ps1\" or ContextInfo contains \"Get-RegAlwaysInstallElevated.ps1\" or ContextInfo contains \"Get-RegAutoLogon.ps1\" or ContextInfo contains \"Get-RickAstley.ps1\" or ContextInfo contains \"Get-Screenshot.ps1\" or ContextInfo contains \"Get-SecurityPackages.ps1\" or ContextInfo contains \"Get-ServiceFilePermission.ps1\" or ContextInfo contains \"Get-ServicePermission.ps1\" or ContextInfo contains \"Get-ServiceUnquoted.ps1\" or ContextInfo contains \"Get-SiteListPassword.ps1\" or ContextInfo contains \"Get-System.ps1\" or ContextInfo contains \"Get-TimedScreenshot.ps1\" or ContextInfo contains \"Get-UnattendedInstallFile.ps1\" or ContextInfo contains \"Get-Unconstrained.ps1\" or ContextInfo contains \"Get-USBKeystrokes.ps1\" or ContextInfo contains \"Get-VaultCredential.ps1\" or ContextInfo contains \"Get-VulnAutoRun.ps1\" or ContextInfo contains \"Get-VulnSchTask.ps1\" or ContextInfo contains \"Get-WebConfig.ps1\" or ContextInfo contains \"Get-WebCredentials.ps1\" or ContextInfo contains \"Get-WLAN-Keys.ps1\" or ContextInfo contains \"Gupt-Backdoor.ps1\" or ContextInfo contains \"HTTP-Backdoor.ps1\" or ContextInfo contains \"HTTP-Login.ps1\" or ContextInfo contains \"Install-ServiceBinary.ps1\" or ContextInfo contains \"Install-SSP.ps1\" or ContextInfo contains \"Invoke-ACLScanner.ps1\" or ContextInfo contains \"Invoke-ADSBackdoor.ps1\" or ContextInfo contains \"Invoke-AmsiBypass.ps1\" or ContextInfo contains \"Invoke-ARPScan.ps1\" or ContextInfo contains \"Invoke-BackdoorLNK.ps1\" or ContextInfo contains \"Invoke-BadPotato.ps1\" or ContextInfo contains \"Invoke-BetterSafetyKatz.ps1\" or ContextInfo contains \"Invoke-BruteForce.ps1\" or ContextInfo contains \"Invoke-BypassUAC.ps1\" or ContextInfo contains \"Invoke-Carbuncle.ps1\" or ContextInfo contains \"Invoke-Certify.ps1\" or ContextInfo contains \"Invoke-ConPtyShell.ps1\" or ContextInfo contains \"Invoke-CredentialInjection.ps1\" or ContextInfo contains \"Invoke-CredentialsPhish.ps1\" or ContextInfo contains \"Invoke-DAFT.ps1\" or ContextInfo contains \"Invoke-DCSync.ps1\" or ContextInfo contains \"Invoke-Decode.ps1\" or ContextInfo contains \"Invoke-DinvokeKatz.ps1\" or ContextInfo contains \"Invoke-DllInjection.ps1\" or ContextInfo contains \"Invoke-DowngradeAccount.ps1\" or ContextInfo contains \"Invoke-EgressCheck.ps1\" or ContextInfo contains \"Invoke-Encode.ps1\" or ContextInfo contains \"Invoke-EventViewer.ps1\" or ContextInfo contains \"Invoke-Eyewitness.ps1\" or ContextInfo contains \"Invoke-FakeLogonScreen.ps1\" or ContextInfo contains \"Invoke-Farmer.ps1\" or ContextInfo contains \"Invoke-Get-RBCD-Threaded.ps1\" or ContextInfo contains \"Invoke-Gopher.ps1\" or ContextInfo contains \"Invoke-Grouper2.ps1\" or ContextInfo contains \"Invoke-Grouper3.ps1\" or ContextInfo contains \"Invoke-HandleKatz.ps1\" or ContextInfo contains \"Invoke-Interceptor.ps1\" or ContextInfo contains \"Invoke-Internalmonologue.ps1\" or ContextInfo contains \"Invoke-Inveigh.ps1\" or ContextInfo contains \"Invoke-InveighRelay.ps1\" or ContextInfo contains \"Invoke-JSRatRegsvr.ps1\" or ContextInfo contains \"Invoke-JSRatRundll.ps1\" or ContextInfo contains \"Invoke-KrbRelay.ps1\" or ContextInfo contains \"Invoke-KrbRelayUp.ps1\" or ContextInfo contains \"Invoke-LdapSignCheck.ps1\" or ContextInfo contains \"Invoke-Lockless.ps1\" or ContextInfo contains \"Invoke-MalSCCM.ps1\" or ContextInfo contains \"Invoke-Mimikatz.ps1\" or ContextInfo contains \"Invoke-MimikatzWDigestDowngrade.ps1\" or ContextInfo contains \"Invoke-Mimikittenz.ps1\" or ContextInfo contains \"Invoke-MITM6.ps1\" or ContextInfo contains \"Invoke-NanoDump.ps1\" or ContextInfo contains \"Invoke-NetRipper.ps1\" or ContextInfo contains \"Invoke-NetworkRelay.ps1\" or ContextInfo contains \"Invoke-NinjaCopy.ps1\" or ContextInfo contains \"Invoke-OxidResolver.ps1\" or ContextInfo contains \"Invoke-P0wnedshell.ps1\" or ContextInfo contains \"Invoke-P0wnedshellx86.ps1\" or ContextInfo contains \"Invoke-Paranoia.ps1\" or ContextInfo contains \"Invoke-PortScan.ps1\" or ContextInfo contains \"Invoke-PoshRatHttp.ps1\" or ContextInfo contains \"Invoke-PoshRatHttps.ps1\" or ContextInfo contains \"Invoke-PostExfil.ps1\" or ContextInfo contains \"Invoke-PowerDump.ps1\" or ContextInfo contains \"Invoke-PowerShellIcmp.ps1\" or ContextInfo contains \"Invoke-PowerShellTCP.ps1\" or ContextInfo contains \"Invoke-PowerShellTcpOneLine.ps1\" or ContextInfo contains \"Invoke-PowerShellTcpOneLineBind.ps1\" or ContextInfo contains \"Invoke-PowerShellUdp.ps1\" or ContextInfo contains \"Invoke-PowerShellUdpOneLine.ps1\" or ContextInfo contains \"Invoke-PowerShellWMI.ps1\" or ContextInfo contains \"Invoke-PowerThIEf.ps1\" or ContextInfo contains \"Invoke-PPLDump.ps1\" or ContextInfo contains \"Invoke-Prasadhak.ps1\" or ContextInfo contains \"Invoke-PsExec.ps1\" or ContextInfo contains \"Invoke-PsGcat.ps1\" or ContextInfo contains \"Invoke-PsGcatAgent.ps1\" or ContextInfo contains \"Invoke-PSInject.ps1\" or ContextInfo contains \"Invoke-PsUaCme.ps1\" or ContextInfo contains \"Invoke-ReflectivePEInjection.ps1\" or ContextInfo contains \"Invoke-ReverseDNSLookup.ps1\" or ContextInfo contains \"Invoke-Rubeus.ps1\" or ContextInfo contains \"Invoke-RunAs.ps1\" or ContextInfo contains \"Invoke-SafetyKatz.ps1\" or ContextInfo contains \"Invoke-SauronEye.ps1\" or ContextInfo contains \"Invoke-SCShell.ps1\" or ContextInfo contains \"Invoke-Seatbelt.ps1\" or ContextInfo contains \"Invoke-ServiceAbuse.ps1\" or ContextInfo contains \"Invoke-SessionGopher.ps1\" or ContextInfo contains \"Invoke-ShellCode.ps1\" or ContextInfo contains \"Invoke-SMBScanner.ps1\" or ContextInfo contains \"Invoke-Snaffler.ps1\" or ContextInfo contains \"Invoke-Spoolsample.ps1\" or ContextInfo contains \"Invoke-SSHCommand.ps1\" or ContextInfo contains \"Invoke-SSIDExfil.ps1\" or ContextInfo contains \"Invoke-StandIn.ps1\" or ContextInfo contains \"Invoke-StickyNotesExtract.ps1\" or ContextInfo contains \"Invoke-Tater.ps1\" or ContextInfo contains \"Invoke-Thunderfox.ps1\" or ContextInfo contains \"Invoke-ThunderStruck.ps1\" or ContextInfo contains \"Invoke-TokenManipulation.ps1\" or ContextInfo contains \"Invoke-Tokenvator.ps1\" or ContextInfo contains \"Invoke-TotalExec.ps1\" or ContextInfo contains \"Invoke-UrbanBishop.ps1\" or ContextInfo contains \"Invoke-UserHunter.ps1\" or ContextInfo contains \"Invoke-VoiceTroll.ps1\" or ContextInfo contains \"Invoke-Whisker.ps1\" or ContextInfo contains \"Invoke-WinEnum.ps1\" or ContextInfo contains \"Invoke-winPEAS.ps1\" or ContextInfo contains \"Invoke-WireTap.ps1\" or ContextInfo contains \"Invoke-WmiCommand.ps1\" or ContextInfo contains \"Invoke-WScriptBypassUAC.ps1\" or ContextInfo contains \"Invoke-Zerologon.ps1\" or ContextInfo contains \"Keylogger.ps1\" or ContextInfo contains \"MailRaider.ps1\" or ContextInfo contains \"New-HoneyHash.ps1\" or ContextInfo contains \"OfficeMemScraper.ps1\" or ContextInfo contains \"Offline_Winpwn.ps1\" or ContextInfo contains \"Out-CHM.ps1\" or ContextInfo contains \"Out-DnsTxt.ps1\" or ContextInfo contains \"Out-Excel.ps1\" or ContextInfo contains \"Out-HTA.ps1\" or ContextInfo contains \"Out-Java.ps1\" or ContextInfo contains \"Out-JS.ps1\" or ContextInfo contains \"Out-Minidump.ps1\" or ContextInfo contains \"Out-RundllCommand.ps1\" or ContextInfo contains \"Out-SCF.ps1\" or ContextInfo contains \"Out-SCT.ps1\" or ContextInfo contains \"Out-Shortcut.ps1\" or ContextInfo contains \"Out-WebQuery.ps1\" or ContextInfo contains \"Out-Word.ps1\" or ContextInfo contains \"Parse_Keys.ps1\" or ContextInfo contains \"Port-Scan.ps1\" or ContextInfo contains \"PowerBreach.ps1\" or ContextInfo contains \"powercat.ps1\" or ContextInfo contains \"PowerRunAsSystem.psm1\" or ContextInfo contains \"PowerSharpPack.ps1\" or ContextInfo contains \"PowerUp.ps1\" or ContextInfo contains \"PowerUpSQL.ps1\" or ContextInfo contains \"PowerView.ps1\" or ContextInfo contains \"PSAsyncShell.ps1\" or ContextInfo contains \"RemoteHashRetrieval.ps1\" or ContextInfo contains \"Remove-Persistence.ps1\" or ContextInfo contains \"Remove-PoshRat.ps1\" or ContextInfo contains \"Remove-Update.ps1\" or ContextInfo contains \"Run-EXEonRemote.ps1\" or ContextInfo contains \"Schtasks-Backdoor.ps1\" or ContextInfo contains \"Set-DCShadowPermissions.ps1\" or ContextInfo contains \"Set-MacAttribute.ps1\" or ContextInfo contains \"Set-RemotePSRemoting.ps1\" or ContextInfo contains \"Set-RemoteWMI.ps1\" or ContextInfo contains \"Set-Wallpaper.ps1\" or ContextInfo contains \"Show-TargetScreen.ps1\" or ContextInfo contains \"Speak.ps1\" or ContextInfo contains \"Start-CaptureServer.ps1\" or ContextInfo contains \"Start-WebcamRecorder.ps1\" or ContextInfo contains \"StringToBase64.ps1\" or ContextInfo contains \"TexttoExe.ps1\" or ContextInfo contains \"VolumeShadowCopyTools.ps1\" or ContextInfo contains \"WinPwn.ps1\" or ContextInfo contains \"WSUSpendu.ps1\") or (ContextInfo contains \"Invoke-Sharp\" and ContextInfo contains \".ps1\"))\n\n\n\n"}
{"prompt": "I want to find instances of malicious code that use custom file open handlers to execute PowerShell scripts.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*shell\\\\open\\\\command\\\\.*\" and ((action_registry_value_name contains \"powershell\" or action_registry_data contains \"powershell\") and (action_registry_value_name contains \"-command\" or action_registry_data contains \"-command\")))\n\n\n\n"}
{"prompt": "I want to find instances where Wermgr.EXE spawns suspicious child processes like cmd.exe, cscript.exe, ipconfig.exe, etc.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\wermgr\\.exe\" and (action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\ipconfig\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\" or action_process_image_path ~= \".*\\\\netstat\\.exe\" or action_process_image_path ~= \".*\\\\nslookup\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\systeminfo\\.exe\" or action_process_image_path ~= \".*\\\\whoami\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see events related to CVE-2020-1472, specifically those from the NetLogon provider in the Windows Event Log.", "response": "preset = xdr_event_log\n| filter (provider_name = \"NetLogon\" and action_evtlog_event_id = 5829)\n\n\n\n"}
{"prompt": "I want to know what this code is doing.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"TgBlAFQALgB3AEUAQg\" or action_process_image_command_line contains \"4AZQBUAC4AdwBFAEIA\" or action_process_image_command_line contains \"OAGUAVAAuAHcARQBCA\" or action_process_image_command_line contains \"bgBFAHQALgB3AGUAYg\" or action_process_image_command_line contains \"4ARQB0AC4AdwBlAGIA\" or action_process_image_command_line contains \"uAEUAdAAuAHcAZQBiA\" or action_process_image_command_line contains \"TgBFAHQALgB3AGUAYg\" or action_process_image_command_line contains \"OAEUAdAAuAHcAZQBiA\" or action_process_image_command_line contains \"bgBlAFQALgB3AGUAYg\" or action_process_image_command_line contains \"4AZQBUAC4AdwBlAGIA\" or action_process_image_command_line contains \"uAGUAVAAuAHcAZQBiA\" or action_process_image_command_line contains \"TgBlAFQALgB3AGUAYg\" or action_process_image_command_line contains \"OAGUAVAAuAHcAZQBiA\" or action_process_image_command_line contains \"bgBFAFQALgB3AGUAYg\" or action_process_image_command_line contains \"4ARQBUAC4AdwBlAGIA\" or action_process_image_command_line contains \"uAEUAVAAuAHcAZQBiA\" or action_process_image_command_line contains \"bgBlAHQALgBXAGUAYg\" or action_process_image_command_line contains \"4AZQB0AC4AVwBlAGIA\" or action_process_image_command_line contains \"uAGUAdAAuAFcAZQBiA\" or action_process_image_command_line contains \"bgBFAHQALgBXAGUAYg\" or action_process_image_command_line contains \"4ARQB0AC4AVwBlAGIA\" or action_process_image_command_line contains \"uAEUAdAAuAFcAZQBiA\" or action_process_image_command_line contains \"TgBFAHQALgBXAGUAYg\" or action_process_image_command_line contains \"OAEUAdAAuAFcAZQBiA\" or action_process_image_command_line contains \"bgBlAFQALgBXAGUAYg\" or action_process_image_command_line contains \"4AZQBUAC4AVwBlAGIA\" or action_process_image_command_line contains \"uAGUAVAAuAFcAZQBiA\" or action_process_image_command_line contains \"TgBlAFQALgBXAGUAYg\" or action_process_image_command_line contains \"OAGUAVAAuAFcAZQBiA\" or action_process_image_command_line contains \"bgBFAFQALgBXAGUAYg\" or action_process_image_command_line contains \"4ARQBUAC4AVwBlAGIA\" or action_process_image_command_line contains \"uAEUAVAAuAFcAZQBiA\" or action_process_image_command_line contains \"bgBlAHQALgB3AEUAYg\" or action_process_image_command_line contains \"4AZQB0AC4AdwBFAGIA\" or action_process_image_command_line contains \"uAGUAdAAuAHcARQBiA\" or action_process_image_command_line contains \"TgBlAHQALgB3AEUAYg\" or action_process_image_command_line contains \"OAGUAdAAuAHcARQBiA\" or action_process_image_command_line contains \"bgBFAHQALgB3AEUAYg\" or action_process_image_command_line contains \"4ARQB0AC4AdwBFAGIA\" or action_process_image_command_line contains \"uAEUAdAAuAHcARQBiA\" or action_process_image_command_line contains \"TgBFAHQALgB3AEUAYg\" or action_process_image_command_line contains \"OAEUAdAAuAHcARQBiA\" or action_process_image_command_line contains \"bgBlAFQALgB3AEUAYg\" or action_process_image_command_line contains \"4AZQBUAC4AdwBFAGIA\" or action_process_image_command_line contains \"uAGUAVAAuAHcARQBiA\" or action_process_image_command_line contains \"TgBlAFQALgB3AEUAYg\" or action_process_image_command_line contains \"OAGUAVAAuAHcARQBiA\" or action_process_image_command_line contains \"bgBFAFQALgB3AEUAYg\" or action_process_image_command_line contains \"4ARQBUAC4AdwBFAGIA\" or action_process_image_command_line contains \"uAEUAVAAuAHcARQBiA\" or action_process_image_command_line contains \"TgBFAFQALgB3AEUAYg\" or action_process_image_command_line contains \"OAEUAVAAuAHcARQBiA\" or action_process_image_command_line contains \"bgBlAHQALgBXAEUAYg\" or action_process_image_command_line contains \"4AZQB0AC4AVwBFAGIA\" or action_process_image_command_line contains \"uAGUAdAAuAFcARQBiA\" or action_process_image_command_line contains \"TgBlAHQALgBXAEUAYg\" or action_process_image_command_line contains \"OAGUAdAAuAFcARQBiA\" or action_process_image_command_line contains \"bgBFAHQALgBXAEUAYg\" or action_process_image_command_line contains \"4ARQB0AC4AVwBFAGIA\" or action_process_image_command_line contains \"uAEUAdAAuAFcARQBiA\" or action_process_image_command_line contains \"TgBFAHQALgBXAEUAYg\" or action_process_image_command_line contains \"OAEUAdAAuAFcARQBiA\" or action_process_image_command_line contains \"bgBlAFQALgBXAEUAYg\" or action_process_image_command_line contains \"4AZQBUAC4AVwBFAGIA\" or action_process_image_command_line contains \"uAGUAVAAuAFcARQBiA\" or action_process_image_command_line contains \"TgBlAFQALgBXAEUAYg\" or action_process_image_command_line contains \"OAGUAVAAuAFcARQBiA\" or action_process_image_command_line contains \"bgBFAFQALgBXAEUAYg\" or action_process_image_command_line contains \"4ARQBUAC4AVwBFAGIA\" or action_process_image_command_line contains \"uAEUAVAAuAFcARQBiA\" or action_process_image_command_line contains \"TgBFAFQALgBXAEUAYg\" or action_process_image_command_line contains \"OAEUAVAAuAFcARQBiA\" or action_process_image_command_line contains \"bgBlAHQALgB3AGUAQg\" or action_process_image_command_line contains \"4AZQB0AC4AdwBlAEIA\" or action_process_image_command_line contains \"uAGUAdAAuAHcAZQBCA\" or action_process_image_command_line contains \"TgBlAHQALgB3AGUAQg\" or action_process_image_command_line contains \"OAGUAdAAuAHcAZQBCA\" or action_process_image_command_line contains \"bgBFAHQALgB3AGUAQg\" or action_process_image_command_line contains \"4ARQB0AC4AdwBlAEIA\" or action_process_image_command_line contains \"uAEUAdAAuAHcAZQBCA\" or action_process_image_command_line contains \"TgBFAHQALgB3AGUAQg\" or action_process_image_command_line contains \"OAEUAdAAuAHcAZQBCA\" or action_process_image_command_line contains \"bgBlAFQALgB3AGUAQg\" or action_process_image_command_line contains \"4AZQBUAC4AdwBlAEIA\" or action_process_image_command_line contains \"uAGUAVAAuAHcAZQBCA\" or action_process_image_command_line contains \"TgBlAFQALgB3AGUAQg\" or action_process_image_command_line contains \"OAGUAVAAuAHcAZQBCA\" or action_process_image_command_line contains \"bgBFAFQALgB3AGUAQg\" or action_process_image_command_line contains \"4ARQBUAC4AdwBlAEIA\" or action_process_image_command_line contains \"uAEUAVAAuAHcAZQBCA\" or action_process_image_command_line contains \"TgBFAFQALgB3AGUAQg\" or action_process_image_command_line contains \"OAEUAVAAuAHcAZQBCA\" or action_process_image_command_line contains \"bgBlAHQALgBXAGUAQg\" or action_process_image_command_line contains \"4AZQB0AC4AVwBlAEIA\" or action_process_image_command_line contains \"uAGUAdAAuAFcAZQBCA\" or action_process_image_command_line contains \"TgBlAHQALgBXAGUAQg\" or action_process_image_command_line contains \"OAGUAdAAuAFcAZQBCA\" or action_process_image_command_line contains \"bgBFAHQALgBXAGUAQg\" or action_process_image_command_line contains \"4ARQB0AC4AVwBlAEIA\" or action_process_image_command_line contains \"uAEUAdAAuAFcAZQBCA\" or action_process_image_command_line contains \"TgBFAHQALgBXAGUAQg\" or action_process_image_command_line contains \"OAEUAdAAuAFcAZQBCA\" or action_process_image_command_line contains \"bgBlAFQALgBXAGUAQg\" or action_process_image_command_line contains \"4AZQBUAC4AVwBlAEIA\" or action_process_image_command_line contains \"uAGUAVAAuAFcAZQBCA\" or action_process_image_command_line contains \"TgBlAFQALgBXAGUAQg\" or action_process_image_command_line contains \"OAGUAVAAuAFcAZQBCA\" or action_process_image_command_line contains \"bgBFAFQALgBXAGUAQg\" or action_process_image_command_line contains \"4ARQBUAC4AVwBlAEIA\" or action_process_image_command_line contains \"uAEUAVAAuAFcAZQBCA\" or action_process_image_command_line contains \"TgBFAFQALgBXAGUAQg\" or action_process_image_command_line contains \"OAEUAVAAuAFcAZQBCA\" or action_process_image_command_line contains \"bgBlAHQALgB3AEUAQg\" or action_process_image_command_line contains \"4AZQB0AC4AdwBFAEIA\" or action_process_image_command_line contains \"uAGUAdAAuAHcARQBCA\" or action_process_image_command_line contains \"TgBlAHQALgB3AEUAQg\" or action_process_image_command_line contains \"OAGUAdAAuAHcARQBCA\" or action_process_image_command_line contains \"bgBFAHQALgB3AEUAQg\" or action_process_image_command_line contains \"4ARQB0AC4AdwBFAEIA\" or action_process_image_command_line contains \"uAEUAdAAuAHcARQBCA\" or action_process_image_command_line contains \"TgBFAHQALgB3AEUAQg\" or action_process_image_command_line contains \"OAEUAdAAuAHcARQBCA\" or action_process_image_command_line contains \"bgBlAFQALgB3AEUAQg\" or action_process_image_command_line contains \"uAGUAVAAuAHcARQBCA\" or action_process_image_command_line contains \"bgBFAFQALgB3AEUAQg\" or action_process_image_command_line contains \"4ARQBUAC4AdwBFAEIA\" or action_process_image_command_line contains \"uAEUAVAAuAHcARQBCA\" or action_process_image_command_line contains \"TgBFAFQALgB3AEUAQg\" or action_process_image_command_line contains \"OAEUAVAAuAHcARQBCA\" or action_process_image_command_line contains \"TgBlAHQALgBXAEUAQg\" or action_process_image_command_line contains \"4AZQB0AC4AVwBFAEIA\" or action_process_image_command_line contains \"OAGUAdAAuAFcARQBCA\" or action_process_image_command_line contains \"bgBFAHQALgBXAEUAQg\" or action_process_image_command_line contains \"4ARQB0AC4AVwBFAEIA\" or action_process_image_command_line contains \"uAEUAdAAuAFcARQBCA\" or action_process_image_command_line contains \"TgBFAHQALgBXAEUAQg\" or action_process_image_command_line contains \"OAEUAdAAuAFcARQBCA\" or action_process_image_command_line contains \"bgBlAFQALgBXAEUAQg\" or action_process_image_command_line contains \"4AZQBUAC4AVwBFAEIA\" or action_process_image_command_line contains \"uAGUAVAAuAFcARQBCA\" or action_process_image_command_line contains \"TgBlAFQALgBXAEUAQg\" or action_process_image_command_line contains \"OAGUAVAAuAFcARQBCA\" or action_process_image_command_line contains \"bgBFAFQALgBXAEUAQg\" or action_process_image_command_line contains \"4ARQBUAC4AVwBFAEIA\" or action_process_image_command_line contains \"uAEUAVAAuAFcARQBCA\"))\n\n\n\n"}
{"prompt": " I want to see data about internal ICMP flood attacks detected by Cisco ASA, Fortinet Fortigate, and SonicWall NS firewalls.  ", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter (xdm.source.is_internal_ip = true and xdm.target.is_internal_ip = true) and xdm.network.ip_protocol = \"\"\"ICMP\"\"\" and xdm.source.sent_packets >= 60000 and xdm.event.duration >= 60000000000\n| fields *"}
{"prompt": "I want to see all instances where administrators added mailbox permissions in Office365, especially if it looks like unauthorized access.", "response": "config case_sensitive = false\n| datamodel dataset = msft_admin_audit_raw\n| filter xdm.observer.action in (\"Add-ADPermission\", \"Add-MailboxFolderPermission\", \"Add-RecipientPermission\", \"Set-MailboxFolderPermission\")\n| alter parameter_length = array_length(split(xdm.event.description, \" \")),\nparameter_values = split(xdm.event.operation, \" \")\n| alter mailbox = arrayindex(split(xdm.target.user.username, \"/\"), -1),\nMailboxAccessGivenTo = if(parameter_length = 3, arrayindex(parameter_values, 1), arrayindex(parameter_values, 3)),\naccessrights = if(parameter_length = 3, arrayindex(parameter_values, 0), arrayindex(parameter_values, 2)),\nlog_src_name = \"AdminAudit\",\nserver_name = msft_admin_audit_raw._collector_hostname\n| filter MailboxAccessGivenTo != concat(\"acl_\", mailbox) and MailboxAccessGivenTo != concat(\"acl.\", mailbox)\n| fields xdm.target.user.username, xdm.source.user.username,\nxdm.observer.action, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.event.id, xdm.event.description, xdm.event.operation,\nxdm.event.operation_sub_type, xdm.observer.type,\nxdm.event.is_completed, xdm.logon.is_elevated, MailboxAccessGivenTo,\nmailbox, accessrights, _time, _insert_time, log_src_name,\nserver_name, msft_admin_audit_raw.rundate\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about when someone disables a domain transfer lock in AWS Route 53.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"route53.amazonaws.com\" and eventName = \"DisableDomainTransferLock\")\n\n\n\n"}
{"prompt": "I want to find events related to changing hidden file extensions in the Windows registry.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\HideFileExt\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\")) or (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\Hidden\" and (action_registry_value_name = \"DWORD (0x00000002)\" or action_registry_data = \"DWORD (0x00000002)\")))\n\n\n\n"}
{"prompt": "I want to detect unusual executions of Wscript and Cscript where they process files with common extensions like .csv, .dat, .doc, etc.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name in (\"wscript.exe\", \"cscript.exe\") or (action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\")) and (action_process_image_command_line contains \".csv\" or action_process_image_command_line contains \".dat\" or action_process_image_command_line contains \".doc\" or action_process_image_command_line contains \".gif\" or action_process_image_command_line contains \".jpeg\" or action_process_image_command_line contains \".jpg\" or action_process_image_command_line contains \".png\" or action_process_image_command_line contains \".ppt\" or action_process_image_command_line contains \".txt\" or action_process_image_command_line contains \".xls\" or action_process_image_command_line contains \".xml\"))\n\n\n\n"}
{"prompt": "I want to see Windows DNS entry creation, modification, and deletion events, excluding those from specific users and services.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (5136, 5137, 5141) and (event_data -> ObjectClass in (\"dnsNode\"))\n| alter ObjectDN = event_data -> ObjectDN,\nDSName = event_data -> DSName,\nSubjectUserName = event_data -> SubjectUserName,\nDSType = event_data -> DSType,\nObjectClass = event_data -> ObjectClass,\nAppCorrelationID = event_data -> AppCorrelationID,\nAttributeValue = event_data -> AttributeValue,\nOperationType = event_data -> OperationType,\nAttributeLDAPDisplayName = event_data -> AttributeLDAPDisplayName,\nSubjectDomainName = event_data -> SubjectDomainName,\nObjectGUID = event_data -> ObjectGUID,\nSubjectUserSid = event_data -> SubjectUserSid,\nOpCorrelationID = event_data -> OpCorrelationID,\nAttributeSyntaxOID = event_data -> AttributeSyntaxOID,\nSubjectLogonId = event_data -> SubjectLogonId,\nevent_id_description = if(event_id = 5136, \"A directory service object was MODIFIED\", if(event_id = 5137, \"A directory service object was CREATED\", if(event_id = 5141, \"A directory service object was DELETED\")))\n| filter (SubjectUserName not in (\"\"\"\"\"\", null, NULL, \"svc_DhcpDnsUpdate\", \"SYSTEM\", \"-\", \"BEL-DHCP-SC\") and SubjectUserName not contains \"\"\"$\"\"\")\n| fields event_id, event_id_description, event_action, event_result,\nSubjectUserName, host_name, _collector_hostname,\ncomputer_name, DSName, message, event_data, *"}
{"prompt": "I want to find events related to enabling anonymous remote connections on Windows systems.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Microsoft\\\\WBEM\\\\CIMOM\\\\AllowAnonymousCallback\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to find events where Devinit.EXE is used to download and install an MSI file from an HTTP URL.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" -t msi-install \" and action_process_image_command_line contains \" -i http\")\n\n\n\n"}
{"prompt": "I want to see events where a scheduled task is disabled, specifically targeting important system processes like BitLocker, ExploitGuard, System Restore, Windows Update, Windows Defender, Windows Backup.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \"/Change\" and action_process_image_command_line contains \"/TN\" and action_process_image_command_line contains \"/disable\") and (action_process_image_command_line contains \"\\\\Windows\\\\BitLocker\" or action_process_image_command_line contains \"\\\\Windows\\\\ExploitGuard\" or action_process_image_command_line contains \"\\\\Windows\\\\SystemRestore\\\\SR\" or action_process_image_command_line ~= \".*\\\\Windows\\\\UpdateOrchestrator\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Windows\\ Defender\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\WindowsBackup\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\WindowsUpdate\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to IIS module registration on my endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\w3wp\\.exe\" and (action_process_image_command_line contains \"appcmd.exe add module\" or (action_process_image_command_line contains \" system.enterpriseservices.internal.publish\" and action_process_image_path ~= \".*\\\\powershell\\.exe\") or (action_process_image_command_line contains \"gacutil\" and action_process_image_command_line contains \" /I\"))\n\n\n\n"}
{"prompt": "{I want to see details about any unauthorized password changes made on privilege user accounts within our IS systems.} \n\n\nLet me know if you'd like me to create prompts for other XQL queries!", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"IS_Intranet\", \"IS_Linux_Azure_Infosys-Cloud\", \"IS_unix\", \"IS_Linux_Intranet\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"passwd\" and xdm.event.description ~= \"password changed\"\n| alter xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS,\nxdm.target.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"password\\s+changed\\s+for\\s+([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"changed\\s+password\\s+expiry\\s+for\\s+([\\w\\-\\.]+)\"), 0), if(xdm.event.type = \"useradd\", arrayindex(regextract(xdm.event.description, \"name=([^,]+)\"), 0))),\nxdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), xdm.source.user.username),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.target.user.username != null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _vendor, _product, device_ip\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see BGP Malfunction Router or Switch notifications from Cisco Catalyst devices.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter msg_id in (\"adjchange\", \"bgp-5-adjchange\")\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to the CVE-2021-1675 Print Spooler Exploitation using the Cortex XDR Datamodel.", "response": "datamodel\n| filter xdm.event.id = 316 and ( contains \"UNIDRV.DLL, kernelbase.dll, \" or  contains \" 123 \" or  contains \" 1234 \" or  contains \"mimispool\")\n\n\n\n"}
{"prompt": "I want to see network traffic on port 5900 exceeding 2 KB from sources in North America, along with details about the source and target IP addresses, protocols used, bytes sent, and the security device itself.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw, cisco_asa_raw)\n| filter xdm.target.port in (5900)\n| alter xdm.observer.name = coalesce(fortinet_fortigate_raw._broker_device_name, fortinet_fortigate1_raw._broker_device_name, cisco_asa_raw._broker_device_name),\nxdm.observer.unique_identifier = coalesce(fortinet_fortigate_raw._broker_ip_address, fortinet_fortigate1_raw._broker_ip_address, cisco_asa_raw._broker_ip_address)\n| filter xdm.observer.name ~= \"^US.+\" and (xdm.source.sent_bytes >= 2048)\n| fields xdm.source.ipv4, xdm.source.port, xdm.source.sent_bytes,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.network.protocol_layers, xdm.target.sent_bytes,\nxdm.event.original_event_type, xdm.event.description,\nxdm.observer.name, xdm.observer.unique_identifier,\nxdm.observer.product, *\n| view column order = populated"}
{"prompt": "I want to see when an admin role is assigned to either a user or group in Okta.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type in (\"group.privilege.grant\", \"user.account.privilege.grant\")\n\n\n\n"}
{"prompt": "I want to see all instances of Quarks PwDump being executed on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\QuarksPwDump\\.exe\" or action_process_image_command_line in (\" -dhl\", \" --dump-hash-local\", \" -dhdc\", \" --dump-hash-domain-cached\", \" --dump-bitlocker\", \" -dhd \", \" --dump-hash-domain \", \"--ntds-file\"))\n\n\n\n"}
{"prompt": "I want to see alerts triggered when someone attempts to set the Directory Services Restore Mode (DSRM) administrator password.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4794\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ibpmeventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of remote code execution happening through Winrm.vbs on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_file_original_name = \"cscript.exe\") and (action_process_image_command_line contains \"winrm\" and action_process_image_command_line contains \"invoke Create wmicimv2/Win32_\" and action_process_image_command_line contains \"-r:http\"))\n\n\n\n"}
{"prompt": "I want to find suspicious Windows processes that are spawned from unexpected parent directories, specifically those that aren't common system processes like svchost.exe or taskhost.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\svchost\\.exe\" or action_process_image_path ~= \".*\\\\taskhost\\.exe\" or action_process_image_path ~= \".*\\\\lsm\\.exe\" or action_process_image_path ~= \".*\\\\lsass\\.exe\" or action_process_image_path ~= \".*\\\\services\\.exe\" or action_process_image_path ~= \".*\\\\lsaiso\\.exe\" or action_process_image_path ~= \".*\\\\csrss\\.exe\" or action_process_image_path ~= \".*\\\\wininit\\.exe\" or action_process_image_path ~= \".*\\\\winlogon\\.exe\") and  not (((actor_process_image_path ~= \".*\\\\SavService\\.exe\" or actor_process_image_path ~= \".*\\\\ngen\\.exe\") or (actor_process_image_path ~= \".*\\\\System32\\\\.*\" or actor_process_image_path ~= \".*\\\\SysWOW64\\\\.*\")) or ((actor_process_image_path ~= \".*\\\\Windows\\ Defender\\\\.*\" or actor_process_image_path ~= \".*\\\\Microsoft\\ Security\\ Client\\\\.*\") and actor_process_image_path ~= \".*\\\\MsMpEng\\.exe\") or (actor_process_image_path = \"None\" or actor_process_image_path = \"-\"))\n\n\n\n"}
{"prompt": "I want to see if there are multiple account lockouts from the same host within a 15 minute window.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| bin _time span = 15m\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| alter hostname = json_extract_scalar(microsoft_windows_raw.event_data, \"$.TargetDomainName\")\n| filter xdm.event.id in (\"4740\") and hostname != null and hostname !~= \"(none)\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, hostname\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by hostname,\n_time\n| filter array_length(xdm.target.user.username) >= 5\n| alter aggregation_criteria = \"ibpmhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect instances where Perl is used to execute inline commands.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\perl\\.exe\" or actor_process_file_original_name = \"perl.exe\") and action_process_image_command_line contains \" -e\")\n\n\n\n"}
{"prompt": "I want to see alerts for potential proxy execution using Wuauclt.exe that includes specific command line arguments.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wuauclt\\.exe\" or actor_process_file_original_name = \"wuauclt.exe\") and (action_process_image_command_line contains \"UpdateDeploymentProvider\" and action_process_image_command_line contains \"RunHandlerComServer\")) and  not (action_process_image_command_line contains \" /UpdateDeploymentProvider UpdateDeploymentProvider.dll \" or action_process_image_command_line contains \" wuaueng.dll \" or (action_process_image_command_line contains \":\\\\Windows\\\\UUS\\\\Packages\\\\Preview\\\\amd64\\\\updatedeploy.dll /ClassId\" or action_process_image_command_line contains \":\\\\Windows\\\\UUS\\\\amd64\\\\UpdateDeploy.dll /ClassId\") or (action_process_image_command_line ~= \".*\\:\\\\Windows\\\\WinSxS\\\\.*\" and action_process_image_command_line contains \"\\\\UpdateDeploy.dll /ClassId \"))\n\n\n\n"}
{"prompt": "I want to find files that have system process names but are located outside of their expected directories.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\AtBroker\\.exe\" or xdm.target.file.filename ~= \".*\\\\audiodg\\.exe\" or xdm.target.file.filename ~= \".*\\\\backgroundTaskHost\\.exe\" or xdm.target.file.filename ~= \".*\\\\bcdedit\\.exe\" or xdm.target.file.filename ~= \".*\\\\bitsadmin\\.exe\" or xdm.target.file.filename ~= \".*\\\\cmdl32\\.exe\" or xdm.target.file.filename ~= \".*\\\\cmstp\\.exe\" or xdm.target.file.filename ~= \".*\\\\conhost\\.exe\" or xdm.target.file.filename ~= \".*\\\\csrss\\.exe\" or xdm.target.file.filename ~= \".*\\\\dasHost\\.exe\" or xdm.target.file.filename ~= \".*\\\\dfrgui\\.exe\" or xdm.target.file.filename ~= \".*\\\\dllhost\\.exe\" or xdm.target.file.filename ~= \".*\\\\dwm\\.exe\" or xdm.target.file.filename ~= \".*\\\\eventcreate\\.exe\" or xdm.target.file.filename ~= \".*\\\\eventvwr\\.exe\" or xdm.target.file.filename ~= \".*\\\\explorer\\.exe\" or xdm.target.file.filename ~= \".*\\\\extrac32\\.exe\" or xdm.target.file.filename ~= \".*\\\\fontdrvhost\\.exe\" or xdm.target.file.filename ~= \".*\\\\ipconfig\\.exe\" or xdm.target.file.filename ~= \".*\\\\iscsicli\\.exe\" or xdm.target.file.filename ~= \".*\\\\iscsicpl\\.exe\" or xdm.target.file.filename ~= \".*\\\\logman\\.exe\" or xdm.target.file.filename ~= \".*\\\\LogonUI\\.exe\" or xdm.target.file.filename ~= \".*\\\\LsaIso\\.exe\" or xdm.target.file.filename ~= \".*\\\\lsass\\.exe\" or xdm.target.file.filename ~= \".*\\\\lsm\\.exe\" or xdm.target.file.filename ~= \".*\\\\msiexec\\.exe\" or xdm.target.file.filename ~= \".*\\\\msinfo32\\.exe\" or xdm.target.file.filename ~= \".*\\\\mstsc\\.exe\" or xdm.target.file.filename ~= \".*\\\\nbtstat\\.exe\" or xdm.target.file.filename ~= \".*\\\\odbcconf\\.exe\" or xdm.target.file.filename ~= \".*\\\\powershell\\.exe\" or xdm.target.file.filename ~= \".*\\\\pwsh\\.exe\" or xdm.target.file.filename ~= \".*\\\\regini\\.exe\" or xdm.target.file.filename ~= \".*\\\\regsvr32\\.exe\" or xdm.target.file.filename ~= \".*\\\\rundll32\\.exe\" or xdm.target.file.filename ~= \".*\\\\RuntimeBroker\\.exe\" or xdm.target.file.filename ~= \".*\\\\schtasks\\.exe\" or xdm.target.file.filename ~= \".*\\\\SearchFilterHost\\.exe\" or xdm.target.file.filename ~= \".*\\\\SearchIndexer\\.exe\" or xdm.target.file.filename ~= \".*\\\\SearchProtocolHost\\.exe\" or xdm.target.file.filename ~= \".*\\\\SecurityHealthService\\.exe\" or xdm.target.file.filename ~= \".*\\\\SecurityHealthSystray\\.exe\" or xdm.target.file.filename ~= \".*\\\\services\\.exe\" or xdm.target.file.filename ~= \".*\\\\ShellAppRuntime\\.exe\" or xdm.target.file.filename ~= \".*\\\\sihost\\.exe\" or xdm.target.file.filename ~= \".*\\\\smartscreen\\.exe\" or xdm.target.file.filename ~= \".*\\\\smss\\.exe\" or xdm.target.file.filename ~= \".*\\\\spoolsv\\.exe\" or xdm.target.file.filename ~= \".*\\\\svchost\\.exe\" or xdm.target.file.filename ~= \".*\\\\SystemSettingsBroker\\.exe\" or xdm.target.file.filename ~= \".*\\\\taskhost\\.exe\" or xdm.target.file.filename ~= \".*\\\\taskhostw\\.exe\" or xdm.target.file.filename ~= \".*\\\\Taskmgr\\.exe\" or xdm.target.file.filename ~= \".*\\\\TiWorker\\.exe\" or xdm.target.file.filename ~= \".*\\\\vssadmin\\.exe\" or xdm.target.file.filename ~= \".*\\\\w32tm\\.exe\" or xdm.target.file.filename ~= \".*\\\\WerFault\\.exe\" or xdm.target.file.filename ~= \".*\\\\WerFaultSecure\\.exe\" or xdm.target.file.filename ~= \".*\\\\wermgr\\.exe\" or xdm.target.file.filename ~= \".*\\\\wevtutil\\.exe\" or xdm.target.file.filename ~= \".*\\\\wininit\\.exe\" or xdm.target.file.filename ~= \".*\\\\winlogon\\.exe\" or xdm.target.file.filename ~= \".*\\\\winrshost\\.exe\" or xdm.target.file.filename ~= \".*\\\\WinRTNetMUAHostServer\\.exe\" or xdm.target.file.filename ~= \".*\\\\wlanext\\.exe\" or xdm.target.file.filename ~= \".*\\\\wlrmdr\\.exe\" or xdm.target.file.filename ~= \".*\\\\WmiPrvSE\\.exe\" or xdm.target.file.filename ~= \".*\\\\wslhost\\.exe\" or xdm.target.file.filename ~= \".*\\\\WSReset\\.exe\" or xdm.target.file.filename ~= \".*\\\\WUDFHost\\.exe\" or xdm.target.file.filename ~= \".*\\\\WWAHost\\.exe\") and  not ((xdm.target.file.filename ~= \".*\\\\SystemRoot\\\\System32\\\\.*\" or xdm.target.file.filename ~= \".*C\\:\\\\\\$WINDOWS\\.\\~BT\\\\.*\" or xdm.target.file.filename ~= \".*C\\:\\\\\\$WinREAgent\\\\.*\" or xdm.target.file.filename ~= \".*C\\:\\\\Windows\\\\SoftwareDistribution\\\\.*\" or xdm.target.file.filename ~= \".*C\\:\\\\Windows\\\\System32\\\\.*\" or xdm.target.file.filename ~= \".*C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or xdm.target.file.filename ~= \".*C\\:\\\\Windows\\\\WinSxS\\\\.*\" or xdm.target.file.filename ~= \".*C\\:\\\\Windows\\\\uus\\\\.*\") or ((xdm.target.process.name ~= \".*C\\:\\\\Windows\\\\system32\\\\svchost\\.exe\" or xdm.source.process.name ~= \".*C\\:\\\\Windows\\\\system32\\\\svchost\\.exe\") and xdm.target.file.filename ~= \".*C\\:\\\\Program\\ Files\\\\WindowsApps\\\\.*\") or (xdm.target.process.name ~= \".*C\\:\\\\Windows\\\\System32\\\\wuauclt\\.exe\" or xdm.source.process.name ~= \".*C\\:\\\\Windows\\\\System32\\\\wuauclt\\.exe\") or xdm.target.file.filename ~= \".*C\\:\\\\Windows\\\\explorer\\.exe\" or ((xdm.target.process.name ~= \".*C\\:\\\\WINDOWS\\\\system32\\\\msiexec\\.exe\" or xdm.source.process.name ~= \".*C\\:\\\\WINDOWS\\\\system32\\\\msiexec\\.exe\") and (xdm.target.file.filename ~= \".*C\\:\\\\Program\\ Files\\\\PowerShell\\\\7\\\\pwsh\\.exe\" or xdm.target.file.filename ~= \".*C\\:\\\\Program\\ Files\\\\PowerShell\\\\7\\-preview\\\\pwsh\\.exe\")) or (xdm.target.file.filename ~= \".*C\\:\\\\Windows\\\\System32\\\\SecurityHealth\\\\.*\" and xdm.target.file.filename ~= \".*\\\\SecurityHealthSystray\\.exe\" and (xdm.target.process.name ~= \".*\\\\SecurityHealthSetup\\.exe\" or xdm.source.process.name ~= \".*\\\\SecurityHealthSetup\\.exe\")))\n\n\n\n"}
{"prompt": "I want to see events related to NTLM authentication attempts, regardless of whether they originated from or targeted specific processes.", "response": "datamodel\n| filter (xdm.event.id = 8002 and (xdm.target.process.name contains \"*\" or xdm.source.process.name contains \"*\"))\n\n\n\n"}
{"prompt": " I want to see events related to potentially suspicious compression tool parameters being used on my endpoints. ", "response": "preset = xdr_process\n| filter (actor_process_file_original_name in (\"7z*.exe\", \"*rar.exe\", \"*Command*Line*RAR*\") and (action_process_image_command_line contains \" -p\" or action_process_image_command_line contains \" -ta\" or action_process_image_command_line contains \" -tb\" or action_process_image_command_line contains \" -sdel\" or action_process_image_command_line contains \" -dw\" or action_process_image_command_line contains \" -hp\")) and  not ((actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see events related to suspicious modifications of PowerShell profiles.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\Microsoft\\.PowerShell\\_profile\\.ps1\" or xdm.target.file.filename ~= \".*\\\\PowerShell\\\\profile\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Program\\ Files\\\\PowerShell\\\\7\\-preview\\\\profile\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Program\\ Files\\\\PowerShell\\\\7\\\\profile\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1\\.0\\\\profile\\.ps1\" or xdm.target.file.filename ~= \".*\\\\WindowsPowerShell\\\\profile\\.ps1\")\n\n\n\n"}
{"prompt": "I want to see events related to system file and registry changes on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4657\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find threats related to persistence through manipulating SIP providers using Windows Event Logs.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Cryptography\\\\Providers\\\\.*\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Cryptography\\\\OID\\\\EncodingType\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Cryptography\\\\Providers\\\\.*\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\WOW6432Node\\\\Microsoft\\\\Cryptography\\\\OID\\\\EncodingType\") and (action_registry_key_name contains \"\\\\Dll\" or action_registry_key_name contains \"\\\\$DLL\")) and  not ((action_registry_value_name in (\"WINTRUST.DLL\", \"mso.dll\") or action_registry_data in (\"WINTRUST.DLL\", \"mso.dll\")) or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\poqexec.exe\" and action_registry_key_name contains \"\\\\CryptSIPDll\" and (action_registry_value_name = \"C:\\\\Windows\\\\System32\\\\PsfSip.dll\" or action_registry_data = \"C:\\\\Windows\\\\System32\\\\PsfSip.dll\")))\n\n\n\n"}
{"prompt": "I want to see alerts about potential SQL injection attempts based on error messages in the system logs.", "response": "datamodel\n| filter ( contains \"quoted string not properly terminated\" or  contains \"You have an error in your SQL syntax\" or  contains \"Unclosed quotation mark\" or  contains \"near \\\"\\*\\\": syntax error\" or  contains \"SELECTs to the left and right of UNION do not have the same number of result columns\")\n\n\n\n"}
{"prompt": "I want to find instances where an unsigned AppX package was installed using the Add-AppxPackage PowerShell cmdlet.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Add-AppPackage \" or ScriptBlockText contains \"Add-AppxPackage \") and ScriptBlockText contains \" -AllowUnsigned\")\n\n\n\n"}
{"prompt": "I want to see events where someone is using the DSInternals PowerShell module to retrieve Active Directory replica account information.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Get-ADReplAccount\" and ScriptBlockText contains \"-All \" and ScriptBlockText contains \"-Server \")\n\n\n\n"}
{"prompt": "I want to identify users who are transferring significantly more data than their average over the past 7 days through Microsoft applications on Zscaler Proxy.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and user_agent ~= \"^Microsoft\" and host_dst !~= \"^autodiscover\" and category in (\"*Miscellaneous or Unknown*\", \"*Non Categorizable*\") and user_agent not in (\"*Microsoft%20BITS/7.8*\", \"*Microsoft-Delivery-Optimization*\")\n| comp sum(rbytes) as current_day_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and user_agent ~= \"^Microsoft\" and host_dst !~= \"^autodiscover\" and category in (\"*Miscellaneous or Unknown*\", \"*Non Categorizable*\")\n| comp sum(rbytes) as 7_days_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_upload) as 7_days_upload_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n| fields user, 7_days_upload_avg\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_upload > multiply(7_days_upload_avg, 1.35)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find suspicious activity related to the \"at\" and \"atd\" scheduling utilities on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/at\" or action_process_image_path ~= \".*\\/atd\")\n\n\n\n"}
{"prompt": "I want to find suspicious attempts to access the Azure AD Health Monitoring Agent registry key on my endpoints.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4656, 4663) and ObjectType = \"Key\" and ObjectName = \"\\\\REGISTRY\\\\MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Microsoft Online\\\\Reporting\\\\MonitoringAgent\") and  not ((ProcessName contains \"Microsoft.Identity.Health.Adfs.DiagnosticsAgent.exe\" or ProcessName contains \"Microsoft.Identity.Health.Adfs.InsightsService.exe\" or ProcessName contains \"Microsoft.Identity.Health.Adfs.MonitoringAgent.Startup.exe\" or ProcessName contains \"Microsoft.Identity.Health.Adfs.PshSurrogate.exe\" or ProcessName contains \"Microsoft.Identity.Health.Common.Clients.ResourceMonitor.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell scripts are using Alternate Data Streams on NTFS filesystems.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"set-content\" or ScriptBlockText contains \"add-content\") and ScriptBlockText contains \"-stream\")\n\n\n\n"}
{"prompt": "I want to see potential Qakbot activity detected by the Windows Event Log, specifically looking for registry key names like \"Software\\\\firm\\\\soft\\\\Name\".", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\Software\\\\firm\\\\soft\\\\Name\"\n\n\n\n"}
{"prompt": "I want to see when and how Group Policy information is being displayed on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\gpresult\\.exe\" and (action_process_image_command_line contains \"/z\" or action_process_image_command_line contains \"/v\"))\n\n\n\n"}
{"prompt": "I want to find suspicious files created within the PerfLogs directory that have common executable extensions like .exe, .bat, or .dll.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\PerfLogs\\\\.*\" and (xdm.target.file.filename ~= \".*\\.7z\" or xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.bin\" or xdm.target.file.filename ~= \".*\\.chm\" or xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\" or xdm.target.file.filename ~= \".*\\.hta\" or xdm.target.file.filename ~= \".*\\.lnk\" or xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.psm1\" or xdm.target.file.filename ~= \".*\\.py\" or xdm.target.file.filename ~= \".*\\.scr\" or xdm.target.file.filename ~= \".*\\.sys\" or xdm.target.file.filename ~= \".*\\.vbe\" or xdm.target.file.filename ~= \".*\\.vbs\" or xdm.target.file.filename ~= \".*\\.zip\"))\n\n\n\n"}
{"prompt": "I want to set up an alert that tells me whenever any of those malicious phone numbers try to log in with Duo.", "response": "dataset = duo_duo_raw\n\n| alter Desc_Number = description -> number\n| filter (Desc_Number ~= \"<phoneNo>\") or (phone ~= \"<phoneNo>\")"}
{"prompt": "I want to detect suspicious activity related to Docker containers by identifying processes that list environment variables from the `.dockerenv` file.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/cat\" or action_process_image_path ~= \".*\\/dir\" or action_process_image_path ~= \".*\\/find\" or action_process_image_path ~= \".*\\/ls\" or action_process_image_path ~= \".*\\/stat\" or action_process_image_path ~= \".*\\/test\" or action_process_image_path ~= \".*grep\") and action_process_image_command_line ~= \".*\\.dockerenv\")\n\n\n\n"}
{"prompt": "I want to find suspicious registry run keys that were potentially created by downloads or internet temporary files.", "response": "preset = xdr_registry\n| filter ((actor_process_image_path ~= \".*\\\\Downloads\\\\.*\" or actor_process_image_path ~= \".*\\\\Temporary\\ Internet\\ Files\\\\Content\\.Outlook\\\\.*\" or actor_process_image_path ~= \".*\\\\Local\\ Settings\\\\Temporary\\ Internet\\ Files\\\\.*\") and action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect suspicious activity related to the use of Regsvr32.exe on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regsvr32\\.exe\" and action_process_image_command_line ~= \".*\\\\Temp\\\\.*\") or (action_process_image_path ~= \".*\\\\regsvr32\\.exe\" and (actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\")) or (action_process_image_path ~= \".*\\\\regsvr32\\.exe\" and actor_process_image_path ~= \".*\\\\cmd\\.exe\") or (action_process_image_path ~= \".*\\\\regsvr32\\.exe\" and (action_process_image_command_line contains \"/i:\" and action_process_image_command_line contains \"http\") and action_process_image_command_line ~= \".*scrobj\\.dll\") or (action_process_image_path ~= \".*\\\\regsvr32\\.exe\" and (action_process_image_command_line contains \"/i:\" and action_process_image_command_line contains \"ftp\") and action_process_image_command_line ~= \".*scrobj\\.dll\") or ((action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") and actor_process_image_path ~= \".*\\\\regsvr32\\.exe\") or (action_process_image_path ~= \".*\\\\EXCEL\\.EXE\" and action_process_image_command_line contains \"..\\\\..\\\\..\\\\Windows\\\\System32\\\\regsvr32.exe \") or (actor_process_image_path ~= \".*\\\\mshta\\.exe\" and action_process_image_path ~= \".*\\\\regsvr32\\.exe\") or (action_process_image_path ~= \".*\\\\regsvr32\\.exe\" and (action_process_image_command_line contains \"\\\\AppData\\\\Local\" or action_process_image_command_line contains \"C:\\\\Users\\\\Public\")) or (action_process_image_path ~= \".*\\\\regsvr32\\.exe\" and (action_process_image_command_line ~= \".*\\.jpg\" or action_process_image_command_line ~= \".*\\.jpeg\" or action_process_image_command_line ~= \".*\\.png\" or action_process_image_command_line ~= \".*\\.gif\" or action_process_image_command_line ~= \".*\\.bin\" or action_process_image_command_line ~= \".*\\.tmp\" or action_process_image_command_line ~= \".*\\.temp\" or action_process_image_command_line ~= \".*\\.txt\"))) and  not ((action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\" or action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\WebEx\\\\WebEx64\\\\Meetings\\\\atucfobj.dll\") or (actor_process_image_path = \"C:\\\\Program Files\\\\Box\\\\Box\\\\FS\\\\streem.exe\" and action_process_image_command_line ~= \".*\\\\Program\\ Files\\\\Box\\\\Box\\\\Temp\\\\.*\") or action_process_image_command_line ~= \".*\\/s\\ C\\:\\\\Windows\\\\System32\\\\RpcProxy\\\\RpcProxy\\.dll\")\n\n\n\n"}
{"prompt": "I want to see all instances where access was denied to Domain controllers, Exchange servers, and IS platforms.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| filter ((xdm.event.id IN (\"4625\") and xdm.logon.type = \"RemoteInteractive\" and error_code = \"0xc000015b\") or xdm.event.id IN (\"4825\"))\n| alter target_username = if(xdm.event.id IN (\"4825\"), arrayindex(regextract(xdm.event.description, \"User Name:\\t([^\\n]+)\"), 0), xdm.target.user.username)\n| alter target_username = if(target_username ~= \"<domain>\", rtrim(target_username, \"<domain>\"), if(target_username ~= \"<domain>\", rtrim(target_username, \"<domain>\"), if(target_username ~= \"<user>\", ltrim(target_username, \"<user>\\\\\"), target_username)))\n| alter xdm.source.ipv4 = if(xdm.source.ipv4 = null, trim(arrayindex(regextract(xdm.event.description, \"Client Address:\\s([^\\n]+)\"), 0)), xdm.source.ipv4)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_username\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps(wingrps.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or wingrps.IP = device_ip)\n| join type = left\n(dataset = redcarpet_users_list\n| filter enrich_field = \"redcarpet_user_dst\"\n) as redcarpusers redcarpusers.username = target_username\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type in (\"av_admin\", \"azure_cloud_admin\", \"bluecoat_admin\", \"byod_admin\", \"dmz_owner\", \"firewall_admin\", \"ilms_admin\", \"is_fusion_admin\", \"isg_qualys_admin\", \"nas_l1_admin\", \"nas_l1_l2_admin\", \"nas_l1_l2_l3_admin\", \"nas_l1_l3_admin\", \"nas_l2_admin\", \"nas_l2_l3_admin\", \"nas_l3_admin\", \"nas_l3_admin\", \"netscaler_admin\", \"network_admin\", \"network_ipt_admin\", \"nips_admin\", \"sccm_admin\", \"securid_admin\", \"sharepoint_admin\", \"unixr1_admin\", \"unixr2_admin\", \"win_accop\", \"win_admin\", \"win_admin_accop\", \"tier1_admin\", \"tier0_admin\", \"domain_admin_win_admin\", \"fin_user\") or security_groups contains \"Tier0Users\" or security_groups contains \"tier1users\"\n) as ent_admin_dst ent_admin_dst.username = target_username or ent_admin_dst.sam_account_name = target_username\n| Filter username = null\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of \".git/\" in web source code logs.", "response": "datamodel\n| filter _raw_log contains \".git/\"\n\n\n\n"}
{"prompt": "I want to detect potential PlugX activity based on suspicious executable file locations.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\CamMute\\.exe\" and  not ((action_process_image_path ~= \".*\\\\Lenovo\\\\Communication\\ Utility\\\\.*\" or action_process_image_path ~= \".*\\\\Lenovo\\\\Communications\\ Utility\\\\.*\"))) or (action_process_image_path ~= \".*\\\\chrome\\_frame\\_helper\\.exe\" and  not (action_process_image_path ~= \".*\\\\Google\\\\Chrome\\\\application\\\\.*\")) or (action_process_image_path ~= \".*\\\\dvcemumanager\\.exe\" and  not (action_process_image_path ~= \".*\\\\Microsoft\\ Device\\ Emulator\\\\.*\")) or (action_process_image_path ~= \".*\\\\Gadget\\.exe\" and  not (action_process_image_path ~= \".*\\\\Windows\\ Media\\ Player\\\\.*\")) or (action_process_image_path ~= \".*\\\\hcc\\.exe\" and  not (action_process_image_path ~= \".*\\\\HTML\\ Help\\ Workshop\\\\.*\")) or (action_process_image_path ~= \".*\\\\hkcmd\\.exe\" and  not ((action_process_image_path ~= \".*\\\\System32\\\\.*\" or action_process_image_path ~= \".*\\\\SysNative\\\\.*\" or action_process_image_path ~= \".*\\\\SysWow64\\\\.*\"))) or (action_process_image_path ~= \".*\\\\Mc\\.exe\" and  not ((action_process_image_path contains \"\\\\Microsoft Visual Studio\" or action_process_image_path contains \"\\\\Microsoft SDK\" or action_process_image_path contains \"\\\\Windows Kit\"))) or (action_process_image_path ~= \".*\\\\MsMpEng\\.exe\" and  not ((action_process_image_path ~= \".*\\\\Microsoft\\ Security\\ Client\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\ Defender\\\\.*\" or action_process_image_path ~= \".*\\\\AntiMalware\\\\.*\"))) or (action_process_image_path ~= \".*\\\\msseces\\.exe\" and  not ((action_process_image_path ~= \".*\\\\Microsoft\\ Security\\ Center\\\\.*\" or action_process_image_path ~= \".*\\\\Microsoft\\ Security\\ Client\\\\.*\" or action_process_image_path ~= \".*\\\\Microsoft\\ Security\\ Essentials\\\\.*\"))) or (action_process_image_path ~= \".*\\\\OInfoP11\\.exe\" and  not (action_process_image_path ~= \".*\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\.*\")) or (action_process_image_path ~= \".*\\\\OleView\\.exe\" and  not ((action_process_image_path contains \"\\\\Microsoft Visual Studio\" or action_process_image_path contains \"\\\\Microsoft SDK\" or action_process_image_path contains \"\\\\Windows Kit\" or action_process_image_path ~= \".*\\\\Windows\\ Resource\\ Kit\\\\.*\"))) or (action_process_image_path ~= \".*\\\\rc\\.exe\" and  not ((action_process_image_path contains \"\\\\Microsoft Visual Studio\" or action_process_image_path contains \"\\\\Microsoft SDK\" or action_process_image_path contains \"\\\\Windows Kit\" or action_process_image_path ~= \".*\\\\Windows\\ Resource\\ Kit\\\\.*\" or action_process_image_path ~= \".*\\\\Microsoft\\.NET\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find instances where suspicious files containing credentials are being copied using esentutl.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\esentutl\\.exe\" or actor_process_file_original_name = \"\\\\esentutl.exe\") and (action_process_image_command_line contains \"vss\" or action_process_image_command_line contains \" /m \" or action_process_image_command_line contains \" /y \")) or (action_process_image_command_line contains \"\\\\windows\\\\ntds\\\\ntds.dit\" or action_process_image_command_line contains \"\\\\config\\\\sam\" or action_process_image_command_line contains \"\\\\config\\\\security\" or action_process_image_command_line contains \"\\\\config\\\\system \" or action_process_image_command_line contains \"\\\\repair\\\\sam\" or action_process_image_command_line contains \"\\\\repair\\\\system\" or action_process_image_command_line contains \"\\\\repair\\\\security\" or action_process_image_command_line contains \"\\\\config\\\\RegBack\\\\sam\" or action_process_image_command_line contains \"\\\\config\\\\RegBack\\\\system\" or action_process_image_command_line contains \"\\\\config\\\\RegBack\\\\security\")\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious changes to system audit policies on Windows devices, including those made through Local Security Policy, Group Policy, or the `audipol` command.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4719\")\n| alter username = regextract(xdm.event.description, \"Account Name:\\t([^\\n]+)\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, username\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see which users successfully accessed domain controllers and their associated group memberships.", "response": "dataset = microsoft_windows_raw\n| filter event_id = 4732 and event_result = \"success\"\n| alter group = event_data -> TargetUserName,\nSubjectUserName = event_data -> SubjectUserName,\nhost_name = arrayindex(split(host_name, \".\"), 0),\nMemberName = json_extract_scalar(event_data, \"$.MemberName\")\n| filter group = \"Administrators\"\n| join\n(dataset = pan_dss_raw\n| filter type = \"computer\" and ou contains \"Domain Controllers\"\n| fields name\n) as dss dss.name = host_name\n| fields _time, host_name, SubjectUserName, group, event_id,\nMemberName"}
{"prompt": "I want to find suspicious processes that might be changing the \"NoLMHash\" registry value to allow LM hash storage.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\System\\\\CurrentControlSet\\\\Control\\\\Lsa\" and action_process_image_command_line contains \"NoLMHash\" and action_process_image_command_line contains \" 0\")\n\n\n\n"}
{"prompt": "I want to detect potential malicious activity involving Regasm or Regsvcs processes that are using uncommon file extensions like .dat, .gif, .jpeg, .jpg, .png, or .txt in their command lines.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\Regsvcs\\.exe\" or action_process_image_path ~= \".*\\\\Regasm\\.exe\") or actor_process_file_original_name in (\"RegSvcs.exe\", \"RegAsm.exe\")) and (action_process_image_command_line contains \".dat\" or action_process_image_command_line contains \".gif\" or action_process_image_command_line contains \".jpeg\" or action_process_image_command_line contains \".jpg\" or action_process_image_command_line contains \".png\" or action_process_image_command_line contains \".txt\"))\n\n\n\n"}
{"prompt": "I want to see all events related to group creation, deletion, or modification on Linux systems.", "response": "datamodel dataset = linux_linux_raw\n| filter xdm.event.type in (\"useradd\", \"userdel\", \"usermod\", \"groupmod\", \"gpasswd\", \"userdel\", \"groupdel\", \"groupadd\") and xdm.event.description ~= \"group\"\n| filter xdm.event.type != \"groupmod\" and xdm.event.description !~= \"group changed\"\n| alter xdm.target.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"password\\s+changed\\s+for\\s+([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"changed\\s+password\\s+expiry\\s+for\\s+([\\w\\-\\.]+)\"), 0), if(xdm.event.type = \"useradd\", arrayindex(regextract(xdm.event.description, \"name=([^,]+)\"), 0)), arrayindex(regextract(xdm.event.description, \"[add|delete]+ \\'([^\\']+)\"), 0)),\nxdm.target.user.groups = coalesce(arrayindex(regextract(xdm.event.description, \"name=(\\w+)\"), 0), arrayindex(regextract(xdm.event.description, \"group \\'([^\\']+)\"), 0)),\nxdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), xdm.source.user.username),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.target.user.groups != null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroups\",\naggregation_criteria1 = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find out if a single administrator changed MFA modes for many user accounts at once.", "response": "config case_sensitive = false\n| datamodel dataset = mfa_mfa2_raw\n| filter xdm.event.operation in (\"changed user\") and xdm.event.operation in (\"mode3\") and xdm.source.user.username !~= \"mfausersrv\"\n| fields xdm.event.type, xdm.event.description, xdm.event.operation,\nxdm.event.outcome, xdm.source.user.username, xdm.target.user.username,\nxdm.observer.action, xdm.source.host.hostname, xdm.event.original_event_type,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.source.ipv4, _time\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.user.username\n| filter array_length(xdm.target.user.username) >= 10\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to find indicators of an adversary using Winlogon Notify keys for persistence.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Winlogon\\\\Notify\\\\logon\" and (action_registry_value_name ~= \".*\\.dll\" or action_registry_data ~= \".*\\.dll\"))\n\n\n\n"}
{"prompt": "I want to see Windows Event Logs that show any suspicious activity attempts towards users listed in our Decoy Destination Users list.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter xdm.target.user.username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| join type = left\n(dataset = decoy_users_list\n) as decoy_user decoy_user.user_name = xdm.source.user.username\n| filter user_name != null\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, user_name\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to see if there have been many unique login attempts from different places using iRemote over the last few minutes. ", "response": "dataset = msft_azure_raw\n| bin _time span = 5m\n| filter operationName = \"Sign-in activity\" and category = \"SignInLogs\"\n| alter result_code = to_integer(resultType),\nresult_desc = resultDescription,\nuser_dst = properties -> userPrincipalName,\nappDisplayName = properties -> appDisplayName,\nuserDisplayName = properties -> userDisplayName,\nuserAgent = properties -> userAgent,\nOS = json_extract_scalar(properties, \"$.deviceDetail.operatingSystem\"),\nresult = trim(arrayindex(regextract(properties, \"result\\\":\\\"([^,]+)\"), 0), \"\\\"\")\n| iploc callerIpAddress loc_country,\nloc_asn_org\n| filter result_code != 0 and appDisplayName ~= \"iremote\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(userDisplayName) as username,\nvalues(callerIpAddress) as sourceip,\nvalues(appDisplayName) as server,\nvalues(result_code) as result_code,\nvalues(result_desc) as result_desc,\nvalues(userAgent) as user_agent,\nvalues(user_dst) as user_dst,\nvalues(loc_country) as country,\nvalues(loc_asn_org) as org,\nvalues(OS) as OS,\nvalues(result) as result,\ncount() as matched_events by _time\n| filter array_length(user_dst) >= 50\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for when Cloudflared Tunnel Connections are being cleaned up.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \" tunnel \" and action_process_image_command_line contains \"cleanup \") and (action_process_image_command_line contains \"-config \" or action_process_image_command_line contains \"-connector-id \"))\n\n\n\n"}
{"prompt": "I want to see Cortex XQL results for any processes that might indicate winPEAS execution on endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"winPEAS.exe\" or (action_process_image_path ~= \".*\\\\winPEASany\\_ofs\\.exe\" or action_process_image_path ~= \".*\\\\winPEASany\\.exe\" or action_process_image_path ~= \".*\\\\winPEASx64\\_ofs\\.exe\" or action_process_image_path ~= \".*\\\\winPEASx64\\.exe\" or action_process_image_path ~= \".*\\\\winPEASx86\\_ofs\\.exe\" or action_process_image_path ~= \".*\\\\winPEASx86\\.exe\")) or (action_process_image_command_line contains \" applicationsinfo\" or action_process_image_command_line contains \" browserinfo\" or action_process_image_command_line contains \" eventsinfo\" or action_process_image_command_line contains \" fileanalysis\" or action_process_image_command_line contains \" filesinfo\" or action_process_image_command_line contains \" processinfo\" or action_process_image_command_line contains \" servicesinfo\" or action_process_image_command_line contains \" windowscreds\") or action_process_image_command_line contains \"https:\n\n\n\n"}
{"prompt": "I want to see all mailbox permission changes for Finance group users, including who made the change, what permissions were given, and when it happened.", "response": "config case_sensitive = false\n| datamodel dataset = msft_admin_audit_raw\n| alter parameter_length = array_length(split(xdm.event.description, \" \")),\nparameter_values = split(xdm.event.operation, \" \")\n| alter mailbox = arrayindex(split(arrayindex(split(xdm.target.user.username, \"/\"), -1), \"(\"), 0),\nMailboxAccessGivenTo = if(parameter_length = 3, arrayindex(parameter_values, 1), arrayindex(parameter_values, 3)),\naccessrights = if(parameter_length = 3, arrayindex(parameter_values, 0), arrayindex(parameter_values, 2)),\nlog_src_name = \"AdminAudit\",\nserver_name = msft_admin_audit_raw._collector_hostname\n| filter mailbox in (\"< username(s) >\")\n| fields xdm.target.user.username, xdm.source.user.username,\nxdm.observer.action, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.event.id, xdm.event.description, xdm.event.operation,\nxdm.event.operation_sub_type, xdm.observer.type,\nxdm.event.is_completed, xdm.logon.is_elevated, MailboxAccessGivenTo,\nmailbox, accessrights, _time, _insert_time, log_src_name,\nserver_name, msft_admin_audit_raw.rundate\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to find instances where WinRAR creates potentially suspicious child processes like cmd.exe, cscript.exe, or powershell.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\WinRAR\\.exe\" and ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or actor_process_file_original_name in (\"Cmd.Exe\", \"cscript.exe\", \"mshta.exe\", \"PowerShell.EXE\", \"pwsh.dll\", \"regsvr32.exe\", \"RUNDLL32.EXE\", \"wscript.exe\")))\n\n\n\n"}
{"prompt": "I want to detect suspicious commands related to Hyper-V on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"New-VM\" or ScriptBlockText contains \"Set-VMFirmware\" or ScriptBlockText contains \"Start-VM\")\n\n\n\n"}
{"prompt": "I want to detect suspicious Git clones on my endpoints using keywords related to exploits and vulnerabilities.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\git\\.exe\" or action_process_image_path ~= \".*\\\\git\\-remote\\-https\\.exe\") or actor_process_file_original_name = \"git.exe\") and (action_process_image_command_line contains \" clone \" or action_process_image_command_line contains \"git-remote-https \") and (action_process_image_command_line contains \"exploit\" or action_process_image_command_line contains \"Vulns\" or action_process_image_command_line contains \"vulnerability\" or action_process_image_command_line contains \"RemoteCodeExecution\" or action_process_image_command_line contains \"Invoke-\" or action_process_image_command_line contains \"CVE-\" or action_process_image_command_line contains \"poc-\" or action_process_image_command_line contains \"ProofOfConcept\" or action_process_image_command_line contains \"proxyshell\" or action_process_image_command_line contains \"log4shell\" or action_process_image_command_line contains \"eternalblue\" or action_process_image_command_line contains \"eternal-blue\" or action_process_image_command_line contains \"MS17-\"))\n\n\n\n"}
{"prompt": "I want to see which users are simultaneously accessing both LAN and VPN connections.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| sort asc _time\n| bin _time span = 5m\n| filter xdm.event.id in (\"4624\")\n| filter xdm.source.user.username not in (\"ANONYMOUS LOGON\") and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\"\n| join type = left\n(dataset = enterprise_platform_static_list\n| fields ip_address, platform_type\n| filter platform_type not in (\"ad_ip\", \"exchange_ip\", \"is_ip\")\n) as ent_platform ent_platform.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type = \"domain_admin_win_admin\" or security_groups contains \"Tier1Users\"\n) as ent_admin_dst ent_admin_dst.username = xdm.source.user.username\n| filter type in (\"av_admin\", \"azure_cloud_admin\", \"bluecoat_admin\", \"byod_admin\", \"dmz_owner\", \"firewall_admin\", \"ilms_admin\", \"is_fusion_admin\", \"isg_qualys_admin\", \"nas_l1_admin\", \"nas_l1_l2_admin\", \"nas_l1_l2_l3_admin\", \"nas_l1_l3_admin\", \"nas_l2_admin\", \"nas_l2_l3_admin\", \"nas_l3_admin\", \"netscaler_admin\", \"network_admin\", \"network_ipt_admin\", \"nips_admin\", \"sccm_admin\", \"securid_admin\", \"unixr1_admin\", \"unixr2_admin\", \"win_accop\", \"win_admin\", \"win_admin_accop\", \"tier1_admin\")\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_ips incidr(xdm.source.ipv4, vpn_ips.cidr_range)\n| alter pattern = if(cidr_range != null, \"E1\", \"E2\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, pattern\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\nlist(pattern) as pattern_events,\ncount() as matched_events by xdm.target.user.username,\n_time\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events ~= \"E1,E2\"\n| alter aggregation_criteria = \"ilsourceip\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 500)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find users who have had at least 10 TeamViewer interactions with unusual activity patterns, like spikes in web traffic or specific HTTP actions.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter host_dst ~= \"teamviewer\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(category) as category,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nvalues(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\ncount() as matched_events by user_dst\n| filter matched_events >= 10\n| alter category = \"Command and Control\""}
{"prompt": "I want to see all instances where a user attempted to change another user's password on our Windows systems, highlighting potential insider threats and password compromise.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4723\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"PAM_windows\") and xdm.target.user.username != xdm.source.user.username and xdm.source.user.username !~= \"ANONYMOUS LOGON\" and xdm.source.user.username !~= \"\\$$\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where the Windows Defender service is disabled through registry modifications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Services\\\\WinDefend\\\\Start\" and (action_registry_value_name = \"DWORD (0x00000004)\" or action_registry_data = \"DWORD (0x00000004)\"))\n\n\n\n"}
{"prompt": "I want to see suspicious modifications to Autorun keys in Windows registry events.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows CE Services\\\\AutoStart\" or action_registry_key_name contains \"\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Command Processor\\\\Autorun\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Active Setup\\\\Installed Components\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows CE Services\\\\AutoStartOnDisconnect\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows CE Services\\\\AutoStartOnConnect\" or action_registry_key_name contains \"\\\\SYSTEM\\\\Setup\\\\CmdLine\" or action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Ctf\\\\LangBarAddin\" or action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Command Processor\\\\Autorun\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Active Setup\\\\Installed Components\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Classes\\\\Protocols\\\\Handler\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Classes\\\\Protocols\\\\Filter\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Classes\\\\Htmlfile\\\\Shell\\\\Open\\\\Command\\\\(Default)\" or action_registry_key_name contains \"\\\\Environment\\\\UserInitMprLogonScript\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\Control Panel\\\\Desktop\\\\Scrnsave.exe\" or action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Internet Explorer\\\\UrlSearchHooks\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Internet Explorer\\\\Desktop\\\\Components\" or action_registry_key_name contains \"\\\\Software\\\\Classes\\\\Clsid\\\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\\\Inprocserver32\" or action_registry_key_name contains \"\\\\Control Panel\\\\Desktop\\\\Scrnsave.exe\") and  not ((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\") or ((action_registry_key_name ~= \".*\\\\Office\\\\ClickToRun\\\\REGISTRY\\\\MACHINE\\\\Software\\\\Classes\\\\PROTOCOLS\\\\Handler\\\\.*\" or action_registry_key_name ~= \".*\\\\ClickToRunStore\\\\HKMU\\\\SOFTWARE\\\\Classes\\\\PROTOCOLS\\\\Handler\\\\.*\") or (action_registry_value_name in (\"{314111c7-a502-11d2-bbca-00c04f8ec294}\", \"{3459B272-CC19-4448-86C9-DDC3B4B2FAD3}\", \"{42089D2D-912D-4018-9087-2B87803E93FB}\", \"{5504BE45-A83B-4808-900A-3A5C36E7F77A}\", \"{807583E5-5146-11D5-A672-00B0D022E945}\") or action_registry_data in (\"{314111c7-a502-11d2-bbca-00c04f8ec294}\", \"{3459B272-CC19-4448-86C9-DDC3B4B2FAD3}\", \"{42089D2D-912D-4018-9087-2B87803E93FB}\", \"{5504BE45-A83B-4808-900A-3A5C36E7F77A}\", \"{807583E5-5146-11D5-A672-00B0D022E945}\"))) or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Active Setup\\\\Installed Components\\\\{8A69D345-D564-463c-AFF1-A69D9E530F96}\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Active Setup\\\\Installed Components\\\\{9459C573-B17A-45AE-9F64-1857B5D58CEE}\" or action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Active Setup\\\\Installed Components\\\\{89820200-ECBD-11cf-8B85-00AA005B4383}\" or actor_process_image_path in (\"C:\\\\Windows\\\\System32\\\\poqexec.exe\", \"C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe\") or ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\Updates\\\\.*\") and actor_process_image_path ~= \".*\\\\OfficeClickToRun\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see terminated user activity related to Microsoft Azure and Azure Audit Events, including their actions, organization unit, company name, and product/vendor information.", "response": "config case_sensitive = false\n| dataset in (msft_azure_ad_audit_raw, msft_azure_ad_raw)\n| alter user_name = if(_product = \"Microsoft Azure Audit\", if(json_extract(initiatedBy, \"$.user\") != null, arrayindex(split(json_extract(initiatedBy, \"$.user\") -> userPrincipalName, \"@\"), 0), null), arrayindex(split(userPrincipalName, \"@\"), 0)),\naction = if(_product = \"Microsoft Azure Audit\", activityDisplayName, \"Sign In Activity\"),\nreference_id = if(status != null, to_integer(status -> errorCode), null)\n| filter user_name != null and (reference_id = null or reference_id = 0)\n| join type = left\n(dataset = pan_dss_raw\n| fields company_name, sam_account_name, ou\n) as adusers adusers.sam_account_name = user_name\n| filter sam_account_name != null and company_name ~= \"^SEP|^SEPX\"\n| comp values(action) as action,\nvalues(to_string(OU)) as org_unit,\nvalues(company_name) as emp_id by user_name,\n_product,\n_vendor"}
{"prompt": "I want to detect suspicious modifications to service paths on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\sc\\.exe\" and (action_process_image_command_line contains \"config\" and action_process_image_command_line contains \"binPath\") and (action_process_image_command_line contains \"powershell\" or action_process_image_command_line contains \"cmd \" or action_process_image_command_line contains \"mshta\" or action_process_image_command_line contains \"wscript\" or action_process_image_command_line contains \"cscript\" or action_process_image_command_line contains \"rundll32\" or action_process_image_command_line contains \"svchost\" or action_process_image_command_line contains \"dllhost\" or action_process_image_command_line contains \"cmd.exe /c\" or action_process_image_command_line contains \"cmd.exe /k\" or action_process_image_command_line contains \"cmd.exe /r\" or action_process_image_command_line contains \"cmd /c\" or action_process_image_command_line contains \"cmd /k\" or action_process_image_command_line contains \"cmd /r\" or action_process_image_command_line contains \"C:\\\\Users\\\\Public\" or action_process_image_command_line ~= \".*\\\\Downloads\\\\.*\" or action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\" or action_process_image_command_line ~= \".*\\\\Microsoft\\\\Windows\\\\Start\\ Menu\\\\Programs\\\\Startup\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\TEMP\\\\.*\" or action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\"))\n\n\n\n"}
{"prompt": "I want to see events related to security event logs being cleared on endpoints.", "response": "preset = xdr_event_log\n| filter ((action_evtlog_event_id = 517 and provider_name = \"Security\") or (action_evtlog_event_id = 1102 and provider_name = \"Microsoft-Windows-Eventlog\"))\n\n\n\n"}
{"prompt": "I want to find instances where the \"MpCmdRun.exe\" process is used to remove all Windows Defender definition files.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\MpCmdRun\\.exe\" or actor_process_file_original_name = \"MpCmdRun.exe\") and (action_process_image_command_line contains \" -RemoveDefinitions\" and action_process_image_command_line contains \" -All\"))\n\n\n\n"}
{"prompt": "I want to find instances of attackers using PowerShell's `Set-Service` command with specific parameters (`DCLCWPDTSD`) and  modifying service security descriptors to potentially hide malicious services.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Set-Service \" and ScriptBlockText contains \"DCLCWPDTSD\") and (ScriptBlockText contains \"-SecurityDescriptorSddl \" or ScriptBlockText contains \"-sd \"))\n\n\n\n"}
{"prompt": "I want to detect suspicious processes that access the MachineGUID using reg.exe and target the \"SOFTWARE\\\\Microsoft\\\\Cryptography\" key.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\reg\\.exe\" and (action_process_image_command_line contains \"SOFTWARE\\\\Microsoft\\\\Cryptography\" and action_process_image_command_line contains \"/v \" and action_process_image_command_line contains \"MachineGuid\"))\n\n\n\n"}
{"prompt": "I want to find instances where LSASS has potentially suspicious granted access flags.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and ((GrantedAccess ~= \".*30\" or GrantedAccess ~= \".*50\" or GrantedAccess ~= \".*70\" or GrantedAccess ~= \".*90\" or GrantedAccess ~= \".*B0\" or GrantedAccess ~= \".*D0\" or GrantedAccess ~= \".*F0\" or GrantedAccess ~= \".*18\" or GrantedAccess ~= \".*38\" or GrantedAccess ~= \".*58\" or GrantedAccess ~= \".*78\" or GrantedAccess ~= \".*98\" or GrantedAccess ~= \".*B8\" or GrantedAccess ~= \".*D8\" or GrantedAccess ~= \".*F8\" or GrantedAccess ~= \".*1A\" or GrantedAccess ~= \".*3A\" or GrantedAccess ~= \".*5A\" or GrantedAccess ~= \".*7A\" or GrantedAccess ~= \".*9A\" or GrantedAccess ~= \".*BA\" or GrantedAccess ~= \".*DA\" or GrantedAccess ~= \".*FA\" or GrantedAccess ~= \".*0x14C2\") or (GrantedAccess ~= \"0x100000.*\" or GrantedAccess ~= \"0x1418.*\" or GrantedAccess ~= \"0x1438.*\" or GrantedAccess ~= \"0x143a.*\" or GrantedAccess ~= \"0x1f0fff.*\" or GrantedAccess ~= \"0x1f1fff.*\" or GrantedAccess ~= \"0x1f2fff.*\" or GrantedAccess ~= \"0x1f3fff.*\" or GrantedAccess ~= \"0x40.*\"))) and  not ((SourceImage ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or SourceImage ~= \".*\\:\\\\Program\\ Files\\\\.*\" or SourceImage ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or SourceImage ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (SourceImage ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\.*\" and SourceImage ~= \".*\\\\MsMpEng\\.exe\") or ((CallTrace contains \"|*:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Definition Updates\\\\{\" and CallTrace contains \"}\\\\mpengine.dll+\") and GrantedAccess = \"0x1418\") or (CallTrace contains \"|c:\\\\program files\\\\windows defender\\\\mprtp.dll\" or CallTrace contains \"|c:\\\\program files\\\\windows defender\\\\MpClient.dll\") or (SourceImage ~= \".*\\\\explorer\\.exe\" and GrantedAccess = \"0x401\")) and  not (SourceImage ~= \".*\\:\\\\ProgramData\\\\MALWAREBYTES\\\\MBAMSERVICE\\\\ctlrupdate\\\\mbupdatr\\.exe\" or SourceImage ~= \".*\\\\AppData\\\\Local\\\\Programs\\\\Microsoft\\ VS\\ Code\\\\Code\\.exe\" or (SourceImage ~= \".*\\:\\\\ProgramData\\\\VMware\\\\VMware\\ Tools\\\\.*\" and SourceImage ~= \".*\\\\vmtoolsd\\.exe\") or ((SourceImage ~= \".*\\\\PROCEXP64\\.EXE\" or SourceImage ~= \".*\\\\PROCEXP\\.EXE\") and GrantedAccess = \"0x40\") or (SourceImage ~= \".*\\\\MBAMInstallerService\\.exe\" and GrantedAccess = \"0x40\") or ((SourceImage ~= \".*\\\\aurora\\-agent\\-64\\.exe\" or SourceImage ~= \".*\\\\aurora\\-agent\\.exe\" or SourceImage ~= \".*\\\\thor\\.exe\" or SourceImage ~= \".*\\\\thor64\\.exe\") and GrantedAccess = \"0x40\") or ((SourceImage ~= \".*\\\\handle\\.exe\" or SourceImage ~= \".*\\\\handle64\\.exe\") and GrantedAccess = \"0x40\") or (SourceImage ~= \".*\\\\AppData\\\\Local\\\\WebEx\\\\WebexHost\\.exe\" and GrantedAccess = \"0x401\") or SourceImage ~= \".*\\\\SteamLibrary\\\\steamapps\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see events related to unsigned kernel modules being loaded on Windows systems.", "response": "datamodel\n| filter xdm.event.id = 3001\n\n\n\n"}
{"prompt": "I want to see scheduled tasks that were executed from suspicious locations like Temp folders or Downloads.", "response": "datamodel\n| filter (xdm.event.id = 129 and (xdm.target.process.executable.path ~= \".*C\\:\\\\Windows\\\\Temp\\\\.*\" or xdm.target.process.executable.path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or xdm.target.process.executable.path ~= \".*\\\\Desktop\\\\.*\" or xdm.target.process.executable.path ~= \".*\\\\Downloads\\\\.*\" or xdm.target.process.executable.path ~= \".*\\\\Users\\\\Public\\\\.*\" or xdm.target.process.executable.path ~= \".*C\\:\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find processes on endpoints that use EQNEDT32.EXE, as this could be an indication of exploitation of CVE-2017-11882.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\EQNEDT32\\.EXE\"\n\n\n\n"}
{"prompt": "I want to see Duo users flagged as fraud in real time, including their details like IP address, location, device information, and integration used.", "response": "dataset = duo_duo_raw\n| filter email != NULL and reason = \"user_marked_fraud\" and result = \"fraud\"\n| alter DuoUserName = user -> name,\nIPAddress = access_device -> ip,\nDeviceTrustLevel = adaptive_trust_assessments -> remember_me.trust_level,\nAccDevLocationCN = access_device -> location.country,\nAccDevLocationST = access_device -> location.state,\nAccDevLocationCY = access_device -> location.city,\nAccDevOS = access_device -> os,\nAccDevOSVer = access_device -> os_version,\nAccDevBrowser = access_device -> browser,\nAccDevBrowserVer = access_device -> browser_version,\nIntegration = application -> name,\nAppSrc = application -> name,\nPhoneNumber = auth_device -> name\n| alter AccDevLocationCN = replace(AccDevLocationCN, \"\\\"\", \"\"),\nDuoUserName = replace(DuoUserName, \"\\\"\", \"\"),\nCorrelationAlertName = \"CNX_EU_PROD DUO User marked as Fraud RealTime\"\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter (IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false and IPAddress not in (\"0.0.0.0\")) and (DuoUserName not in (null, NULL, \"\"\"\"\"\") and incidr(IPAddress, \"221.120.107.0/24\") = False)\n| fields DuoUserName, reason, IPAddress, result, eventtype,\nemail, AccDevLocationCN, AccDevOS, AccDevOSVer,\nAccDevBrowser, AccDevBrowserVer, Integration, *"}
{"prompt": "I want to see Cortex XDR alerts related to Impacket PsExec execution on endpoints.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName = \"\\\\\\\\\\*\\\\IPC$\" and (RelativeTargetName contains \"RemCom_stdin\" or RelativeTargetName contains \"RemCom_stdout\" or RelativeTargetName contains \"RemCom_stderr\"))\n\n\n\n"}
{"prompt": "I want to see activity related to Windows shares being mounted using net.exe or net1.exe.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and (action_process_image_command_line contains \" use \" or action_process_image_command_line ~= \".*\\ \\\\\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts for potential Maze ransomware activity based on process creation patterns.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\WINWORD\\.exe\" and action_process_image_path ~= \".*\\.tmp\") or (action_process_image_path ~= \".*\\\\wmic\\.exe\" and actor_process_image_path ~= \".*\\\\Temp\\\\.*\" and action_process_image_command_line ~= \".*shadowcopy\\ delete\") or (action_process_image_command_line ~= \".*shadowcopy\\ delete\" and action_process_image_command_line contains \"\\\\..\\\\..\\\\system32\"))\n\n\n\n"}
{"prompt": "I want to detect if someone has tampered with sensitive RDP settings, like allowing unauthorized access or disabling connections.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\fDenyTSConnections\" or action_registry_key_name ~= \".*\\\\fSingleSessionPerUser\" or action_registry_key_name ~= \".*\\\\UserAuthentication\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to see alerts triggered by changes to \"IS High Privileged Security Groups\" for IS EPM domain: ISAPPS. Specifically, I need to know when members are added or removed from this admin group.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4728\", \"4729\", \"4756\", \"4757\") and xdm.source.host.hostname ~= \"isapps.com$\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about processes dumping data using Sqldumper.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\sqldumper\\.exe\" and (action_process_image_command_line contains \"0x0110\" or action_process_image_command_line contains \"0x01100:40\"))\n\n\n\n"}
{"prompt": "I want to find instances of the SharpImpersonation tool being used for privilege escalation on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\SharpImpersonation\\.exe\" or actor_process_file_original_name = \"SharpImpersonation.exe\") or ((action_process_image_command_line contains \" user:\" and action_process_image_command_line contains \" binary:\") or (action_process_image_command_line contains \" user:\" and action_process_image_command_line contains \" shellcode:\") or (action_process_image_command_line contains \" technique:CreateProcessAsUserW\" or action_process_image_command_line contains \" technique:ImpersonateLoggedOnuser\")))\n\n\n\n"}
{"prompt": "I want to find instances of the Hashcat password cracker being used on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\hashcat\\.exe\" or (action_process_image_command_line contains \"-a \" and action_process_image_command_line contains \"-m 1000 \" and action_process_image_command_line contains \"-r \"))\n\n\n\n"}
{"prompt": "I want to detect if an attacker is using the Disk Cleanup Handler in the registry for persistence via autorun.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\VolumeCaches\\\\.*\" and ((action_registry_key_name contains \"\\\\Autorun\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\")) or ((action_registry_key_name contains \"\\\\CleanupString\" or action_registry_key_name contains \"\\\\PreCleanupString\") and ((action_registry_value_name contains \"cmd\" or action_registry_value_name contains \"powershell\" or action_registry_value_name contains \"rundll32\" or action_registry_value_name contains \"mshta\" or action_registry_value_name contains \"cscript\" or action_registry_value_name contains \"wscript\" or action_registry_value_name contains \"wsl\" or action_registry_value_name ~= \".*\\\\Users\\\\Public\\\\.*\" or action_registry_value_name ~= \".*\\\\Windows\\\\TEMP\\\\.*\" or action_registry_value_name ~= \".*\\\\Microsoft\\\\Windows\\\\Start\\ Menu\\\\Programs\\\\Startup\\\\.*\") or (action_registry_data contains \"cmd\" or action_registry_data contains \"powershell\" or action_registry_data contains \"rundll32\" or action_registry_data contains \"mshta\" or action_registry_data contains \"cscript\" or action_registry_data contains \"wscript\" or action_registry_data contains \"wsl\" or action_registry_data ~= \".*\\\\Users\\\\Public\\\\.*\" or action_registry_data ~= \".*\\\\Windows\\\\TEMP\\\\.*\" or action_registry_data ~= \".*\\\\Microsoft\\\\Windows\\\\Start\\ Menu\\\\Programs\\\\Startup\\\\.*\"))))\n\n\n\n"}
{"prompt": "I want to find instances where rundll32.exe spawns explorer.exe, but not when it's using shell32.dll for Control_RunDLL.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\rundll32\\.exe\" and action_process_image_path ~= \".*\\\\explorer\\.exe\") and  not (actor_process_image_command_line contains \"\\\\shell32.dll,Control_RunDLL\")\n\n\n\n"}
{"prompt": "I want to see details about Symantec WSS events flagged as malicious or malnet, including information about the infected system, user, and related network activity.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Risk\")\n| alter hostname = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| filter xdm.target.file.sha256 != null and hostname != null\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\ndownload_site = arrayindex(regextract(symantec_ep_raw._raw_log, \"Download site:\\s([^\\,]+)\"), 0),\ndownloaded_by = arrayindex(regextract(symantec_ep_raw._raw_log, \"Downloaded by:\\s([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlast(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(server_name) as server_name,\nvalues(xdm.source.user.username) as username,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ips,\nvalues(xdm.target.ipv4) as dst_ips,\nvalues(download_site) as download_site,\nvalues(downloaded_by) as downloaded_by,\nvalues(xdm.target.file.sha256) as file_hash by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nxdm.target.host.hostname\n| join type = left\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by ip_src,\nuser_dst,\nalias_host\n) as proxyevents(proxyevents.ip_src = xdm.target.ipv4 or proxyevents.user_dst = xdm.source.user.sam_account_name or proxyevents.alias_host = `xdm.target.host.hostname`)\n| filter (ip_src != null or user_dst != null or alias_host != null) and category ~= \"malnets\"\n| alter process = replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_address = replace(replace(replace(to_string(ip_address), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nrisk_name = replace(replace(replace(to_string(risk_name), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nfile_name = arrayindex(split(replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"), \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(process, file_name, \"\")"}
{"prompt": "I want to see events related to suspicious dynamic .NET compilation using Csc.exe on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\csc\\.exe\" and ((action_process_image_command_line ~= \".*\\:\\\\Perflogs\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line contains \"\\\\Temporary Internet\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Temp\\\\.*\") or ((action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Favorites\\\\.*\") or (action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Favourites\\\\.*\") or (action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Contacts\\\\.*\") or (action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Pictures\\\\.*\")) or action_process_image_command_line ~= \"([Pp]rogram[Dd]ata|\\%([Ll]ocal)?[Aa]pp[Dd]ata\\%|\\\\[Aa]pp[Dd]ata\\\\([Ll]ocal([Ll]ow)?|[Rr]oaming))\\\\[^\\\\]{1,256}$\") and  not ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\.*\") or actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\sdiagnhost.exe\" or actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\inetsrv\\\\w3wp.exe\") and  not (actor_process_image_path in (\"C:\\\\ProgramData\\\\chocolatey\\\\choco.exe\", \"C:\\\\ProgramData\\\\chocolatey\\\\tools\\\\shimgen.exe\") or actor_process_image_command_line contains \"\\\\ProgramData\\\\Microsoft\\\\Windows Defender Advanced Threat Protection\" or (actor_process_image_command_line contains \"JwB7ACIAZgBhAGkAbABlAGQAIgA6AHQAcgB1AGUALAAiAG0AcwBnACIAOgAiAEEAbgBzAGkAYgBsAGUAIAByAGUAcQB1AGkAcgBlAHMAIABQAG8AdwBlAHIAUwBoAGUAbABsACAAdgAzAC4AMAAgAG8AcgAgAG4AZQB3AGUAcgAiAH0AJw\" or actor_process_image_command_line contains \"cAewAiAGYAYQBpAGwAZQBkACIAOgB0AHIAdQBlACwAIgBtAHMAZwAiADoAIgBBAG4AcwBpAGIAbABlACAAcgBlAHEAdQBpAHIAZQBzACAAUABvAHcAZQByAFMAaABlAGwAbAAgAHYAMwAuADAAIABvAHIAIABuAGUAdwBlAHIAIgB9ACcA\" or actor_process_image_command_line contains \"nAHsAIgBmAGEAaQBsAGUAZAAiADoAdAByAHUAZQAsACIAbQBzAGcAIgA6ACIAQQBuAHMAaQBiAGwAZQAgAHIAZQBxAHUAaQByAGUAcwAgAFAAbwB3AGUAcgBTAGgAZQBsAGwAIAB2ADMALgAwACAAbwByACAAbgBlAHcAZQByACIAfQAnA\"))\n\n\n\n"}
{"prompt": "I want to find users who have shown unusually high activity today compared to their average activity over the last 7 days.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\"))\n| comp count() as current_day_count,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\"))\n| comp count() as 7_days_count,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_count) as 7_days_count_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_count_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter 7_days_count_avg > 50 and current_day_count > multiply(7_days_count_avg, 1.5)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see alerts for potential sideloading of  signed dbghelp.dll files using VMMap executables.", "response": "preset = xdr_image_load\n| filter (action_module_path contains \"C:\\\\Debuggers\\\\dbghelp.dll\" and (actor_process_image_path ~= \".*\\\\vmmap\\.exe\" or actor_process_image_path ~= \".*\\\\vmmap64\\.exe\") and actor_process_signature_status = \"true\")\n\n\n\n"}
{"prompt": "I want to see all instances of administrators adding mailbox permissions in Office365 and get details about who made the changes, which mailboxes were affected, and what permissions were added.", "response": "config case_sensitive = false\n| dataset = msft_o365_exchange_online_raw\n| filter Operation IN (\"Add-MailboxFolderPermission\", \"Add-RecipientPermission\", \"Set-MailboxFolderPermission\")\n| alter arraycount = array_length(regextract(Parameters, \"\\\"Name\\\":\"))\n| alter permission = if(arraycount = 1, json_extract_scalar(parameters, \"$[0].Value\"), if(arraycount = 2, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\")), if(arraycount = 3, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\"), \",\", json_extract_scalar(parameters, \"$[2].Value\")), if(arraycount = 4, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\"), \",\", json_extract_scalar(parameters, \"$[2].Value\"), \",\", json_extract_scalar(parameters, \"$[3].Value\"))))))\n| fields Operation, MailboxOwnerUPN, UserId, ObjectId,\npermission, Parameters, ResultStatus, _time, CreationTime\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to detect suspicious activity related to patching the shim database on Windows systems.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\AppCompatFlags\\\\Custom\\\\.*\" and (action_registry_key_name ~= \".*\\\\csrss\\.exe\" or action_registry_key_name ~= \".*\\\\dllhost\\.exe\" or action_registry_key_name ~= \".*\\\\explorer\\.exe\" or action_registry_key_name ~= \".*\\\\RuntimeBroker\\.exe\" or action_registry_key_name ~= \".*\\\\services\\.exe\" or action_registry_key_name ~= \".*\\\\sihost\\.exe\" or action_registry_key_name ~= \".*\\\\svchost\\.exe\" or action_registry_key_name ~= \".*\\\\taskhostw\\.exe\" or action_registry_key_name ~= \".*\\\\winlogon\\.exe\" or action_registry_key_name ~= \".*\\\\WmiPrvSe\\.exe\"))\n\n\n\n"}
{"prompt": " I want to find out if there have been over 100 instances of computer account deletions in Infosys Infrastructure within a short period of time. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| bin _time span = 5m\n| filter xdm.event.id = \"4743\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp count(xdm.event.id) as match_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by _time\n| filter match_events > 100\n| alter duplicate_alert_count = subtract(floor(divide(match_events, 100)), 1)\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": " I want to see indicators of Sliver C2 service installations on my endpoints. ", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (actor_process_image_path ~= \"^[a-zA-Z]\\:\\\\windows\\\\temp\\\\[a-zA-Z0-9]{10}\\.exe\" or ServiceName in (\"Sliver\", \"Sliver implant\"))\n\n\n\n"}
{"prompt": "I want to find any instances of known hack tool User Agents in the Datamodel.", "response": "datamodel\n| filter (xdm.network.http.browser contains \"(hydra)\" or xdm.network.http.browser contains \" arachni/\" or xdm.network.http.browser contains \" BFAC \" or xdm.network.http.browser contains \" brutus \" or xdm.network.http.browser contains \" cgichk \" or xdm.network.http.browser contains \"core-project/1.0\" or xdm.network.http.browser contains \" crimscanner/\" or xdm.network.http.browser contains \"datacha0s\" or xdm.network.http.browser contains \"dirbuster\" or xdm.network.http.browser contains \"domino hunter\" or xdm.network.http.browser contains \"dotdotpwn\" or xdm.network.http.browser contains \"FHScan Core\" or xdm.network.http.browser contains \"floodgate\" or xdm.network.http.browser contains \"get-minimal\" or xdm.network.http.browser contains \"gootkit auto-rooter scanner\" or xdm.network.http.browser contains \"grendel-scan\" or xdm.network.http.browser contains \" inspath \" or xdm.network.http.browser contains \"internet ninja\" or xdm.network.http.browser contains \"jaascois\" or xdm.network.http.browser contains \" zmeu \" or xdm.network.http.browser contains \"masscan\" or xdm.network.http.browser contains \" metis \" or xdm.network.http.browser contains \"morfeus fucking scanner\" or xdm.network.http.browser contains \"n-stealth\" or xdm.network.http.browser contains \"nsauditor\" or xdm.network.http.browser contains \"pmafind\" or xdm.network.http.browser contains \"security scan\" or xdm.network.http.browser contains \"springenwerk\" or xdm.network.http.browser contains \"teh forest lobster\" or xdm.network.http.browser contains \"toata dragostea\" or xdm.network.http.browser contains \" vega/\" or xdm.network.http.browser contains \"voideye\" or xdm.network.http.browser contains \"webshag\" or xdm.network.http.browser contains \"webvulnscan\" or xdm.network.http.browser contains \" whcc/\" or xdm.network.http.browser contains \" Havij\" or xdm.network.http.browser contains \"absinthe\" or xdm.network.http.browser contains \"bsqlbf\" or xdm.network.http.browser contains \"mysqloit\" or xdm.network.http.browser contains \"pangolin\" or xdm.network.http.browser contains \"sql power injector\" or xdm.network.http.browser contains \"sqlmap\" or xdm.network.http.browser contains \"sqlninja\" or xdm.network.http.browser contains \"uil2pn\" or xdm.network.http.browser contains \"ruler\" or xdm.network.http.browser contains \"Mozilla/5.0 (Windows; U; Windows NT 5.1; pt-PT; rv:1.9.1.2) Gecko/20090729 Firefox/3.5.2 (.NET CLR 3.5.30729)\")\n\n\n\n"}
{"prompt": "I want to see activity related to an attacker trying to find private keys on endpoints using tools like PowerShell, cmd.exe, and findstr.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \".key\" or action_process_image_command_line contains \".pgp\" or action_process_image_command_line contains \".gpg\" or action_process_image_command_line contains \".ppk\" or action_process_image_command_line contains \".p12\" or action_process_image_command_line contains \".pem\" or action_process_image_command_line contains \".pfx\" or action_process_image_command_line contains \".cer\" or action_process_image_command_line contains \".p7b\" or action_process_image_command_line contains \".asc\") and (((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and action_process_image_command_line contains \"dir \") or (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and action_process_image_command_line contains \"Get-ChildItem \") or (action_process_image_path ~= \".*\\\\findstr\\.exe\" or actor_process_file_original_name = \"FINDSTR.EXE\"))\n\n\n\n"}
{"prompt": " I want to find instances where ConvertTo-SecureString cmdlet is used via PowerShell command line on endpoints. ", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and action_process_image_command_line contains \"ConvertTo-SecureString\")\n\n\n\n"}
{"prompt": "I want to find instances where MSSQL audit settings are being disabled on endpoints.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"MSSQLSERVER\" and action_evtlog_event_id = 33205 and (Data contains \"statement:ALTER SERVER AUDIT\" or Data contains \"statement:DROP SERVER AUDIT\"))\n\n\n\n"}
{"prompt": "I want to detect processes using WMIC.exe that are gathering information about other processes.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\WMIC\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and action_process_image_command_line contains \"process\") and  not ((action_process_image_command_line contains \"call\" and action_process_image_command_line contains \"create\"))\n\n\n\n"}
{"prompt": "I want to see events related to unauthorized editing of the sudoers file on Linux systems.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE != \"edgeverve_unix\"\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| alter xdm.event.type = coalesce(xdm.event.type, arrayindex(regextract(linux_linux_raw._raw_log, \"\\stype=[^\\s]+\"), 0)),\ncommand_exe = arrayindex(regextract(linux_linux_raw._raw_log, \"\\sexe=\\\"([^\\\"]+)\"), 0),\ncommand = coalesce(arrayindex(regextract(xdm.event.description, \"\\[COMMAND\\=([^\\]]+)\\]\"), 0), arrayindex(regextract(xdm.event.description, \"COMMAND=(.*)\"), 0), arrayindex(regextract(xdm.event.description, \"\\s*\\[[^\\]]+\\]:\\s(.*)\"), 0))\n| alter xdm.target.process.command_line = coalesce(command_exe, command)\n| filter xdm.target.process.command_line in (\"/bin/vim /etc/sudoers\", \"/bin/vi /etc/sudoers\", \"/bin/nano /etc/sudoers\", \"/usr/bin/vi /etc/sudoers\", \"/usr/bin/vim /etc/sudoers\", \"/usr/bin/nano /etc/sudoers\")\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, linux_linux_raw._final_reporting_device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find out if any uncommon processes are trying to access my browser credential files.", "response": "datamodel\n| filter (xdm.target.file.path ~= \".*\\\\Appdata\\\\Local\\\\Microsoft\\\\Windows\\\\WebCache\\\\WebCacheV01\\.dat\" or (xdm.target.file.path ~= \".*\\\\cookies\\.sqlite\" or xdm.target.file.path ~= \".*release\\\\key3\\.db\" or xdm.target.file.path ~= \".*release\\\\key4\\.db\" or xdm.target.file.path ~= \".*release\\\\logins\\.json\") or (xdm.target.file.path contains \"\\\\Appdata\\\\Local\\\\Chrome\\\\User Data\\\\Default\\\\Login Data\" or xdm.target.file.path contains \"\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Network\\\\Cookies\" or xdm.target.file.path contains \"\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\User Data\\\\Local State\")) and  not ((xdm.target.process.name = \"System\" or xdm.source.process.name = \"System\") or ((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\"))) and  not (((xdm.target.process.name ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\.*\") and ((xdm.target.process.name ~= \".*\\\\MpCopyAccelerator\\.exe\" or xdm.target.process.name ~= \".*\\\\MsMpEng\\.exe\") or (xdm.source.process.name ~= \".*\\\\MpCopyAccelerator\\.exe\" or xdm.source.process.name ~= \".*\\\\MsMpEng\\.exe\"))) or ((xdm.target.process.name ~= \".*\\\\thor64\\.exe\" or xdm.target.process.name ~= \".*\\\\thor\\.exe\") or (xdm.source.process.name ~= \".*\\\\thor64\\.exe\" or xdm.source.process.name ~= \".*\\\\thor\\.exe\")))\n\n\n\n"}
{"prompt": "I want to find suspicious app installations that are using unusual locations for their packages.", "response": "datamodel\n| filter (xdm.event.id = 854 and (xdm.target.process.executable.path ~= \".*C\\:\\\\Users\\\\Public\\\\.*\" or xdm.target.process.executable.path contains \"/users/public/\" or xdm.target.process.executable.path ~= \".*C\\:\\\\PerfLogs\\\\.*\" or xdm.target.process.executable.path contains \"C:/perflogs/\" or xdm.target.process.executable.path ~= \".*\\\\Desktop\\\\.*\" or xdm.target.process.executable.path contains \"/desktop/\" or xdm.target.process.executable.path ~= \".*\\\\Downloads\\\\.*\" or xdm.target.process.executable.path contains \"/Downloads/\" or xdm.target.process.executable.path ~= \".*C\\:\\\\Windows\\\\Temp\\\\.*\" or xdm.target.process.executable.path contains \"C:/Windows/Temp/\" or xdm.target.process.executable.path ~= \".*\\\\AppdData\\\\Local\\\\Temp\\\\.*\" or xdm.target.process.executable.path contains \"/AppdData/Local/Temp/\"))\n\n\n\n"}
{"prompt": "I want to find accounts in Active Directory where the password never expires.", "response": "datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4738\") and xdm.event.description contains \"Don't Expire Password\"\n| filter xdm.target.user.username not in (\"\"\"$\"\"\", \"Administrator\", \"managesrv\", \"\"\"\"\"\")\n| alter UserAccountControl = arrayindex(regextract(xdm.event.description, \"\\n\\tUser Account Control\\:\\t\\n\\t\\t(.*?)\\n\\t\"), 0)\n| filter (UserAccountControl contains \"\"\"'Don't Expire Password' - Enabled\"\"\")"}
{"prompt": "I want to see Azure security alerts that have been activated.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.security/locations/alerts/activate/action\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all instances of child processes spawned by sdclt.exe.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\sdclt\\.exe\"\n\n\n\n"}
{"prompt": "I want to detect changes made to Internet Explorer security zones in the Windows registry.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet\\ Settings\\\\ZoneMap\\\\Domains\\\\.*\" and  not ((action_registry_value_name in (\"DWORD (0x00000000)\", \"DWORD (0x00000001)\", \"(Empty)\") or action_registry_data in (\"DWORD (0x00000000)\", \"DWORD (0x00000001)\", \"(Empty)\")))\n\n\n\n"}
{"prompt": "I want to detect instances where PowerShell is hidden inside a link file (.lnk) and launched from explorer.exe through cmd.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path = \"C:\\\\Windows\\\\explorer.exe\" and action_process_image_path = \"C:\\\\Windows\\\\System32\\\\cmd.exe\" and (action_process_image_command_line contains \"powershell\" and action_process_image_command_line contains \".lnk\"))\n\n\n\n"}
{"prompt": "I want to find instances of UAC bypass attacks that use Dism and a fake DLL.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\dism\\.exe\" and action_module_path ~= \".*\\\\dismcore\\.dll\") and  not (action_module_path = \"C:\\\\Windows\\\\System32\\\\Dism\\\\dismcore.dll\")\n\n\n\n"}
{"prompt": "I want to find instances where Whoami.exe is executed from a process running with elevated privileges, such as those with usernames containing \"AUTHORI\", \"AUTORI\", or \"TrustedInstaller\".", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"whoami.exe\" or action_process_image_path ~= \".*\\\\whoami\\.exe\") and (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\" or action_process_username contains \"TrustedInstaller\"))\n\n\n\n"}
{"prompt": "I want to see blocked firewall connections that involve domains flagged as malicious by Facebook.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter xdm.observer.action in (\"blocked\") and xdm.event.type ~= \"utm:webfilter\"\n| join\n(dataset = cv_fb_mz_iocs\n| filter ioc_description in (\"FB_Malicious_Domain\") and ioc_type in (\"domain\")\n) as ioclookup ioclookup.ioc_value = xdm.target.host.fqdn\n| filter (xdm.network.http.domain ~= ioc_value) or (ioc_value ~= xdm.target.host.fqdn)\n| fields *\n| view column order = populated"}
{"prompt": "I want to see alerts for potential path traversal exploitation attempts based on suspicious URLs.", "response": "datamodel\n| filter (xdm.network.http.url contains \"../../../../../lib/password\" or xdm.network.http.url contains \"../../../../windows/\" or xdm.network.http.url contains \"../../../etc/\" or xdm.network.http.url contains \"..%252f..%252f..%252fetc%252f\" or xdm.network.http.url contains \"..%c0%af..%c0%af..%c0%afetc%c0%af\" or xdm.network.http.url contains \"%252e%252e%252fetc%252f\")\n\n\n\n"}
{"prompt": "I want to find security events related to installing root certificates on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/update\\-ca\\-certificates\" or action_process_image_path ~= \".*\\/update\\-ca\\-trust\")\n\n\n\n"}
{"prompt": " I want to see events where the CrashControl registry key has been set to disable crash dumps on Windows systems. ", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"SYSTEM\\\\CurrentControlSet\\\\Control\\\\CrashControl\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to see events related to suspicious parent or child processes involving wab.exe or wabmig.exe, especially when they interact with known system utilities like WmiPrvSE.exe, svchost.exe, or dllhost.exe.", "response": "preset = xdr_process\n| filter (((actor_process_image_path ~= \".*\\\\WmiPrvSE\\.exe\" or actor_process_image_path ~= \".*\\\\svchost\\.exe\" or actor_process_image_path ~= \".*\\\\dllhost\\.exe\") and (action_process_image_path ~= \".*\\\\wab\\.exe\" or action_process_image_path ~= \".*\\\\wabmig\\.exe\")) or (actor_process_image_path ~= \".*\\\\wab\\.exe\" or actor_process_image_path ~= \".*\\\\wabmig\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts for Authentication attacks detected on the wireless LAN controller, specifically those flagged as \"DOT1X-3-EAPOL_MSG_ATTACK\" with 3 or more matching events within a 5 minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_wlc_raw\n| alter msg_id = concat(xdm.event.original_event_type, \"-\", xdm.alert.severity, \"-\", xdm.event.operation_sub_type),\ndevice_ip = cisco_wlc_raw._final_reporting_device_ip,\nserver_name = arrayindex(regextract(cisco_wlc_raw._raw_log, \"\\<\\d+\\>([^\\:]+)\"), 0),\nmac_address = arrayindex(regextract(cisco_wlc_raw._raw_log, \"for\\s+client\\s([^\\s]+)\"), 0),\nxdm.source.user.username = if(xdm.source.user.username = null, arrayindex(regextract(cisco_wlc_raw._raw_log, \"user\\saccount\\s\\(([^\\)]+)\"), 0), xdm.source.user.username)\n| alter mac_address = coalesce(mac_address, if(xdm.source.host.mac_addresses = null, null, to_string(xdm.source.host.mac_addresses)))\n| filter msg_id in (\"DOT1X-3-EAPOL_MSG_ATTACK\")\n| fields msg_id, xdm.event.original_event_type, xdm.alert.severity,\nxdm.event.operation_sub_type, xdm.event.description,\nxdm.event.log_level, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.source.ipv4, xdm.source.ipv6, xdm.source.port,\nmac_address, xdm.source.process.name, xdm.source.user.username,\nxdm.source.agent.identifier, xdm.source.agent.type,\nxdm.target.ipv4, xdm.target.ipv6, xdm.target.port,\nxdm.target.host.ipv4_addresses, xdm.target.host.ipv6_addresses,\nxdm.target.interface, xdm.target.agent.identifier,\nxdm.target.host.hostname, xdm.target.host.mac_addresses,\nxdm.target.resource.type, xdm.target.resource_before.value,\nxdm.target.resource.value, xdm.session_context_id,\nxdm.alert.description, xdm.network.rule, xdm.network.ip_protocol,\nxdm.network.tls.cipher, cisco_wlc_raw._raw_log, device_ip,\nserver_name, _time, _insert_time, _product, _vendor\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see processes that are potentially suspicious because they were spawned by WinRM and use common tools for malicious activity.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\wsmprovhost\\.exe\" and (action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wsl\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\whoami\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find events where a computer account password was reset using PowerShell.", "response": "preset = xdr_event_log\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter ContextInfo contains \"Reset-ComputerMachinePassword\"\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious network connections using the Telegram API that aren't coming from a web browser.", "response": "#N/A"}
{"prompt": "I want to see all events from my Cisco ASA that indicate someone connected to the VPN on their Android or iPhone device, excluding any events from Ramaradhya.G.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_asa_raw\n| filter xdm.event.original_event_type in (\"722055\") and (xdm.source.user_agent contains \"Android\" or xdm.source.user_agent contains \"iPhone\")\n| filter xdm.source.user.username not in (\"Ramaradhya.G\", \"Ramaradhya.G@concentrix.com\")"}
{"prompt": "I want to see all failed logon attempts for my MSSQL Server.", "response": "preset = xdr_event_log\n| filter (provider_name = \"MSSQLSERVER\" and action_evtlog_event_id = 18456)\n\n\n\n"}
{"prompt": "I want to see alerts for potential process manipulation attempts using rundll32 and commands related to ShimCache flushing.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"rundll32\" and action_process_image_command_line contains \"apphelp.dll\") and (action_process_image_command_line contains \"ShimFlushCache\" or action_process_image_command_line contains \"#250\")) or ((action_process_image_command_line contains \"rundll32\" and action_process_image_command_line contains \"kernel32.dll\") and (action_process_image_command_line contains \"BaseFlushAppcompatCache\" or action_process_image_command_line contains \"#46\"))\n\n\n\n"}
{"prompt": "I want to find all VPN login failures from countries not listed as business locations.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw, cisco_asa_raw)\n| alter Source_IP_Address = if(_product = \"Fortigate\", xdm.target.ipv4, if(_product = \"ASA\", xdm.source.ipv4)),\nSource_Location_Country = if(_product = \"Fortigate\", xdm.target.location.country, if(_product = \"ASA\", xdm.source.location.country)),\nSource_UserName = if(_product = \"Fortigate\", xdm.target.user.username, if(_product = \"ASA\", xdm.source.user.username)),\nProduct_BVM_Hostname = if(_product = \"Fortigate\", fortinet_fortigate_raw._broker_device_name, if(_product = \"ASA\", cisco_asa_raw._broker_device_name)),\nProduct_BVM_IPAddress = if(_product = \"Fortigate\", fortinet_fortigate_raw._broker_ip_address, if(_product = \"ASA\", cisco_asa_raw._broker_ip_address)),\nProduct_Reporting_DeviceIP = if(_product = \"Fortigate\", fortinet_fortigate_raw._final_reporting_device_ip, if(_product = \"ASA\", cisco_asa_raw._final_reporting_device_ip))\n| iploc Source_IP_Address loc_country as Src_Country\n| alter Source_Location_Country = if(Source_Location_Country in (\"\"\"\"\"\", NULL, null), Src_Country)\n| filter xdm.event.original_event_type in (\"113005\", \"0101039426\") and (Source_IP_Address != \"<ip>\") and Source_Location_Country not in (NULL, null, \"\"\"\"\"\") and Source_UserName !~= \"\\*\"\n| filter Source_Location_Country not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\")\n| fields Source_UserName, xdm.event.original_event_type,\nxdm.event.description, Source_IP_Address, Source_Location_Country,\nxdm.alert.subcategory, xdm.event.outcome_reason,\n_vendor, _product, Product_BVM_Hostname, Product_BVM_IPAddress,\nProduct_Reporting_DeviceIP"}
{"prompt": "I want to see alerts for multiple account lockouts of the same user within an hour.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4740\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, host_name, TYPE\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious Python path configuration files (.pth) created in library folders on macOS systems.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"(?i)\\/lib\\/python3\\.([5-9]|[0-9]{2})\\/site\\-packages\\/\" and xdm.target.file.filename ~= \".*\\.pth\")\n\n\n\n"}
{"prompt": "I want to detect potentially malicious PowerShell scripts based on their names and contents.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*\\\\Add\\-ConstrainedDelegationBackdoor\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Add\\-Exfiltration\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Add\\-Persistence\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Add\\-RegBackdoor\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Add\\-RemoteRegBackdoor\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Add\\-ScrnSaveBackdoor\\.ps1\" or xdm.target.file.filename ~= \".*\\\\ADRecon\\.ps1\" or xdm.target.file.filename ~= \".*\\\\AzureADRecon\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Check\\-VM\\.ps1\" or xdm.target.file.filename ~= \".*\\\\ConvertTo\\-ROT13\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Copy\\-VSS\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Create\\-MultipleSessions\\.ps1\" or xdm.target.file.filename ~= \".*\\\\DNS\\_TXT\\_Pwnage\\.ps1\" or xdm.target.file.filename ~= \".*\\\\dnscat2\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Do\\-Exfiltration\\.ps1\" or xdm.target.file.filename ~= \".*\\\\DomainPasswordSpray\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Download\\_Execute\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Download\\-Execute\\-PS\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Enable\\-DuplicateToken\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Enabled\\-DuplicateToken\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Execute\\-Command\\-MSSQL\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Execute\\-DNSTXT\\-Code\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Execute\\-OnTime\\.ps1\" or xdm.target.file.filename ~= \".*\\\\ExetoText\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Exploit\\-Jboss\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Find\\-AVSignature\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Find\\-Fruit\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Find\\-GPOLocation\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Find\\-TrustedDocuments\\.ps1\" or xdm.target.file.filename ~= \".*\\\\FireBuster\\.ps1\" or xdm.target.file.filename ~= \".*\\\\FireListener\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-ApplicationHost\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-ChromeDump\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-ClipboardContents\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-ComputerDetail\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-FoxDump\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-GPPAutologon\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-GPPPassword\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-IndexedItem\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-Keystrokes\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-LSASecret\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-MicrophoneAudio\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-PassHashes\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-PassHints\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-RegAlwaysInstallElevated\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-RegAutoLogon\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-RickAstley\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-Screenshot\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-SecurityPackages\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-ServiceFilePermission\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-ServicePermission\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-ServiceUnquoted\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-SiteListPassword\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-System\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-TimedScreenshot\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-UnattendedInstallFile\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-Unconstrained\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-USBKeystrokes\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-VaultCredential\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-VulnAutoRun\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-VulnSchTask\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-WebConfig\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-WebCredentials\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Get\\-WLAN\\-Keys\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Gupt\\-Backdoor\\.ps1\" or xdm.target.file.filename ~= \".*\\\\HTTP\\-Backdoor\\.ps1\" or xdm.target.file.filename ~= \".*\\\\HTTP\\-Login\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Install\\-ServiceBinary\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Install\\-SSP\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-ACLScanner\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-ADSBackdoor\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-AmsiBypass\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-ARPScan\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-BackdoorLNK\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-BadPotato\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-BetterSafetyKatz\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-BruteForce\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-BypassUAC\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Carbuncle\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Certify\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-ConPtyShell\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-CredentialInjection\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-CredentialsPhish\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-DAFT\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-DCSync\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Decode\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-DinvokeKatz\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-DllInjection\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-DNSUpdate\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-DowngradeAccount\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-EgressCheck\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Encode\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-EventViewer\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Eyewitness\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-FakeLogonScreen\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Farmer\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Get\\-RBCD\\-Threaded\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Gopher\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Grouper2\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Grouper3\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-HandleKatz\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Interceptor\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Internalmonologue\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Inveigh\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-InveighRelay\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-JSRatRegsvr\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-JSRatRundll\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-KrbRelay\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-KrbRelayUp\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-LdapSignCheck\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Lockless\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-MalSCCM\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Mimikatz\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-MimikatzWDigestDowngrade\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Mimikittenz\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-MITM6\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-NanoDump\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-NetRipper\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-NetworkRelay\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-NinjaCopy\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-OxidResolver\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-P0wnedshell\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-P0wnedshellx86\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Paranoia\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PortScan\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PoshRatHttp\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PoshRatHttps\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PostExfil\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PowerDump\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PowerShellIcmp\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PowerShellTCP\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PowerShellTcpOneLine\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PowerShellTcpOneLineBind\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PowerShellUdp\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PowerShellUdpOneLine\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PowerShellWMI\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PowerThIEf\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PPLDump\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Prasadhak\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PsExec\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PsGcat\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PsGcatAgent\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PSInject\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-PsUaCme\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-ReflectivePEInjection\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-ReverseDNSLookup\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Rubeus\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-RunAs\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-SafetyKatz\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-SauronEye\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-SCShell\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Seatbelt\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-ServiceAbuse\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-SessionGopher\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-ShellCode\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-SMBScanner\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Snaffler\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Spoolsample\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-SSHCommand\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-SSIDExfil\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-StandIn\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-StickyNotesExtract\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Tater\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Thunderfox\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-ThunderStruck\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-TokenManipulation\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Tokenvator\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-TotalExec\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-UrbanBishop\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-UserHunter\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-VoiceTroll\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Whisker\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-WinEnum\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-winPEAS\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-WireTap\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-WmiCommand\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-WScriptBypassUAC\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Invoke\\-Zerologon\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Keylogger\\.ps1\" or xdm.target.file.filename ~= \".*\\\\MailRaider\\.ps1\" or xdm.target.file.filename ~= \".*\\\\New\\-HoneyHash\\.ps1\" or xdm.target.file.filename ~= \".*\\\\OfficeMemScraper\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Offline\\_Winpwn\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-CHM\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-DnsTxt\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-Excel\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-HTA\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-Java\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-JS\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-Minidump\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-RundllCommand\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-SCF\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-SCT\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-Shortcut\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-WebQuery\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Out\\-Word\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Parse\\_Keys\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Port\\-Scan\\.ps1\" or xdm.target.file.filename ~= \".*\\\\PowerBreach\\.ps1\" or xdm.target.file.filename ~= \".*\\\\powercat\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Powermad\\.ps1\" or xdm.target.file.filename ~= \".*\\\\PowerRunAsSystem\\.psm1\" or xdm.target.file.filename ~= \".*\\\\PowerSharpPack\\.ps1\" or xdm.target.file.filename ~= \".*\\\\PowerUp\\.ps1\" or xdm.target.file.filename ~= \".*\\\\PowerUpSQL\\.ps1\" or xdm.target.file.filename ~= \".*\\\\PowerView\\.ps1\" or xdm.target.file.filename ~= \".*\\\\PSAsyncShell\\.ps1\" or xdm.target.file.filename ~= \".*\\\\RemoteHashRetrieval\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Remove\\-Persistence\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Remove\\-PoshRat\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Remove\\-Update\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Run\\-EXEonRemote\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Schtasks\\-Backdoor\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Set\\-DCShadowPermissions\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Set\\-MacAttribute\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Set\\-RemotePSRemoting\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Set\\-RemoteWMI\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Set\\-Wallpaper\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Show\\-TargetScreen\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Speak\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Start\\-CaptureServer\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Start\\-WebcamRecorder\\.ps1\" or xdm.target.file.filename ~= \".*\\\\StringToBase64\\.ps1\" or xdm.target.file.filename ~= \".*\\\\TexttoExe\\.ps1\" or xdm.target.file.filename ~= \".*\\\\VolumeShadowCopyTools\\.ps1\" or xdm.target.file.filename ~= \".*\\\\WinPwn\\.ps1\" or xdm.target.file.filename ~= \".*\\\\WSUSpendu\\.ps1\") or (xdm.target.file.filename contains \"Invoke-Sharp\" and xdm.target.file.filename ~= \".*\\.ps1\"))\n\n\n\n"}
{"prompt": "I want to detect instances of ScreenConnect installation being executed using specific command-line parameters.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"e=Access&\" and action_process_image_command_line contains \"y=Guest&\" and action_process_image_command_line contains \"&p=\" and action_process_image_command_line contains \"&c=\" and action_process_image_command_line contains \"&k=\")\n\n\n\n"}
{"prompt": "I want to see potential access token abuse events, specifically those with LogonType = 9, LogonProcessName = \"Advapi\", AuthenticationPackageName = \"Negotiate\", and ImpersonationLevel = \"%%1833\".", "response": "preset = xdr_event_log\n| alter LogonType = regextract(to_json_string(action_evtlog_data_fields)->LogonType{}, \"\\\"(.*)\\\"\")\n| alter LogonProcessName = regextract(to_json_string(action_evtlog_data_fields)->LogonProcessName{}, \"\\\"(.*)\\\"\")\n| alter AuthenticationPackageName = regextract(to_json_string(action_evtlog_data_fields)->AuthenticationPackageName{}, \"\\\"(.*)\\\"\")\n| alter ImpersonationLevel = regextract(to_json_string(action_evtlog_data_fields)->ImpersonationLevel{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4624 and LogonType = 9 and LogonProcessName = \"Advapi\" and AuthenticationPackageName = \"Negotiate\" and ImpersonationLevel = \"%%1833\")\n\n\n\n"}
{"prompt": "I want to see events related to suspicious activity around the Windows Credential Editor Registry service.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"Services\\\\WCESERVICE\\\\Start\"\n\n\n\n"}
{"prompt": "I want to find instances where the \"forfiles\" tool is used with the \"/c\" flag, as this could indicate malicious activity.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\forfiles\\.exe\" or actor_process_file_original_name = \"forfiles.exe\") and action_process_image_command_line contains \" -c \")\n\n\n\n"}
{"prompt": "I want to find instances where application access is provisioned without proper approvals, identifying the users involved (both the delegatee and the delegator) along with their respective companies.", "response": "config case_sensitive = false\n| dataset IN (cams_Camssiem_audit_raw, cams_Camssiem_raw)\n| filter txtFileName = NULL and txtAHDrequestID = NULL and txtRemarks = NULL\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_dst, company_name as companyname1\n) as JT1 JT1.companyname1 = trim(EmpNo)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_src, company_name as companyname2\n) as JT2 JT2.companyname2 = trim(Access_Provided_By)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as fullname, company_name as companyname3\n) as JT3 JT3.companyname3 = trim(txtDelegatedEmpNo)\n| alter aggregation_criteria = \"ileventuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all instances where Rundll32.exe was renamed before execution on endpoints.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"RUNDLL32.EXE\" and  not (action_process_image_path ~= \".*\\\\rundll32\\.exe\")\n\n\n\n"}
{"prompt": "I want to see downloads happening today that are significantly higher than the average download volume over the past 7 days, filtering for PowerShell activity and email addresses.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_agent ~= \"powershell\" and user_dst contains \"@\"\n| comp sum(bytes_src) as current_day_download,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and user_agent ~= \"powershell\"\n| comp sum(bytes_src) as 7_days_download,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url by day,\nuser_dst\n| comp avg(7_days_download) as 7_days_download_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_download_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_download > multiply(7_days_download_avg, 1.35)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find events where a new BITS job is created using PowerShell.", "response": "datamodel\n| filter (xdm.event.id = 3 and (xdm.target.process.executable.path ~= \".*\\\\powershell\\.exe\" or xdm.target.process.executable.path ~= \".*\\\\pwsh\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find malicious activity that uses MSHTA to obfuscate code execution.", "response": "datamodel\n| filter (xdm.target.process.executable.path contains \"set\" and xdm.target.process.executable.path contains \"&&\" and xdm.target.process.executable.path contains \"mshta\" and xdm.target.process.executable.path contains \"vbscript:createobject\" and xdm.target.process.executable.path contains \".run\" and xdm.target.process.executable.path contains \"(window.close)\")\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is used to enumerate AD Groups or Users, including commands like 'get-ADPrincipalGroupMembership' and 'get-aduser' with specific flags.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter ((Payload contains \"get-ADPrincipalGroupMembership\" or ContextInfo contains \"get-ADPrincipalGroupMembership\") or ((Payload contains \"get-aduser\" and Payload contains \"-f \" and Payload contains \"-pr \" and Payload contains \"DoesNotRequirePreAuth\") or (ContextInfo contains \"get-aduser\" and ContextInfo contains \"-f \" and ContextInfo contains \"-pr \" and ContextInfo contains \"DoesNotRequirePreAuth\")))\n\n\n\n"}
{"prompt": "I want to detect potential Winnti dropper activity based on specific file names like \"gthread-3.6.dll\", \"sigcmm-2.4.dll\", and \"tmp.bat\" in Windows files.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\gthread\\-3\\.6\\.dll\" or xdm.target.file.filename ~= \".*\\\\sigcmm\\-2\\.4\\.dll\" or xdm.target.file.filename ~= \".*\\\\Windows\\\\Temp\\\\tmp\\.bat\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to OneDriveStandaloneUpdater.exe setting a custom download URL.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\OneDrive\\\\UpdateOfficeConfig\\\\UpdateRingSettingURLFromOC\"\n\n\n\n"}
{"prompt": "I want to see all files related to the Inveigh execution, including log files, NTLM information, and executable files like .dll, .exe, and .ps1.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\Inveigh\\-Log\\.txt\" or xdm.target.file.filename ~= \".*\\\\Inveigh\\-Cleartext\\.txt\" or xdm.target.file.filename ~= \".*\\\\Inveigh\\-NTLMv1Users\\.txt\" or xdm.target.file.filename ~= \".*\\\\Inveigh\\-NTLMv2Users\\.txt\" or xdm.target.file.filename ~= \".*\\\\Inveigh\\-NTLMv1\\.txt\" or xdm.target.file.filename ~= \".*\\\\Inveigh\\-NTLMv2\\.txt\" or xdm.target.file.filename ~= \".*\\\\Inveigh\\-FormInput\\.txt\" or xdm.target.file.filename ~= \".*\\\\Inveigh\\.dll\" or xdm.target.file.filename ~= \".*\\\\Inveigh\\.exe\" or xdm.target.file.filename ~= \".*\\\\Inveigh\\.ps1\" or xdm.target.file.filename ~= \".*\\\\Inveigh\\-Relay\\.ps1\")\n\n\n\n"}
{"prompt": "I want to see all instances where an application emission profile was interrupted, pulled from Swift sources.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"Emission Profile Interrupted\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all instances where a process named \"wmic.exe\" is used to start or stop a Windows service.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"wmic.exe\" or action_process_image_path ~= \".*\\\\WMIC\\.exe\") and ((action_process_image_command_line contains \" service \" and action_process_image_command_line contains \" call \") and (action_process_image_command_line contains \"stopservice\" or action_process_image_command_line contains \"startservice\")))\n\n\n\n"}
{"prompt": " I want to detect suspicious modifications to service DACLs using the Set-Service cmdlet in PowerShell. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"-SecurityDescriptorSddl \" or ScriptBlockText contains \"-sd \") and ((ScriptBlockText contains \"Set-Service \" and ScriptBlockText contains \"D;;\") and (ScriptBlockText contains \";;;IU\" or ScriptBlockText contains \";;;SU\" or ScriptBlockText contains \";;;BA\" or ScriptBlockText contains \";;;SY\" or ScriptBlockText contains \";;;WD\")))\n\n\n\n"}
{"prompt": "I want to find instances where ETW logging is disabled in .NET processes based on Sysmon registry data.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\\\.NETFramework\\\\ETWEnabled\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\")) or ((action_registry_key_name ~= \".*\\\\COMPlus\\_ETWEnabled\" or action_registry_key_name ~= \".*\\\\COMPlus\\_ETWFlags\") and (action_registry_value_name in (0, \"DWORD (0x00000000)\") or action_registry_data in (0, \"DWORD (0x00000000)\"))))\n\n\n\n"}
{"prompt": "I want to find processes that are potentially malicious by registering DLLs using odbcconf.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\odbcconf\\.exe\" or actor_process_file_original_name = \"odbcconf.exe\") and action_process_image_command_line contains \"REGSVR \") and  not (action_process_image_command_line contains \".dll\")\n\n\n\n"}
{"prompt": "I want to see alerts for potential SQL injection attacks targeting my IIS web servers.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| join type = left\n(dataset = device_group_static_list\n| filter TYPE ~= \"microsoft iis\"\n| fields IP\n) as device_group device_group.IP = xdm.target.ipv4\n| filter IP != null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.target.url ~= \"password=\" or xdm.target.url ~= \"\\'1\\' = \\'1\\'\" or xdm.target.url ~= \"\\+AND\\+\" or xdm.target.url ~= \"\\+SELECT\\+IF\\+\" or xdm.target.url ~= \"\\+UNION\\+ALL\\+SELECT\" or xdm.target.url ~= \"\\+select\\+\" or xdm.target.url ~= \"/\\*&password=\"\n| filter xdm.target.ipv4 not in (\"<ip>\") and xdm.source.ipv4 not in (\"<ip>\")\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where RURAT is executed from a location other than its usual installation directory on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rutserv\\.exe\" or action_process_image_path ~= \".*\\\\rfusclient\\.exe\") or action_process_signature_product = \"Remote Utilities\") and  not ((action_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Remote\\ Utilities.*\" or action_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Remote\\ Utilities.*\"))\n\n\n\n"}
{"prompt": " I want to see potential PetitPotam coerced authentication attempts on my endpoints. ", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName ~= \"\\\\\\\\.*\" and ShareName ~= \".*\\\\IPC\\$\" and RelativeTargetName = \"lsarpc\" and SubjectUserName = \"ANONYMOUS LOGON\")\n\n\n\n"}
{"prompt": "I want to detect any new Exchange servers added or existing ones removed from the Infosys network by analyzing Windows Event Logs.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| Filter xdm.target.user.groups = \"exchange servers\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see information about potential BitLocker key retrievals from Microsoft Azure.", "response": "dataset = msft_azure_raw\n| alter properties_category = json_extract_scalar(properties , \"$.category\")\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter (properties.category = \"KeyManagement\" and properties.operationName = \"Read BitLocker key\")\n\n\n\n"}
{"prompt": "I want to see events related to CVE-2021-31979 and CVE-2021-33771 exploits by Sourgum.", "response": "datamodel\n| filter (xdm.target.file.filename contains \"C:\\\\Windows\\\\system32\\\\physmem.sys\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\System32\\\\IME\\\\IMEJP\\\\imjpueact.dll\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\system32\\\\ime\\\\IMETC\\\\IMTCPROT.DLL\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\system32\\\\ime\\\\SHARED\\\\imecpmeid.dll\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\system32\\\\config\\\\spp\\\\ServiceState\\\\Recovery\\\\pac.dat\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\system32\\\\config\\\\cy-GB\\\\Setup\\\\SKB\\\\InputMethod\\\\TupTask.dat\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\system32\\\\config\\\\config\\\\startwus.dat\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\system32\\\\ime\\\\SHARED\\\\WimBootConfigurations.ini\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\system32\\\\ime\\\\IMEJP\\\\WimBootConfigurations.ini\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\system32\\\\ime\\\\IMETC\\\\WimBootConfigurations.ini\")\n\n\n\n"}
{"prompt": "I want to find users who create and delete their accounts within an hour of each other.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id in (\"4720\", \"4726\") and xdm.source.user.username != null and xdm.target.user.username != null\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| sort asc _time\n\n| alter pattern = if(xdm.event.id = \"4720\", \"E1\", \"E2\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, pattern\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by xdm.target.user.username\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n\n\n| filter pattern_events contains \"E1,E2\"\n\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see all events where a DNS client queried a MEGA hosting website like \"userstorage.mega.co.nz\".", "response": "datamodel\n| filter (xdm.event.id = 3008 and xdm.network.dns.dns_question.name contains \"userstorage.mega.co.nz\")\n\n\n\n"}
{"prompt": "I want to see alerts about when Okta application sign-on policies are modified or deleted.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type in (\"application.policy.sign_on.update\", \"application.policy.sign_on.rule.delete\")\n\n\n\n"}
{"prompt": "{I want to find instances of the Citrix Netscaler Attack CVE-2019-19781 exploit based on specific URLs.} \n\n\nLet me know if you need help with any other prompts!", "response": "datamodel\n| filter ((xdm.network.http.url contains \"/../vpns/\" or xdm.network.http.url ~= \".*\\/vpns\\/cfg\\/smb\\.conf\") or (xdm.network.http.url contains \"/vpns/portal/scripts/\" and xdm.network.http.url contains \".pl\"))\n\n\n\n"}
{"prompt": "I want to see events where Microsoft Malware Protection Engine (MsMpEng.exe and mpengine.dll) crashed and triggered a Windows Error Reporting (WER) event.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Windows Error Reporting\" and action_evtlog_event_id = 1001 and (Data contains \"MsMpEng.exe\" and Data contains \"mpengine.dll\"))\n\n\n\n"}
{"prompt": "I want to find instances where csi.exe is used in conjunction with PowerShell or PowerShell ISE.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\csi\\.exe\" and (actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\") and actor_process_file_original_name = \"csi.exe\")\n\n\n\n"}
{"prompt": "I want to find instances of Visual Studio Code Tunnel Execution based on process creation events from endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"None\" and action_process_image_command_line ~= \".*\\.exe\\ tunnel\") or (action_process_image_command_line contains \".exe tunnel\" and action_process_image_command_line contains \"--name \" and action_process_image_command_line contains \"--accept-server-license-terms\") or (actor_process_image_command_line ~= \".*\\ tunnel\" and action_process_image_path ~= \".*\\\\cmd\\.exe\" and (action_process_image_command_line contains \"/d /c \" and action_process_image_command_line contains \"\\\\servers\\\\Stable-\" and action_process_image_command_line contains \"code-server.cmd\")))\n\n\n\n"}
{"prompt": "I want to find security events that show PowerShell scripts deleting volume shadow copies using WMI.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Get-WmiObject\" and ScriptBlockText contains \"Win32_ShadowCopy\" and ScriptBlockText contains \".Delete()\")\n\n\n\n"}
{"prompt": "I want to detect potential malicious file downloads using ConfigSecurityPolicy.EXE that might be exploiting its capabilities for transferring files over HTTP/HTTPS or FTP.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"ConfigSecurityPolicy.exe\" or action_process_image_path ~= \".*\\\\ConfigSecurityPolicy\\.exe\" or actor_process_file_original_name = \"ConfigSecurityPolicy.exe\") and (action_process_image_command_line contains \"ftp:\n\n\n\n"}
{"prompt": "I want to find instances where Microsoft Word or related Office applications load suspicious Windows Management Instrumentation DLL files.", "response": "preset = xdr_image_load\n| filter ((actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\") and (action_module_path ~= \".*\\\\wmiutils\\.dll\" or action_module_path ~= \".*\\\\wbemcomn\\.dll\" or action_module_path ~= \".*\\\\wbemprox\\.dll\" or action_module_path ~= \".*\\\\wbemdisp\\.dll\"))\n\n\n\n"}
{"prompt": "I want to see ZScaler events with no assigned category that also have corresponding Symantec HIPS alerts for users.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Security\") and xdm.alert.name ~= \"^audit|^web attack|^malicious Site|^system infected|^os attack|^attack\"\n| alter server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer\\: ([^\\,]+)\"), 0)\n| alter category = xdm.alert.name,\nusername = xdm.source.user.username\n| alter event_desc = xdm.alert.description,\nevent_type = xdm.event.description,\ntarget_url = xdm.target.url,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nhostname = coalesce(xdm.target.host.hostname, xdm.source.host.hostname)\n| comp earliest(_time) as FirstAVEventTime,\nlatest(_time) as LatestAVEventTime,\nvalues(server_name) as server_name,\nvalues(category) as alert_category,\nvalues(event_desc) as event_desc,\nvalues(event_type) as event_type,\nvalues(src_ip) as src_ip,\nvalues(dst_ip) as dst_ip,\nvalues(target_url) as target_url by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nhostname\n| join type = left\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category in (\"*Miscellaneous or Unknown*\", \"*Non Categorizable*\") and user_dst contains \"@\"\n| alter user_dst = arrayindex(split(user_dst, \"@\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst,\nMachinename\n) as zsevents(zsevents.Machinename = hostname or zsevents.user_dst = xdm.source.user.sam_account_name)\n| filter (user_dst != null or Machinename != null)"}
{"prompt": "I want to see details about password changes in CyberArk, specifically focusing on events with reference IDs 24 and 57, excluding those related to expiration periods and those initiated by the \"skyboxlb\" user.", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_src = xdm.target.user.username,\nuser_dst = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = xdm.target.resource.type,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station != \"<ip>\" and device_ip != \"<ip>\"\n| filter reference_id in (24, 57) and reason !~= \"ExpirationPeriod\" and user_src not in (\"skyboxlb\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to find instances where the Net.EXE or net1.exe process is used to mount the Windows Admin Share using a command line that includes \"use\" and \" \\\\\\\\*\\\\*$\". ", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and (action_process_image_command_line contains \" use \" and action_process_image_command_line contains \" \\\\\\\\*\\\\*$\"))\n\n\n\n"}
{"prompt": "I want to see any HTTP URLs that contain suspicious Windows directory paths like C:/Users, C:/Program Files, or C:/Windows.", "response": "datamodel\n| filter (xdm.network.http.url contains \"=C:/Users\" or xdm.network.http.url contains \"=C:/Program%20Files\" or xdm.network.http.url contains \"=C:/Windows\" or xdm.network.http.url contains \"=C%3A%5CUsers\" or xdm.network.http.url contains \"=C%3A%5CProgram%20Files\" or xdm.network.http.url contains \"=C%3A%5CWindows\")\n\n\n\n"}
{"prompt": "I want to detect attempts to execute commands remotely using WMI on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\WMIC\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and (action_process_image_command_line contains \"/node:\" and action_process_image_command_line contains \"process\" and action_process_image_command_line contains \"call\" and action_process_image_command_line contains \"create\"))\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to potential Amazon SSM Agent hijacking on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\amazon\\-ssm\\-agent\\.exe\" and (action_process_image_command_line contains \"-register \" and action_process_image_command_line contains \"-code \" and action_process_image_command_line contains \"-id \" and action_process_image_command_line contains \"-region \"))\n\n\n\n"}
{"prompt": "I want to see all events related to deleted Kubernetes events from Azure.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName = \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/EVENTS.K8S.IO/EVENTS/DELETE\"\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to potential browser credential theft.", "response": "preset = xdr_process\n| filter (((action_process_image_command_line contains \"copy-item\" or action_process_image_command_line contains \"copy \" or action_process_image_command_line contains \"cpi \" or action_process_image_command_line contains \" cp \" or action_process_image_command_line contains \"move \" or action_process_image_command_line contains \"move-item\" or action_process_image_command_line contains \" mi \" or action_process_image_command_line contains \" mv \") or (action_process_image_path ~= \".*\\\\xcopy\\.exe\" or action_process_image_path ~= \".*\\\\robocopy\\.exe\") or actor_process_file_original_name in (\"XCOPY.EXE\", \"robocopy.exe\")) and (action_process_image_command_line contains \"\\\\Amigo\\\\User Data\" or action_process_image_command_line contains \"\\\\BraveSoftware\\\\Brave-Browser\\\\User Data\" or action_process_image_command_line contains \"\\\\CentBrowser\\\\User Data\" or action_process_image_command_line contains \"\\\\Chromium\\\\User Data\" or action_process_image_command_line contains \"\\\\CocCoc\\\\Browser\\\\User Data\" or action_process_image_command_line contains \"\\\\Comodo\\\\Dragon\\\\User Data\" or action_process_image_command_line contains \"\\\\Elements Browser\\\\User Data\" or action_process_image_command_line contains \"\\\\Epic Privacy Browser\\\\User Data\" or action_process_image_command_line contains \"\\\\Google\\\\Chrome Beta\\\\User Data\" or action_process_image_command_line contains \"\\\\Google\\\\Chrome SxS\\\\User Data\" or action_process_image_command_line ~= \".*\\\\Google\\\\Chrome\\\\User\\ Data\\\\.*\" or action_process_image_command_line contains \"\\\\Kometa\\\\User Data\" or action_process_image_command_line contains \"\\\\Maxthon5\\\\Users\" or action_process_image_command_line contains \"\\\\Microsoft\\\\Edge\\\\User Data\" or action_process_image_command_line contains \"\\\\Mozilla\\\\Firefox\\\\Profiles\" or action_process_image_command_line contains \"\\\\Nichrome\\\\User Data\" or action_process_image_command_line ~= \".*\\\\Opera\\ Software\\\\Opera\\ GX\\ Stable\\\\.*\" or action_process_image_command_line contains \"\\\\Opera Software\\\\Opera Neon\\\\User Data\" or action_process_image_command_line ~= \".*\\\\Opera\\ Software\\\\Opera\\ Stable\\\\.*\" or action_process_image_command_line contains \"\\\\Orbitum\\\\User Data\" or action_process_image_command_line contains \"\\\\QIP Surf\\\\User Data\" or action_process_image_command_line contains \"\\\\Sputnik\\\\User Data\" or action_process_image_command_line contains \"\\\\Torch\\\\User Data\" or action_process_image_command_line contains \"\\\\uCozMedia\\\\Uran\\\\User Data\" or action_process_image_command_line contains \"\\\\Vivaldi\\\\User Data\"))\n\n\n\n"}
{"prompt": "I want to find potential memory dumping activity using LiveKD on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\livekd\\.exe\" or action_process_image_path ~= \".*\\\\livekd64\\.exe\") or actor_process_file_original_name = \"livekd.exe\")\n\n\n\n"}
{"prompt": "I want to detect suspicious processes on macOS endpoints that might be trying to access credentials from files by using tools like grep or laZagne.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/grep\" and action_process_image_command_line contains \"password\") or action_process_image_command_line contains \"laZagne\")\n\n\n\n"}
{"prompt": "I want to see alerts for ISO files created in temporary folders, like those under AppData\\Local\\Temp or Microsoft\\Windows\\INetCache\\.Outlook.", "response": "datamodel\n| filter (((xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and xdm.target.file.filename ~= \".*\\.zip\\\\.*\") and xdm.target.file.filename ~= \".*\\.iso\") or (xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\INetCache\\\\Content\\.Outlook\\\\.*\" and xdm.target.file.filename ~= \".*\\.iso\"))\n\n\n\n"}
{"prompt": "I want to see a list of IP addresses that have significantly higher traffic today compared to their average traffic over the past week.  Show me the source and destination IP addresses, as well as the web page URL involved in these high-traffic instances.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and user_agent ~= \"powershell\"\n| comp count() as current_day_traffic,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and user_agent ~= \"powershell\"\n| comp count() as 7_days_traffic,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_traffic) as 7_days_traffic_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_traffic_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_traffic > multiply(7_days_traffic_avg, 1.35)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see all DNS queries that target domains on anonfiles.com.", "response": "datamodel\n| filter xdm.network.dns.dns_question.name contains \".anonfiles.com\"\n\n\n\n"}
{"prompt": "I want to detect malicious PowerShell scripts that create new drives pointing to admin shares.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"New-PSDrive\" and ScriptBlockText contains \"-psprovider \" and ScriptBlockText contains \"filesystem\" and ScriptBlockText contains \"-root \" and ScriptBlockText ~= \".*\\\\\\\\.*\" and ScriptBlockText contains \"$\")\n\n\n\n"}
{"prompt": " I want to find processes spawned by common web servers that might indicate malicious activity. ", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\caddy\\.exe\" or actor_process_image_path ~= \".*\\\\httpd\\.exe\" or actor_process_image_path ~= \".*\\\\nginx\\.exe\" or actor_process_image_path ~= \".*\\\\php\\-cgi\\.exe\" or actor_process_image_path ~= \".*\\\\php\\.exe\" or actor_process_image_path ~= \".*\\\\tomcat\\.exe\" or actor_process_image_path ~= \".*\\\\UMWorkerProcess\\.exe\" or actor_process_image_path ~= \".*\\\\w3wp\\.exe\" or actor_process_image_path ~= \".*\\\\ws\\_TomcatService\\.exe\") or ((actor_process_image_path ~= \".*\\\\java\\.exe\" or actor_process_image_path ~= \".*\\\\javaw\\.exe\") and (actor_process_image_path contains \"-tomcat-\" or actor_process_image_path contains \"\\\\tomcat\")) or ((actor_process_image_path ~= \".*\\\\java\\.exe\" or actor_process_image_path ~= \".*\\\\javaw\\.exe\") and (actor_process_image_command_line contains \"CATALINA_HOME\" or actor_process_image_command_line contains \"catalina.home\" or actor_process_image_command_line contains \"catalina.jar\"))) and (action_process_image_path ~= \".*\\\\arp\\.exe\" or action_process_image_path ~= \".*\\\\at\\.exe\" or action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\dsget\\.exe\" or action_process_image_path ~= \".*\\\\hostname\\.exe\" or action_process_image_path ~= \".*\\\\nbtstat\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\" or action_process_image_path ~= \".*\\\\netdom\\.exe\" or action_process_image_path ~= \".*\\\\netsh\\.exe\" or action_process_image_path ~= \".*\\\\nltest\\.exe\" or action_process_image_path ~= \".*\\\\ntdutil\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\qprocess\\.exe\" or action_process_image_path ~= \".*\\\\query\\.exe\" or action_process_image_path ~= \".*\\\\qwinsta\\.exe\" or action_process_image_path ~= \".*\\\\reg\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\sc\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\wusa\\.exe\") and  not ((actor_process_image_path ~= \".*\\\\java\\.exe\" and action_process_image_command_line ~= \".*Windows\\\\system32\\\\cmd\\.exe\\ \\/c\\ C\\:\\\\ManageEngine\\\\ADManager\\ \\\"Plus\\\\ES\\\\bin\\\\elasticsearch\\.bat\\ \\-Enode\\.name\\=RMP\\-NODE1\\ \\-pelasticsearch\\-pid\\.txt\") or (actor_process_image_path ~= \".*\\\\java\\.exe\" and (action_process_image_command_line contains \"sc query\" and action_process_image_command_line contains \"ADManager Plus\")))\n\n\n\n"}
{"prompt": " I want to detect PowerShell scripts that are likely performing software discovery on Windows endpoints. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"get-itemProperty\" and ScriptBlockText ~= \".*\\\\software\\\\.*\" and ScriptBlockText contains \"select-object\" and ScriptBlockText contains \"format-table\")\n\n\n\n"}
{"prompt": "I want to identify malicious activity by finding multiple threat signatures originating from the same source IP address.", "response": "/*config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"log4j\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name ~= \"qualys\"\n| join type = left(dataset = dmz_ip_address_list) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4| filter ip_address = null\n| join type = left(dataset = iisvascan_ip_address_list| fields ip_address as ip) as iis_scan iis_scan.ip = xdm.source.ipv4| filter ip = null\n| join type = left(dataset = dmz_ip_address_list) as dmz_ips dmz_ips.ip_address = xdm.target.ipv4| filter (xdm.target.is_internal_ip = true or ip_address != null)\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip, policy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level, xdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4, xdm.source.port, xdm.event.description, xdm.alert.description, xdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol, xdm.event.operation, xdm.source.application.name, xdm.source.location.country, xdm.source.asn.as_name, xdm.target.asn.as_name, _time, _insert_time, device_ip, policy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime, values(*) as * by xdm.source.ipv4\n| filter array_length(xdm.event.description) >= 5\n| join conflict_strategy = left type = left(datamodel dataset = check_point_vpn_1_firewall_1_raw| alter origin = check_point_vpn_1_firewall_1_raw.origin\n| filter xdm.observer.action = \"accept\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name ~= \"qualys\"\n| join type = left(dataset = dmz_ip_address_list) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4| filter ip_address = null\n| join type = left(dataset = iisvascan_ip_address_list| fields ip_address as ip) as iis_scan iis_scan.ip = xdm.source.ipv4| filter ip = null\n| join type = left(dataset = dmz_ip_address_list) as dmz_ips dmz_ips.ip_address = xdm.target.ipv4| filter (xdm.target.is_internal_ip = true or ip_address != null)| fields xdm.observer.action, xdm.source.ipv4 as fw_src_ip, xdm.source.port, xdm.event.description, xdm.target.ipv4, xdm.target.is_internal_ip) as fw_events fw_events.fw_src_ip = xdm.source.ipv4\n| filter fw_src_ip != null\n| alter aggregation_criteria = \"ibpmsourceip\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)*/\ndatamodel dataset = microsoft_windows_raw\n| alter device_ip = \"\",\npolicy_name = \"\",\naggregation_criteria = \"\",\nevent_time = \"\",\nduplicate_alert_count = \"\"\n| filter xdm.event.id = \"123\"\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, aggregation_criteria, event_time, duplicate_alert_count,\n_vendor, _product"}
{"prompt": "I want to detect changes made to Log Analytics workspaces in Azure, including creations and deletions.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/WRITE\", \"MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find user accounts that were created and deleted within an hour of each other.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| sort asc _time\n| bin _time span = 1h\n| filter xdm.event.id in (\"4720\", \"4726\") and xdm.source.user.username != null\n| filter xdm.source.user.username NOT IN (\"Vinod_Krishnan04\", \"Thanigaivel_G01\", \"Renju_nettady\", \"sathish_kumarkp\", \"jayagovind\", \"chandrasekhar_m05\", \"bhaskar\", \"Vishwanath_BN\", \"suresh_kumars\", \"shashanka_vemula\", \"Rupesh_Dalvi01\", \"ak_jain\", \"harisha_nk\", \"jsenthil_kumar\", \"SanjeevKumar_Shahi\", \"nataraj_sm\", \"Kushal_Raut\", \"mohit_sharma27\", \"Aravindh_VM\", \"Sakthivel_Muthu\", \"Swaroop_Bopaiah\", \"VikramSingh_Jadon\", \"bharat_pise\", \"ayesh_sanap\", \"pranav_thombre\", \"chandrahas_sharma\", \"prashant_nikam03\", \"mohit_tyagi02\", \"arvind_gidroniya\", \"nandakumar_nk01\", \"girish_pande01\", \"Phillipjay_Estudillo\", \"Alok_Chaudhary\", \"Jaroslaw_Karasinski\", \"jaroslaw_szelag\", \"dawid_piotrowski\", \"T_Ciemnoczulowski\", \"Leos_Koukal\", \"kukol_ivan\", \"juan_lopez\", \"Jason_k\", \"Mark_Lynn\", \"jack_taffar\", \"Mark_Kitchens\", \"carroll_garvin\", \"Simon_Strauss\", \"Winston_Parham\", \"Blue_Chu\", \"Tom_Ge\", \"Allen.Huang01\", \"siju_george\")\n| alter pattern = if(xdm.event.id = \"4720\", \"E1\", \"E2\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, pattern\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by xdm.target.user.username,\n_time\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events contains \"E1,E2\"\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to detect instances of PurpleSharp being executed on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path contains \"\\\\purplesharp\" or actor_process_file_original_name = \"PurpleSharp.exe\") or (action_process_image_command_line contains \"xyz123456.exe\" or action_process_image_command_line contains \"PurpleSharp\"))\n\n\n\n"}
{"prompt": "I want to see events related to malicious Wab execution from locations outside of the standard directories.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\wab\\.exe\" or action_process_image_path ~= \".*\\\\wabmig\\.exe\") and  not ((action_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Windows\\ Mail\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Windows\\ Mail\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances of the Serv-U Exploitation CVE-2021-35211 attack by DEV-0322.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"whoami\" and ((action_process_image_command_line contains \"./Client/Common/\" or action_process_image_command_line ~= \".*\\.\\\\Client\\\\Common\\\\.*\") or action_process_image_command_line contains \"C:\\\\Windows\\\\Temp\\\\Serv-U.bat\")\n\n\n\n"}
{"prompt": "I want to see Windows event log entries for specific event IDs related to privileged admin actions outside of business hours. I need details like usernames, hostnames, timestamps, and any error codes or failure reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"5139\", \"4741\", \"4720\", \"4756\", \"4761\", \"4732\", \"4628\")\n| alter target_username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| join type = left\n(dataset = enterprise_admin_list\n| filter admin_type = \"domain_admin_win_admin\"\n| alter enterprise_username = if(username ~= \"@ad.infosys.com\", rtrim(username, \"@ad.infosys.com\"), if(username ~= \"@infosys.com\", rtrim(username, \"@infosys.com\"), if(username ~= \"itlinfosys\", ltrim(username, \"itlinfosys\\\\\"), username)))\n) as enterprise_admin enterprise_admin.enterprise_username = target_username\n| filter enterprise_username != null\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all instances where SC.EXE is used to execute a query on Windows endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sc\\.exe\" and actor_process_file_original_name = \"sc.exe\") and action_process_image_command_line contains \" query\") and  not (action_process_image_command_line = \"sc query dokan1\")\n\n\n\n"}
{"prompt": "I want to see events related to NPPSpy, including files named \"NPPSpy.txt\" or \"NPPSpy.dll\".", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\NPPSpy\\.txt\" or xdm.target.file.filename ~= \".*\\\\NPPSpy\\.dll\")\n\n\n\n"}
{"prompt": "I want to see all instances where Rar.exe is used to add files to an archive.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\rar\\.exe\" and action_process_image_command_line contains \" a \")\n\n\n\n"}
{"prompt": "I want to detect if someone has tried to disable Cred Guard on my system by modifying the registry.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\IsCredGuardEnabled\"\n\n\n\n"}
{"prompt": "I want to see events related to Windows Defender Firewall being reset to its default configuration.", "response": "datamodel\n| filter xdm.event.id in (2032, 2060)\n\n\n\n"}
{"prompt": "I want to see alerts when a Broker VM disconnects from the XSIAM console.", "response": "config case_sensitive = false\n| dataset = management_auditing\n| filter management_auditing_type contains \"broker\" and subtype contains \"Disconnect\"\n| alter BVM_ID = arrayindex(regextract(description, \"\\(ID:\\s+([A-Za-z0-9]+)\\)\"), 0)\n\n| filter description contains \"XSIAM\"\n| fields timestamp, BVM_ID, management_auditing_type, subtype,\ndescription\n| sort desc timestamp\n| view column order = populated"}
{"prompt": "I want to be notified whenever a user account's password never expires.", "response": "datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4738\") and xdm.event.description contains \"Don't Expire Password\" and xdm.target.user.username in (\"<username>\")\n| alter UserAccountControl = arrayindex(regextract(xdm.event.description, \"\\n\\tUser Account Control\\:\\t\\n\\t\\t(.*?)\\n\\t\"), 0)"}
{"prompt": "I want to see alerts related to the Oracle WebLogic exploit that target keystore files through HTTP requests.", "response": "datamodel\n| filter xdm.network.http.url = \"*/config/keystore/*.js*\"\n\n\n\n"}
{"prompt": "I want to find potentially malicious activity where someone is using PowerShell scripts to enumerate Active Directory information by importing the Microsoft.ActiveDirectory.Management.dll module.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Import-Module \" and ScriptBlockText contains \"Microsoft.ActiveDirectory.Management.dll\") or ScriptBlockText contains \"ipmo Microsoft.ActiveDirectory.Management.dll\")\n\n\n\n"}
{"prompt": "{I want to find potential persistence techniques that leverage DLLPathOverride settings in the Windows registry.} \n\n\nThis prompt captures the essence of the XQL query while using natural language.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\ContentIndex\\\\Language\\\\.*\" and (action_registry_key_name contains \"\\\\StemmerDLLPathOverride\" or action_registry_key_name contains \"\\\\WBDLLPathOverride\" or action_registry_key_name contains \"\\\\StemmerClass\" or action_registry_key_name contains \"\\\\WBreakerClass\"))\n\n\n\n"}
{"prompt": "I want to see alerts when there are 10 or more authentication failures from the same user within 10 minutes on Cisco ACS devices with IPs \"10.67.202.75\" and \"10.81.127.35\".", "response": "config case_sensitive = false\n| datamodel dataset = cisco_acs_raw\n| alter device_ip = cisco_acs_raw._final_reporting_device_ip\n| filter device_ip IN (\"10.67.202.75\", \"10.81.127.35\") AND xdm.event.id IN (\"24401\", \"12308\", \"24495\", \"11013\", \"11012\", \"11007\", \"11050\", \"11309\", \"13017\", \"22056\", \"10001\", \"10002\", \"10003\", \"11036\", \"11037\", \"11038\", \"24493\", \"24444\", \"24421\", \"24415\", \"24408\", \"24463\", \"86009\", \"86010\", \"24428\", \"22040\", \"24429\", \"13031\", \"5400\", \"5401\", \"5415\", \"5431\", \"5437\", \"11003\", \"11039\", \"11040\", \"11052\", \"11054\", \"11514\", \"11813\", \"11815\", \"12006\", \"12108\", \"24406\", \"24407\", \"24409\", \"24410\", \"24411\", \"24412\", \"24413\", \"24414\", \"24418\", \"24423\", \"24427\", \"24485\", \"24486\", \"24487\", \"24489\", \"24490\", \"24491\", \"24492\", \"24522\", \"24613\", \"51000\", \"51005\", \"51006\", \"51007\", \"51008\", \"51020\", \"51021\", \"51022\") AND xdm.source.user.username != NULL AND xdm.source.user.username not in (\"_corpdna\", \"swadmin\") and xdm.source.ipv4 not in (\"127.0.0.1\")\n| alter server_name = arrayindex(regextract(cisco_acs_raw._raw_log, \"\\d+\\:\\d+\\:\\d+\\s([^\\s]+)\"), 0),\nec_activity = \"Logon\",\nec_subject = \"User\",\nevent_type = arrayindex(regextract(cisco_acs_raw._raw_log, \"Type=([^\\\\,]+)\"), 0),\nreference_id = arrayindex(regextract(cisco_acs_raw._raw_log, \"<\\d+>\\w+\\s*\\d+\\s\\d+:\\d+:\\d+\\s[\\S]+\\s\\w+\\s(\\d+)\"), 0)\n| fields xdm.observer.action, server_name, xdm.event.type,\nxdm.target.ipv4, xdm.target.port, xdm.source.user.username,\n_product, _vendor, device_ip, ec_activity, ec_subject,\nevent_type, xdm.intermediate.ipv4, xdm.network.session_id,\nxdm.event.description, xdm.event.id, xdm.network.application_protocol,\nxdm.alert.description, xdm.event.outcome, xdm.source.ipv4,\n_time, xdm.source.host.hostname, xdm.target.host.hostname,\nreference_id\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.source.user.username,\nxdm.source.ipv4,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria1 = \"ildestinationuser\",\naggregation_criteria2 = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to see events where someone tried to connect to my computer through Remote Desktop but was denied because they weren't allowed to log on remotely.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 4825\n\n\n\n"}
{"prompt": "I want to see alerts for when IEExec.exe downloads files from the internet.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\IEExec\\.exe\" or actor_process_file_original_name = \"IEExec.exe\") and (action_process_image_command_line contains \"http:\n\n\n\n"}
{"prompt": " I want to find all failed login attempts to my MSSQL server that came from an external network, excluding any connections from internal IP ranges.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"MSSQLSERVER\" and action_evtlog_event_id = 18456) and  not ((Data contains \"CLIENT: 10.\" or Data contains \"CLIENT: 172.16.\" or Data contains \"CLIENT: 172.17.\" or Data contains \"CLIENT: 172.18.\" or Data contains \"CLIENT: 172.19.\" or Data contains \"CLIENT: 172.20.\" or Data contains \"CLIENT: 172.21.\" or Data contains \"CLIENT: 172.22.\" or Data contains \"CLIENT: 172.23.\" or Data contains \"CLIENT: 172.24.\" or Data contains \"CLIENT: 172.25.\" or Data contains \"CLIENT: 172.26.\" or Data contains \"CLIENT: 172.27.\" or Data contains \"CLIENT: 172.28.\" or Data contains \"CLIENT: 172.29.\" or Data contains \"CLIENT: 172.30.\" or Data contains \"CLIENT: 172.31.\" or Data contains \"CLIENT: 192.168.\" or Data contains \"CLIENT: 127.\" or Data contains \"CLIENT: 169.254.\"))\n\n\n\n"}
{"prompt": "I want to find instances of an application whitelisting bypass technique where attackers load malicious DLLs via odbcconf.exe or rundll32.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\odbcconf\\.exe\" or actor_process_file_original_name = \"odbcconf.exe\") and (action_process_image_command_line contains \"-a\" or action_process_image_command_line contains \"-f\" or action_process_image_command_line contains \"/a\" or action_process_image_command_line contains \"/f\" or action_process_image_command_line contains \"regsvr\")) or (actor_process_image_path ~= \".*\\\\odbcconf\\.exe\" and (action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\"))\n\n\n\n"}
{"prompt": "I want to see all events related to security settings updates on OCSP Responder Service across all devices.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"5124\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name,\ntarget_domain\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where potentially malicious Office documents are executed from trusted locations on endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\explorer\\.exe\" or actor_process_image_path ~= \".*\\\\dopus\\.exe\") and ((action_process_image_path ~= \".*\\\\EXCEL\\.EXE\" or action_process_image_path ~= \".*\\\\POWERPNT\\.EXE\" or action_process_image_path ~= \".*\\\\WINWORD\\.exe\") or actor_process_file_original_name in (\"Excel.exe\", \"POWERPNT.EXE\", \"WinWord.exe\")) and (action_process_image_command_line contains \"\\\\AppData\\\\Roaming\\\\Microsoft\\\\Templates\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\Microsoft\\\\Word\\\\Startup\\\\.*\" or action_process_image_command_line ~= \".*\\\\Microsoft\\ Office\\\\root\\\\Templates\\\\.*\" or action_process_image_command_line ~= \".*\\\\Microsoft\\ Office\\\\Templates\\\\.*\")) and  not ((action_process_image_command_line ~= \".*\\.dotx\" or action_process_image_command_line ~= \".*\\.xltx\" or action_process_image_command_line ~= \".*\\.potx\"))\n\n\n\n"}
{"prompt": "I want to find potential threats where Serv-U is spawning suspicious child processes like cmd.exe, PowerShell, or other tools.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\Serv\\-U\\.exe\" and (action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\msiexec\\.exe\" or action_process_image_path ~= \".*\\\\forfiles\\.exe\" or action_process_image_path ~= \".*\\\\scriptrunner\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect malicious software that is sideloading DLLs from untrusted sources.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\commfunc\\.dll\" and  not ((action_module_path ~= \".*\\\\AppData\\\\local\\\\Google\\\\Chrome\\\\Application\\\\.*\" or (action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Lenovo\\\\Communications\\ Utility\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Lenovo\\\\Communications\\ Utility\\\\.*\")))) or (action_module_path ~= \".*\\\\tosbtkbd\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Toshiba\\\\Bluetooth\\ Toshiba\\ Stack\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Toshiba\\\\Bluetooth\\ Toshiba\\ Stack\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find potential privilege escalation attempts using .exe.local files targeting legitimate Windows executables like comctl32.dll.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\logonUI\\.exe\\.local.*\" or xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\werFault\\.exe\\.local.*\" or xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\consent\\.exe\\.local.*\" or xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\narrator\\.exe\\.local.*\" or xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\wermgr\\.exe\\.local.*\") and xdm.target.file.filename ~= \".*\\\\comctl32\\.dll\")\n\n\n\n"}
{"prompt": "I want to see Cortex XQL queries that detect when someone disables versioning on an AWS S3 bucket.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"s3.amazonaws.com\" and eventName = \"PutBucketVersioning\" and requestParameters contains \"Suspended\")\n\n\n\n"}
{"prompt": "I want to find events where PowerShell is installing software using WMI and the Win32_Product class.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Invoke-CimMethod \" and ScriptBlockText contains \"-ClassName \" and ScriptBlockText contains \"Win32_Product \" and ScriptBlockText contains \"-MethodName \" and ScriptBlockText contains \".msi\")\n\n\n\n"}
{"prompt": "I want to see which users are accessing job search content on our site at a much higher rate than their average traffic over the past week, and who is doing so frequently.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and category ~= \"Job Search/Careers\"\n| comp count() as current_day_access,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and category ~= \"Job Search/Careers\"\n| comp count() as 7_days_traffic,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp count() as 7_days_access_times,\navg(7_days_traffic) as 7_days_traffic_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_traffic_avg, 7_days_access_times,\navg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_access > multiply(7_days_traffic_avg, 2) and 7_days_access_times >= 4\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": " I want to detect when someone deletes a security solution in Azure. ", "response": "dataset = microsoft_windows_raw\n| filter event_id = 1111 /*config case_sensitive = false\n|dataset = msft_azure_raw\n|filter tenantId IN (\"<id>\")\n|filter operationName IN (\"MICROSOFT.SECURITY/SECURITYSOLUTIONS/DELETE\")\n|alter username = json_extract_scalar(identity,\"$.claims.name\"), target_username = json_extract_scalar(properties,\"$.userPrincipalName\"), referenceid = arrayindex(split(resourceId,\"/\"),2), aliashost = arrayindex(split(resourceId,\"/\"),-1), protocol = json_extract_scalar(properties,\"$.eventProperties.protocol\")\n|fields username, target_username, operationName, referenceid, tenantId, resulttype, callerIpAddress, identity, aliashost, protocol, _time\n|alter aggregation_criteria = \"ilsourceuser\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)*/"}
{"prompt": "I want to see alerts about processes attempting to bypass UAC using Winsat path parsing.", "response": "preset = xdr_process\n| filter (action_process_integrity_level in (\"High\", \"System\") and actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\system32\\\\winsat\\.exe\" and actor_process_image_command_line contains \"C:\\\\Windows \\\\system32\\\\winsat.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts for potential homoglyph attacks using lookalike characters in command lines.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\") or (action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"))\n\n\n\n"}
{"prompt": "I want to find instances where Msdt.exe is used to execute a cabinet file.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\msdt\\.exe\" or actor_process_file_original_name = \"msdt.exe\") and action_process_image_command_line contains \" -cab \")\n\n\n\n"}
{"prompt": "I want to detect instances of directory traversal attacks targeting IIS web servers.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| join type = left\n(dataset = device_group_static_list\n| filter TYPE ~= \"microsoft iis\"\n| fields IP\n) as device_group device_group.IP = xdm.target.ipv4\n| filter IP != null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.network.http.url ~= \"/\\.\\.\\./\" or xdm.network.http.url ~= \"\\.\\./\" or xdm.network.http.url ~= \"/\\.\\.\\.\" or xdm.network.http.url ~= \"\\.\\.\\\\%2f/\" or xdm.network.http.url ~= \"\\.\\.\\\\%5c\" or xdm.network.http.url ~= \"\\.\\.\\%255c\" or xdm.network.http.url ~= \"\\%2f\\.\\.\\%2f\" or xdm.network.http.url ~= \"\\%2e\\%2e\\%2f\" or xdm.network.http.url ~= \"\\%2e\\%2e\\%5c\" or xdm.network.http.url ~= \"\\%2e\\%2e\" or xdm.network.http.url ~= \"\\%252e\\%252e\\%255c\" or xdm.target.url ~= \"/c\\+dir\" or xdm.network.http.url ~= \"passwd\" or xdm.network.http.url ~= \"/etc/\"\n| filter xdm.target.ipv4 not in (\"<ip>\") and xdm.source.ipv4 not in (\"<ip>\")\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where Certutil.exe is used to decode files from Base64 or Hex.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_file_original_name = \"CertUtil.exe\") and ((action_process_image_command_line contains \"-decode \" or action_process_image_command_line contains \"/decode \") or (action_process_image_command_line contains \"-decodehex \" or action_process_image_command_line contains \"/decodehex \")))\n\n\n\n"}
{"prompt": "I want to see alerts for Cisco Catalyst switches that have had more than 20 port security violation alerts within a 3 minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 3m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, eth_src, _time, _vendor,\n_product, _insert_time\n| filter msg_id in (\"PORT_SECURITY-SP-2-PSECURE_VIOLATION\", \"PORT_SECURITY-2-PSECURE_VIOLATION\") and xdm.event.description contains \"d478.5606.fa86\"\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\neth_src,\n_time\n| filter matched_events >= 20\n| alter aggregation_criteria = \"macaddress\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 20)), 1)"}
{"prompt": "I want to find potential instances of AD user enumeration from non-machine accounts on my endpoints.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4662 and ObjectType contains \"bf967aba-0de6-11d0-a285-00aa003049e2\" and (AccessMask ~= \".*1.*\" or AccessMask ~= \".*3.*\" or AccessMask ~= \".*4.*\" or AccessMask ~= \".*7.*\" or AccessMask ~= \".*9.*\" or AccessMask ~= \".*B.*\" or AccessMask ~= \".*D.*\" or AccessMask ~= \".*F.*\")) and  not (SubjectUserName ~= \".*\\$\" or SubjectUserName ~= \"MSOL\\_.*\")\n\n\n\n"}
{"prompt": " I want to see login attempts from unusual browsers like TOR and Epic within the last 10 minutes.  ", "response": "dataset = duo_duo_raw\n| filter email != NULL and result in (\"success\") and eventtype in (\"authentication\")\n| alter DuoUserName = json_extract(user, \"$.name\"),\nIPAddress = json_extract(access_device, \"$.ip\"),\nDeviceTrustLevel = json_extract(adaptive_trust_assessments, \"$.remember_me.trust_level\")\n| alter AccDevLocationCN = json_extract(access_device, \"$.location.country\"),\nAccDevLocationST = json_extract(access_device, \"$.location.state\"),\nAccDevLocationCY = json_extract(access_device, \"$.location.city\"),\nAccDevOS = json_extract(access_device, \"$.os\"),\nAccDevOSVer = json_extract(access_device, \"$.os_version\"),\nAccDevBrowser = json_extract(access_device, \"$.browser\")\n| alter AppSrc = json_extract(application, \"$.name\")\n| alter AccDevBrowser = replace(AccDevBrowser, \"\\\"\", \"\")\n| filter IPAddress not contains \"0.0.0.0\" and AccDevLocationCN != NULL\n| filter incidr(IPAddress, \"<ip>\") = False\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false\n| filter AccDevBrowser in (\"TOR\", \"Epic\", \"Brave\", \"SRWare\", \"Comodo\")\n| fields DuoUserName, reason, IPAddress, result, eventtype,\nemail, AccDevLocationCN, event_type, AccDevBrowser,\nAccDevOS, AccDevOSVer, DeviceTrustLevel"}
{"prompt": "{I want to see which RedCarpet users have accessed malicious websites or domains based on Zscaler categorizations.} \n\n\nLet me know if you need help with any other Cortex XQL prompts!", "response": "config case_sensitive = false\n| dataset = zscaler_nssweblog_raw\n| fields suser, dhost, devicehostname, cat, cs3, act\n| alter category = cat\n| filter category !~= \"Zscaler Proxy IPs\" and (category contains \"scam\" or category contains \"potentially unwanted software\" or category contains \"suspicious\" or category contains \"malicious\" or category contains \"spam\" or category contains \"phishing\" or category contains \"peer\" or category contains \"remote\" or category contains \"hacking\" or category contains \"proxy\" or category contains \"illegal\" or category contains \"game\" or category contains \"crypto\" or category contains \"weapon\" or category contains \"marijuana\" or category contains \"pornography\" or category contains \"drug\" or category contains \"spyware\" or category contains \"adware\")\n| join\n(dataset = redcarpet_users_list\n| fields username\n) as redcarpusers redcarpusers.username = suser\n| comp values(category) as category,\nvalues(dhost) as dhost,\nvalues(cs3) as cs3,\nvalues(act) as action,\ncount() as matched_events by devicehostname,\nsuser"}
{"prompt": "I want to find instances where an attacker might be bypassing User Account Control (UAC) using Windows Media Player or  `mmc.exe` to launch `eventvwr.msc`. ", "response": "preset = xdr_process\n| filter ((action_process_image_path = \"C:\\\\Program Files\\\\Windows Media Player\\\\osk.exe\" and action_process_integrity_level in (\"High\", \"System\")) or (action_process_image_path = \"C:\\\\Windows\\\\System32\\\\cmd.exe\" and actor_process_image_command_line = \"\\\"C:\\\\Windows\\\\system32\\\\mmc.exe\\\" \\\"C:\\\\Windows\\\\system32\\\\eventvwr.msc\\\" /s\" and action_process_integrity_level in (\"High\", \"System\")))\n\n\n\n"}
{"prompt": "I want to see a list of AWS console login failures with at least 3 occurrences per username, including details like account ID, event name, type, source and target usernames, region, group ID, error code, user agent, source address, bucket name, and timestamps for the first and last events.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n\n| filter eventtype IN (\"AwsConsoleSignIn\") and eventname IN (\"ConsoleLogin\")\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = json_extract_scalar(requestParameters, \"$.groupId\"),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\nresponse = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| filter response IN (\"Failure\") and target_username NOT IN (\"HIDDEN_DUE_TO_SECURITY_REASONS\")\n| fields account_id, eventname, type, source_username,\ntarget_username, awsRegion, groupid, errorCode,\nuserAgent, srcaddr, username, bucketName, _time,\n_insert_time\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by target_username\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"illogonsessionid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to see if there are any firewall logs that show a Log4j attempt followed by accepted traffic.", "response": "/*config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"log4j\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name ~= \"qualys\"\n| join type = left(dataset = dmz_ip_address_list) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4| filter ip_address = null\n| join type = left(dataset = iisvascan_ip_address_list| fields ip_address as ip) as iis_scan iis_scan.ip = xdm.source.ipv4| filter ip = null\n| join type = left(dataset = dmz_ip_address_list) as dmz_ips dmz_ips.ip_address = xdm.target.ipv4| filter (xdm.target.is_internal_ip = true or ip_address != null)\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip, policy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level, xdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4, xdm.source.port, xdm.event.description, xdm.alert.description, xdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol, xdm.event.operation, xdm.source.application.name, xdm.source.location.country, xdm.source.asn.as_name, xdm.target.asn.as_name, _time, _insert_time, device_ip, policy_name, _vendor, _product\n| join conflict_strategy = left type = left(datamodel dataset = check_point_vpn_1_firewall_1_raw| alter origin = check_point_vpn_1_firewall_1_raw.origin\n| filter xdm.observer.action = \"accept\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name ~= \"qualys\"\n| join type = left(dataset = dmz_ip_address_list) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4| filter ip_address = null\n| join type = left(dataset = iisvascan_ip_address_list| fields ip_address as ip) as iis_scan iis_scan.ip = xdm.source.ipv4| filter ip = null\n| join type = left(dataset = dmz_ip_address_list) as dmz_ips dmz_ips.ip_address = xdm.target.ipv4| filter (xdm.target.is_internal_ip = true or ip_address != null)| fields xdm.observer.action, xdm.source.ipv4 as fw_src_ip, xdm.source.port, xdm.event.description, xdm.target.ipv4, xdm.target.is_internal_ip) as fw_events fw_events.fw_src_ip = xdm.source.ipv4\n| filter fw_src_ip != null\n| alter aggregation_criteria = \"ibpmsourceip\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)*/\ndatamodel dataset = microsoft_windows_raw\n| alter device_ip = \"\",\npolicy_name = \"\",\naggregation_criteria = \"\",\nevent_time = \"\",\nduplicate_alert_count = \"\"\n| filter xdm.event.id = \"123\"\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, aggregation_criteria, event_time, duplicate_alert_count,\n_vendor, _product"}
{"prompt": "I want to find instances where Rclone config files are being created on Windows systems.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\\\.config\\\\rclone\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect suspicious service installations that might use encoded PowerShell commands or unusual paths.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and ((actor_process_image_path contains \"\\\\\\\\.\\\\pipe\" or actor_process_image_path ~= \".*\\\\Users\\\\Public\\\\.*\" or actor_process_image_path ~= \".*\\\\Windows\\\\Temp\\\\.*\") or (actor_process_image_path contains \" -e\" and (actor_process_image_path contains \" aQBlAHgA\" or actor_process_image_path contains \" aWV4I\" or actor_process_image_path contains \" IAB\" or actor_process_image_path contains \" JAB\" or actor_process_image_path contains \" PAA\" or actor_process_image_path contains \" SQBFAFgA\" or actor_process_image_path contains \" SUVYI\"))) and  not (actor_process_image_path ~= \"C\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\Definition\\ Updates\\\\.*\") and  not (actor_process_image_path ~= \"C\\:\\\\WINDOWS\\\\TEMP\\\\thor10\\-remote\\\\thor64\\.exe.*\")\n\n\n\n"}
{"prompt": "I want to find events where the Java utility Keytool spawns suspicious command line shells like cmd.exe, sh.exe, or PowerShell.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\keytool\\.exe\" and (action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\whoami\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\scrcons\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\hh\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\forfiles\\.exe\" or action_process_image_path ~= \".*\\\\scriptrunner\\.exe\" or action_process_image_path ~= \".*\\\\mftrace\\.exe\" or action_process_image_path ~= \".*\\\\AppVLP\\.exe\" or action_process_image_path ~= \".*\\\\systeminfo\\.exe\" or action_process_image_path ~= \".*\\\\reg\\.exe\" or action_process_image_path ~= \".*\\\\query\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect potential malicious kernel memory dumps using LiveKD on endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\livekd\\.exe\" or action_process_image_path ~= \".*\\\\livekd64\\.exe\") or actor_process_file_original_name = \"livekd.exe\") and action_process_image_command_line contains \" -m\")\n\n\n\n"}
{"prompt": "I want to see Windows security event logs that match the Common Criteria Security Audit Analysis requirements (FAU_SAA) and include details like the error code, username, hostname, and logon session ID.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4618\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all events related to users changing their authentication methods on Azure.", "response": "dataset = msft_azure_raw\n| alter properties_loggedByService = json_extract_scalar(properties , \"$.loggedByService\")\n| alter properties_category = json_extract_scalar(properties , \"$.category\")\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter (properties.loggedByService = \"Authentication Methods\" and properties.category = \"UserManagement\" and properties.operationName = \"User registered security info\")\n\n\n\n"}
{"prompt": "I want to find evidence of someone installing a DHCP Callout DLL on a Windows system.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Services\\\\DHCPServer\\\\Parameters\\\\CalloutDlls\" or action_registry_key_name ~= \".*\\\\Services\\\\DHCPServer\\\\Parameters\\\\CalloutEnabled\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential credential dumping attempts that involve creating new network providers through the command line.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*\\\\System\\\\CurrentControlSet\\\\Services\\\\.*\" and action_process_image_command_line contains \"\\\\NetworkProvider\")\n\n\n\n"}
{"prompt": "I want to find out about multiple failed remote login attempts from public IPs on my Unix servers.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"edgeverve_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type in (\"sshd\", \"sudo\", \"su\", \"ssh\") and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol = \"ssh2\" and xdm.source.ipv4 not in (null, \"127.0.0.1\") and xdm.source.is_internal_ip = false and incidr(xdm.source.ipv4, \"169.254.0.0/16\") = false\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address as ip\n) as dmz_ips dmz_ips.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_ips incidr(xdm.source.ipv4, vpn_ips.cidr_range) = true\n| filter cidr_range = null\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, device_ip, _vendor, _product\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by device_ip\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to see events related to the Pubprn.vbs Proxy Execution technique, which involves using \"pubprn.vbs\" and \"script:\" in process command lines on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\pubprn.vbs\" and action_process_image_command_line contains \"script:\")\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts on endpoints that resolve hostnames from files and write the results to another file.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Get-content \" and ScriptBlockText contains \"foreach\" and ScriptBlockText contains \"[System.Net.Dns]::GetHostEntry\" and ScriptBlockText contains \"Out-File\")\n\n\n\n"}
{"prompt": "I want to find suspicious processes on my endpoints that use encoded and obfuscated reflection assembly load function calls. These calls look for specific base64 strings like \"OgA6ACgAIgBM...\"  ", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"OgA6ACgAIgBMACIAKwAiAG8AYQBkACIAKQ\" or action_process_image_command_line contains \"oAOgAoACIATAAiACsAIgBvAGEAZAAiACkA\" or action_process_image_command_line contains \"6ADoAKAAiAEwAIgArACIAbwBhAGQAIgApA\" or action_process_image_command_line contains \"OgA6ACgAIgBMAG8AIgArACIAYQBkACIAKQ\" or action_process_image_command_line contains \"oAOgAoACIATABvACIAKwAiAGEAZAAiACkA\" or action_process_image_command_line contains \"6ADoAKAAiAEwAbwAiACsAIgBhAGQAIgApA\" or action_process_image_command_line contains \"OgA6ACgAIgBMAG8AYQAiACsAIgBkACIAKQ\" or action_process_image_command_line contains \"oAOgAoACIATABvAGEAIgArACIAZAAiACkA\" or action_process_image_command_line contains \"6ADoAKAAiAEwAbwBhACIAKwAiAGQAIgApA\" or action_process_image_command_line contains \"OgA6ACgAJwBMACcAKwAnAG8AYQBkACcAKQ\" or action_process_image_command_line contains \"oAOgAoACcATAAnACsAJwBvAGEAZAAnACkA\" or action_process_image_command_line contains \"6ADoAKAAnAEwAJwArACcAbwBhAGQAJwApA\" or action_process_image_command_line contains \"OgA6ACgAJwBMAG8AJwArACcAYQBkACcAKQ\" or action_process_image_command_line contains \"oAOgAoACcATABvACcAKwAnAGEAZAAnACkA\" or action_process_image_command_line contains \"6ADoAKAAnAEwAbwAnACsAJwBhAGQAJwApA\" or action_process_image_command_line contains \"OgA6ACgAJwBMAG8AYQAnACsAJwBkACcAKQ\" or action_process_image_command_line contains \"oAOgAoACcATABvAGEAJwArACcAZAAnACkA\" or action_process_image_command_line contains \"6ADoAKAAnAEwAbwBhACcAKwAnAGQAJwApA\")\n\n\n\n"}
{"prompt": "I want to detect if an attacker is trying to disable User Account Control (UAC) by checking the registry for changes to \"EnableLUA\".", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\EnableLUA\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to detect if the \"javamtsup\" service has been installed on endpoints, as this could indicate the presence of the CosmicDuke malware.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and ServiceName = \"javamtsup\")\n\n\n\n"}
{"prompt": "I want to see terminated user activity related to O365 applications like AD, SharePoint, Exchange Online and DLP.  Please show me the action taken, the organizational unit, the employee ID, and the product/vendor.", "response": "config case_sensitive = false\n| dataset in (msft_o365_azure_ad_raw, msft_o365_dlp_raw, msft_o365_exchange_online_raw, msft_o365_sharepoint_online_raw)\n| filter UserId != null\n| alter user_name = arrayindex(split(UserId, \"@\"), 0)\n| join type = left\n(dataset = pan_dss_raw\n| fields company_name, sam_account_name, ou\n) as adusers adusers.sam_account_name = user_name\n| filter sam_account_name != null and company_name ~= \"^SEP|^SEPX\"\n| comp values(Operation) as action,\nvalues(to_string(OU)) as org_unit,\nvalues(company_name) as emp_id by user_name,\n_product,\n_vendor"}
{"prompt": "I want to find PowerShell scripts that add new firewall rules allowing traffic using the \"New-NetFirewallRule\" cmdlet.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"New-NetFirewallRule*-Action*Allow\"\n\n\n\n"}
{"prompt": "I want to detect suspicious Git clones on Linux systems that might be used for malicious purposes.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/git\" and action_process_image_command_line contains \" clone \") and (action_process_image_command_line contains \"exploit\" or action_process_image_command_line contains \"Vulns\" or action_process_image_command_line contains \"vulnerability\" or action_process_image_command_line contains \"RCE\" or action_process_image_command_line contains \"RemoteCodeExecution\" or action_process_image_command_line contains \"Invoke-\" or action_process_image_command_line contains \"CVE-\" or action_process_image_command_line contains \"poc-\" or action_process_image_command_line contains \"ProofOfConcept\" or action_process_image_command_line contains \"proxyshell\" or action_process_image_command_line contains \"log4shell\" or action_process_image_command_line contains \"eternalblue\" or action_process_image_command_line contains \"eternal-blue\" or action_process_image_command_line contains \"MS17-\"))\n\n\n\n"}
{"prompt": "I want to detect potential malicious shim installations using sdbinst.exe that have uncommon extensions.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\sdbinst\\.exe\" or actor_process_file_original_name = \"sdbinst.exe\") and  not (action_process_image_command_line contains \".sdb\" or ((action_process_image_command_line ~= \".*\\ \\-c\" or action_process_image_command_line ~= \".*\\ \\-f\" or action_process_image_command_line ~= \".*\\ \\-mm\" or action_process_image_command_line ~= \".*\\ \\-t\") or action_process_image_command_line contains \" -m -bg\") or action_process_image_command_line = \"None\" or action_process_image_command_line = \"\")\n\n\n\n"}
{"prompt": "I want to find potential persistence threats on endpoints that involve manipulating security descriptors through ScriptBlocks, specifically looking for those interacting with Lsa objects.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"win32_Trustee\" and ScriptBlockText contains \"win32_Ace\" and ScriptBlockText contains \".AccessMask\" and ScriptBlockText contains \".AceType\" and ScriptBlockText contains \".SetSecurityDescriptor\") and (ScriptBlockText contains \"\\\\Lsa\\\\JD\" or ScriptBlockText contains \"\\\\Lsa\\\\Skew1\" or ScriptBlockText contains \"\\\\Lsa\\\\Data\" or ScriptBlockText contains \"\\\\Lsa\\\\GBG\"))\n\n\n\n"}
{"prompt": "I want to see events related to attempts to exploit CVE-2020-0688 in Exchange servers.", "response": "datamodel\n| filter (xdm.network.http.url contains \"/ecp/default.aspx\" and xdm.network.http.url contains \"__VIEWSTATEGENERATOR=\" and xdm.network.http.url contains \"__VIEWSTATE=\")\n\n\n\n"}
{"prompt": " I want to see PowerShell scripts that are accessing common Windows API libraries like Advapi32.dll, kernel32.dll, KernelBase.dll, ntdll.dll, secur32.dll, and user32.dll. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Advapi32.dll\" or ScriptBlockText contains \"kernel32.dll\" or ScriptBlockText contains \"KernelBase.dll\" or ScriptBlockText contains \"ntdll.dll\" or ScriptBlockText contains \"secur32.dll\" or ScriptBlockText contains \"user32.dll\")\n\n\n\n"}
{"prompt": "I want to find PowerShell processes that are using Base64 encoded commands for invoking functions.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and action_process_image_command_line contains \" -e\" and (action_process_image_command_line contains \"SQBuAHYAbwBrAGUALQ\" or action_process_image_command_line contains \"kAbgB2AG8AawBlAC0A\" or action_process_image_command_line contains \"JAG4AdgBvAGsAZQAtA\" or action_process_image_command_line contains \"SW52b2tlL\" or action_process_image_command_line contains \"ludm9rZS\" or action_process_image_command_line contains \"JbnZva2Ut\"))\n\n\n\n"}
{"prompt": "I want to detect instances of Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION activity on my endpoints.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName contains \"&&set\" and ServiceFileName contains \"cmd\" and ServiceFileName contains \"/c\" and ServiceFileName contains \"-f\") and (ServiceFileName contains \"{0}\" or ServiceFileName contains \"{1}\" or ServiceFileName contains \"{2}\" or ServiceFileName contains \"{3}\" or ServiceFileName contains \"{4}\" or ServiceFileName contains \"{5}\"))\n\n\n\n"}
{"prompt": "I want to find instances of suspicious activity related to macOS firmware, specifically when commands like \"setpasswd,\" \"full,\" \"delete,\" or \"check\" are used with the \"/usr/sbin/firmwarepasswd\" tool.", "response": "preset = xdr_process\n| filter (action_process_image_path = \"/usr/sbin/firmwarepasswd\" and (action_process_image_command_line contains \"setpasswd\" or action_process_image_command_line contains \"full\" or action_process_image_command_line contains \"delete\" or action_process_image_command_line contains \"check\"))\n\n\n\n"}
{"prompt": "I want to detect if attackers are recovering files from backups using wbadmin.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wbadmin\\.exe\" or actor_process_file_original_name = \"WBADMIN.EXE\") and (action_process_image_command_line contains \" recovery\" and action_process_image_command_line contains \"recoveryTarget\" and action_process_image_command_line contains \"itemtype:File\"))\n\n\n\n"}
{"prompt": "I want to see detections of processes attempting to unmount shares using net.exe or net1.exe.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and (action_process_image_command_line contains \"share\" and action_process_image_command_line contains \"/delete\"))\n\n\n\n"}
{"prompt": "I want to see login attempts from external sources on my SonicWall NS.", "response": "datamodel dataset = sonicwall_ns_raw\n| alter xdm.event.original_event_type = arrayindex(regextract(sonicwall_ns_raw._raw_log, \"m\\=(\\d+)\\s\"), 0),\nxdm.source.user.username = arrayindex(regextract(sonicwall_ns_raw._raw_log, \"usr\\=\\\"([^\\\"]+)\\\"\\s\"), 0),\nxdm.event.operation_sub_type = arrayindex(regextract(sonicwall_ns_raw._raw_log, \"msg\\=\\\"([^\\\"]+)\\\"\\s\"), 0)\n| filter xdm.event.original_event_type in (\"994\") and xdm.source.is_internal_ip = false\n| fields xdm.source.user.username, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.original_event_type, xdm.event.type, xdm.intermediate.asn.as_name,\nxdm.intermediate.asn.as_number, xdm.intermediate.ipv4,\nxdm.intermediate.is_internal_ip, xdm.intermediate.location.city,\nxdm.intermediate.location.continent, xdm.intermediate.location.country,\nxdm.intermediate.location.latitude, xdm.intermediate.location.longitude,\nxdm.intermediate.location.region, xdm.intermediate.location.timezone,\nxdm.network.ip_protocol, xdm.observer.action, xdm.observer.name,\nxdm.observer.product, xdm.observer.vendor, xdm.session_context_id,\nxdm.source.ipv4, xdm.source.is_internal_ip, xdm.target.ipv4,\nxdm.target.is_internal_ip, xdm.target.port"}
{"prompt": "I want to identify suspicious process executions related to AsperaFaspex and potentially malicious activities like credential theft or system compromise.", "response": "preset = xdr_process\n| filter (actor_process_image_path contains \"aspera\" and actor_process_image_path contains \"\\\\ruby\") and (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\") and ((action_process_image_command_line contains \" echo \" or action_process_image_command_line contains \"-dumpmode\" or action_process_image_command_line contains \"-ssh\" or action_process_image_command_line contains \".dmp\" or action_process_image_command_line contains \"add-MpPreference\" or action_process_image_command_line contains \"adscredentials\" or action_process_image_command_line contains \"bitsadmin\" or action_process_image_command_line contains \"certutil\" or action_process_image_command_line contains \"csvhost.exe\" or action_process_image_command_line contains \"DownloadFile\" or action_process_image_command_line contains \"DownloadString\" or action_process_image_command_line contains \"dsquery\" or action_process_image_command_line contains \"ekern.exe\" or action_process_image_command_line contains \"FromBase64String\" or action_process_image_command_line contains \"iex \" or action_process_image_command_line contains \"iex(\" or action_process_image_command_line contains \"Invoke-Expression\" or action_process_image_command_line contains \"Invoke-WebRequest\" or action_process_image_command_line contains \"localgroup administrators\" or action_process_image_command_line contains \"net group\" or action_process_image_command_line contains \"net user\" or action_process_image_command_line contains \"o365accountconfiguration\" or action_process_image_command_line contains \"query session\" or action_process_image_command_line contains \"samaccountname=\" or action_process_image_command_line contains \"set-MpPreference\" or action_process_image_command_line contains \"svhost.exe\" or action_process_image_command_line contains \"System.IO.Compression\" or action_process_image_command_line contains \"System.IO.MemoryStream\" or action_process_image_command_line contains \"usoprivate\" or action_process_image_command_line contains \"usoshared\" or action_process_image_command_line contains \"whoami\") or action_process_image_command_line ~= \"[\\-\\/\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd][Ee^]{1,2}[ncodema^]*\\s[A-Za-z0-9+\\/\\=]{15,}\")) or (action_process_image_command_line contains \"lsass\" and (action_process_image_command_line contains \"procdump\" or action_process_image_command_line contains \"tasklist\" or action_process_image_command_line contains \"findstr\")) or ((action_process_image_path ~= \".*\\\\wget\\.exe\" and action_process_image_command_line contains \"http\") or (action_process_image_path ~= \".*\\\\curl\\.exe\" and action_process_image_command_line contains \"http\") or (action_process_image_command_line contains \"E:jscript\" or action_process_image_command_line contains \"e:vbscript\") or (action_process_image_command_line contains \"localgroup Administrators\" and action_process_image_command_line contains \"/add\") or (action_process_image_command_line contains \"net\" and (action_process_image_command_line contains \"user\" and action_process_image_command_line contains \"/add\")) or ((action_process_image_command_line contains \"reg add\" and action_process_image_command_line contains \"DisableAntiSpyware\" and action_process_image_command_line contains \"\\\\Microsoft\\\\Windows Defender\") or (action_process_image_command_line contains \"reg add\" and action_process_image_command_line contains \"DisableRestrictedAdmin\" and action_process_image_command_line contains \"CurrentControlSet\\\\Control\\\\Lsa\")) or (action_process_image_command_line contains \"wmic\" and action_process_image_command_line contains \"process call create\") or (action_process_image_command_line contains \"wmic\" and action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"shadowcopy\") or (action_process_image_command_line contains \"vssadmin\" and action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"shadows\") or (action_process_image_command_line contains \"wbadmin\" and action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"catalog\")))\n\n\n\n"}
{"prompt": "I want to see all unauthorized password changes on Windows machines detected by the \"Insider Threat CredentialChange Unauthorized\" rule.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4723\") and xdm.source.user.username != xdm.target.user.username and xdm.source.user.username not in (\"ANONYMOUS LOGON\") and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username not in (\"ussftp_ldap\", \"sftp_user\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events related to DPAPI Domain Backup Key Extraction from endpoint logs.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4662 and ObjectType = \"SecretObject\" and AccessMask = \"0x2\" and ObjectName contains \"BCKUPKEY\")\n\n\n\n"}
{"prompt": "I want to find registry events that indicate a NetNTLM downgrade attack.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*SYSTEM\\\\.*\" and action_registry_key_name contains \"ControlSet\" and action_registry_key_name contains \"\\\\Control\\\\Lsa\") and (action_registry_key_name ~= \".*\\\\lmcompatibilitylevel\" or action_registry_key_name ~= \".*\\\\NtlmMinClientSec\" or action_registry_key_name ~= \".*\\\\RestrictSendingNTLMTraffic\"))\n\n\n\n"}
{"prompt": "I want to find activity related to suspicious modifications of Winget admin settings.", "response": "preset = xdr_registry\n| filter (actor_process_image_path ~= \".*\\\\winget\\.exe\" and action_registry_key_name ~= \"\\\\REGISTRY\\\\A\\\\.*\" and action_registry_key_name ~= \".*\\\\LocalState\\\\admin\\_settings\")\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that add a Name Resolution Policy Table (NRPT) rule to bypass the default DNS server.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Add-DnsClientNrptRule\" and ScriptBlockText contains \"-Namesp\" and ScriptBlockText contains \"-NameSe\")\n\n\n\n"}
{"prompt": "I want to see when new users are created in Okta.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type = \"user.lifecycle.create\"\n\n\n\n"}
{"prompt": "I want to detect malicious PowerShell scripts that use Invoke-Obfuscation with STDIN+ launch methods.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText ~= \"cmd.{0,5}(?\\:\\/c|\\/r).+powershell.+(?\\:\\$?\\{?input\\}?|noexit).+\\\"\"\n\n\n\n"}
{"prompt": "I want to find malicious URLs that bypassed Trend Micro detection and landed on user machines. These URLs should be correlated with files hashes from TM logs, SEP AV alerts, and Cortex Agent Logs.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| alter xdm.event.type = \"Security\"\n| alter hostname = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| filter xdm.target.url != null and `xdm.alert.name` !~= \"^OS Attack\\:|^Audit: Qualys\"\n| fields xdm.alert.name, xdm.event.type, xdm.source.application.name,\nxdm.source.process.executable.sha256, hostname, xdm.source.user.username,\nxdm.target.url\n| join type = left\n(dataset = trend_micro_email_security_raw\n| filter headerTo != null and headerFrom != null and headerFrom !~= \"zscaler.net|qualys.net\" and embeddedUrls != null\n| alter embeddedUrlsTo_array = embeddedUrls -> []\n| arrayexpand embeddedUrlsTo_array\n| alter embedded_url = json_extract_scalar(embeddedUrlsTo_array, \"$.\")\n| filter embedded_url != null and embedded_url !~= \"infosystechnologies.sharepoint.com\"\n| fields headerFrom, headerTo, eventType, embedded_url\n) as avevents avevents.embedded_url = `xdm.target.url`\n| filter embedded_url != null"}
{"prompt": "I want to see if there have been any NetNTLM downgrade attacks on my endpoints.", "response": "preset = xdr_event_log\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter ObjectValueName = regextract(to_json_string(action_evtlog_data_fields)->ObjectValueName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4657 and (ObjectName contains \"\\\\REGISTRY\\\\MACHINE\\\\SYSTEM\" and ObjectName contains \"ControlSet\" and ObjectName contains \"\\\\Control\\\\Lsa\") and ObjectValueName in (\"LmCompatibilityLevel\", \"NtlmMinClientSec\", \"RestrictSendingNTLMTraffic\"))\n\n\n\n"}
{"prompt": "I want to see events related to disabling macro runtime scan scope on Windows.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\SOFTWARE\\\\.*\" and action_registry_key_name ~= \".*\\\\Microsoft\\\\Office\\\\.*\" and action_registry_key_name contains \"\\\\Common\\\\Security\") and action_registry_key_name ~= \".*\\\\MacroRuntimeScanScope\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to detect the execution of SharpMove, a .NET utility that performs tasks like task creation, SCM queries, and VBScript execution via WMI.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\SharpMove\\.exe\" or actor_process_file_original_name = \"SharpMove.exe\") or (action_process_image_command_line contains \"computername=\" and (action_process_image_command_line contains \"action=create\" or action_process_image_command_line contains \"action=dcom\" or action_process_image_command_line contains \"action=executevbs\" or action_process_image_command_line contains \"action=hijackdcom\" or action_process_image_command_line contains \"action=modschtask\" or action_process_image_command_line contains \"action=modsvc\" or action_process_image_command_line contains \"action=query\" or action_process_image_command_line contains \"action=scm\" or action_process_image_command_line contains \"action=startservice\" or action_process_image_command_line contains \"action=taskscheduler\"))\n\n\n\n"}
{"prompt": "I want to find instances where legitimate Windows applications like WordPad or Acrobat Reader are dropping executable files.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\eqnedt32\\.exe\" or xdm.target.process.name ~= \".*\\\\wordpad\\.exe\" or xdm.target.process.name ~= \".*\\\\wordview\\.exe\" or xdm.target.process.name ~= \".*\\\\certutil\\.exe\" or xdm.target.process.name ~= \".*\\\\certoc\\.exe\" or xdm.target.process.name ~= \".*\\\\CertReq\\.exe\" or xdm.target.process.name ~= \".*\\\\Desktopimgdownldr\\.exe\" or xdm.target.process.name ~= \".*\\\\esentutl\\.exe\" or xdm.target.process.name ~= \".*\\\\mshta\\.exe\" or xdm.target.process.name ~= \".*\\\\AcroRd32\\.exe\" or xdm.target.process.name ~= \".*\\\\RdrCEF\\.exe\" or xdm.target.process.name ~= \".*\\\\hh\\.exe\" or xdm.target.process.name ~= \".*\\\\finger\\.exe\") or (xdm.source.process.name ~= \".*\\\\eqnedt32\\.exe\" or xdm.source.process.name ~= \".*\\\\wordpad\\.exe\" or xdm.source.process.name ~= \".*\\\\wordview\\.exe\" or xdm.source.process.name ~= \".*\\\\certutil\\.exe\" or xdm.source.process.name ~= \".*\\\\certoc\\.exe\" or xdm.source.process.name ~= \".*\\\\CertReq\\.exe\" or xdm.source.process.name ~= \".*\\\\Desktopimgdownldr\\.exe\" or xdm.source.process.name ~= \".*\\\\esentutl\\.exe\" or xdm.source.process.name ~= \".*\\\\mshta\\.exe\" or xdm.source.process.name ~= \".*\\\\AcroRd32\\.exe\" or xdm.source.process.name ~= \".*\\\\RdrCEF\\.exe\" or xdm.source.process.name ~= \".*\\\\hh\\.exe\" or xdm.source.process.name ~= \".*\\\\finger\\.exe\")) and (xdm.target.file.filename ~= \".*\\.exe\" or xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.ocx\"))\n\n\n\n"}
{"prompt": "I want to find instances where common weak or abused passwords are used in CLI commands.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"123456789\" or action_process_image_command_line contains \"123123qwE\" or action_process_image_command_line contains \"Asd123.aaaa\" or action_process_image_command_line contains \"Decryptme\" or action_process_image_command_line contains \"P@ssw0rd!\" or action_process_image_command_line contains \"Pass8080\" or action_process_image_command_line contains \"password123\" or action_process_image_command_line contains \"test@202\")\n\n\n\n"}
{"prompt": " I want to see activity related to Trickbot malware reconnaissance that involves `cmd.exe` and `nltest.exe` used with the `/domain_trusts /all_trusts` command line argument. ", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\cmd\\.exe\" and action_process_image_path ~= \".*\\\\nltest\\.exe\" and action_process_image_command_line contains \"/domain_trusts /all_trusts\")\n\n\n\n"}
{"prompt": "I want to find instances where Mimikatz is being used on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"DumpCreds\" or action_process_image_command_line contains \"mimikatz\") or (action_process_image_command_line contains \"::aadcookie\" or action_process_image_command_line contains \"::detours\" or action_process_image_command_line contains \"::memssp\" or action_process_image_command_line contains \"::mflt\" or action_process_image_command_line contains \"::ncroutemon\" or action_process_image_command_line contains \"::ngcsign\" or action_process_image_command_line contains \"::printnightmare\" or action_process_image_command_line contains \"::skeleton\" or action_process_image_command_line contains \"::preshutdown\" or action_process_image_command_line contains \"::mstsc\" or action_process_image_command_line contains \"::multirdp\") or (action_process_image_command_line contains \"rpc::\" or action_process_image_command_line contains \"token::\" or action_process_image_command_line contains \"crypto::\" or action_process_image_command_line contains \"dpapi::\" or action_process_image_command_line contains \"sekurlsa::\" or action_process_image_command_line contains \"kerberos::\" or action_process_image_command_line contains \"lsadump::\" or action_process_image_command_line contains \"privilege::\" or action_process_image_command_line contains \"process::\" or action_process_image_command_line contains \"vault::\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential sideloading of the CCleanerReactivator.DLL file.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\CCleanerReactivator\\.dll\" and  not (((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\CCleaner\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\CCleaner\\\\.*\") and actor_process_image_path ~= \".*\\\\CCleanerReactivator\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts for high privilege administrative activity that includes clearing audit logs on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4765\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find all events where either the Actor IP Address or Client IP Address matches a specific IPv4 CIDR range.", "response": "dataset in (msft_o365_azure_ad_raw, msft_o365_dlp_raw, msft_o365_exchange_online_raw, msft_o365_general_raw, msft_o365_sharepoint_online_raw)\n| filter (incidr(ActorIpAddress, \"<ip>\") = true or incidr(ClientIP, \"<ip>\") = true)\n| fields UserId, ClientIP, ActorIpAddress, Operation, _vendor,\n_product, _collector_type, Workload, EventSource,\nItemType, UserAgent, AuthenticationType, DeviceDisplayName,\nIsManagedDevice, BrowserName, BrowserVersion, *\n| view column order = populated"}
{"prompt": "I want to see events where non-admin users unlock accounts, potentially indicating privilege escalation misuse.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4767\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"PAM_windows\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find out if any new services are being installed on my endpoints that use double ampersands in their paths.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and actor_process_image_path contains \"&&\")\n\n\n\n"}
{"prompt": "I want to see AWS console login failures that have happened at least three times for the same user.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name != \"EV_CloudTrail\"\n| filter eventtype IN (\"AwsConsoleSignIn\") and eventname IN (\"ConsoleLogin\")\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\")\n| filter response IN (\"Failure\")\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| filter account_id NOT IN (\"<account id>\") and target_username NOT IN (\"HIDDEN_DUE_TO_SECURITY_REASONS\")\n| fields account_id, eventname, type, source_username,\ntarget_username, awsRegion, groupid, errorCode,\nuserAgent, srcaddr, username, bucketName, _time,\n_insert_time\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by target_username\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"illogonsessionid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to detect instances of Wfc.exe being used on endpoints for potential evasion tactics.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\wfc\\.exe\" or actor_process_file_original_name = \"wfc.exe\")\n\n\n\n"}
{"prompt": "I want to see when operators deleted applications from Swift.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"operator deleted\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "{I want to find instances where an external RDP brute-force attack was detected, with at least 10 login attempts within a 60-second timeframe.} \n\n\nLet me know if you need help with any other prompts!", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.source.user.username not contains \"$\" or xdm.source.user.username = \"-\"\n| filter xdm.event.id in (\"4625\") and not xdm.source.is_internal_ip and xdm.logon.type in (XDM_CONST.LOGON_TYPE_NETWORK, XDM_CONST.LOGON_TYPE_REMOTE_INTERACTIVE)\n| alter bin_time = _time\n| bin bin_time span = 1m timeshift = 1705881600\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.target.user.username,\nxdm.event.id, xdm.event.description, xdm.event.outcome_reason,\nxdm.event.outcome, _time, bin_time, xdm.event.*,\n_vendor, _product, xdm.logon.type\n| comp earliest(_time) as First_EventTimestamp,\nlatest(_time) as Latest_EventTimestamp,\ncount() as EventCount by bin_time,\nxdm.source.user.username,\nxdm.event.id,\nxdm.logon.type addrawdata = true as Raw_Event_Data\n| alter Events_TimeDiff_in_Seconds = timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\")\n| filter EventCount >= 10 and timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\") <= 60"}
{"prompt": "I want to see which users were recently removed from local groups on our SOX servers.", "response": "dataset = microsoft_windows_raw\n| alter TargetGroupName = event_data -> TargetUserName,\nSubjectUserName = event_data -> SubjectUserName,\nMemberName = event_data -> MemberName,\nSubjectUserSid = event_data -> SubjectUserSid,\nSubjectLogonId = event_data -> SubjectLogonId,\nMemberSid = event_data -> MemberSid,\nTargetSid = event_data -> TargetSid,\nPrivilegeList = event_data -> PrivilegeList,\nTargetDomainName = event_data -> TargetDomainName,\nSubjectDomainName = event_data -> SubjectDomainName,\nUser_Event_Action = arrayindex(regextract(message, \"(^.*?)\\.\\n\\n\"), 0),\nTargetUserName = User -> name\n| alter SubjectUserSid_DisplayName = if(SubjectUserSid = \"S-1-5-18\", \"System(or LocalSystem)\"),\nTargetSid_DisplayName = if(TargetSid = \"S-1-5-32-544\", \"Built-in Administrators\"),\nUser_Event_Action_Type = if(User_Event_Action contains \"added to\", \"Addition\", if(User_Event_Action contains \"removed from\", \"Removal\"))\n| filter event_id in (4733) and SubjectUserName !~= \"\\$$\"\n| join\n(dataset = sox_servers\n) as ss ss.Hostname = _collector_hostname\n| filter Hostname = _collector_hostname\n| fields time_created, _time, _insert_time, User_Event_Action,\nTargetGroupName, SubjectUserName, host_name, User_Event_Action_Type,\n_collector_hostname, TargetUserName, MemberSid,\nevent_id, event_data, event_action, event_result,\nmessage"}
{"prompt": "I want to find instances of potential exploitation of the VMware Workspace ONE Access Authentication Bypass vulnerability described in CVE-2022-31656.", "response": "datamodel\n| filter xdm.network.http.url contains \"/SAAS/t/_/;/\"\n\n\n\n"}
{"prompt": "I want to find instances where files with common backup extensions (like .VHD, .bak, etc.) are deleted by processes like cmd.exe, powershell.exe, or rundll32.exe.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\cmd\\.exe\" or xdm.target.process.name ~= \".*\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\\\pwsh\\.exe\" or xdm.target.process.name ~= \".*\\\\wt\\.exe\" or xdm.target.process.name ~= \".*\\\\rundll32\\.exe\" or xdm.target.process.name ~= \".*\\\\regsvr32\\.exe\") or (xdm.source.process.name ~= \".*\\\\cmd\\.exe\" or xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\" or xdm.source.process.name ~= \".*\\\\wt\\.exe\" or xdm.source.process.name ~= \".*\\\\rundll32\\.exe\" or xdm.source.process.name ~= \".*\\\\regsvr32\\.exe\")) and (xdm.target.file.filename ~= \".*\\.VHD\" or xdm.target.file.filename ~= \".*\\.bac\" or xdm.target.file.filename ~= \".*\\.bak\" or xdm.target.file.filename ~= \".*\\.wbcat\" or xdm.target.file.filename ~= \".*\\.bkf\" or xdm.target.file.filename ~= \".*\\.set\" or xdm.target.file.filename ~= \".*\\.win\" or xdm.target.file.filename ~= \".*\\.dsk\"))\n\n\n\n"}
{"prompt": "I want to see logs of separated user access observed in WLAN and ACS, including details like username, server name, event type, target IP, and timestamps.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_acs_raw\n| join type = left\n(dataset = pan_dss_raw\n| filter company_name ~= \"^SEPX\"\n) as JT1 JT1.sam_account_name = xdm.source.user.username\n| filter sam_account_name != null\n| alter device_ip = cisco_acs_raw._final_reporting_device_ip\n| alter server_name = arrayindex(regextract(cisco_acs_raw._raw_log, \"\\d+\\:\\d+\\:\\d+\\s([^\\s]+)\"), 0),\nec_activity = \"Logon\",\nec_subject = \"User\",\nevent_type = arrayindex(regextract(cisco_acs_raw._raw_log, \"Type=([^\\\\,]+)\"), 0),\nreference_id = arrayindex(regextract(cisco_acs_raw._raw_log, \"<\\d+>\\w+\\s*\\d+\\s\\d+:\\d+:\\d+\\s[\\S]+\\s\\w+\\s(\\d+)\"), 0)\n| fields xdm.observer.action, server_name, xdm.event.type,\nxdm.target.ipv4, xdm.target.port, xdm.source.user.username,\n_product, _vendor, device_ip, ec_activity, ec_subject,\nevent_type, xdm.intermediate.ipv4, xdm.network.session_id,\nxdm.event.description, xdm.event.id, xdm.network.application_protocol,\nxdm.alert.description, xdm.event.outcome, xdm.source.ipv4,\n_time, xdm.source.host.hostname, xdm.target.host.hostname,\nreference_id\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where the appcmd.exe process is used to potentially dump IIS service account passwords.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\appcmd\\.exe\" or actor_process_file_original_name = \"appcmd.exe\") and action_process_image_command_line contains \"list \") and ((action_process_image_command_line contains \" /config\" or action_process_image_command_line contains \" /xml\" or action_process_image_command_line contains \" -config\" or action_process_image_command_line contains \" -xml\") or ((action_process_image_command_line contains \" /@t\" or action_process_image_command_line contains \" /text\" or action_process_image_command_line contains \" /show\" or action_process_image_command_line contains \" -@t\" or action_process_image_command_line contains \" -text\" or action_process_image_command_line contains \" -show\") and (action_process_image_command_line contains \":\\*\" or action_process_image_command_line contains \"password\")))\n\n\n\n"}
{"prompt": "I want to see alerts triggered by Cisco Firepower devices where the event ID is \"430001\" and the observer action is \"alert\". The alert should also come from an IP address not on a specific list of allowed addresses, and I need details like the event description, target IP, and policy name.", "response": "/*config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.observer.action = \"alert\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\" and xdm.source.ipv4 != \"0.0.0.0\" and xdm.target.ipv4 != \"0.0.0.0\"\n| join type = left(dataset = iisvascan_ip_address_list| fields ip_address as ip) as iis_scan iis_scan.ip = xdm.source.ipv4| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip, policy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level, xdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4, xdm.source.port, xdm.event.description, xdm.alert.description, xdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol, xdm.event.operation, xdm.source.application.name, xdm.source.location.country, xdm.source.asn.as_name, xdm.target.asn.as_name, _time, _insert_time, device_ip, policy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime, count() as matched_events, values(*) as * by xdm.event.description, _time\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ibpmsourceip\", aggregation_criteria1 = \"ibpmsigname\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)*/\ndatamodel dataset = microsoft_windows_raw\n| alter device_ip = \"\",\npolicy_name = \"\",\naggregation_criteria = \"\",\nevent_time = \"\",\nduplicate_alert_count = \"\"\n| filter xdm.event.id = \"123\"\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, aggregation_criteria, event_time, duplicate_alert_count,\n_vendor, _product"}
{"prompt": "I want to see alerts about password changes on privileged Unix accounts identified by specific security groups \"UNIX_Group_R1\" or \"UNIX_Group_R2\".", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"edgeverve_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"passwd\" and xdm.event.description ~= \"password changed\" and xdm.target.host.hostname != \"bl4ul279\"\n| alter xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS,\nxdm.target.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"password\\s+changed\\s+for\\s+([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"changed\\s+password\\s+expiry\\s+for\\s+([\\w\\-\\.]+)\"), 0), if(xdm.event.type = \"useradd\", arrayindex(regextract(xdm.event.description, \"name=([^,]+)\"), 0))),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.target.user.username != null\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name, security_groups\n| filter security_groups contains \"UNIX_Group_R1\" or security_groups contains \"UNIX_Group_R2\"\n) as ad_users ad_users.sam_account_name = xdm.source.user.username\n| filter sam_account_name != null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, device_ip\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find Cisco Catalyst switches that have had 6 or more SNMP Authentication failures within a 5 minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"SNMP-3-AUTHFAIL\")\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| comp count() as matched_events,\nlatest(_time) as event_time,\nvalues(*) as * by device_ip,\nxdm.source.ipv4\n| filter matched_events >= 6\n| alter aggregation_criteria = \"ildeviceip\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 6)), 1),\nevent_t = format_timestamp(\"%Y-%m-%d %H:%M:%S\", event_time)"}
{"prompt": "I want to find events related to malicious persistence through Outlook's LoadMacroProviderOnBoot setting in the Windows Event Log.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Outlook\\\\LoadMacroProviderOnBoot\" and (action_registry_value_name contains \"0x00000001\" or action_registry_data contains \"0x00000001\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when someone uses mstsc.exe with the /v flag to connect to a remote server.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\mstsc\\.exe\" or actor_process_file_original_name = \"mstsc.exe\") and action_process_image_command_line contains \" /v:\") and  not ((actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\lxss\\\\wslhost.exe\" and action_process_image_command_line contains \"C:\\\\ProgramData\\\\Microsoft\\\\WSL\\\\wslg.rdp\"))\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious processes running SysAidServer that use Java.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\java\\.exe\" or actor_process_image_path ~= \".*\\\\javaw\\.exe\") and actor_process_image_command_line contains \"SysAidServer\")\n\n\n\n"}
{"prompt": "I want to find instances where attackers are exploiting CVE-2021-40539 through ADSelfService by looking for specific URLs in network traffic.", "response": "datamodel\n| filter (xdm.network.http.url contains \"/help/admin-guide/Reports/ReportGenerate.jsp\" or xdm.network.http.url contains \"/ServletApi/../RestApi/LogonCustomization\" or xdm.network.http.url contains \"/ServletApi/../RestAPI/Connection\")\n\n\n\n"}
{"prompt": "I want to see Duo failed login alerts from non-business countries in real time.", "response": "dataset = duo_duo_raw\n| filter email not in (null, \"\"\"\"\"\", NULL)\n| filter result in (\"denied\") and eventtype in (\"authentication\")\n| alter DuoUserName = json_extract_scalar(user, \"$.name\"),\nIPAddress = json_extract_scalar(access_device, \"$.ip\"),\nDeviceTrustLevel = json_extract(adaptive_trust_assessments, \"$.remember_me.trust_level\")\n| alter AccDevLocationCN = json_extract_scalar(access_device, \"$.location.country\"),\nAccDevLocationST = json_extract(access_device, \"$.location.state\"),\nAccDevLocationCY = json_extract(access_device, \"$.location.city\"),\nAccDevOS = json_extract(access_device, \"$.os\"),\nAccDevOSVer = json_extract(access_device, \"$.os_version\"),\nAccDevBrowser = json_extract(access_device, \"$.browser\"),\nAccDevBrowserVer = json_extract(access_device, \"$.browser_version\"),\nIntegration = json_extract_scalar(application, \"$.name\")\n| filter IPAddress not contains \"0.0.0.0\"\n| alter AccDevLocationCN = replace(AccDevLocationCN, \"\\\"\", \"\"),\nIPAddress = replace(IPAddress, \"\\\"\", \"\"),\nDuoUserName = replace(DuoUserName, \"\\\"\", \"\")\n| filter incidr(IPAddress, \"<ip>\") = False and IPAddress not in (\"<ip>\")\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false\n| filter DuoUserName != NULL\n| filter AccDevLocationCN not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\")\n| alter CorrelationAlertName = \"CNX_EU_PROD Duo Failed connection from non-business Country\"\n| filter (AccDevLocationCN != NULL)\n| fields DuoUserName, reason, IPAddress, result, eventtype,\nemail, AccDevOS, AccDevOSVer, AccDevBrowser, AccDevBrowserVer,\nAccDevLocationCN, access_device as EventInfo, Integration,\naccess_device, *"}
{"prompt": " I want to see alerts about when ntdsutil.exe is used on endpoints. ", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\ntdsutil\\.exe\"\n\n\n\n"}
{"prompt": "I want to detect potential sideloading of the Goopdate.DLL file from unexpected locations.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\goopdate\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\.*\")) and  not (((actor_process_image_path contains \"\\\\AppData\\\\Local\\\\Temp\\\\GUM\" and actor_process_image_path contains \".tmp\\\\Dropbox\") and (action_module_path contains \"\\\\AppData\\\\Local\\\\Temp\\\\GUM\" and action_module_path contains \".tmp\\\\goopdate.dll\")))\n\n\n\n"}
{"prompt": "I want to find potential instances of malicious PowerShell code loading assemblies using reflection from files on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"[Reflection.Assembly]::load\"\n\n\n\n"}
{"prompt": "I want to find potential persistence threats that utilize DebugPath settings in the Windows registry.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"Classes\\\\ActivatableClasses\\\\Package\\\\Microsoft.\" and action_registry_key_name ~= \".*\\\\DebugPath\") or (action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\PackagedAppXDebug\\\\Microsoft.\" and action_registry_key_name ~= \".*\\\\\\(Default\\)\"))\n\n\n\n"}
{"prompt": "I want to see information about processes on Linux endpoints that are related to network connections, excluding those from landscape-sysinfo.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/who\" or action_process_image_path ~= \".*\\/w\" or action_process_image_path ~= \".*\\/last\" or action_process_image_path ~= \".*\\/lsof\" or action_process_image_path ~= \".*\\/netstat\") and  not ((actor_process_image_command_line contains \"/usr/bin/landscape-sysinfo\" and action_process_image_path ~= \".*\\/who\"))\n\n\n\n"}
{"prompt": "{I want to detect potential FIN7 POWERHOLD execution attempts on my endpoints.} \n\n\nLet me know if you'd like any other variations!", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"$env:APPDATA\" and ScriptBlockText contains \"function MainPayload\" and ScriptBlockText contains \"::WriteAllBytes\" and ScriptBlockText contains \"wscript.exe\")\n\n\n\n"}
{"prompt": "I want to see Cortex XQL results for suspicious activity related to new server instances being created or updated in Azure AD Hybrid Health AD FS services.", "response": "dataset = msft_azure_raw\n| alter properties_categoryValue = json_extract_scalar(properties , \"$.categoryValue\")\n| alter properties_resourceProviderValue = json_extract_scalar(properties , \"$.resourceProviderValue\")\n| alter properties_resourceId = json_extract_scalar(properties , \"$.resourceId\")\n| filter (properties.categoryValue = \"Administrative\" and properties.resourceProviderValue = \"Microsoft.ADHybridHealthService\" and properties.resourceId contains \"AdFederationService\" and oproperties.perationNameValue = \"Microsoft.ADHybridHealthService/services/servicemembers/action\")\n\n\n\n"}
{"prompt": "I want to see alerts for login attempts to Fortinet from external IP addresses, including data from Cisco ASA and Fortigate devices.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| alter xdm.source.ipv4 = arrayindex(regextract(xdm.source.process.name, \"(\\d+\\.\\d+\\.\\d+\\.\\d+)\"), 0)\n| filter xdm.source.is_internal_ip = false and xdm.event.original_event_type in (\"0100032102\", \"0100032104\", \"0100032099\") and xdm.source.process.name != \"jsconsole\""}
{"prompt": "I want to see activity related to the Fireball Archer malware install on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"rundll32.exe\" and action_process_image_command_line contains \"InstallArcherSvc\")\n\n\n\n"}
{"prompt": "I want to see all RDP login events from localhost.", "response": "preset = xdr_event_log\n| alter LogonType = regextract(to_json_string(action_evtlog_data_fields)->LogonType{}, \"\\\"(.*)\\\"\")\n| alter IpAddress = regextract(to_json_string(action_evtlog_data_fields)->IpAddress{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4624 and LogonType = 10 and IpAddress in (\"::1\", \"127.0.0.1\"))\n\n\n\n"}
{"prompt": "I want to find instances where Rundll32.EXE calls the DllRegisterServer function from a non-standard path.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and action_process_image_command_line contains \"DllRegisterServer\") and  not ((action_process_image_command_line contains \":\\\\Program Files (x86)\" or action_process_image_command_line ~= \".*\\:\\\\Program\\ Files\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see information about potential TCP DDoS attacks happening on my internal network from external sources.  Please show me unique source IP addresses, event counts, and target IP addresses for instances with at least 500 unique source IPs and 5000 events per minute window.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter xdm.network.ip_protocol = \"\"\"TCP\"\"\" and xdm.target.is_internal_ip = true and xdm.source.is_internal_ip = false and xdm.source.ipv4 not in (\"8.8.8.8\")\n| alter bin_time = _time\n| bin bin_time span = 1m timeshift = 1705881600\n| comp count_distinct(xdm.source.ipv4) as Unique_SrcIPs,\ncount(xdm.source.ipv4) as Event_Count,\nvalues(xdm.source.ipv4) as SrcIPS by bin_time,\nxdm.target.ipv4,\nxdm.network.ip_protocol,\n_vendor,\n_product\n| filter Unique_SrcIPs >= 500 and Event_Count >= 5000\n| fields *"}
{"prompt": "I want to see if there are any scheduled tasks that try to shut down the system using \"shutdown /l /f\" and run weekly.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \" /create \" and action_process_image_command_line contains \"shutdown /l /f\" and action_process_image_command_line contains \"WEEKLY\")) and  not ((action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\"))\n\n\n\n"}
{"prompt": "I want to see alerts about attempts to disable Windows Defender features through registry modifications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ Defender\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\ Defender\\ Security\\ Center\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\ Defender\\\\.*\") and (((action_registry_key_name ~= \".*\\\\DisableAntiSpyware\" or action_registry_key_name ~= \".*\\\\DisableAntiVirus\" or action_registry_key_name ~= \".*\\\\Real\\-Time\\ Protection\\\\DisableBehaviorMonitoring\" or action_registry_key_name ~= \".*\\\\Real\\-Time\\ Protection\\\\DisableIntrusionPreventionSystem\" or action_registry_key_name ~= \".*\\\\Real\\-Time\\ Protection\\\\DisableIOAVProtection\" or action_registry_key_name ~= \".*\\\\Real\\-Time\\ Protection\\\\DisableOnAccessProtection\" or action_registry_key_name ~= \".*\\\\Real\\-Time\\ Protection\\\\DisableRealtimeMonitoring\" or action_registry_key_name ~= \".*\\\\Real\\-Time\\ Protection\\\\DisableScanOnRealtimeEnable\" or action_registry_key_name ~= \".*\\\\Real\\-Time\\ Protection\\\\DisableScriptScanning\" or action_registry_key_name ~= \".*\\\\Reporting\\\\DisableEnhancedNotifications\" or action_registry_key_name ~= \".*\\\\SpyNet\\\\DisableBlockAtFirstSeen\") and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\")) or ((action_registry_key_name ~= \".*\\\\App\\ and\\ Browser\\ protection\\\\DisallowExploitProtectionOverride\" or action_registry_key_name ~= \".*\\\\Features\\\\TamperProtection\" or action_registry_key_name ~= \".*\\\\MpEngine\\\\MpEnablePus\" or action_registry_key_name ~= \".*\\\\PUAProtection\" or action_registry_key_name ~= \".*\\\\Signature\\ Update\\\\ForceUpdateFromMU\" or action_registry_key_name ~= \".*\\\\SpyNet\\\\SpynetReporting\" or action_registry_key_name ~= \".*\\\\SpyNet\\\\SubmitSamplesConsent\" or action_registry_key_name ~= \".*\\\\Windows\\ Defender\\ Exploit\\ Guard\\\\Controlled\\ Folder\\ Access\\\\EnableControlledFolderAccess\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\")))\n\n\n\n"}
{"prompt": "I want to see information about processes on endpoints that are using ESXCLI to kill VMs.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/esxcli\" and (action_process_image_command_line contains \"vm process\" and action_process_image_command_line contains \"kill\"))\n\n\n\n"}
{"prompt": "I want to find instances where Outlook has its macro execution setting enabled without warnings.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Outlook\\\\Security\\\\Level\" and (action_registry_value_name contains \"0x00000001\" or action_registry_data contains \"0x00000001\"))\n\n\n\n"}
{"prompt": "I want to see events related to modifications of trust records within the Windows Registry under the \"Trusted Documents\" key.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\Security\\\\Trusted Documents\\\\TrustRecords\"\n\n\n\n"}
{"prompt": "I want to detect instances of Invoke-Obfuscation VAR+ Launcher that use obfuscated command execution techniques on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName contains \"cmd\" and ServiceFileName contains \"\\\"set\" and ServiceFileName contains \"-f\") and (ServiceFileName contains \"/c\" or ServiceFileName contains \"/r\"))\n\n\n\n"}
{"prompt": "I want to see alerts about Turla Group activity using commands from May 2020, such as those involving tracert, WsqmCons, and specific net use commands.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"tracert -h 10 yahoo.com\" or action_process_image_command_line contains \".WSqmCons))|iex;\" or action_process_image_command_line contains \"Fr`omBa`se6`4Str`ing\") or (action_process_image_command_line contains \"net use https:\n\n\n\n"}
{"prompt": "I want to detect suspicious new logon processes using Rubeus on endpoints.", "response": "preset = xdr_event_log\n| alter LogonProcessName = regextract(to_json_string(action_evtlog_data_fields)->LogonProcessName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4611 and LogonProcessName = \"User32LogonProcesss\")\n\n\n\n"}
{"prompt": "I want to detect processes running VBoxDrvInst.exe with parameters indicating an attempt to process an INF file.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\VBoxDrvInst\\.exe\" and (action_process_image_command_line contains \"driver\" and action_process_image_command_line contains \"executeinf\"))\n\n\n\n"}
{"prompt": "I want to see events related to CodeIntegrity violations where a disallowed file was used for a protected process.", "response": "datamodel\n| filter xdm.event.id = 3104\n\n\n\n"}
{"prompt": " I want to find instances of Gatekeeper bypass on macOS systems using Xattr manipulation.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/xattr\" and (action_process_image_command_line contains \"-d\" and action_process_image_command_line contains \"com.apple.quarantine\"))\n\n\n\n"}
{"prompt": " I want to find potential Xor encoded PowerShell commands running on my endpoints. ", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.exe\", \"pwsh.dll\")) and (action_process_image_command_line contains \"ForEach\" and action_process_image_command_line contains \"Xor\"))\n\n\n\n"}
{"prompt": "I want to find events where an application is removed using wmic.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\WMIC\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and (action_process_image_command_line contains \"call\" or action_process_image_command_line contains \"uninstall\"))\n\n\n\n"}
{"prompt": "I want to find events related to services being stopped or disabled on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/service\" or action_process_image_path ~= \".*\\/systemctl\" or action_process_image_path ~= \".*\\/chkconfig\") and (action_process_image_command_line contains \"stop\" or action_process_image_command_line contains \"disable\"))\n\n\n\n"}
{"prompt": "I want to see FortiGate events related to potential tampering, including details about the device, username, process name, and resource involved.", "response": "datamodel dataset = fortinet_fortigate_raw\n| filter xdm.event.original_event_type ~= \"32099|32102|32104|44544|44545|44546|44547|44547|44548|44549|44550|44554|44552\"\n| fields fortinet_fortigate_raw._final_reporting_device_ip,\nfortinet_fortigate_raw._reporting_device_name, xdm.event.type,\nxdm.event.description, xdm.source.process.name, xdm.target.user.username,\nxdm.observer.product, xdm.target.resource.name, xdm.target.resource.id,\n_time as time, xdm.event.original_event_type"}
{"prompt": "I want to find instances where Office applications like Excel or PowerPoint are being used to download files from the internet.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\EXCEL\\.EXE\" or action_process_image_path ~= \".*\\\\POWERPNT\\.EXE\" or action_process_image_path ~= \".*\\\\WINWORD\\.exe\") or actor_process_file_original_name in (\"Excel.exe\", \"POWERPNT.EXE\", \"WinWord.exe\")) and (action_process_image_command_line contains \"http:\n\n\n\n"}
{"prompt": "I want to find events related to potential sideloading of rcdll.dll files that aren't located in expected Visual Studio or Windows Kits directories.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\rcdll\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Visual\\ Studio\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Windows\\ Kits\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that import modules from suspicious directories like the Temp folder or Appdata.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText ~= \".*Import\\-Module\\ \\\"\\$Env\\:Temp\\\\.*\" or ScriptBlockText ~= \".*Import\\-Module\\ \\'\\$Env\\:Temp\\\\.*\" or ScriptBlockText ~= \".*Import\\-Module\\ \\$Env\\:Temp\\\\.*\" or ScriptBlockText ~= \".*Import\\-Module\\ \\\"\\$Env\\:Appdata\\\\.*\" or ScriptBlockText ~= \".*Import\\-Module\\ \\'\\$Env\\:Appdata\\\\.*\" or ScriptBlockText ~= \".*Import\\-Module\\ \\$Env\\:Appdata\\\\.*\" or ScriptBlockText ~= \".*Import\\-Module\\ C\\:\\\\Users\\\\Public\\\\.*\" or ScriptBlockText ~= \".*ipmo\\ \\\"\\$Env\\:Temp\\\\.*\" or ScriptBlockText ~= \".*ipmo\\ \\'\\$Env\\:Temp\\\\.*\" or ScriptBlockText ~= \".*ipmo\\ \\$Env\\:Temp\\\\.*\" or ScriptBlockText ~= \".*ipmo\\ \\\"\\$Env\\:Appdata\\\\.*\" or ScriptBlockText ~= \".*ipmo\\ \\'\\$Env\\:Appdata\\\\.*\" or ScriptBlockText ~= \".*ipmo\\ \\$Env\\:Appdata\\\\.*\" or ScriptBlockText ~= \".*ipmo\\ C\\:\\\\Users\\\\Public\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect potential PowerShell obfuscation using alias cmdlets on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Set-Alias \" or ScriptBlockText contains \"New-Alias \")\n\n\n\n"}
{"prompt": "{I want to see how many login attempts were made by each user in the past hour.} \n\n\nLet me know if you'd like to refine this prompt further!", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.SECURITY/SECURITYSOLUTIONS/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see unusual ping events detected by Cisco Firepower that have occurred more than five times in a 5-minute window from an IP address not on our allowed lists and outside our network.", "response": "/*config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"PROTOCOL-ICMP PING|PROTOCOL-ICMP Unusual PING detected\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name !~= \"qualys\"\n| join type = left(dataset = dmz_ip_address_list) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4| filter ip_address = null\n| join type = left(dataset = iisvascan_ip_address_list| fields ip_address as ip) as iis_scan iis_scan.ip = xdm.source.ipv4| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip, policy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level, xdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4, xdm.source.port, xdm.event.description, xdm.alert.description, xdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol, xdm.event.operation, xdm.source.application.name, xdm.source.location.country, xdm.source.asn.as_name, xdm.target.asn.as_name, _time, _insert_time, device_ip, policy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime, count() as matched_events, values(*) as * by xdm.source.ipv4, _time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ibpmsourceip\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time), duplicate_alert_count = subtract(floor(divide(matched_events,5)),1)*/\ndatamodel dataset = microsoft_windows_raw\n| alter device_ip = \"\",\npolicy_name = \"\",\naggregation_criteria = \"\",\nevent_time = \"\",\nduplicate_alert_count = \"\"\n| filter xdm.event.id = \"123\"\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, aggregation_criteria, event_time, duplicate_alert_count,\n_vendor, _product"}
{"prompt": "I want to find potential CrackMapExec activity by looking for files with specific names and patterns on Windows systems.", "response": "datamodel\n| filter xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\Temp\\\\.*\" and ((xdm.target.file.filename ~= \".*\\\\temp\\.ps1\" or xdm.target.file.filename ~= \".*\\\\msol\\.ps1\") or (xdm.target.file.filename ~= \"\\\\[0-9a-f]{8}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{4}\\-[0-9a-f]{12}\\.txt$\" or xdm.target.file.filename ~= \"\\\\[a-zA-Z]{8}\\.tmp$\"))\n\n\n\n"}
{"prompt": " I want to see if there have been multiple unique user login attempts from different sources on iRemote within a 5 minute period that might indicate a brute force attack. ", "response": "dataset = msft_azure_ad_raw\n| bin _time span = 5m\n| alter result_code = to_integer(status -> errorCode),\nresult_desc = status -> failureReason,\nuser_dst = userPrincipalName\n| filter result_code != 0 and appDisplayName ~= \"iremote\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(userDisplayName) as username,\nvalues(ipAddress) as ipAddress,\nvalues(appDisplayName) as server,\nvalues(result_code) as result_code,\nvalues(result_desc) as result_desc,\nvalues(userAgent) as user_agent,\nvalues(user_dst) as user_dst,\ncount() as matched_events by _time\n| filter array_length(user_dst) >= 50\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see all events where at least 100 password changes happened within a short period of time.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4723\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.event.id\n| filter matched_events >= 100\n| alter aggregation_criteria = \"ibpmhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": " I want to find events related to web browsers that are being debugged remotely. ", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" --remote-debugging-\" or (action_process_image_path ~= \".*\\\\firefox\\.exe\" and action_process_image_command_line contains \" -start-debugger-server\"))\n\n\n\n"}
{"prompt": " I want to see details about potential malicious activity related to COM object download cradles using PowerShell scripts on endpoints. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"[Type]::GetTypeFromCLSID(\" and (ScriptBlockText contains \"0002DF01-0000-0000-C000-000000000046\" or ScriptBlockText contains \"F6D90F16-9C73-11D3-B32E-00C04F990BB4\" or ScriptBlockText contains \"F5078F35-C551-11D3-89B9-0000F81FE221\" or ScriptBlockText contains \"88d96a0a-f192-11d4-a65f-0040963251e5\" or ScriptBlockText contains \"AFBA6B42-5692-48EA-8141-DC517DCF0EF1\" or ScriptBlockText contains \"AFB40FFD-B609-40A3-9828-F88BBE11E4E3\" or ScriptBlockText contains \"88d96a0b-f192-11d4-a65f-0040963251e5\" or ScriptBlockText contains \"2087c2f4-2cef-4953-a8ab-66779b670495\" or ScriptBlockText contains \"000209FF-0000-0000-C000-000000000046\" or ScriptBlockText contains \"00024500-0000-0000-C000-000000000046\"))\n\n\n\n"}
{"prompt": "I want to see events where curl.exe downloads files from an IP address.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\curl\\.exe\" or actor_process_file_original_name = \"curl.exe\") and action_process_image_command_line ~= \"\\:\\/\\/[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\" and action_process_image_command_line contains \"http\" and (action_process_image_command_line contains \" -O\" or action_process_image_command_line contains \"--remote-name\" or action_process_image_command_line contains \"--output\") and (action_process_image_command_line ~= \".*\\.bat\" or action_process_image_command_line ~= \".*\\.bat\\\"\" or action_process_image_command_line ~= \".*\\.dat\" or action_process_image_command_line ~= \".*\\.dat\\\"\" or action_process_image_command_line ~= \".*\\.dll\" or action_process_image_command_line ~= \".*\\.dll\\\"\" or action_process_image_command_line ~= \".*\\.exe\" or action_process_image_command_line ~= \".*\\.exe\\\"\" or action_process_image_command_line ~= \".*\\.gif\" or action_process_image_command_line ~= \".*\\.gif\\\"\" or action_process_image_command_line ~= \".*\\.hta\" or action_process_image_command_line ~= \".*\\.hta\\\"\" or action_process_image_command_line ~= \".*\\.jpeg\" or action_process_image_command_line ~= \".*\\.jpeg\\\"\" or action_process_image_command_line ~= \".*\\.log\" or action_process_image_command_line ~= \".*\\.log\\\"\" or action_process_image_command_line ~= \".*\\.msi\" or action_process_image_command_line ~= \".*\\.msi\\\"\" or action_process_image_command_line ~= \".*\\.png\" or action_process_image_command_line ~= \".*\\.png\\\"\" or action_process_image_command_line ~= \".*\\.ps1\" or action_process_image_command_line ~= \".*\\.ps1\\\"\" or action_process_image_command_line ~= \".*\\.psm1\" or action_process_image_command_line ~= \".*\\.psm1\\\"\" or action_process_image_command_line ~= \".*\\.vbe\" or action_process_image_command_line ~= \".*\\.vbe\\\"\" or action_process_image_command_line ~= \".*\\.vbs\" or action_process_image_command_line ~= \".*\\.vbs\\\"\" or action_process_image_command_line ~= \".*\\.bat\\'\" or action_process_image_command_line ~= \".*\\.dat\\'\" or action_process_image_command_line ~= \".*\\.dll\\'\" or action_process_image_command_line ~= \".*\\.exe\\'\" or action_process_image_command_line ~= \".*\\.gif\\'\" or action_process_image_command_line ~= \".*\\.hta\\'\" or action_process_image_command_line ~= \".*\\.jpeg\\'\" or action_process_image_command_line ~= \".*\\.log\\'\" or action_process_image_command_line ~= \".*\\.msi\\'\" or action_process_image_command_line ~= \".*\\.png\\'\" or action_process_image_command_line ~= \".*\\.ps1\\'\" or action_process_image_command_line ~= \".*\\.psm1\\'\" or action_process_image_command_line ~= \".*\\.vbe\\'\" or action_process_image_command_line ~= \".*\\.vbs\\'\"))\n\n\n\n"}
{"prompt": "I want to see telemetry data from Microsoft Azure and Office 365 sources that have IPs matching known malicious IP addresses from Intel IOCs.", "response": "config case_sensitive = false\n| dataset in (msft_azure_raw, msft_azure_ad_audit_raw, msft_azure_ad_raw, msft_graph_security_alerts_raw, msft_o365_azure_ad_raw, msft_o365_dlp_raw, msft_o365_exchange_online_raw, msft_o365_general_raw, msft_o365_sharepoint_online_raw)\n| fields _time, _collector_name, _collector_type, _final_reporting_device_name,\n_product, _reporting_device_name, _vendor, operation,\nrecordtype, usertype, workload, clientip, resultstatus,\nappaccesscontext, appdisplayname, conditionalaccessstatus,\nriskdetail, risklevelaggregated, risklevelduringsignin,\nriskstate, userdisplayname, userprincipalname, ipaddress,\nresourcedisplayname, useragent, platform, extendedproperties,\nactor, `Target`, deviceproperties, clientipaddress,\nsenderip, userip, serviceprincipalname, ActorIpAddress,\ncallerIpAddress\n| alter msft_src_ip = coalesce(ipAddress, ClientIP, SenderIp, UserIp, ClientIPAddress, ActorIpAddress, callerIpAddress)\n| join\n(dataset = Intel_IOCs_IPMarch\n| fields - DESTINATION_IP\n) as iocs_ip iocs_ip.SOURCE_IP = msft_src_ip\n| alter bin_time = _time\n| bin bin_time span = 1m timeshift = 1707696000\n| comp earliest(_time) as Earliest_Event_Timestamp,\nvalues(to_string(DeviceProperties)) as Device_Properties,\nvalues(to_string(ExtendedProperties)) as Extended_Properties by bin_time,\nmsft_src_ip,\n_collector_name,\n_collector_type,\n_final_reporting_device_name,\n_product,\n_reporting_device_name,\n_vendor,\noperation,\nrecordtype,\nusertype,\nworkload,\nresultstatus,\nappaccesscontext,\nappdisplayname,\nconditionalaccessstatus,\nriskdetail,\nrisklevelaggregated,\nrisklevelduringsignin,\nriskstate,\nuserdisplayname,\nuserprincipalname,\nresourcedisplayname,\nuseragent,\nplatform,\nactor,\n`Target`,\nserviceprincipalname,\nSOURCE_IP\n| view column order = populated"}
{"prompt": "I want to see alerts about potential tampering with Windows Defender using wmic.exe.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"wmic.exe\" or action_process_image_path ~= \".*\\\\WMIC\\.exe\") and action_process_image_command_line contains \"/Namespace:\\\\\\\\root\\\\Microsoft\\\\Windows\\\\Defender\")\n\n\n\n"}
{"prompt": "I want to find indicators of PUA activity that involve the NirCmd executable being used.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\NirCmd\\.exe\" or actor_process_file_original_name = \"NirCmd.exe\") or (action_process_image_command_line contains \" execmd \" or action_process_image_command_line contains \".exe script \" or action_process_image_command_line contains \".exe shexec \" or action_process_image_command_line contains \" runinteractive \")) or ((action_process_image_command_line contains \" exec \" or action_process_image_command_line contains \" exec2 \") and (action_process_image_command_line contains \" show \" or action_process_image_command_line contains \" hide \"))\n\n\n\n"}
{"prompt": "I want to find instances where users reset their passwords using the PWD tool more than 15 times within a single minute.", "response": "config case_sensitive = false\n| dataset = manage_engine_adssp_raw\n| filter _raw_log contains \"\\\"productName\\\":\\\"ADSSP\\\"}\"\n| alter json_message = arrayindex(regextract(_raw_log, \"\\d+\\.\\d+\\.\\d+\\.\\d+\\s(.*)\"), 0) -> {}\n| alter STATUS = json_message -> message.STATUS,\nbin_time = _time\n| bin bin_time span = 1M\n| filter json_message contains \"Self Reset Password\" and STATUS in (\"Success\")\n| alter json_message = replace(replace(json_message, \"LOGIN NAME\", \"LOGIN_NAME\"), \"DOMAIN NAME\", \"DOMAIN_NAME\")\n| alter Login_Name = json_message -> message.LOGIN_NAME,\nACCESS_MODE = json_message -> message.ACCESS_MODE,\nIP = json_message -> message.IP,\nHOST = json_message -> message.HOST,\nDOMAIN_NAME = json_message -> message.DOMAIN_NAME,\nDATE_TIME = json_message -> message.DATE_TIME,\nACTION_NAME = json_message -> message.ACTION_NAME\n| filter ACTION_NAME in (\"Self Reset Password\")\n| comp earliest(_time) as First_Evt_TS,\nlatest(_time) as Latest_Evt_TS,\nvalues(Login_Name) as MultipleUsers by ACTION_NAME,\nbin_time\n| alter Time_Diff_in_Seconds = timestamp_diff(Latest_Evt_TS, First_Evt_TS, \"SECOND\")\n| filter array_length(MultipleUsers) >= 15"}
{"prompt": " I want to see alerts about attempts to add SID History to an account that failed, especially on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4766\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ibpmeventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect if any remote access tools have been installed on my endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceName contains \"AmmyyAdmin\" or ServiceName contains \"Atera\" or ServiceName contains \"BASupportExpressSrvcUpdater\" or ServiceName contains \"BASupportExpressStandaloneService\" or ServiceName contains \"chromoting\" or ServiceName contains \"GoToAssist\" or ServiceName contains \"GoToMyPC\" or ServiceName contains \"jumpcloud\" or ServiceName contains \"LMIGuardianSvc\" or ServiceName contains \"LogMeIn\" or ServiceName contains \"monblanking\" or ServiceName contains \"Parsec\" or ServiceName contains \"RManService\" or ServiceName contains \"RPCPerformanceService\" or ServiceName contains \"RPCService\" or ServiceName contains \"SplashtopRemoteService\" or ServiceName contains \"SSUService\" or ServiceName contains \"TeamViewer\" or ServiceName contains \"TightVNC\" or ServiceName contains \"vncserver\" or ServiceName contains \"Zoho\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when Scriptrunner.exe is used with the -appvscript command line argument.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\ScriptRunner\\.exe\" or actor_process_file_original_name = \"ScriptRunner.exe\") and action_process_image_command_line contains \" -appvscript \")\n\n\n\n"}
{"prompt": "I want to find indicators of the Diamond Sleet APT using DLL sideloading techniques detected in Windows Event Logs.", "response": "preset = xdr_image_load\n| filter ((actor_process_image_path ~= \".*\\:\\\\ProgramData\\\\clip\\.exe\" and action_module_path ~= \".*\\:\\\\ProgramData\\\\Version\\.dll\") or (actor_process_image_path ~= \".*\\:\\\\ProgramData\\\\wsmprovhost\\.exe\" and action_module_path ~= \".*\\:\\\\ProgramData\\\\DSROLE\\.dll\"))\n\n\n\n"}
{"prompt": "I want to find instances where an attacker is using `tail`, `base64`, and image files to potentially decode malicious content.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/bash\" and (action_process_image_command_line contains \"tail\" and action_process_image_command_line contains \"-c\") and (action_process_image_command_line contains \"base64\" and action_process_image_command_line contains \"-d\" and action_process_image_command_line contains \">\") and (action_process_image_command_line contains \".avif\" or action_process_image_command_line contains \".gif\" or action_process_image_command_line contains \".jfif\" or action_process_image_command_line contains \".jpeg\" or action_process_image_command_line contains \".jpg\" or action_process_image_command_line contains \".pjp\" or action_process_image_command_line contains \".pjpeg\" or action_process_image_command_line contains \".png\" or action_process_image_command_line contains \".svg\" or action_process_image_command_line contains \".webp\"))\n\n\n\n"}
{"prompt": " I want to find PowerShell processes that are downloading files using `new-object net.webclient`. ", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and ((action_process_image_command_line contains \"new-object\" and action_process_image_command_line contains \"net.webclient).\" and action_process_image_command_line contains \"download\") and (action_process_image_command_line contains \"string(\" or action_process_image_command_line contains \"file(\")))\n\n\n\n"}
{"prompt": "I want to see events where a user was removed from the Domain Admins group.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (4757) and _collector_type in (\"XDR Collector\")\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = arrayindex(regextract(message, \"Account Name:\\t\\tCN\\=([^\\,]+)\\,\"), 0),\nTargetGroupName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| filter SubjectUserName not contains \"$\" and TargetUserName not contains \"$\" and TargetUserName not in (null, NULL, \"\"\"\"\"\") and TargetGroupName in (\"Domain Admins\")\n| fields SubjectUserName, SubjectDomainName, TargetUserName,\nTargetDomainName, event_id, event_result, event_action,\nevent_data, _collector_name, _collector_type, _collector_hostname,\n_collector_ip_address, _collector_id, *"}
{"prompt": "I want to find suspicious activity related to keyboard layout loading on Windows.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\Keyboard\\ Layout\\\\Preload\\\\.*\" or action_registry_key_name ~= \".*\\\\Keyboard\\ Layout\\\\Substitutes\\\\.*\") and ((action_registry_value_name contains \"00000429\" or action_registry_value_name contains \"00050429\" or action_registry_value_name contains \"0000042a\") or (action_registry_data contains \"00000429\" or action_registry_data contains \"00050429\" or action_registry_data contains \"0000042a\")))\n\n\n\n"}
{"prompt": "I want to see alerts about potential persistence attempts using VMwareToolBoxCmd.EXE and VM state change scripts.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\VMwareToolBoxCmd\\.exe\" or actor_process_file_original_name = \"toolbox-cmd.exe\") and (action_process_image_command_line contains \" script \" and action_process_image_command_line contains \" set \"))\n\n\n\n"}
{"prompt": "I want to find instances where \"schtasks.exe\" is used to create scheduled tasks from suspicious folders like \"%ProgramData%\"", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" or actor_process_file_original_name = \"schtasks.exe\") and action_process_image_command_line contains \" /create \" and (action_process_image_command_line contains \"powershell\" or action_process_image_command_line contains \"pwsh\" or action_process_image_command_line contains \"cmd /c \" or action_process_image_command_line contains \"cmd /k \" or action_process_image_command_line contains \"cmd /r \" or action_process_image_command_line contains \"cmd.exe /c \" or action_process_image_command_line contains \"cmd.exe /k \" or action_process_image_command_line contains \"cmd.exe /r \") and (action_process_image_command_line ~= \".*C\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line contains \"%ProgramData%\"))\n\n\n\n"}
{"prompt": "I want to find potentially malicious child processes spawned by Wscript or Cscript.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\wscript\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\") and (action_process_image_path ~= \".*\\\\rundll32\\.exe\" or ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and ((action_process_image_command_line contains \"mshta\" and action_process_image_command_line contains \"http\") or (action_process_image_command_line contains \"rundll32\" or action_process_image_command_line contains \"regsvr32\" or action_process_image_command_line contains \"msiexec\")))) and  not ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" and (action_process_image_command_line contains \"UpdatePerUserSystemParameters\" or action_process_image_command_line contains \"PrintUIEntry\" or action_process_image_command_line contains \"ClearMyTracksByProcess\")))\n\n\n\n"}
{"prompt": " I want to see alerts related to Qakbot malware using the Regsvr32 Calc Pattern on endpoints. ", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\regsvr32\\.exe\" and action_process_image_command_line contains \" -s\" and action_process_image_command_line ~= \".*\\ calc\")\n\n\n\n"}
{"prompt": "I want to see if there have been any brute force attacks against the domain admin account over the last minute.", "response": "datamodel dataset = microsoft_windows_raw\n| filter (xdm.event.id in (\"4625\")) and (xdm.target.user.username ~= \"adssp.service|IST-ISAID|jonesj|jflores|minerva.khuele|singhals|siamert|vbanaag|Patela.Dadmin|vbanng|brunonc.dadmin|dudgeon.viona|huelek|saadmin|jonesj|kendricks.dadmin|singhals|stephenh.dadmin|veermanp.dadmin|ricardob|cian.thunder|patrick.murphy|billy.kirkpatrick|Russell.Jefferson|Borislav.Nance|EscobarLin|banaagv|Michael.Clarkson|keifer.gimenez|laong.laan|tim.rivers|Jarrett.jenkins|alex.duke|henry.reeves|Jeff.mills|saul.silvanus|parker.vega|pharrell.hill\" or xdm.target.user.username in (\"patela\")) and xdm.source.ipv4 not in (\"10.127.73.132\", \"10.127.73.133\", \"10.127.73.134\", \"10.127.73.135\")\n| fields xdm.target.user.username, xdm.event.id, xdm.event.description,\nxdm.event.outcome_reason, xdm.event.outcome, _time\n| comp earliest(_time) as First_EventTimestamp,\nlatest(_time) as Latest_EventTimestamp,\ncount() as EventCount by xdm.target.user.username,\nxdm.event.id addrawdata = true as Raw_Event_Data\n| alter Events_TimeDiff_in_Seconds = timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\")\n| filter EventCount >= 5 and timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\") <= 60"}
{"prompt": "I want to find all instances of privilege escalation via rogue named pipe impersonation in the Windows Event Log.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.description contains \"Pipe Created\" and xdm.event.description contains \"\\\\*\\\\Pipe\\\\*\"\n| fields *"}
{"prompt": "I want to find instances where Findstr.exe is being used with suspicious command-line arguments involving \"Everyone\" or \"BUILTIN\\\\\", potentially indicating permission misconfiguration reconnaissance.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\find\\.exe\" or action_process_image_path ~= \".*\\\\findstr\\.exe\") or actor_process_file_original_name in (\"FIND.EXE\", \"FINDSTR.EXE\")) and (action_process_image_command_line contains \"\\\"Everyone\\\"\" or action_process_image_command_line contains \"'Everyone'\" or action_process_image_command_line contains \"\\\"BUILTIN\\\\\\\"\" or action_process_image_command_line contains \"'BUILTIN\\\\'\")) or (action_process_image_command_line contains \"icacls \" and action_process_image_command_line contains \"findstr \" and action_process_image_command_line contains \"Everyone\")\n\n\n\n"}
{"prompt": "I want to detect potential persistence techniques by identifying changes to the \"ServiceDLL\" value in the registry.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\System\\\\.*\" and action_registry_key_name contains \"ControlSet\" and action_registry_key_name ~= \".*\\\\Services\\\\.*\") and action_registry_key_name ~= \".*\\\\Parameters\\\\ServiceDll\") and  not ((action_registry_value_name = \"C:\\\\Windows\\\\system32\\\\spool\\\\drivers\\\\x64\\\\3\\\\PrintConfig.dll\" or action_registry_data = \"C:\\\\Windows\\\\system32\\\\spool\\\\drivers\\\\x64\\\\3\\\\PrintConfig.dll\") or (actor_process_image_path = \"C:\\\\Windows\\\\system32\\\\lsass.exe\" and action_registry_key_name ~= \".*\\\\Services\\\\NTDS\\\\Parameters\\\\ServiceDll\" and (action_registry_value_name = \"%%systemroot%%\\\\system32\\\\ntdsa.dll\" or action_registry_data = \"%%systemroot%%\\\\system32\\\\ntdsa.dll\")) or actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\poqexec.exe\") and  not ((actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" and (action_registry_value_name = \"C:\\\\Windows\\\\System32\\\\STAgent.dll\" or action_registry_data = \"C:\\\\Windows\\\\System32\\\\STAgent.dll\")))\n\n\n\n"}
{"prompt": "I want to find any instances of CrackMapExec being used on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\crackmapexec\\.exe\" or action_process_image_command_line contains \" -M pe_inject \" or (action_process_image_command_line contains \" --local-auth\" and action_process_image_command_line contains \" -u \" and action_process_image_command_line contains \" -x \") or (action_process_image_command_line contains \" --local-auth\" and action_process_image_command_line contains \" -u \" and action_process_image_command_line contains \" -p \" and action_process_image_command_line contains \" -H 'NTHASH'\") or (action_process_image_command_line contains \" mssql \" and action_process_image_command_line contains \" -u \" and action_process_image_command_line contains \" -p \" and action_process_image_command_line contains \" -M \" and action_process_image_command_line contains \" -d \") or (action_process_image_command_line contains \" smb \" and action_process_image_command_line contains \" -u \" and action_process_image_command_line contains \" -H \" and action_process_image_command_line contains \" -M \" and action_process_image_command_line contains \" -o \") or (action_process_image_command_line contains \" smb \" and action_process_image_command_line contains \" -u \" and action_process_image_command_line contains \" -p \" and action_process_image_command_line contains \" --local-auth\")) or ((action_process_image_command_line contains \" --local-auth\" and action_process_image_command_line contains \" -u \" and action_process_image_command_line contains \" -p \") and (action_process_image_command_line contains \" 10.\" and action_process_image_command_line contains \" 192.168.\" and action_process_image_command_line contains \"/24 \"))\n\n\n\n"}
{"prompt": "I want to find out if someone has deleted PowerShell console history logs.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\PSReadLine\\\\ConsoleHost\\_history\\.txt\"\n\n\n\n"}
{"prompt": "I want to see alerts about potential malicious activity where over 1000 AD object values are deleted within a 5 minute period.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| bin _time span = 5m\n| alter action = arrayindex(regextract(microsoft_windows_raw._raw_log, \"\\tType:\\t(.*?)&\"), 1)\n| alter obj_id = arrayindex(regextract(microsoft_windows_raw._raw_log, \"\\tClass:\\t(.*?)&\"), 0)\n| filter obj_id = \"user\" and action = \"Value Deleted\" and xdm.source.user.username not in (\"_telex\", \"_lyncadmin\", \"_accman\", \"_adobjmgmt\") and xdm.event.id = \"5136\" and xdm.source.user.username != null\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\ncount() as matched_events,\nvalues(*) as * by _time,\nxdm.source.user.username\n| filter matched_events >= 1000\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 1000)), 1)"}
{"prompt": "I want to find events that modify the Startup value in the User Shell Folders registry key.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders\" and action_registry_key_name ~= \".*Startup\")\n\n\n\n"}
{"prompt": "I want to see alerts about Conditional Access activities in Azure, including the user who initiated them and the modified property values.", "response": "dataset = msft_azure_raw\n| alter ActivityName = json_extract_scalar(properties, \"$.loggedByService\"),\nOperationType = json_extract_scalar(properties, \"$.operationType\"),\nEmail = json_extract_scalar(properties, \"$.initiatedBy.user.userPrincipalName\"),\nProp_NewValue = json_extract_scalar(properties, \"$.targetResources[0].modifiedProperties[0].newValue\")\n| alter Display_Name = Prop_NewValue -> displayName\n| filter ActivityName contains \"Conditional Access\""}
{"prompt": "I want to find instances where a user was added to an admin group on macOS using the `sysadminctl` command.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/sysadminctl\" and (action_process_image_command_line contains \" -addUser \" and action_process_image_command_line contains \" -admin \"))\n\n\n\n"}
{"prompt": "I want to see all instances of remote mailbox modifications performed on Exchange Admin audit devices.", "response": "config case_sensitive = false\n| datamodel dataset = msft_admin_audit_raw\n| filter xdm.observer.action in (\"Set-RemoteMailbox\")\n| alter parameter_length = array_length(split(xdm.event.description, \" \")),\nparameter_values = split(xdm.event.operation, \" \")\n| alter mailbox = arrayindex(parameter_values, 0),\nMailboxAccessGivenTo = arrayindex(parameter_values, 1),\naccessrights = if(parameter_length = 3, arrayindex(parameter_values, 0), arrayindex(parameter_values, 2)),\nlog_src_name = \"AdminAudit\",\nserver_name = msft_admin_audit_raw._collector_hostname\n| fields xdm.target.user.username, xdm.source.user.username,\nxdm.observer.action, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.event.id, xdm.event.description, xdm.event.operation,\nxdm.event.operation_sub_type, xdm.observer.type,\nxdm.event.is_completed, xdm.logon.is_elevated, MailboxAccessGivenTo,\nmailbox, accessrights, _time, _insert_time, log_src_name,\nserver_name, msft_admin_audit_raw.rundate\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events that show someone changing Internet Explorer's security settings to allow downloads from the internet to have the same trust level as local files.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\\\\ZoneMap\\\\ProtocolDefaults\" and (action_registry_key_name ~= \".*\\\\http\" or action_registry_key_name ~= \".*\\\\https\") and (action_registry_value_name contains \"DWORD (0x00000000)\" or action_registry_data contains \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to find potential instances of DLL sideloading involving DBGCORE.DLL that aren't loading from expected system directories.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\dbgcore\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\SoftwareDistribution\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\SystemTemp\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\")) and  not (action_module_path ~= \".*\\\\Steam\\\\bin\\\\cef\\\\cef\\.win7x64\\\\dbgcore\\.dll\")\n\n\n\n"}
{"prompt": "I want to find instances where the Desktopimgdownldr utility is used to download files via a URL specified in the command line.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\desktopimgdownldr\\.exe\" and actor_process_image_path ~= \".*\\\\desktopimgdownldr\\.exe\" and action_process_image_command_line contains \"/lockscreenurl:http\")\n\n\n\n"}
{"prompt": "I want to detect attempts to clear PowerShell history using techniques like Set-PSReadlineOption or file deletion.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Set-PSReadlineOption\" and ScriptBlockText contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdHistorySaveStyle\" and ScriptBlockText contains \"SaveNothing\") or (ScriptBlockText contains \"Set-PSReadlineOption\" and ScriptBlockText contains \"-HistorySaveStyle\" and ScriptBlockText contains \"SaveNothing\")) or ((ScriptBlockText contains \"del\" or ScriptBlockText contains \"Remove-Item\" or ScriptBlockText contains \"rm\") and ScriptBlockText contains \"(Get-PSReadlineOption).HistorySavePath\")\n\n\n\n"}
{"prompt": "I want to see alerts for multiple failed login attempts on my ISG Unix servers from unauthorized users.", "response": "datamodel dataset = linux_linux_raw\n| bin _time span = 1m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE contains \"isg_server\" and TYPE not in (\"isg_server_qualys_src\", \"isg_server_qualys_hostsrc\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type in (\"login\", \"SSH\", \"sshd\", \"sssh\", \"User\", \"groupdel\", \"audit\", \"Successfully\", \"auditd\", \"input_userauth_request\", \"Accepted\", \"sudo\", \"userdel\", \"root\", \"Failed\", \"usermod\", \"su\", \"LOGIN\", \"passwd\", \"pam_authenticate\") and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol != \"ssh2\" and xdm.source.user.username not in (null, NULL) and xdm.source.ipv4 not in (\"<ip>\")\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, linux_linux_raw._final_reporting_device_ip,\n_vendor, _product\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to find suspicious commands on endpoints that use both \"ping\" and \"copy\" in the same line.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and (action_process_image_command_line contains \"ping\" and action_process_image_command_line contains \"copy \") and action_process_image_command_line contains \" -n \" and action_process_image_command_line contains \" -y \")\n\n\n\n"}
{"prompt": "I want to detect potential webshells based on suspicious command line keywords and processes running on my endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\w3wp\\.exe\" or actor_process_image_path ~= \".*\\\\php\\-cgi\\.exe\" or actor_process_image_path ~= \".*\\\\nginx\\.exe\" or actor_process_image_path ~= \".*\\\\httpd\\.exe\" or actor_process_image_path ~= \".*\\\\caddy\\.exe\" or actor_process_image_path ~= \".*\\\\ws\\_tomcatservice\\.exe\") or ((actor_process_image_path ~= \".*\\\\java\\.exe\" or actor_process_image_path ~= \".*\\\\javaw\\.exe\") and (actor_process_image_path contains \"-tomcat-\" or actor_process_image_path contains \"\\\\tomcat\")) or ((actor_process_image_path ~= \".*\\\\java\\.exe\" or actor_process_image_path ~= \".*\\\\javaw\\.exe\") and (action_process_image_command_line contains \"catalina.jar\" or action_process_image_command_line contains \"CATALINA_HOME\"))) and ((actor_process_file_original_name in (\"net.exe\", \"net1.exe\") and (action_process_image_command_line contains \" user \" or action_process_image_command_line contains \" use \" or action_process_image_command_line contains \" group \")) or (actor_process_file_original_name = \"ping.exe\" and action_process_image_command_line contains \" -n \") or (action_process_image_command_line contains \"&cd&echo\" or action_process_image_command_line contains \"cd /d \") or (actor_process_file_original_name = \"wmic.exe\" and action_process_image_command_line contains \" /node:\") or ((action_process_image_path ~= \".*\\\\dsquery\\.exe\" or action_process_image_path ~= \".*\\\\find\\.exe\" or action_process_image_path ~= \".*\\\\findstr\\.exe\" or action_process_image_path ~= \".*\\\\ipconfig\\.exe\" or action_process_image_path ~= \".*\\\\netstat\\.exe\" or action_process_image_path ~= \".*\\\\nslookup\\.exe\" or action_process_image_path ~= \".*\\\\pathping\\.exe\" or action_process_image_path ~= \".*\\\\quser\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\systeminfo\\.exe\" or action_process_image_path ~= \".*\\\\tasklist\\.exe\" or action_process_image_path ~= \".*\\\\tracert\\.exe\" or action_process_image_path ~= \".*\\\\ver\\.exe\" or action_process_image_path ~= \".*\\\\wevtutil\\.exe\" or action_process_image_path ~= \".*\\\\whoami\\.exe\") or actor_process_file_original_name in (\"dsquery.exe\", \"find.exe\", \"findstr.exe\", \"ipconfig.exe\", \"netstat.exe\", \"nslookup.exe\", \"pathping.exe\", \"quser.exe\", \"schtasks.exe\", \"sysinfo.exe\", \"tasklist.exe\", \"tracert.exe\", \"ver.exe\", \"VSSADMIN.EXE\", \"wevtutil.exe\", \"whoami.exe\")) or (action_process_image_command_line contains \" Test-NetConnection \" or action_process_image_command_line ~= \".*dir\\ \\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find potential abuse of registry key provisioning commands for binary proxy execution on Windows systems.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Provisioning\\\\Commands\\\\.*\"\n\n\n\n"}
{"prompt": "I want to see if any user accounts have been deleted on our NetApp NAS Filers in the last five minutes.", "response": "datamodel dataset = netapp_nas_filers_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"630\"\n| fields xdm.source.host.hostname, xdm.event.id, xdm.event.description,\nxdm.source.ipv4, xdm.source.user.username, xdm.target.user.username,\nxdm.observer.action, xdm.target.file.directory, xdm.target.file.filename,\n_time\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances where regedit is used to import registry keys from a file.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regedit\\.exe\" or actor_process_file_original_name = \"REGEDIT.EXE\") and (action_process_image_command_line contains \" /i \" or action_process_image_command_line contains \" /s \" or action_process_image_command_line contains \".reg\")) and  not ((action_process_image_command_line contains \" -e \" or action_process_image_command_line contains \" -a \" or action_process_image_command_line contains \" -c \") and action_process_image_command_line ~= \"\\:[^\\ \\\\]\")\n\n\n\n"}
{"prompt": "I want to see potential OWASSRF exploitation attempts targeting Exchange servers through proxy connections.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and xdm.network.http.response_code = 200 and (xdm.network.http.url contains \"/owa/\" and xdm.network.http.url contains \"/powershell\") and (xdm.network.http.url contains \"@\" or xdm.network.http.url contains \"%40\")) and  not (xdm.network.http.browser in (\"ClientInfo\", \"Microsoft WinRM Client\", \"Exchange BackEnd Probes\"))\n\n\n\n"}
{"prompt": "I want to see events related to processes creating or modifying registry keys under HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa with commands like \"scecli\\\\0*\" and \"reg add\", potentially indicating the dropping of a password filter DLL.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa\" and action_process_image_command_line contains \"scecli\\\\0*\" and action_process_image_command_line contains \"reg add\")\n\n\n\n"}
{"prompt": "I want to see when members of specific groups log on to computers, including their usernames, group memberships, and any error codes or failure reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4964\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find malicious activity related to RemoteFXvGPUDisablement Abuse using AtomicTestHarnesses on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Invoke-ATHRemoteFXvGPUDisablementCommand\" or action_process_image_command_line contains \"Invoke-ATHRemoteFXvGPUDisableme\")\n\n\n\n"}
{"prompt": "I want to see events where Kerberos pre-authentication is disabled for users on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4738\") and xdm.event.description contains \"'Don't Require Preauth' - Enabled\"\n| fields *"}
{"prompt": "I want to find files that have been quarantined multiple times by Symantec Endpoint Protection within the last 7 days.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type != \"Security\"\n| alter hostname = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| filter xdm.target.file.sha256 != null and hostname != null\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1),\nfile_hash = xdm.target.file.sha256,\nusername = xdm.source.user.username,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nprocess = xdm.target.file.path,\nrisk_name = xdm.alert.name,\naction = xdm.observer.action\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(directory) as directory,\nvalues(file_name) as file_name,\nvalues(file_extension) as file_extension,\nvalues(server_name) as aliashost,\nvalues(xdm.source.user.username) as username,\nvalues(symantec_server_name) as symantec_server_name,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ips,\nvalues(xdm.target.ipv4) as dst_ips,\nvalues(xdm.alert.category) as category_alert,\ncount() as matched_events by hostname,\nxdm.target.file.sha256,\n_time\n| filter matched_events >= 3\n| alter alert_category = \"Initial Access\""}
{"prompt": " I want to find activities related to audio capture using PowerShell on endpoints. ", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"WindowsAudioDevice-Powershell-Cmdlet\" or action_process_image_command_line contains \"Toggle-AudioDevice\" or action_process_image_command_line contains \"Get-AudioDevice \" or action_process_image_command_line contains \"Set-AudioDevice \" or action_process_image_command_line contains \"Write-AudioDevice \")\n\n\n\n"}
{"prompt": "I want to find suspicious activities related to debugger registration on endpoints by looking for specific command lines that modify registry settings and involve common system executables like sethc.exe, utilman.exe, etc.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*\\\\CurrentVersion\\\\Image\\ File\\ Execution\\ Options\\\\.*\" and (action_process_image_command_line contains \"sethc.exe\" or action_process_image_command_line contains \"utilman.exe\" or action_process_image_command_line contains \"osk.exe\" or action_process_image_command_line contains \"magnify.exe\" or action_process_image_command_line contains \"narrator.exe\" or action_process_image_command_line contains \"displayswitch.exe\" or action_process_image_command_line contains \"atbroker.exe\" or action_process_image_command_line contains \"HelpPane.exe\"))\n\n\n\n"}
{"prompt": "I want to detect processes that are likely hacktools based on their signer.", "response": "datamodel\n| filter ((xdm.source.process.executable.signer ~= \"HTOOL.*\" or xdm.source.process.executable.signer ~= \"HKTL.*\" or xdm.source.process.executable.signer ~= \"SecurityTool.*\" or xdm.source.process.executable.signer ~= \"Adfind.*\" or xdm.source.process.executable.signer ~= \"ATK\\/.*\" or xdm.source.process.executable.signer ~= \"Exploit\\.Script\\.CVE.*\" or xdm.source.process.executable.signer ~= \"PWS\\..*\" or xdm.source.process.executable.signer ~= \"PWSX.*\") or (xdm.source.process.executable.signer contains \"Hacktool\" or xdm.source.process.executable.signer contains \"ATK/\" or xdm.source.process.executable.signer contains \"Potato\" or xdm.source.process.executable.signer contains \"Rozena\" or xdm.source.process.executable.signer contains \"Sbelt\" or xdm.source.process.executable.signer contains \"Seatbelt\" or xdm.source.process.executable.signer contains \"SecurityTool\" or xdm.source.process.executable.signer contains \"SharpDump\" or xdm.source.process.executable.signer contains \"Sliver\" or xdm.source.process.executable.signer contains \"Splinter\" or xdm.source.process.executable.signer contains \"Swrort\" or xdm.source.process.executable.signer contains \"Impacket\" or xdm.source.process.executable.signer contains \"Koadic\" or xdm.source.process.executable.signer contains \"Lazagne\" or xdm.source.process.executable.signer contains \"Metasploit\" or xdm.source.process.executable.signer contains \"Meterpreter\" or xdm.source.process.executable.signer contains \"MeteTool\" or xdm.source.process.executable.signer contains \"Mimikatz\" or xdm.source.process.executable.signer contains \"Mpreter\" or xdm.source.process.executable.signer contains \"Nighthawk\" or xdm.source.process.executable.signer contains \"PentestPowerShell\" or xdm.source.process.executable.signer contains \"PowerSploit\" or xdm.source.process.executable.signer contains \"PowerSSH\" or xdm.source.process.executable.signer contains \"PshlSpy\" or xdm.source.process.executable.signer contains \"PSWTool\" or xdm.source.process.executable.signer contains \"PWCrack\" or xdm.source.process.executable.signer contains \"Brutel\" or xdm.source.process.executable.signer contains \"BruteR\" or xdm.source.process.executable.signer contains \"Cobalt\" or xdm.source.process.executable.signer contains \"COBEACON\" or xdm.source.process.executable.signer contains \"Cometer\" or xdm.source.process.executable.signer contains \"DumpCreds\" or xdm.source.process.executable.signer contains \"FastReverseProxy\" or xdm.source.process.executable.signer contains \"PWDump\"))\n\n\n\n"}
{"prompt": "I want to see alerts for potential malicious activity disguised as legitimate Windows Installer (msiexec.exe) processes.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\msiexec\\.exe\" or actor_process_file_original_name = \"\\\\msiexec.exe\") and  not ((action_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect processes using MsiExec for web installations.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" msiexec\" and action_process_image_command_line contains \":\n\n\n\n"}
{"prompt": "I want to see information about malicious service installations detected on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (actor_process_image_path contains \"\\\\PAExec\" or ServiceName = \"mssecsvc2.0\" or actor_process_image_path contains \"net user\" or ServiceName = \"Java(TM) Virtual Machine Support Service\")\n\n\n\n"}
{"prompt": "I want to find potential privilege escalation attempts related to the \"Always Install Elevated Windows Installer\" process.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\Windows\\\\Installer\\\\.*\" and action_process_image_path contains \"msi\") and action_process_image_path ~= \".*tmp\") or (action_process_image_path ~= \".*\\\\msiexec\\.exe\" and action_process_integrity_level = \"System\")) and (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\") and  not (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\services.exe\" or (action_process_image_command_line ~= \".*\\\\system32\\\\msiexec\\.exe\\ \\/V\" or actor_process_image_command_line ~= \".*\\\\system32\\\\msiexec\\.exe\\ \\/V\") or actor_process_image_path ~= \"C\\:\\\\ProgramData\\\\Sophos\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\ProgramData\\\\Avira\\\\.*\" or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Avast\\ Software\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Avast\\ Software\\\\.*\") or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Google\\\\Update\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Google\\\\Update\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see which RedCarpet users have accessed malicious websites or domains based on Zscaler data.", "response": "config case_sensitive = false\n| dataset = zscaler_nssweblog_raw\n| fields suser, dhost, devicehostname, cat, cs3, act\n| alter category = cat\n| filter category !~= \"Zscaler Proxy IPs\" and (category contains \"scam\" or category contains \"potentially unwanted software\" or category contains \"suspicious\" or category contains \"malicious\" or category contains \"spam\" or category contains \"phishing\" or category contains \"peer\" or category contains \"remote\" or category contains \"hacking\" or category contains \"proxy\" or category contains \"illegal\" or category contains \"game\" or category contains \"crypto\" or category contains \"weapon\" or category contains \"marijuana\" or category contains \"pornography\" or category contains \"drug\" or category contains \"spyware\" or category contains \"adware\")\n\n| comp values(category) as category,\nvalues(dhost) as dhost,\nvalues(cs3) as cs3,\nvalues(act) as action,\ncount() as matched_events by devicehostname,\nsuser"}
{"prompt": "I want to detect suspicious file deletion attempts on endpoints using commands like rm, shred, and unlink.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/rm\" or action_process_image_path ~= \".*\\/shred\" or action_process_image_path ~= \".*\\/unlink\")\n\n\n\n"}
{"prompt": "I want to find instances of malware being launched by Rundll32.EXE with specific command line arguments that indicate Rhadamanthys Stealer activity.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"RUNDLL32.EXE\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\") and action_process_image_command_line contains \"nsis_uns\" and action_process_image_command_line contains \"PrintUIEntry\")\n\n\n\n"}
{"prompt": "I want to see all the instances where users were added to SOX AD groups, including details about the action, usernames involved, and the event data.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter _collector_type = \"XDR Collector\" and event_id in (4728, 632)\n| alter TargetGroupName = event_data -> TargetUserName,\nTargetSID = event_data -> MemberSid,\nTargetDomainName = event_data -> TargetDomainName,\nSubjectUserName = event_data -> SubjectUserName,\nAction = regextract(message, \"(.*)\\n\\nSubject:\"),\nTargetUserName = User -> name\n| alter Username = concat(TargetDomainName, \"\\\", TargetGroupName),\nshortAction = \"Addition\"\n| filter Username in (\"NA\\SEC_Server_Admin_Access\", \"NA\\Global Service Accounts\", \"NA\\SEC_Server_Admin_NA\", \"NA\\SEC_APS_SA\", \"NA\\CVG_eStart_Production_Support\", \"NA\\Domain Admins\", \"NA\\ML.BI.DBAs\", \"NA\\Sec_EDW_Prod_Suppt\", \"NA\\Sec_EDW_Dev\", \"NA\\DCS_OSG_NBU\", \"NA\\SEC_SOX_Compliance\", \"NA\\NA-DBA\", \"CONVERGYS\\Elevated_Server Managers\", \"CONCENTRIX\\Domain Admins\", \"CONCENTRIX\\Server Team India\", \"CONCENTRIX\\CNX_GRP_IND_RTASQLUSERS\", \"CONCENTRIX\\SEC.Global.Windows.Server.Admin\", \"CONCENTRIX\\grp_sec_rakija_operators\", \"CONCENTRIX\\Cnx_Grp_Ind_MTP_Payroll_APIServer_Access\", \"CONCENTRIX\\SQLDBAGLOBAL\", \"CONCENTRIX\\Amer Server Admins\", \"CONCENTRIX\\CNX_Grp_US_Sec_Aps_SA\", \"CONCENTRIX\\grp_sec_jpsupport\", \"CONCENTRIX\\grp_cnx_usa_it_manage_computers\", \"CONCENTRIX\\SGP-SAGE-Admin\", \"CONCENTRIX\\emea_serverteam\", \"CONCENTRIX\\MIG_na_Sec_EDW_Prod_Suppt\", \"CONCENTRIX\\seg_grp_bi_sql_admins\", \"CONCENTRIX\\Sec_UDW_Dev\", \"CONCENTRIX\\Sec_UDW_Prod_Support\", \"CONCENTRIX\\grp_cnx_all_it_Bomgar\", \"CONCENTRIX\\grp_cnx_can_it_operations_admin\", \"CONCENTRIX\\grp_cnx_usa_az_it_system_admin\", \"CONCENTRIX\\grp_cnx_usa_sc_gvl_backup_admin\", \"CONCENTRIX\\US Network Server Team\", \"CONCENTRIX\\emea-bmc-svc\") and SubjectUserName !~= \"\\$$\"\n| fields Action, Username, SubjectUserName, TargetUserName,\nshortAction, TargetSID, event_action, event_data,\nevent_id, event_result, message, _collector_hostname"}
{"prompt": "I want to find instances where a file named \"Get-Variable.exe\" is created within the \"Local\\Microsoft\\WindowsApps\" directory.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*Local\\\\Microsoft\\\\WindowsApps\\\\Get\\-Variable\\.exe\"\n\n\n\n"}
{"prompt": "I want to find instances of the MERCURY APT group using processes that launch with the \"-exec bypass -w 1 -enc\" command and contain specific encoded data like \"UwB0AGEAcgB0AC0ASgBvAGIAIAAtAFMAYwByAGkAcAB0AEIAbABvAGMAawAgAHsAKABzAGEAcABzACAAKAAiAHAA\".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"-exec bypass -w 1 -enc\" and action_process_image_command_line contains \"UwB0AGEAcgB0AC0ASgBvAGIAIAAtAFMAYwByAGkAcAB0AEIAbABvAGMAawAgAHsAKABzAGEAcABzACAAKAAiAHAA\")\n\n\n\n"}
{"prompt": "I want to see alerts about security settings being updated on the OCSP Responder Service, especially if there are any failures or errors.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"5124\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about suspicious processes accessing SYSVOL and Group Policy files.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*\\\\SYSVOL\\\\.*\" and action_process_image_command_line ~= \".*\\\\policies\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect failed login attempts on the Hitachi PAM platform and alert if there are continuous failures, which could indicate a brute force attack.", "response": "dataset = hitachi_pam_raw\n| filter result ~= \"2FA:1|2FA:2\"\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nevent_desc = \"A user is prevented from logging into all CGI modules.\",\ndevice_type = \"pam\""}
{"prompt": "I want to see if PsExec service is being installed on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (ServiceName = \"PSEXESVC\" or actor_process_image_path ~= \".*\\\\PSEXESVC\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect PowerShell scripts that use ICMP for exfiltration.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"New-Object\" and ScriptBlockText contains \"System.Net.NetworkInformation.Ping\" and ScriptBlockText contains \".Send(\")\n\n\n\n"}
{"prompt": "I want to see alerts for when the Esentutl utility is used to gather credentials on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"esentutl\" and action_process_image_command_line contains \" /p\")\n\n\n\n"}
{"prompt": "I want to detect potential CobaltStrike process patterns on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line ~= \".*cmd\\.exe\\ \\/C\\ whoami\" and actor_process_image_path ~= \"C\\:\\\\Temp\\\\.*\") or ((actor_process_image_path ~= \".*\\\\runonce\\.exe\" or actor_process_image_path ~= \".*\\\\dllhost\\.exe\") and (action_process_image_command_line contains \"cmd.exe /c echo\" and action_process_image_command_line contains \"> \\\\\\\\.\\\\pipe\")) or ((actor_process_image_command_line contains \"cmd.exe /C echo\" and actor_process_image_command_line contains \" > \\\\\\\\.\\\\pipe\") and action_process_image_command_line ~= \".*conhost\\.exe\\ 0xffffffff\\ \\-ForceV1\") or (actor_process_image_command_line ~= \".*\\/C\\ whoami\" and action_process_image_command_line ~= \".*conhost\\.exe\\ 0xffffffff\\ \\-ForceV1\"))\n\n\n\n"}
{"prompt": "I want to find events that indicate an attacker is using Rundll32 to obfuscate their activity.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \"&&\" and actor_process_image_path contains \"rundll32\" and actor_process_image_path contains \"shell32.dll\" and actor_process_image_path contains \"shellexec_rundll\") and (actor_process_image_path contains \"value\" or actor_process_image_path contains \"invoke\" or actor_process_image_path contains \"comspec\" or actor_process_image_path contains \"iex\"))\n\n\n\n"}
{"prompt": "I want to see information about Turla Group activity detected through named pipes on my endpoints.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter PipeName in (\"\\\\atctl\", \"\\\\comnap\", \"\\\\iehelper\", \"\\\\sdlrpc\", \"\\\\userpipe\")\n\n\n\n"}
{"prompt": "I want to find suspicious user agents used in network traffic.", "response": "datamodel\n| filter ((xdm.network.http.browser ~= \"user\\-agent.*\" or xdm.network.http.browser ~= \"Mozilla\\/3\\.0\\ .*\" or xdm.network.http.browser ~= \"Mozilla\\/2\\.0\\ .*\" or xdm.network.http.browser ~= \"Mozilla\\/1\\.0\\ .*\" or xdm.network.http.browser ~= \"Mozilla\\ .*\" or xdm.network.http.browser ~= \"\\ Mozilla\\/.*\" or xdm.network.http.browser ~= \"Mozila\\/.*\" or xdm.network.http.browser ~= \"Mozilla\\/4\\.0\\ \\(compatible\\;\\ MSIE\\ 6\\.0\\;\\ MS\\ Web\\ Services\\ Client\\ Protocol.*\") or (xdm.network.http.browser contains \" (compatible;MSIE \" or xdm.network.http.browser contains \".0;Windows NT \" or xdm.network.http.browser contains \"loader\") or xdm.network.http.browser in (\"_\", \"CertUtil URL Agent\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:60.0)\", \"Mozilla/5.0 (Windows NT 6.3; WOW64; rv:28.0) Gecko/20100101 Firefox/28.0\", \"HTTPS\", \"Erbium-UA-4ce7c27cb4be9d32e333bf032c88235a\", \"x\", \"xxx\")) and  not ((xdm.network.http.browser = \"Mozilla/3.0 * Acrobat *\" or (xdm.network.http.domain ~= \".*\\.acrobat\\.com\" or xdm.network.http.domain ~= \".*\\.adobe\\.com\" or xdm.network.http.domain ~= \".*\\.adobe\\.io\")))\n\n\n\n"}
{"prompt": "I want to find network connections started by notepad.exe that aren't using port 9100.", "response": "preset = network_story\n| filter actor_process_image_path ~= \".*\\\\notepad\\.exe\" and  not ((action_local_port = 9100 or action_remote_port = 9100))\n\n\n\n"}
{"prompt": "I want to see events about AnyDesk service installations on my endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and ServiceName = \"AnyDesk Service\")\n\n\n\n"}
{"prompt": "I want to find suspicious bit jobs by identifying connections with uncategorized or pending URLs, excluding known safe domains.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol\n| alter sld = arrayindex(split(host_dst, \".\"), -2)\n| filter user_agent contains \"bits\"\n| filter host_dst != null\n| filter sld != null\n| filter category in (\"unavailable\", \"pending\", \"uncategorized\", \"none\")\n| filter sld not in (\"google\", \"microsoft\", \"edgesuite\", \"ansaldoenergia\", \"autodesk\", \"c-wss\", \"c-ij\", \"siemens\", \"cloudfront\", \"webex\", \"gvt1\", \"s-msn\", \"google-analytics\", \"googleapis\", \"googleusercontent\", \"windowsupdate\", \"adobe\", \"akamaized\", \"live\", \"gvt1-cn\")\n| fields action, ipaddr, event_source, host_dst, category,\nuser_dst, alias_host, tcp_action, result, rbytes,\nip_src, ip_dst, web_page, query, groups, bytes_src,\nextension, user_agent, referer_url, uri_port, sc_status,\nsupplier_country, client_ip_country, uri_scheme,\nsld"}
{"prompt": "I want to find instances where multiple files on the same machine have had their extensions changed repeatedly within a short period, suggesting potential ransomware activity.", "response": "dataset = xdr_data\n| filter event_type = ENUM.FILE and event_sub_type = ENUM.FILE_RENAME\n| filter action_file_previous_file_extension != action_file_extension and action_file_extension != null\n| comp count() as Matched_Events,\nvalues(action_file_previous_file_extension) as previous_file_extn,\nvalues(action_file_name) as filename,\nvalues(action_file_extension) as currentextension by agent_hostname\n| filter array_length(currentextension) = 1 and Matched_Events >= 30 and array_length(filename) > 2"}
{"prompt": "I want to find instances where uncommon applications access potentially sensitive files within the Sysvol directory.", "response": "datamodel\n| filter (xdm.target.file.path ~= \"\\\\.*\" and (xdm.target.file.path ~= \".*\\\\sysvol\\\\.*\" and xdm.target.file.path ~= \".*\\\\Policies\\\\.*\") and (xdm.target.file.path ~= \".*audit\\.csv\" or xdm.target.file.path ~= \".*Files\\.xml\" or xdm.target.file.path ~= \".*GptTmpl\\.inf\" or xdm.target.file.path ~= \".*groups\\.xml\" or xdm.target.file.path ~= \".*Registry\\.pol\" or xdm.target.file.path ~= \".*Registry\\.xml\" or xdm.target.file.path ~= \".*scheduledtasks\\.xml\" or xdm.target.file.path ~= \".*scripts\\.ini\" or xdm.target.file.path ~= \".*services\\.xml\")) and  not (((xdm.target.process.name ~= \"\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.target.process.name ~= \"\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name ~= \"\\:\\\\Windows\\\\explorer\\.exe.*\" or xdm.target.process.name ~= \"\\:\\\\Windows\\\\system32\\\\.*\" or xdm.target.process.name ~= \"\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (xdm.source.process.name ~= \"\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.source.process.name ~= \"\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \"\\:\\\\Windows\\\\explorer\\.exe.*\" or xdm.source.process.name ~= \"\\:\\\\Windows\\\\system32\\\\.*\" or xdm.source.process.name ~= \"\\:\\\\Windows\\\\SysWOW64\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to detect if ETW logging for the Service Control Manager has been disabled.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*Software\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Tracing\\\\SCM\\\\Regular\\\\TracingDisabled\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": " I want to see all CyberArk Vault activities where the destination user is \"adminstrator\" and the source IP address or device IP is 10.64.103.83, 10.82.34.113.  Please include details like the user who initiated the action, the operation performed, the time of the event, and any related commands. ", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_dst = xdm.target.user.username,\nuser_src = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station = \"10.64.103.83\" or device_ip in (\"10.64.103.83\", \"10.82.34.113\")\n| filter lowercase(user_dst) = \"adminstrator\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where PowerShell scripts are trying to retrieve information about local groups or group members.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"get-localgroup\" or ScriptBlockText contains \"Get-LocalGroupMember\") or (ScriptBlockText contains \"Get-WMIObject\" and ScriptBlockText contains \"Win32_Group\"))\n\n\n\n"}
{"prompt": "I want to find instances of potential persistence through the AutodialDLL registry key.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\Services\\\\WinSock2\\\\Parameters\\\\AutodialDLL\"\n\n\n\n"}
{"prompt": "I want to see a list of users who had at least one failed login attempt in the last 5 minutes, along with details about the failure reason and time.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| bin _time span = 5m\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\ngroups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1 JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"),\n0)\n| filter TYPE in (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| filter xdm.source.user.username in (\"sravan.nanduri\", \"sharansakthi.281670\", \"nithesh.b\") AND xdm.event.id in (\"4625\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp count() as matchevent,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by xdm.target.user.username,\n_time\n| filter matchevent >= 1\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where ETW traces are being disabled on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"cl\" and action_process_image_command_line contains \"/Trace\") or (action_process_image_command_line contains \"clear-log\" and action_process_image_command_line contains \"/Trace\") or (action_process_image_command_line contains \"sl\" and action_process_image_command_line contains \"/e:false\") or (action_process_image_command_line contains \"set-log\" and action_process_image_command_line contains \"/e:false\") or (action_process_image_command_line contains \"logman\" and action_process_image_command_line contains \"update\" and action_process_image_command_line contains \"trace\" and action_process_image_command_line contains \"--p\" and action_process_image_command_line contains \"-ets\") or action_process_image_command_line contains \"Remove-EtwTraceProvider\" or (action_process_image_command_line contains \"Set-EtwTraceProvider\" and action_process_image_command_line contains \"0x11\"))\n\n\n\n"}
{"prompt": "I want to see alerts about Azure Kubernetes clusters being created or deleted.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/WRITE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/DELETE\")\n\n\n\n"}
{"prompt": "I want to see events where Taskmgr.exe is used to create a memory dump of the LSASS process.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\taskmgr\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\taskmgr\\.exe\") or (xdm.source.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\taskmgr\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\taskmgr\\.exe\")) and (xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and xdm.target.file.filename contains \"\\\\lsass\" and xdm.target.file.filename contains \".DMP\"))\n\n\n\n"}
{"prompt": "I want to see events where a user was added to the Local Administrator group on endpoints.", "response": "preset = xdr_event_log\n| alter TargetUserName = regextract(to_json_string(action_evtlog_data_fields)->TargetUserName{}, \"\\\"(.*)\\\"\")\n| alter TargetSid = regextract(to_json_string(action_evtlog_data_fields)->TargetSid{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4732 and (TargetUserName ~= \"Administr.*\" or TargetSid = \"S-1-5-32-544\")) and  not (SubjectUserName ~= \".*\\$\")\n\n\n\n"}
{"prompt": "I want to see all network DNS requests that target \"api.telegram.org\" which might indicate communication with a Telegram bot.", "response": "datamodel\n| filter xdm.network.dns.dns_question.name = \"api.telegram.org\"\n\n\n\n"}
{"prompt": "I want to find out if anyone is using mobile VPN to connect through an unallowed gateway.", "response": "config case_sensitive = false\n| dataset = check_point_connectra_raw\n| filter act = \"Log in\" and origin != \"<ip>\" and outcome = \"Success\" and requestClientApplication = \"Mobile VPN\" and _final_reporting_device_ip = \"<ip>\" and _final_reporting_device_ip != \"<ip>\"\n| alter host_name = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = lowercase(replace(if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), if(array_length(regextract(duser, \"[a-zA-Z]+\\\\(.*)\")) > 0, arrayindex(regextract(duser, \"[a-zA-Z]+\\\\(.*)\"), 0), duser))), \"itlinfosys\", \"\"))\n| alter action = act,\nsource_port = spt,\ndest_port = dpt,\nsource_ip = src,\ndst_ip = host_ip,\nresult = outcome,\nuser_agent = requestClientApplication,\nos_edition = os_edition,\nproduct = _product\n| alter aggregation_criteria = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for potential sideloading of EACore.DLL.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\EACore\\.dll\" and  not (((actor_process_image_path ~= \".*C\\:\\\\Program\\ Files\\\\Electronic\\ Arts\\\\EA\\ Desktop\\\\.*\" and actor_process_image_path contains \"\\\\EACoreServer.exe\") and action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Electronic\\ Arts\\\\EA\\ Desktop\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances where programs are executing from common web server root folders like \"wwwroot\", \"wmpub\", or \"htdocs\" and potentially indicate suspicious activity.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\wwwroot\\\\.*\" or action_process_image_path ~= \".*\\\\wmpub\\\\.*\" or action_process_image_path ~= \".*\\\\htdocs\\\\.*\") and  not (((action_process_image_path ~= \".*bin\\\\.*\" or action_process_image_path ~= \".*\\\\Tools\\\\.*\" or action_process_image_path ~= \".*\\\\SMSComponent\\\\.*\") and actor_process_image_path ~= \".*\\\\services\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious attempts to deactivate Windows Defrag using scheduled tasks.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \"/delete\" or action_process_image_command_line contains \"/change\") and (action_process_image_command_line contains \"/TN\" and action_process_image_command_line contains \"\\\\Microsoft\\\\Windows\\\\Defrag\\\\ScheduledDefrag\"))\n\n\n\n"}
{"prompt": "I want to see events related to new applications being added to AppCompat in the Windows Event Log.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\AppCompatFlags\\\\Compatibility\\ Assistant\\\\Store\\\\.*\"\n\n\n\n"}
{"prompt": "I want to see alerts for Jlaive In-Memory Assembly Execution activity that involves `cmd.exe`, `.bat` files, and tools like `xcopy.exe`, `powershell.exe`, `pwsh.exe`, or `attrib.exe`. ", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\cmd\\.exe\" and actor_process_image_command_line ~= \".*\\.bat\") and (((action_process_image_path ~= \".*\\\\xcopy\\.exe\" and (action_process_image_command_line contains \"powershell.exe\" and action_process_image_command_line contains \".bat.exe\")) or (action_process_image_path ~= \".*\\\\xcopy\\.exe\" and (action_process_image_command_line contains \"pwsh.exe\" and action_process_image_command_line contains \".bat.exe\")) or (action_process_image_path ~= \".*\\\\attrib\\.exe\" and (action_process_image_command_line contains \"+s\" and action_process_image_command_line contains \"+h\" and action_process_image_command_line contains \".bat.exe\"))))\n\n\n\n"}
{"prompt": "I want to see events related to downloads of Office macro files, including those using common browsers and applications like Outlook or Thunderbird.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\RuntimeBroker\\.exe\" or xdm.target.process.name ~= \".*\\\\outlook\\.exe\" or xdm.target.process.name ~= \".*\\\\thunderbird\\.exe\" or xdm.target.process.name ~= \".*\\\\brave\\.exe\" or xdm.target.process.name ~= \".*\\\\chrome\\.exe\" or xdm.target.process.name ~= \".*\\\\firefox\\.exe\" or xdm.target.process.name ~= \".*\\\\iexplore\\.exe\" or xdm.target.process.name ~= \".*\\\\maxthon\\.exe\" or xdm.target.process.name ~= \".*\\\\MicrosoftEdge\\.exe\" or xdm.target.process.name ~= \".*\\\\msedge\\.exe\" or xdm.target.process.name ~= \".*\\\\msedgewebview2\\.exe\" or xdm.target.process.name ~= \".*\\\\opera\\.exe\" or xdm.target.process.name ~= \".*\\\\safari\\.exe\" or xdm.target.process.name ~= \".*\\\\seamonkey\\.exe\" or xdm.target.process.name ~= \".*\\\\vivaldi\\.exe\" or xdm.target.process.name ~= \".*\\\\whale\\.exe\") or (xdm.source.process.name ~= \".*\\\\RuntimeBroker\\.exe\" or xdm.source.process.name ~= \".*\\\\outlook\\.exe\" or xdm.source.process.name ~= \".*\\\\thunderbird\\.exe\" or xdm.source.process.name ~= \".*\\\\brave\\.exe\" or xdm.source.process.name ~= \".*\\\\chrome\\.exe\" or xdm.source.process.name ~= \".*\\\\firefox\\.exe\" or xdm.source.process.name ~= \".*\\\\iexplore\\.exe\" or xdm.source.process.name ~= \".*\\\\maxthon\\.exe\" or xdm.source.process.name ~= \".*\\\\MicrosoftEdge\\.exe\" or xdm.source.process.name ~= \".*\\\\msedge\\.exe\" or xdm.source.process.name ~= \".*\\\\msedgewebview2\\.exe\" or xdm.source.process.name ~= \".*\\\\opera\\.exe\" or xdm.source.process.name ~= \".*\\\\safari\\.exe\" or xdm.source.process.name ~= \".*\\\\seamonkey\\.exe\" or xdm.source.process.name ~= \".*\\\\vivaldi\\.exe\" or xdm.source.process.name ~= \".*\\\\whale\\.exe\")) and ((xdm.target.file.filename ~= \".*\\.docm\" or xdm.target.file.filename ~= \".*\\.dotm\" or xdm.target.file.filename ~= \".*\\.xlsm\" or xdm.target.file.filename ~= \".*\\.xltm\" or xdm.target.file.filename ~= \".*\\.potm\" or xdm.target.file.filename ~= \".*\\.pptm\") or (xdm.target.file.filename contains \".docm:Zone\" or xdm.target.file.filename contains \".dotm:Zone\" or xdm.target.file.filename contains \".xlsm:Zone\" or xdm.target.file.filename contains \".xltm:Zone\" or xdm.target.file.filename contains \".potm:Zone\" or xdm.target.file.filename contains \".pptm:Zone\")))\n\n\n\n"}
{"prompt": "I want to find instances where processes are being terminated on Linux endpoints using commands like \"kill\", \"pkill\", or \"killall\".", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/kill\" or action_process_image_path ~= \".*\\/pkill\" or action_process_image_path ~= \".*\\/killall\")\n\n\n\n"}
{"prompt": "I want to see alerts related to Apache Spark Shell Command Injection attacks that are found in weblogs.", "response": "datamodel\n| filter xdm.network.http.url contains \"*doAs=`\"\n\n\n\n"}
{"prompt": "I want to find registry changes that might indicate persistence through modifications to the \"Default\" property of keys under \\Software\\Microsoft\\Windows\\CurrentVersion\\App Paths.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\App Paths\" and (action_registry_key_name ~= \".*\\(Default\\)\" or action_registry_key_name ~= \".*Path\") and ((action_registry_value_name contains \"\\\\Users\\\\Public\" or action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\\\Windows\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\\\Desktop\\\\.*\" or action_registry_value_name ~= \".*\\\\Downloads\\\\.*\" or action_registry_value_name contains \"%temp%\" or action_registry_value_name contains \"%tmp%\" or action_registry_value_name contains \"iex\" or action_registry_value_name contains \"Invoke-\" or action_registry_value_name contains \"rundll32\" or action_registry_value_name contains \"regsvr32\" or action_registry_value_name contains \"mshta\" or action_registry_value_name contains \"cscript\" or action_registry_value_name contains \"wscript\" or action_registry_value_name contains \".bat\" or action_registry_value_name contains \".hta\" or action_registry_value_name contains \".dll\" or action_registry_value_name contains \".ps1\") or (action_registry_data contains \"\\\\Users\\\\Public\" or action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\\\Windows\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\\\Desktop\\\\.*\" or action_registry_data ~= \".*\\\\Downloads\\\\.*\" or action_registry_data contains \"%temp%\" or action_registry_data contains \"%tmp%\" or action_registry_data contains \"iex\" or action_registry_data contains \"Invoke-\" or action_registry_data contains \"rundll32\" or action_registry_data contains \"regsvr32\" or action_registry_data contains \"mshta\" or action_registry_data contains \"cscript\" or action_registry_data contains \"wscript\" or action_registry_data contains \".bat\" or action_registry_data contains \".hta\" or action_registry_data contains \".dll\" or action_registry_data contains \".ps1\")))\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to attackers using the \"wbadmin\" utility to recover sensitive files like NTDS.DIT and SECURITY hives.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wbadmin\\.exe\" or actor_process_file_original_name = \"WBADMIN.EXE\") and ((action_process_image_command_line contains \" recovery\" and action_process_image_command_line contains \"recoveryTarget\" and action_process_image_command_line contains \"itemtype:File\") and (action_process_image_command_line contains \"\\\\config\\\\SAM\" or action_process_image_command_line contains \"\\\\config\\\\SECURITY\" or action_process_image_command_line contains \"\\\\config\\\\SYSTEM\" or action_process_image_command_line contains \"\\\\Windows\\\\NTDS\\\\NTDS.dit\")))\n\n\n\n"}
{"prompt": "I want to see all Windows authentication events (Event ID 4624) from known malicious machines that include either \"<host>\" or \"<description>\" in the event description.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4624\") and (xdm.event.description contains \"<host>\" or xdm.event.description contains \"<description>\")\n| fields *"}
{"prompt": "I want to see firewall logs from Cisco ASA, Fortinet Fortigate, and SonicWall NS devices that show hits on known malicious IP addresses from Intel's IOC list.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter xdm.source.ipv4 not in (null, NULL, \"\"\"\"\"\") and xdm.target.ipv4 not in (null, NULL, \"\"\"\"\"\")\n\n| fields _time, _insert_time, _product, _vendor, comment,\nsource_ip, xdm.alert.severity, xdm.event.duration,\nxdm.event.is_completed, xdm.event.operation_sub_type,\nxdm.event.original_event_type, xdm.network.application_protocol,\nxdm.network.ip_protocol, xdm.observer.action, xdm.observer.name,\nxdm.observer.product, xdm.observer.type, xdm.observer.unique_identifier,\nxdm.observer.vendor, xdm.session_context_id, xdm.source.asn.as_name,\nxdm.source.asn.as_number, xdm.source.ipv4, xdm.target.ipv4,\nxdm.source.location.city, xdm.source.location.country,\nxdm.source.location.latitude, xdm.source.location.longitude,\nxdm.source.location.region, xdm.source.location.timezone,\nxdm.source.port, xdm.source.sent_bytes, xdm.source.sent_packets,\nxdm.source.user.domain, xdm.target.asn.as_name, xdm.target.asn.as_number,\nxdm.target.location.city, xdm.target.location.country,\nxdm.target.location.latitude, xdm.target.location.longitude,\nxdm.target.location.region, xdm.target.location.timezone,\nxdm.target.port, xdm.target.sent_packets, xdm.network.protocol_layers,\ncisco_asa_raw._raw_log, fortinet_fortigate1_raw._raw_log,\nfortinet_fortigate_raw._raw_log, sonicwall_ns_raw._raw_log\n| alter bin_time = _time\n| bin bin_time span = 1m timeshift = 1707696000\n| alter FW_Raw_Log = coalesce(cisco_asa_raw._raw_log, fortinet_fortigate1_raw._raw_log, fortinet_fortigate_raw._raw_log, sonicwall_ns_raw._raw_log)\n| comp earliest(_time) as Earliest_Event_Timestamp,\nvalues(FW_Raw_Log) as Event_RawLog,\nvalues(to_string(xdm.network.protocol_layers)) as Protocols by bin_time,\n_product,\n_vendor,\ncomment,\nsource_ip,\nxdm.alert.severity,\nxdm.event.duration,\nxdm.event.is_completed,\nxdm.event.operation_sub_type,\nxdm.event.original_event_type,\nxdm.network.application_protocol,\nxdm.network.ip_protocol,\nxdm.observer.action,\nxdm.observer.name,\nxdm.observer.product,\nxdm.observer.type,\nxdm.observer.unique_identifier,\nxdm.observer.vendor,\nxdm.session_context_id,\nxdm.source.asn.as_name,\nxdm.source.asn.as_number,\nxdm.source.ipv4,\nxdm.target.ipv4,\nxdm.source.location.city,\nxdm.source.location.country,\nxdm.source.location.latitude,\nxdm.source.location.longitude,\nxdm.source.location.region,\nxdm.source.location.timezone,\nxdm.source.port,\nxdm.source.sent_bytes,\nxdm.source.sent_packets,\nxdm.source.user.domain,\nxdm.target.asn.as_name,\nxdm.target.asn.as_number,\nxdm.target.location.city,\nxdm.target.location.country,\nxdm.target.location.latitude,\nxdm.target.location.longitude,\nxdm.target.location.region,\nxdm.target.location.timezone,\nxdm.target.port,\nxdm.target.sent_packets"}
{"prompt": "I want to see logs of NTLMv1 logon events between clients and servers on my endpoints.", "response": "preset = xdr_event_log\n| filter (provider_name = \"LsaSrv\" and action_evtlog_event_id in (6038, 6039))\n\n\n\n"}
{"prompt": "I want to detect suspicious processes that are children of the Userinit executable and aren't legitimate system processes like explorer.exe or part of the netlogon directory.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\userinit\\.exe\" and  not (action_process_image_command_line ~= \".*\\\\netlogon\\\\.*\" or (action_process_image_path ~= \".*\\\\explorer\\.exe\" or actor_process_file_original_name = \"explorer.exe\"))\n\n\n\n"}
{"prompt": "I want to see which scheduled tasks names are being used by Cozy Bear malware on my endpoints.", "response": "preset = xdr_event_log\n| alter TaskName = regextract(to_json_string(action_evtlog_data_fields)->TaskName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4698, 4699, 4702) and TaskName in (\"\\\\defender\", \"\\\\Microsoft\\\\DefenderService\", \"\\\\Microsoft\\\\Windows\\\\Application Experience\\\\StartupAppTaskCheck\", \"\\\\Microsoft\\\\Windows\\\\Application Experience\\\\StartupAppTaskCkeck\", \"\\\\Microsoft\\\\Windows\\\\ATPUpd\", \"\\\\Microsoft\\\\Windows\\\\Data Integrity Scan\\\\Data Integrity Update\", \"\\\\Microsoft\\\\Windows\\\\DefenderUPDService\", \"\\\\Microsoft\\\\Windows\\\\IISUpdateService\", \"\\\\Microsoft\\\\Windows\\\\Speech\\\\SpeechModelInstallTask\", \"\\\\Microsoft\\\\Windows\\\\WiMSDFS\", \"\\\\Microsoft\\\\Windows\\\\Windows Defender\\\\Defender Update Service\", \"\\\\Microsoft\\\\Windows\\\\Windows Defender\\\\Service Update\", \"\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\CheckReporting\", \"\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\SubmitReporting\", \"\\\\Microsoft\\\\Windows\\\\Windows Filtering Platform\\\\BfeOnServiceStart\", \"\\\\Microsoft\\\\Windows\\\\WindowsDefenderService\", \"\\\\Microsoft\\\\Windows\\\\WindowsDefenderService2\", \"\\\\Microsoft\\\\Windows\\\\WindowsUpdate\\\\Scheduled AutoCheck\", \"\\\\Microsoft\\\\Windows\\\\WindowsUpdate\\\\Scheduled Check\", \"\\\\WindowUpdate\"))\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is being used to manipulate local user accounts on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Disable-LocalUser\" or ScriptBlockText contains \"Enable-LocalUser\" or ScriptBlockText contains \"Get-LocalUser\" or ScriptBlockText contains \"Set-LocalUser\" or ScriptBlockText contains \"New-LocalUser\" or ScriptBlockText contains \"Rename-LocalUser\" or ScriptBlockText contains \"Remove-LocalUser\")\n\n\n\n"}
{"prompt": "I want to see a list of security group creation and deletion events performed by non-admin users on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4730\", \"4734\", \"4654\", \"4758\", \"4727\", \"4731\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find PowerShell scripts that use the \"Compress-Archive\" cmdlet because it might be a sign of data exfiltration.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Compress-Archive\"\n\n\n\n"}
{"prompt": "I want to see events related to potential UAC bypass attempts using the EditionUpgradeManager COM interface.", "response": "preset = xdr_event_log\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| filter CallTrace contains \"editionupgrademanagerobj.dll\"\n\n\n\n"}
{"prompt": "I want to find suspicious remote commands executed through ScreenConnect.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\ScreenConnect\\.ClientService\\.exe\"\n\n\n\n"}
{"prompt": "I want to see indicators of potential Empire/PowerSploit scheduled task creation on my endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\") and action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \"/Create\" and action_process_image_command_line contains \"powershell.exe -NonI\" and action_process_image_command_line contains \"/TN Updater /TR\") and (action_process_image_command_line contains \"/SC ONLOGON\" or action_process_image_command_line contains \"/SC DAILY /ST\" or action_process_image_command_line contains \"/SC ONIDLE\" or action_process_image_command_line contains \"/SC HOURLY\"))\n\n\n\n"}
{"prompt": "I want to detect unauthorized system time modifications on my endpoints.", "response": "preset = xdr_event_log\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserSid = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserSid{}, \"\\\"(.*)\\\"\")\n| filter action_evtlog_event_id = 4616 and  not (ProcessName in (\"C:\\\\Program Files\\\\VMware\\\\VMware Tools\\\\vmtoolsd.exe\", \"C:\\\\Windows\\\\System32\\\\VBoxService.exe\", \"C:\\\\Windows\\\\System32\\\\oobe\\\\msoobe.exe\") or (ProcessName = \"C:\\\\Windows\\\\System32\\\\svchost.exe\" and SubjectUserSid = \"S-1-5-19\"))\n\n\n\n"}
{"prompt": "I want to detect potential Perl reverse shell executions on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/perl\" and action_process_image_command_line contains \" -e \") and ((action_process_image_command_line contains \"fdopen(\" and action_process_image_command_line contains \"::Socket::INET\") or (action_process_image_command_line contains \"Socket\" and action_process_image_command_line contains \"connect\" and action_process_image_command_line contains \"open\" and action_process_image_command_line contains \"exec\")))\n\n\n\n"}
{"prompt": "I want to see events related to malicious use of the Windows Update Client (wuauclt.exe) as a Living Off the Land Binaries (LOLBIN) technique.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wuauclt\\.exe\" or actor_process_file_original_name = \"wuauclt.exe\") and (action_process_image_command_line contains \"/UpdateDeploymentProvider\" and action_process_image_command_line contains \"/RunHandlerComServer\" and action_process_image_command_line contains \".dll\")) and  not ((action_process_image_command_line contains \" /ClassId \" or action_process_image_command_line contains \" wuaueng.dll \"))\n\n\n\n"}
{"prompt": "I want to see if any suspicious changes have been made to the \"Backup Mgr\" registry key.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\Backup\\ Mgr\"\n\n\n\n"}
{"prompt": "I want to see all instances where PowerShell was used to retrieve Active Directory computer information and export it to a file.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and ((action_process_image_command_line contains \"Get-ADComputer \" and action_process_image_command_line contains \" -Filter \\*\") and (action_process_image_command_line contains \" > \" or action_process_image_command_line contains \" | Select \" or action_process_image_command_line contains \"Out-File\" or action_process_image_command_line contains \"Set-Content\" or action_process_image_command_line contains \"Add-Content\")))\n\n\n\n"}
{"prompt": "I want to see alerts when there are 5 or more hits from the same DMZ IP towards any External IP on ports other than 80 & 443 within a 5 minute span.", "response": "config case_sensitive = false\n| datamodel dataset = check_point_vpn_1_firewall_1_raw\n| bin _time span = 5m\n| filter xdm.target.port not in (80, 443) and xdm.target.is_internal_ip = false and check_point_vpn_1_firewall_1_raw._final_reporting_device_ip != \"<ip>\"\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address as sip\n) as dmzips dmzips.sip = xdm.source.ipv4\n| filter (sip != NULL)\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address as dip\n) as dmzips dmzips.dip = xdm.target.ipv4\n| filter (dip = NULL)\n| alter result = null,\nuser_agent = null,\nos_edition = null\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.target.ipv4) as dst_ip,\nvalues(xdm.source.port) as src_port,\nvalues(xdm.target.port) as dst_port,\nvalues(xdm.observer.action) as action,\nvalues(xdm.target.user.username) as username,\nvalues(check_point_vpn_1_firewall_1_raw.origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(xdm.source.host.hostname) as hostname,\nvalues(_product) as product,\ncount() as matched_events by xdm.source.ipv4,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see events related to suspicious Bitstransfer activities using PowerShell on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \"Get-BitsTransfer\" or action_process_image_command_line contains \"Add-BitsFile\"))\n\n\n\n"}
{"prompt": "I want to find suspicious files that are downloading using the Notepad++ GUP utility.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\GUP\\.exe\" or actor_process_file_original_name = \"gup.exe\") and (action_process_image_command_line contains \" -unzipTo \" and action_process_image_command_line contains \"http\")) and  not (actor_process_image_path ~= \".*\\\\notepad\\+\\+\\.exe\")\n\n\n\n"}
{"prompt": "I want to get alerted when new domain federations are set up in Office 365.", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Operation ~= \"Set domain authentication\"\n| alter source_user = json_extract_scalar(`Target`, \"$[3].ID\")\n| fields UserId, source_user, ObjectId, ResultStatus, Operation,\n_time, CreationTime, `Target`\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to detect suspicious activity on my endpoints where processes use shell pipes to execute commands.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line ~= \"sh\\ \\-c\\ .*\" or action_process_image_command_line ~= \"bash\\ \\-c\\ .*\") and ((action_process_image_command_line contains \"| bash \" or action_process_image_command_line contains \"| sh \" or action_process_image_command_line contains \"|bash \" or action_process_image_command_line contains \"|sh \") or (action_process_image_command_line ~= \".*\\|\\ bash\" or action_process_image_command_line ~= \".*\\|\\ sh\" or action_process_image_command_line ~= \".*\\|bash\" or action_process_image_command_line ~= \".*\\ \\|sh\")))\n\n\n\n"}
{"prompt": " I want to see alerts when any lookup files are deleted from management auditing datasets. ", "response": "config case_sensitive = false\n| dataset = management_auditing\n| filter management_auditing_type = \"Datasets\" and subtype contains \"Delete dataset\" and description contains \"Lookup\"\n| fields _time, description, email, id, subtype, user_name\n| view column order = populated"}
{"prompt": "I want to detect suspicious processes that are being created using the Sysnative folder on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Sysnative\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\Sysnative\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see any PowerShell events that use the Win32_PnPEntity object.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Win32_PnPEntity\"\n\n\n\n"}
{"prompt": "I want to find instances of Dynamic Linker Copy attacks, which involve copying dynamic linker files like ld-linux-x86-64.so.2 or /etc/ld.so.preload,  from the XDR data source.", "response": "config case_sensitive = false\n| datamodel dataset = xdr_data\n| filter xdm.source.host.os_family = XDM_CONST.OS_FAMILY_LINUX and ((xdm.source.process.command_line contains \"cp \" or xdm.source.process.command_line contains \"rsync\") and (xdm.source.process.command_line contains \"/lib/x86_64-linux-gnu/ld-linux-x86-64.so.2\" or xdm.source.process.command_line contains \"/etc/ld.so.preload\")) and xdm.target.file.extension in (\"so\")\n| fields *\n"}
{"prompt": "I want to find any instances where a file named \"Zone.Identifier\" has been deleted.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\:Zone\\.Identifier\"\n\n\n\n"}
{"prompt": "I want to detect instances of PingCastle being executed from potentially suspicious locations on endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_image_command_line contains \".bat\" or actor_process_image_command_line contains \".chm\" or actor_process_image_command_line contains \".cmd\" or actor_process_image_command_line contains \".hta\" or actor_process_image_command_line contains \".htm\" or actor_process_image_command_line contains \".html\" or actor_process_image_command_line contains \".js\" or actor_process_image_command_line contains \".lnk\" or actor_process_image_command_line contains \".ps1\" or actor_process_image_command_line contains \".vbe\" or actor_process_image_command_line contains \".vbs\" or actor_process_image_command_line contains \".wsf\") or (actor_process_image_command_line ~= \".*\\:\\\\Perflogs\\\\.*\" or actor_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or actor_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or actor_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or actor_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\" or actor_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or actor_process_image_command_line contains \"\\\\Temporary Internet\") or ((actor_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_command_line ~= \".*\\\\Favorites\\\\.*\") or (actor_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_command_line ~= \".*\\\\Favourites\\\\.*\") or (actor_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_command_line ~= \".*\\\\Contacts\\\\.*\"))) and (actor_process_image_command_line contains \".bat\" or actor_process_image_command_line contains \".chm\" or actor_process_image_command_line contains \".cmd\" or actor_process_image_command_line contains \".hta\" or actor_process_image_command_line contains \".htm\" or actor_process_image_command_line contains \".html\" or actor_process_image_command_line contains \".js\" or actor_process_image_command_line contains \".lnk\" or actor_process_image_command_line contains \".ps1\" or actor_process_image_command_line contains \".vbe\" or actor_process_image_command_line contains \".vbs\" or actor_process_image_command_line contains \".wsf\") and (action_process_image_path ~= \".*\\\\PingCastle\\.exe\" or actor_process_file_original_name = \"PingCastle.exe\" or action_process_signature_product = \"Ping Castle\" or (action_process_image_command_line contains \"--scanner aclcheck\" or action_process_image_command_line contains \"--scanner antivirus\" or action_process_image_command_line contains \"--scanner computerversion\" or action_process_image_command_line contains \"--scanner foreignusers\" or action_process_image_command_line contains \"--scanner laps_bitlocker\" or action_process_image_command_line contains \"--scanner localadmin\" or action_process_image_command_line contains \"--scanner nullsession\" or action_process_image_command_line contains \"--scanner nullsession-trust\" or action_process_image_command_line contains \"--scanner oxidbindings\" or action_process_image_command_line contains \"--scanner remote\" or action_process_image_command_line contains \"--scanner share\" or action_process_image_command_line contains \"--scanner smb\" or action_process_image_command_line contains \"--scanner smb3querynetwork\" or action_process_image_command_line contains \"--scanner spooler\" or action_process_image_command_line contains \"--scanner startup\" or action_process_image_command_line contains \"--scanner zerologon\") or action_process_image_command_line contains \"--no-enum-limit\" or (action_process_image_command_line contains \"--healthcheck\" and action_process_image_command_line contains \"--level Full\") or (action_process_image_command_line contains \"--healthcheck\" and action_process_image_command_line contains \"--server \"))\n\n\n\n"}
{"prompt": "I want to detect suspicious activity where an attacker uses nslookup through PowerShell to download files.", "response": "preset = xdr_process\n| filter ((action_process_image_path contains \"\\\\nslookup.exe\" or actor_process_file_original_name = \"\\\\nslookup.exe\") and ((actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \" -q=txt \" or action_process_image_command_line contains \" -querytype=txt \")))\n\n\n\n"}
{"prompt": "I want to see events related to an exploit of CVE-2019-1388 that involves consent.exe and iexplore.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\consent\\.exe\" and action_process_image_path ~= \".*\\\\iexplore\\.exe\" and action_process_image_command_line contains \" http\") and (action_process_integrity_level = \"System\" or (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\"))\n\n\n\n"}
{"prompt": " I want to see all attempts to retrieve user details from the CyberArk Vault, specifically focusing on events with reference ID 178 that originated from station 10.64.103.83 and were recorded by device 10.64.103.83.", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_dst = xdm.target.user.username,\nuser_src = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station != \"10.64.103.83\" and device_ip = \"10.64.103.83\"\n| filter reference_id in (178)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see potential data exfiltration attempts that involve writing audio files.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"[System.Math]::\" and ScriptBlockText contains \"[IO.FileMode]::\" and ScriptBlockText contains \"BinaryWriter\") and ((ScriptBlockText contains \"0x52\" and ScriptBlockText contains \"0x49\" and ScriptBlockText contains \"0x46\" and ScriptBlockText contains \"0x57\" and ScriptBlockText contains \"0x41\" and ScriptBlockText contains \"0x56\" and ScriptBlockText contains \"0x45\" and ScriptBlockText contains \"0xAC\"))\n\n\n\n"}
{"prompt": "I want to find suspicious reconnaissance activity on Windows endpoints using Net.EXE that might be looking at group or account information.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and ((((action_process_image_command_line contains \" group \" or action_process_image_command_line contains \" localgroup \") and (action_process_image_command_line contains \"domain admins\" or action_process_image_command_line contains \" administrator\" or action_process_image_command_line contains \" administrateur\" or action_process_image_command_line contains \"enterprise admins\" or action_process_image_command_line contains \"Exchange Trusted Subsystem\" or action_process_image_command_line contains \"Remote Desktop Users\" or action_process_image_command_line contains \"Utilisateurs du Bureau \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd distance\" or action_process_image_command_line contains \"Usuarios de escritorio remoto\" or action_process_image_command_line contains \" /do\")) and  not (action_process_image_command_line contains \" /add\")) or (action_process_image_command_line contains \" accounts \" and action_process_image_command_line contains \" /do\"))\n\n\n\n"}
{"prompt": "I want to find instances where IIS web server access logs have been deleted.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\inetpub\\\\logs\\\\LogFiles\\\\.*\" and xdm.target.file.filename ~= \".*\\.log\")\n\n\n\n"}
{"prompt": "I want to detect instances where Gpscript.exe is used with the /logon or /startup parameters, potentially indicating malicious activity.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\gpscript\\.exe\" or actor_process_file_original_name = \"GPSCRIPT.EXE\") and (action_process_image_command_line contains \" /logon\" or action_process_image_command_line contains \" /startup\")) and  not (actor_process_image_command_line = \"C:\\\\windows\\\\system32\\\\svchost.exe -k netsvcs -p -s gpsvc\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to reconnaissance of the LSASS process using Findstr.exe.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\find\\.exe\" or action_process_image_path ~= \".*\\\\findstr\\.exe\") or actor_process_file_original_name in (\"FIND.EXE\", \"FINDSTR.EXE\")) and action_process_image_command_line contains \"lsass\") or (action_process_image_command_line contains \" /i \\\"lsass\" or action_process_image_command_line contains \" /i lsass.exe\" or action_process_image_command_line contains \"findstr \\\"lsass\" or action_process_image_command_line contains \"findstr lsass\" or action_process_image_command_line contains \"findstr.exe \\\"lsass\" or action_process_image_command_line contains \"findstr.exe lsass\")\n\n\n\n"}
{"prompt": "I want to find indicators of the \"Pingback Backdoor\" malware that specifically involves the file \"oci.dll\" being used by processes named \"updata.exe\".", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*updata\\.exe\" or xdm.source.process.name ~= \".*updata\\.exe\") and xdm.target.file.filename = \"C:\\\\Windows\\\\oci.dll\")\n\n\n\n"}
{"prompt": "I want to find suspicious files that were created through the OneNote application.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\onenote\\.exe\" or xdm.target.process.name ~= \".*\\\\onenotem\\.exe\" or xdm.target.process.name ~= \".*\\\\onenoteim\\.exe\") or (xdm.source.process.name ~= \".*\\\\onenote\\.exe\" or xdm.source.process.name ~= \".*\\\\onenotem\\.exe\" or xdm.source.process.name ~= \".*\\\\onenoteim\\.exe\")) and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\OneNote\\\\.*\" and (xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.chm\" or xdm.target.file.filename ~= \".*\\.cmd\" or xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\" or xdm.target.file.filename ~= \".*\\.hta\" or xdm.target.file.filename ~= \".*\\.htm\" or xdm.target.file.filename ~= \".*\\.html\" or xdm.target.file.filename ~= \".*\\.js\" or xdm.target.file.filename ~= \".*\\.lnk\" or xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.vbe\" or xdm.target.file.filename ~= \".*\\.vbs\" or xdm.target.file.filename ~= \".*\\.wsf\"))\n\n\n\n"}
{"prompt": "I want to see Cortex XQL queries that detect potential Impacket SecretDump activity on endpoints, specifically looking for events where credentials might be accessed.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName = \"\\\\\\\\\\*\\\\ADMIN$\" and (RelativeTargetName ~= \".*SYSTEM32\\\\.*\" and RelativeTargetName contains \".tmp\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when the Microsoft Workflow Compiler is being executed on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\Microsoft\\.Workflow\\.Compiler\\.exe\" or actor_process_file_original_name = \"Microsoft.Workflow.Compiler.exe\")\n\n\n\n"}
{"prompt": "I want to find instances of malware injecting DLLs into running processes on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \" /INJECTRUNNING \" and  not (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\AppVClient.exe\")\n\n\n\n"}
{"prompt": "I want to see if any Office applications have loaded the dsparse.dll file.", "response": "preset = xdr_image_load\n| filter ((actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\mspub\\.exe\" or actor_process_image_path ~= \".*\\\\onenote\\.exe\" or actor_process_image_path ~= \".*\\\\onenoteim\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\winword\\.exe\") and action_module_path contains \"\\\\dsparse.dll\")\n\n\n\n"}
{"prompt": "I want to find instances where an attacker might be exploiting the Atlassian Confluence CVE-2021-26084 vulnerability.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\Atlassian\\\\Confluence\\\\jre\\\\bin\\\\java\\.exe\" and (action_process_image_command_line contains \"certutil\" or action_process_image_command_line contains \"cmd /c\" or action_process_image_command_line contains \"cmd /k\" or action_process_image_command_line contains \"cscript\" or action_process_image_command_line contains \"curl\" or action_process_image_command_line contains \"ipconfig\" or action_process_image_command_line contains \"powershell\" or action_process_image_command_line contains \"pwsh\" or action_process_image_command_line contains \"regsvr32\" or action_process_image_command_line contains \"rundll32\" or action_process_image_command_line contains \"whoami\" or action_process_image_command_line contains \"wscript\"))\n\n\n\n"}
{"prompt": "I want to find instances where IMEWDBLD.EXE downloads files from the internet.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\IMEWDBLD\\.exe\" or actor_process_file_original_name = \"imewdbld.exe\") and (action_process_image_command_line contains \"http:\n\n\n\n"}
{"prompt": "I want to see activity related to the Rorschach ransomware, specifically when it uses tools like bcdedit, net, netsh, wevtutil, or vssadmin and includes \"11111111\" in the command line.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\bcdedit\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\" or action_process_image_path ~= \".*\\\\netsh\\.exe\" or action_process_image_path ~= \".*\\\\wevtutil\\.exe\" or action_process_image_path ~= \".*\\\\vssadmin\\.exe\") and action_process_image_command_line contains \"11111111\")\n\n\n\n"}
{"prompt": "I want to detect suspicious printer driver installations where the manufacturer name is empty.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"\\\\Control\\\\Print\\\\Environments\\\\Windows x64\\\\Drivers\" and action_registry_key_name contains \"\\\\Manufacturer\") and (action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\")) and  not (action_registry_key_name ~= \".*\\\\CutePDF\\ Writer\\ v4\\.0\\\\.*\" or (action_registry_key_name ~= \".*\\\\VNC\\ Printer\\ \\(PS\\)\\\\.*\" or action_registry_key_name ~= \".*\\\\VNC\\ Printer\\ \\(UD\\)\\\\.*\") or action_registry_key_name ~= \".*\\\\Version\\-3\\\\PDF24\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find out if any VIP is experiencing traffic spikes that are more than 1.5 times their normal daily average over the last 7 days.", "response": "datamodel dataset in (f5_asm_raw)\n| alter 7days_t = date_floor(_time, \"h\")\n| fields xdm.network.rule, f5_asm_raw.dvc, 7days_t\n| alter 7days_dvc = `f5_asm_raw.dvc`\n| comp count() as 7day_c by xdm.network.rule,\n7days_dvc,\n7days_t\n| alter 7days_hour = extract_time(7days_t, \"HOUR\")\n| filter timestamp_diff(current_time(), 7days_t, \"hour\") > 144 and timestamp_diff(current_time(), 7days_t, \"hour\") <= 168\n| join type = inner\n(dataset = f5_asm_raw\n| fields _time, dvc, cs1\n| alter dt = date_floor(_time, \"h\")\n| filter timestamp_diff(current_time(), dt, \"hour\") <= 24\n| comp count() as d_c by cs1,\ndvc,\ndt\n| alter d_hour = extract_time(dt, \"HOUR\")\n) as d d.cs1 = xdm.network.rule and d.dvc = 7days_dvc and 7days_hour = d.d_hour\n| filter multiply(1.5, 7day_c) < d_c"}
{"prompt": "I want to see all events where Rundll32 is being used to execute inline VBScript that reads from the registry and closes windows.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"rundll32.exe\" and action_process_image_command_line contains \"Execute\" and action_process_image_command_line contains \"RegRead\" and action_process_image_command_line contains \"window.close\")\n\n\n\n"}
{"prompt": "I want to find instances of LaZagne credential dumping by looking for processes accessing lsass.exe with specific call traces and granted access permissions.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and (CallTrace contains \"C:\\\\Windows\\\\SYSTEM32\\\\ntdll.dll+\" and CallTrace contains \"|C:\\\\Windows\\\\System32\\\\KERNELBASE.dll+\" and CallTrace contains \"_ctypes.pyd+\" and CallTrace contains \"python27.dll+\") and GrantedAccess = \"0x1FFFFF\")\n\n\n\n"}
{"prompt": "I want to find instances where users or processes are retrieving information about SMB shares on endpoints using PowerShell.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter (Payload contains \"get-smbshare\" or ContextInfo contains \"get-smbshare\")\n\n\n\n"}
{"prompt": "I want to see alerts for processes creating p cwrun.exe with \"../\" in the command line.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\pcwrun\\.exe\" and action_process_image_command_line contains \"../\")\n\n\n\n"}
{"prompt": "I want to see all activities related to high-privileged access groups, including changes, additions and removals of members. I need to know which users were added/removed and what time these events occurred.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| arrayexpand xdm.target.user.groups\n| filter xdm.target.user.groups IN (\"itlofficialpf\", \"fimcmscprevokegroup\", \"fimcmscprecovergroup\", \"fimcmscpenrollmentagentgroup\", \"fimcmenrollmentofficers\", \"fimcmscpauditgroup\", \"fimcmraadministrators\", \"fimcmscprenewgroup\", \"akaash_templates\", \"emagfde\", \"fimcmprofiletemplateadministrators\", \"fimcmscpcardunblockgroup\", \"fimcmscpenrollgroup\", \"fimcpscpcardunblockgroup\", \"fimcmhelpdesk\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see which internal IPs on my network are scanning ports on 10.144.4.20 and 10.144.4.21. I'm looking for instances where at least 5 different ports were scanned within a 60 second window.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter xdm.source.is_internal_ip = false and xdm.target.ipv4 in (\"10.144.4.20\", \"10.144.4.21\")\n| comp first(_time) as FirstTimestamp,\nlatest(_time) as LatestTimestamp,\nvalues(xdm.target.port) as TargetPorts,\ncount() as EventCount by xdm.source.ipv4,\nxdm.target.ipv4,\nxdm.network.ip_protocol,\nxdm.event.original_event_type,\nxdm.observer.product,\nxdm.observer.action\n| filter array_length(TargetPorts) >= 5 and timestamp_diff(LatestTimestamp, FirstTimestamp, \"SECOND\") <= 60"}
{"prompt": "I want to see events where processes are created and use \"whoami\" as a parameter in their command line.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \".exe whoami\"\n\n\n\n"}
{"prompt": "I want to see alerts about unusual child processes spawned by dns.exe on endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\dns\\.exe\" and  not (action_process_image_path ~= \".*\\\\conhost\\.exe\")\n\n\n\n"}
{"prompt": "I want to find any Log4j attempts detected by Cisco Firepower devices.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"log4j\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\" and xdm.source.is_internal_ip = false\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.ipv4,\n_time\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find activities that involve using `netsh` to create a new firewall rule enabling Group Policy on the Microsoft Defender Firewall.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and (action_process_image_command_line contains \"advfirewall\" and action_process_image_command_line contains \"firewall\" and action_process_image_command_line contains \"set\" and action_process_image_command_line contains \"rule\" and action_process_image_command_line contains \"group=\" and action_process_image_command_line contains \"new\" and action_process_image_command_line contains \"enable=Yes\"))\n\n\n\n"}
{"prompt": "I want to find potential Meterpreter or Cobalt Strike activity where an attacker installs a service on the system.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (((actor_process_image_path contains \"/c\" and actor_process_image_path contains \"echo\" and actor_process_image_path ~= \".*\\\\pipe\\\\.*\") and (actor_process_image_path contains \"cmd\" or actor_process_image_path contains \"%COMSPEC%\")) or (actor_process_image_path contains \"rundll32\" and actor_process_image_path contains \".dll,a\" and actor_process_image_path contains \"/p:\") or actor_process_image_path ~= \"\\\\\\\\127\\.0\\.0\\.1\\\\ADMIN\\$\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see network traffic that might indicate an exploitation attempt of the MOVEit CVE-2023-34362 vulnerability through potential web shell requests.", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and (xdm.network.http.url contains \"/human2.aspx\" or xdm.network.http.url contains \"/_human2.aspx\"))\n\n\n\n"}
{"prompt": "I want to see any allowed connections from or to IPs on Facebook's list of malicious addresses in my Fortigate firewall logs.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter xdm.observer.action in (\"accept\", \"ip-conn\")\n| join\n(dataset = cv_fb_mz_iocs\n| filter ioc_description in (\"FB_Malicious_IPAddress\") and ioc_type in (\"ipv4\")\n) as ioclookup ioclookup.ioc_value = xdm.source.ipv4\n| filter ioc_value = xdm.target.ipv4 or ioc_value = xdm.source.ipv4\n| fields *\n| view column order = populated"}
{"prompt": "I want to detect activity related to the WannaCry ransomware.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\tasksche\\.exe\" or action_process_image_path ~= \".*\\\\mssecsvc\\.exe\" or action_process_image_path ~= \".*\\\\taskdl\\.exe\" or action_process_image_path ~= \".*\\\\taskhsvc\\.exe\" or action_process_image_path ~= \".*\\\\taskse\\.exe\" or action_process_image_path ~= \".*\\\\111\\.exe\" or action_process_image_path ~= \".*\\\\lhdfrgui\\.exe\" or action_process_image_path ~= \".*\\\\linuxnew\\.exe\" or action_process_image_path ~= \".*\\\\wannacry\\.exe\") or action_process_image_path contains \"WanaDecryptor\") or ((action_process_image_command_line contains \"icacls\" and action_process_image_command_line contains \"/grant\" and action_process_image_command_line contains \"Everyone:F\" and action_process_image_command_line contains \"/T\" and action_process_image_command_line contains \"/C\" and action_process_image_command_line contains \"/Q\") or (action_process_image_command_line contains \"bcdedit\" and action_process_image_command_line contains \"/set\" and action_process_image_command_line contains \"{default}\" and action_process_image_command_line contains \"recoveryenabled\" and action_process_image_command_line contains \"no\") or (action_process_image_command_line contains \"wbadmin\" and action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"catalog\" and action_process_image_command_line contains \"-quiet\") or action_process_image_command_line contains \"@Please_Read_Me@.txt\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential exploitation attempts of CVE-2021-40444 on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\control\\.exe\" and (actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\excel\\.exe\")) and  not ((action_process_image_command_line ~= \".*\\\\control\\.exe\\ input\\.dll\" or action_process_image_command_line ~= \".*\\\\control\\.exe\\\"\\ input\\.dll\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious installer package child processes on macOS endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\/package\\_script\\_service\" or actor_process_image_path ~= \".*\\/installer\") and (action_process_image_path ~= \".*\\/sh\" or action_process_image_path ~= \".*\\/bash\" or action_process_image_path ~= \".*\\/dash\" or action_process_image_path ~= \".*\\/python\" or action_process_image_path ~= \".*\\/ruby\" or action_process_image_path ~= \".*\\/perl\" or action_process_image_path ~= \".*\\/php\" or action_process_image_path ~= \".*\\/javascript\" or action_process_image_path ~= \".*\\/osascript\" or action_process_image_path ~= \".*\\/tclsh\" or action_process_image_path ~= \".*\\/curl\" or action_process_image_path ~= \".*\\/wget\") and (action_process_image_command_line contains \"preinstall\" or action_process_image_command_line contains \"postinstall\"))\n\n\n\n"}
{"prompt": "I want to see events related to the GALLIUM APT group, specifically focusing on DNS queries to known malicious domains.", "response": "datamodel\n| filter (xdm.event.id = 257 and xdm.network.dns.dns_question.name in (\"asyspy256.ddns.net\", \"hotkillmail9sddcc.ddns.net\", \"rosaf112.ddns.net\", \"cvdfhjh1231.myftp.biz\", \"sz2016rose.ddns.net\", \"dffwescwer4325.myftp.biz\", \"cvdfhjh1231.ddns.net\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential tampering where \"Uninstall.sh\" scripts are executed on agents.", "response": "dataset = xdr_data\n| filter action_file_path contains \"MalwareProtection/uninstall.sh\" or action_file_path contains \"ProRemSvc/uninstall.sh\" or action_file_path contains \"/Library/Application Support/PaloAltoNetworks/Traps/scripts/uninstall.sh\" and actor_process_image_path !~= \"Apple Corporate Insight and Detection.app\" and causality_actor_process_command_line !~= \"(jamf|JamfManagementService|package_script_service|InstallFireEye_on_IDLE.sh|mdworker)\"\n| fields agent_hostname as Hostname, action_file_path, actor_process_image_path as apip,\nactor_process_command_line as apcl, causality_actor_process_image_path as capip,\ncausality_actor_process_command_line as capcl, os_actor_process_image_path as osapip,\nos_actor_process_command_line as ospcl, _time as CXReportTime\n| dedup Hostname"}
{"prompt": "I want to find malicious activity where an attacker uses obfuscated code loaded through stdin.", "response": "datamodel\n| filter xdm.target.process.executable.path ~= \"(?i).*(set).*\\&\\&\\s?set.*(environment|invoke|\\$?\\{?input).*\\&\\&.*\\\"\"\n\n\n\n"}
{"prompt": "I want to find instances of the CVE-2023-23397 exploitation attempt targeting Outlook.", "response": "preset = xdr_event_log\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter AccessList = regextract(to_json_string(action_evtlog_data_fields)->AccessList{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4656, 4663) and ProcessName ~= \".*\\\\OUTLOOK\\.EXE\" and (ObjectName contains \"\\\\REGISTRY\\\\MACHINE\\\\SYSTEM\" and ObjectName ~= \".*Services\\\\.*\") and (ObjectName ~= \".*WebClient\\\\NetworkProvider\" or ObjectName ~= \".*LanmanWorkstation\\\\NetworkProvider\") and AccessList contains \"%%4416\")\n\n\n\n"}
{"prompt": "I want to find suspicious instances of a Chrome Frame Helper DLL being loaded from unintended locations.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\chrome\\_frame\\_helper\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Google\\\\Chrome\\\\Application\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Google\\\\Chrome\\\\Application\\\\.*\")) and  not (action_module_path ~= \".*\\\\AppData\\\\local\\\\Google\\\\Chrome\\\\Application\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see events related to suspicious user account creation and deletion within an hour on domain controllers.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| sort asc _time\n| bin _time span = 1h\n| filter xdm.event.id in (\"4720\", \"4726\")\n| join type = left\n(dataset = device_group_static_list\n) as wingrps(wingrps.HOSTNAME = xdm.source.host.hostname or wingrps.IP = microsoft_windows_raw._reporting_device_ip)\n| filter TYPE in (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| alter pattern = if(xdm.event.id = \"4720\", \"E1\", \"E2\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, pattern\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.event.id) as event_id,\nvalues(xdm.source.user.username) as primary_user,\nvalues(xdm.source.host.hostname) as hostname,\nvalues(*) as * by xdm.target.user.username,\n_time\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events contains \"E1,E2\"\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see events related to suspicious use of web request commands and cmdlets on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"[System.Net.WebRequest]::create\" or action_process_image_command_line contains \"curl \" or action_process_image_command_line contains \"Invoke-RestMethod\" or action_process_image_command_line contains \"Invoke-WebRequest\" or action_process_image_command_line contains \"iwr \" or action_process_image_command_line contains \"Net.WebClient\" or action_process_image_command_line contains \"Resume-BitsTransfer\" or action_process_image_command_line contains \"Start-BitsTransfer\" or action_process_image_command_line contains \"wget \" or action_process_image_command_line contains \"WinHttp.WinHttpRequest\")\n\n\n\n"}
{"prompt": "I want to find potential recon activity by analyzing processes using nltest.exe on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\nltest\\.exe\" or actor_process_file_original_name = \"nltestrk.exe\") and ((action_process_image_command_line contains \"server\" and action_process_image_command_line contains \"query\") or (action_process_image_command_line contains \"/user\" or action_process_image_command_line contains \"all_trusts\" or action_process_image_command_line contains \"dclist:\" or action_process_image_command_line contains \"dnsgetdc:\" or action_process_image_command_line contains \"domain_trusts\" or action_process_image_command_line contains \"dsgetdc:\" or action_process_image_command_line contains \"parentdomain\" or action_process_image_command_line contains \"trusted_domains\")))\n\n\n\n"}
{"prompt": "I want to find users whose Duo authentication shows multiple different operating systems used.", "response": "dataset = duo_duo_raw\n| filter email not in (null, NULL, \"\"\"\"\"\")\n| alter Browser = access_device -> browser,\nBrowserVer = access_device -> browser_version,\nOS = access_device -> os,\nOSVer = access_device -> os_version,\nSrcIPAddress = access_device -> ip,\nSrcCountry = access_device -> location.country,\nSrcCity = access_device -> location.city,\nPhoneNumber = auth_device -> name,\nIntegration = application -> name,\nDuo_UserName = user -> name\n| filter OS not in (\"Android\", \"iOS\", null, NULL, \"\"\"\"\"\") and (reason != \"\"\"Trusted network\"\"\") and PhoneNumber not in (null, NULL, \"\"\"\"\"\")\n| fields access_device, Browser, BrowserVer, OS, OSVer,\nSrcIPAddress, SrcCountry, SrcCity, auth_device,\nemail, PhoneNumber, _collector_type, _collector_name,\n_final_reporting_device_ip, _reporting_device_ip,\napplication, Integration, user, adaptive_trust_assessments,\nDuo_UserName\n| comp min(_time) as FirstEventTime,\nmax(_time) as LatestEventTime,\nvalues(Browser) as MultipleBrowsers,\nValues(BrowserVer) as MultipleBrowserVers,\nvalues(SrcIPAddress) as MultipleSrcIPs,\nvalues(OS) as MultipleOS,\nvalues(OSVer) as MultipleOSVers,\nvalues(SrcCountry) as MultipleCountries,\nvalues(SrcCity) as MultipleCities,\ncount() as MultipleEvents by email,\nDuo_UserName,\nPhoneNumber,\nIntegration,\n_collector_name addrawdata = true as ActivityRawData\n| alter CorrelatioRuleName = \"Duo Base OS changed\"\n| filter array_length(MultipleOS) > 1"}
{"prompt": " I want to see alerts for downloads from suspicious TLDs like .country, .stream, or .xyz,  especially if they have file extensions like .exe, .vbs, or .zip. ", "response": "datamodel\n| filter (xdm.network.http.url in (\"exe\", \"vbs\", \"bat\", \"rar\", \"ps1\", \"doc\", \"docm\", \"xls\", \"xlsm\", \"pptm\", \"rtf\", \"hta\", \"dll\", \"ws\", \"wsf\", \"sct\", \"zip\") and (xdm.network.http.domain ~= \".*\\.country\" or xdm.network.http.domain ~= \".*\\.stream\" or xdm.network.http.domain ~= \".*\\.gdn\" or xdm.network.http.domain ~= \".*\\.mom\" or xdm.network.http.domain ~= \".*\\.xin\" or xdm.network.http.domain ~= \".*\\.kim\" or xdm.network.http.domain ~= \".*\\.men\" or xdm.network.http.domain ~= \".*\\.loan\" or xdm.network.http.domain ~= \".*\\.download\" or xdm.network.http.domain ~= \".*\\.racing\" or xdm.network.http.domain ~= \".*\\.online\" or xdm.network.http.domain ~= \".*\\.science\" or xdm.network.http.domain ~= \".*\\.ren\" or xdm.network.http.domain ~= \".*\\.gb\" or xdm.network.http.domain ~= \".*\\.win\" or xdm.network.http.domain ~= \".*\\.top\" or xdm.network.http.domain ~= \".*\\.review\" or xdm.network.http.domain ~= \".*\\.vip\" or xdm.network.http.domain ~= \".*\\.party\" or xdm.network.http.domain ~= \".*\\.tech\" or xdm.network.http.domain ~= \".*\\.xyz\" or xdm.network.http.domain ~= \".*\\.date\" or xdm.network.http.domain ~= \".*\\.faith\" or xdm.network.http.domain ~= \".*\\.zip\" or xdm.network.http.domain ~= \".*\\.cricket\" or xdm.network.http.domain ~= \".*\\.space\" or xdm.network.http.domain ~= \".*\\.info\" or xdm.network.http.domain ~= \".*\\.vn\" or xdm.network.http.domain ~= \".*\\.cm\" or xdm.network.http.domain ~= \".*\\.am\" or xdm.network.http.domain ~= \".*\\.cc\" or xdm.network.http.domain ~= \".*\\.asia\" or xdm.network.http.domain ~= \".*\\.ws\" or xdm.network.http.domain ~= \".*\\.tk\" or xdm.network.http.domain ~= \".*\\.biz\" or xdm.network.http.domain ~= \".*\\.su\" or xdm.network.http.domain ~= \".*\\.st\" or xdm.network.http.domain ~= \".*\\.ro\" or xdm.network.http.domain ~= \".*\\.ge\" or xdm.network.http.domain ~= \".*\\.ms\" or xdm.network.http.domain ~= \".*\\.pk\" or xdm.network.http.domain ~= \".*\\.nu\" or xdm.network.http.domain ~= \".*\\.me\" or xdm.network.http.domain ~= \".*\\.ph\" or xdm.network.http.domain ~= \".*\\.to\" or xdm.network.http.domain ~= \".*\\.tt\" or xdm.network.http.domain ~= \".*\\.name\" or xdm.network.http.domain ~= \".*\\.tv\" or xdm.network.http.domain ~= \".*\\.kz\" or xdm.network.http.domain ~= \".*\\.tc\" or xdm.network.http.domain ~= \".*\\.mobi\" or xdm.network.http.domain ~= \".*\\.study\" or xdm.network.http.domain ~= \".*\\.click\" or xdm.network.http.domain ~= \".*\\.link\" or xdm.network.http.domain ~= \".*\\.trade\" or xdm.network.http.domain ~= \".*\\.accountant\" or xdm.network.http.domain ~= \".*\\.cf\" or xdm.network.http.domain ~= \".*\\.gq\" or xdm.network.http.domain ~= \".*\\.ml\" or xdm.network.http.domain ~= \".*\\.ga\" or xdm.network.http.domain ~= \".*\\.pw\"))\n\n\n\n"}
{"prompt": "I want to see detections for suspicious calculator usage on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"\\\\calc.exe \" or (action_process_image_path ~= \".*\\\\calc\\.exe\" and  not ((action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\WinSxS\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see all events related to editing the sudoers file on Linux systems.", "response": "datamodel dataset = linux_linux_raw\n| alter xdm.event.type = coalesce(xdm.event.type, arrayindex(regextract(linux_linux_raw._raw_log, \"\\stype=[^\\s]+\"), 0)),\ncommand_exe = arrayindex(regextract(linux_linux_raw._raw_log, \"\\sexe=\\\"([^\\\"]+)\"), 0),\ncommand = coalesce(arrayindex(regextract(xdm.event.description, \"\\[COMMAND\\=([^\\]]+)\\]\"), 0), arrayindex(regextract(xdm.event.description, \"COMMAND=(.*)\"), 0), arrayindex(regextract(xdm.event.description, \"\\s*\\[[^\\]]+\\]:\\s(.*)\"), 0)),\nxdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), xdm.source.user.username),\ndevice_ip = linux_linux_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter xdm.target.process.command_line = coalesce(command_exe, command)\n| filter xdm.target.process.command_line in (\"/bin/vim /etc/sudoers\", \"/bin/vi /etc/sudoers\", \"/bin/nano /etc/sudoers\", \"/usr/bin/vi /etc/sudoers\", \"/usr/bin/vim /etc/sudoers\", \"/usr/bin/nano /etc/sudoers\")\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, device_ip, _insert_time, _vendor, _product\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where PresentationHost.exe is used to download files from the internet.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\presentationhost\\.exe\" or actor_process_file_original_name = \"PresentationHost.exe\") and (action_process_image_command_line contains \"http:\n\n\n\n"}
{"prompt": "I want to find suspicious activity where processes use cmd.exe to copy .dmp, .dump, or .hdmp files from remote shares.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and ((action_process_image_command_line contains \"copy \" and action_process_image_command_line ~= \".*\\ \\\\\\\\.*\") and (action_process_image_command_line contains \".dmp\" or action_process_image_command_line contains \".dump\" or action_process_image_command_line contains \".hdmp\")))\n\n\n\n"}
{"prompt": "I want to see alerts about changes made to Azure Point-to-Site VPN gateways, including modifications, deletions, and other actions like generating VPN profiles or disconnecting P2S VPN connections.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.NETWORK/P2SVPNGATEWAYS/WRITE\", \"MICROSOFT.NETWORK/P2SVPNGATEWAYS/DELETE\", \"MICROSOFT.NETWORK/P2SVPNGATEWAYS/RESET/ACTION\", \"MICROSOFT.NETWORK/P2SVPNGATEWAYS/GENERATEVPNPROFILE/ACTION\", \"MICROSOFT.NETWORK/P2SVPNGATEWAYS/DISCONNECTP2SVPNCONNECTIONS/ACTION\", \"MICROSOFT.NETWORK/P2SVPNGATEWAYS/PROVIDERS/MICROSOFT.INSIGHTS/DIAGNOSTICSETTINGS/WRITE\")\n\n\n\n"}
{"prompt": "I want to find instances of SNAKE malware creating persistence files by modifying WerFault.exe within the WinSxS directory.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\" and xdm.target.file.filename ~= \".*\\\\WerFault\\.exe\") and  not (((xdm.target.process.name ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find potential AMSI COM server hijacking attempts based on registry changes.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\CLSID\\\\\\{fdb00e52\\-a214\\-4aa1\\-8fba\\-4357bb0072ec\\}\\\\InProcServer32\\\\\\(Default\\)\" and  not ((action_registry_value_name = \"%windir%\\\\system32\\\\amsi.dll\" or action_registry_data = \"%windir%\\\\system32\\\\amsi.dll\"))\n\n\n\n"}
{"prompt": "I want to find instances where a user has attempted Duo MFA logins using different operating systems from various locations.", "response": "dataset = duo_duo_raw\n| filter email != null\n| alter Device_browser = json_extract_scalar(access_device, \"$.browser\"),\nDevice_browser_version = json_extract_scalar(access_device, \"$.browser_version\"),\nDevice_os = json_extract_scalar(access_device, \"$.os\"),\nDevice_os_version = json_extract_scalar(access_device, \"$.os_version\"),\nDev_Country = access_device -> location.country,\nDev_City = access_device -> location.city,\nip = json_extract_scalar(access_device, \"$.ip\"),\nPhoneNumber = auth_device -> name,\nLogSrcApplication = application -> name\n| filter Device_os != null\n| filter Device_os not in (\"Android\", \"iOS\")\n| filter (reason != \"\"\"Trusted network\"\"\")\n| filter incidr(ip, \"<ip>\") = False\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter ip != wl_ipv4 and incidr(ip, wl_cidr) = false\n| fields Device_browser, Device_browser_version, Device_os,\nDevice_os_version, ip, auth_device, email, PhoneNumber,\n_collector_type, _collector_name, _final_reporting_device_ip,\n_reporting_device_ip, Dev_Country, Dev_City, LogSrcApplication,\nreason, access_device\n| dedup ip by asc email\n| comp min(_time) as FirstEventTime,\nmax(_time) as LatestEventTime,\nvalues(ip) as IPs,\nvalues(Device_browser) as Browser,\nvalues(Device_browser_version) as BrowserVers,\nvalues(Dev_Country) as Countries,\nvalues(Device_os) as Oses,\nvalues(Device_os_version) as OsVersions,\nvalues(Dev_City) as cities,\ncount_distinct(Device_os_version) as Counter by email,\nPhoneNumber,\nDev_Country,\nDev_City,\nLogSrcApplication,\nendTime,\nAlert Name,\nUserName,\nCountry,\nIP Address,\nOS,\nbrowser,\nbrowserVersion"}
{"prompt": "I want to see indicators of activity that disable Windows Event Logging through registry modifications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\.*\" and action_registry_key_name ~= \".*\\\\Enabled\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\")) and  not (actor_process_image_path = \"C:\\\\Windows\\\\system32\\\\wevtutil.exe\" or (actor_process_image_path ~= \"C\\:\\\\Windows\\\\winsxs\\\\.*\" and actor_process_image_path ~= \".*\\\\TiWorker\\.exe\") or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\svchost.exe\" and (action_registry_key_name contains \"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft-Windows-FileInfoMinifilter\" or action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft\\-Windows\\-ASN1\\\\.*\" or action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft\\-Windows\\-Kernel\\-AppCompat\\\\.*\" or action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft\\-Windows\\-Runtime\\\\Error\\\\.*\" or action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft\\-Windows\\-CAPI2\\/Operational\\\\.*\")) or (actor_process_image_path = \"C:\\\\Windows\\\\servicing\\\\TrustedInstaller.exe\" and action_registry_key_name contains \"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft-Windows-Compat-Appraiser\")) and  not (actor_process_image_path = \"\" or actor_process_image_path = \"None\")\n\n\n\n"}
{"prompt": "I want to find out when users have more than 8 failed authorization attempts within 5 minutes from Cisco ACS.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_acs_raw\n| sort asc _time\n| bin _time span = 5m\n| alter device_ip = cisco_acs_raw._final_reporting_device_ip\n| filter device_ip IN (\"<ip>\") AND xdm.event.id IN (\"11023\", \"11026\", \"11025\", \"13025\", \"15039\", \"3010\", \"3304\", \"5403\", \"5407\", \"5408\", \"5409\", \"5410\", \"5417\", \"5432\", \"5433\", \"5434\", \"5436\", \"11019\", \"11024\", \"11225\", \"13000\", \"51004\") AND xdm.source.user.username != NULL\n| alter server_name = arrayindex(regextract(cisco_acs_raw._raw_log, \"\\d+\\:\\d+\\:\\d+\\s([^\\s]+)\"), 0),\nec_activity = \"Logon\",\nec_subject = \"User\",\nevent_type = arrayindex(regextract(cisco_acs_raw._raw_log, \"Type=([^\\\\,]+)\"), 0),\nreference_id = arrayindex(regextract(cisco_acs_raw._raw_log, \"<\\d+>\\w+\\s*\\d+\\s\\d+:\\d+:\\d+\\s[\\S]+\\s\\w+\\s(\\d+)\"), 0)\n| fields xdm.observer.action, server_name, xdm.event.type,\nxdm.target.ipv4, xdm.target.port, xdm.source.user.username,\n_product, _vendor, device_ip, ec_activity, ec_subject,\nevent_type, xdm.intermediate.ipv4, xdm.network.session_id,\nxdm.event.description, xdm.event.id, xdm.network.application_protocol,\nxdm.alert.description, xdm.event.outcome, xdm.source.ipv4,\n_time, xdm.source.host.hostname, xdm.target.host.hostname,\nreference_id\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.source.user.username,\nxdm.source.ipv4,\n_time\n| filter matched_events >= 8\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 8)), 1)"}
{"prompt": "I want to see indicators of exploitation related to PaperCut MF/NG.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \" /c \" and action_process_image_command_line contains \"powershell\" and action_process_image_command_line contains \"-nop -w hidden\" and action_process_image_command_line contains \"Invoke-WebRequest\" and action_process_image_command_line contains \"setup.msi\" and action_process_image_command_line contains \"-OutFile\") or (action_process_image_command_line contains \"msiexec \" and action_process_image_command_line contains \"/i \" and action_process_image_command_line contains \"setup.msi \" and action_process_image_command_line contains \"/qn \" and action_process_image_command_line contains \"IntegratorLogin=fimaribahundq\"))\n\n\n\n"}
{"prompt": "I want to see alerts from Symantec EP that indicate potential virus infections on machines belonging to the \"Tier0Users\" group.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.alert.name != null and xdm.alert.name !~= \"Tracking Cookies\" and xdm.event.description !~= \"CCD Notification: REMEDIATION NOT REQUIRED\"\n| join type = left\n(dataset = pan_dss_raw\n| filter security_groups contains \"Tier0Users\"\n) as enterprise_admin enterprise_admin.sam_account_name = xdm.source.user.username\n| filter sam_account_name != null\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\"),\naction = xdm.observer.action,\nfile_hash = xdm.target.file.sha256,\nrisk_name = xdm.alert.name,\nprocess = xdm.target.file.path,\nsrc_ips = xdm.source.ipv4,\ndst_ips = xdm.target.ipv4,\nalert_category = xdm.alert.category\n| alter aggregation_criteria1 = \"ildestinationuser\",\naggregation_criteria2 = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all events related to the PsExec Service Start on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line = \"C:\\\\Windows\\\\PSEXESVC.exe\"\n\n\n\n"}
{"prompt": "I want to find all logs that mention \"Install-TransportAgent\" about Exchange Transport Agent installations.", "response": "datamodel\n| filter _raw_log contains \"Install-TransportAgent\"\n\n\n\n"}
{"prompt": "I want to see when security solutions are created or updated in Azure.", "response": "dataset = microsoft_windows_raw\n| filter event_id = 1111 /*config case_sensitive = false\n|dataset = msft_azure_raw\n|filter tenantId IN (\"<tenant id>\")\n|filter operationName IN (\"MICROSOFT.SECURITY/SECURITYSOLUTIONS/WRITE\")\n|alter username = json_extract_scalar(identity,\"$.claims.name\"), target_username = json_extract_scalar(properties,\"$.userPrincipalName\"), referenceid = arrayindex(split(resourceId,\"/\"),2), aliashost = arrayindex(split(resourceId,\"/\"),-1), protocol = json_extract_scalar(properties,\"$.eventProperties.protocol\")\n|fields username, target_username, operationName, referenceid, tenantId, resulttype, callerIpAddress, identity, aliashost, protocol, _time\n|alter aggregation_criteria = \"ilsourceuser\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)*/"}
{"prompt": "I want to see if the PsExec service file has been created.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\PSEXESVC\\.exe\"\n\n\n\n"}
{"prompt": "I want to find all instances where an HTTP URL contains \"/pwndrop/\".", "response": "datamodel\n| filter xdm.network.http.url contains \"/pwndrop/\"\n\n\n\n"}
{"prompt": "I want to see all DNS entries that were created, modified, or deleted on Windows systems, excluding entries made by known system accounts and empty usernames.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (5136, 5137, 5141) and (event_data -> ObjectClass in (\"dnsNode\"))\n| alter ObjectDN = event_data -> ObjectDN,\nDSName = event_data -> DSName,\nSubjectUserName = event_data -> SubjectUserName,\nDSType = event_data -> DSType,\nObjectClass = event_data -> ObjectClass,\nAppCorrelationID = event_data -> AppCorrelationID,\nAttributeValue = event_data -> AttributeValue,\nOperationType = event_data -> OperationType,\nAttributeLDAPDisplayName = event_data -> AttributeLDAPDisplayName,\nSubjectDomainName = event_data -> SubjectDomainName,\nObjectGUID = event_data -> ObjectGUID,\nSubjectUserSid = event_data -> SubjectUserSid,\nOpCorrelationID = event_data -> OpCorrelationID,\nAttributeSyntaxOID = event_data -> AttributeSyntaxOID,\nSubjectLogonId = event_data -> SubjectLogonId,\nevent_id_description = if(event_id = 5136, \"A directory service object was MODIFIED\", if(event_id = 5137, \"A directory service object was CREATED\", if(event_id = 5141, \"A directory service object was DELETED\")))\n| filter (SubjectUserName not in (\"\"\"\"\"\", null, NULL, \"svc_DhcpDnsUpdate\", \"SYSTEM\", \"-\", \"BEL-DHCP-SC\") and SubjectUserName not contains \"\"\"$\"\"\")\n| fields event_id, event_id_description, event_action, event_result,\nSubjectUserName, host_name, _collector_hostname,\ncomputer_name, DSName, message, event_data, *"}
{"prompt": "I want to see files that have been moved to Program Files by non-privileged processes.", "response": "datamodel\n| filter xdm.source.process.integrity_level = \"Medium\" and ((xdm.target.file.filename ~= \".*\\\\Program\\ Files\\\\.*\" or xdm.target.file.filename ~= \".*\\\\Program\\ Files\\ \\(x86\\)\\\\.*\") or xdm.target.file.filename ~= \"\\\\Windows\\\\.*\" and  not (xdm.target.file.filename contains \"temp\"))\n\n\n\n"}
{"prompt": "I want to see activity logs for specific privileged AD groups on Windows systems and identify any users who have recently been added to those groups.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| arrayexpand xdm.target.user.groups\n| filter xdm.target.user.groups IN (\"EVOC_COMPS_CYBERARK_PUM\", \"EVOC_MGMT_VAULT_ADMINS\", \"EVOC_MGMT_VAULT_AUDITORS\", \"EVOC_MGMT_VAULT_USERS\", \"EVOC_FINBDO_USRS_PRD_CA_APP_ADMIN\", \"EVOC_FINBDO_USRS_PRD_CA_DB_ADMIN\", \"EVOC_FINBDO_USRS_PRD_CA_OS_ADMIN\", \"EVOC_FINBDO_USRS_PRD_CA_FINASSURE_ADMINS\", \"EVOC_FINBDO_USRS_NONPRD_CA_APP_ADMIN\", \"EVOC_FINBDO_USRS_NONPRD_CA_DB_ADMIN\", \"EVOC_FINBDO_USRS_NONPRD_CA_OS_ADMIN\", \"EVOC_ADISPORTS_USRS_PRD_CA_OS_ADMIN\", \"EVOC_ ADISPORTS_USRS_PRD_CA_APP_ADMIN\", \"EVOC_ ADISPORTS_USRS_PRD_CA_DB_ADMIN\", \"EVOC_ADISPORTS_USRS_NONPRD_CA_OS_ADMIN\", \"EVOC_ADISPORTS_USRS_NONPRD_CA_APP_ADMIN\", \"EVOC_ADISPORTS_USRS_NONPRD_CA_DB_ADMIN\", \"EVOC_ FINRBL_USRS_PRD_CA_APP_ADMIN\", \"EVOC_ FINRBL_USRS_PRD_CA_DB_ADMIN\", \"EVOC_ FINRBL_USRS_PRD_CA_OS_ADMIN\", \"EVOC_FINRBL_USRS_PRD_CA_FINASSURE_ADMINS\", \"EVOC_ADISPORTS_USRS_NONPRD_CA_OS_ADMIN\", \"EVOC_ADISPORTS_USRS_NONPRD_CA_APP_ADMIN\", \"EVOC_ADISPORTS_USRS_NONPRD_CA_DB_ADMIN\", \"EVOC_MGMT-NLA-DISABLED\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see information about scheduled task deletions on endpoints.", "response": "preset = xdr_event_log\n| alter TaskName = regextract(to_json_string(action_evtlog_data_fields)->TaskName{}, \"\\\"(.*)\\\"\")\n| filter action_evtlog_event_id = 4699 and  not (TaskName = \"\\\\Microsoft\\\\Windows\\\\RemovalTools\\\\MRT_ERROR_HB\" or TaskName contains \"\\\\Mozilla\\\\Firefox Default Browser Agent \")\n\n\n\n"}
{"prompt": "I want to see alerts related to suspicious backup catalog deletions on my endpoints.", "response": "preset = xdr_event_log\n| filter (action_evtlog_event_id = 524 and provider_name = \"Microsoft-Windows-Backup\")\n\n\n\n"}
{"prompt": "I want to find any events related to files with specific names that might indicate the Goofy Guineapig Backdoor.", "response": "datamodel\n| filter xdm.target.file.filename in (\"C:\\\\ProgramData\\\\GoogleUpdate\\\\config.dat\", \"C:\\\\ProgramData\\\\GoogleUpdate\\\\GoogleUpdate.exe\", \"C:\\\\ProgramData\\\\GoogleUpdate\\\\GoogleUpdate\\\\tmp.bat\", \"C:\\\\ProgramData\\\\GoogleUpdate\\\\goopdate.dll\")\n\n\n\n"}
{"prompt": "I want to detect malicious PowerShell activity by looking for specific keywords in executed scripts.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"AdjustTokenPrivileges\" or ScriptBlockText contains \"IMAGE_NT_OPTIONAL_HDR64_MAGIC\" or ScriptBlockText contains \"Metasploit\" or ScriptBlockText contains \"Microsoft.Win32.UnsafeNativeMethods\" or ScriptBlockText contains \"Mimikatz\" or ScriptBlockText contains \"MiniDumpWriteDump\" or ScriptBlockText contains \"PAGE_EXECUTE_READ\" or ScriptBlockText contains \"ReadProcessMemory.Invoke\" or ScriptBlockText contains \"SE_PRIVILEGE_ENABLED\" or ScriptBlockText contains \"SECURITY_DELEGATION\" or ScriptBlockText contains \"TOKEN_ADJUST_PRIVILEGES\" or ScriptBlockText contains \"TOKEN_ALL_ACCESS\" or ScriptBlockText contains \"TOKEN_ASSIGN_PRIMARY\" or ScriptBlockText contains \"TOKEN_DUPLICATE\" or ScriptBlockText contains \"TOKEN_ELEVATION\" or ScriptBlockText contains \"TOKEN_IMPERSONATE\" or ScriptBlockText contains \"TOKEN_INFORMATION_CLASS\" or ScriptBlockText contains \"TOKEN_PRIVILEGES\" or ScriptBlockText contains \"TOKEN_QUERY\")\n\n\n\n"}
{"prompt": "I want to find instances where a single user's data transfer over remote access exceeded 200MB in a day.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and category ~= \"remote access\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as total_bytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter total_bytes > 200000000\n| alter alert_category = \"Initial Access\",\nip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find out if anyone is accessing dark web sites through our web gateway.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol\n| filter host_dst ~= \"[a-zA-Z\\d]+(.onion)$\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious service binaries that are located in folders like \"Users\\Public\", \"Perflogs\", \"ADMIN$\", or \"Temp\".", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \"HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\.*\" and action_registry_key_name ~= \".*\\\\Start\" and (actor_process_image_path ~= \".*\\\\Users\\\\Public\\\\.*\" or actor_process_image_path ~= \".*\\\\Perflogs\\\\.*\" or actor_process_image_path ~= \".*\\\\ADMIN\\$\\\\.*\" or actor_process_image_path ~= \".*\\\\Temp\\\\.*\") and (action_registry_value_name in (\"DWORD (0x00000000)\", \"DWORD (0x00000001)\", \"DWORD (0x00000002)\") or action_registry_data in (\"DWORD (0x00000000)\", \"DWORD (0x00000001)\", \"DWORD (0x00000002)\"))) or (action_registry_key_name ~= \"HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\.*\" and action_registry_key_name ~= \".*\\\\ImagePath\" and ((action_registry_value_name ~= \".*\\\\Users\\\\Public\\\\.*\" or action_registry_value_name ~= \".*\\\\Perflogs\\\\.*\" or action_registry_value_name ~= \".*\\\\ADMIN\\$\\\\.*\" or action_registry_value_name ~= \".*\\\\Temp\\\\.*\") or (action_registry_data ~= \".*\\\\Users\\\\Public\\\\.*\" or action_registry_data ~= \".*\\\\Perflogs\\\\.*\" or action_registry_data ~= \".*\\\\ADMIN\\$\\\\.*\" or action_registry_data ~= \".*\\\\Temp\\\\.*\")))) and  not ((actor_process_image_path ~= \".*\\\\Common\\ Files\\\\.*\" and actor_process_image_path ~= \".*\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect any changes made to Network Gateways on AWS.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name = \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"CreateCustomerGateway\", \"DeleteCustomerGateway\", \"AttachInternetGateway\", \"CreateInternetGateway\", \"DeleteInternetGateway\", \"DetachInternetGateway\")\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to modifications or deletions of Azure Application Security Groups.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/WRITE\", \"MICROSOFT.NETWORK/APPLICATIONSECURITYGROUPS/DELETE\")\n\n\n\n"}
{"prompt": "I want to see events related to the Turla PNG Dropper Service on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and ServiceName = \"WerFaultSvc\")\n\n\n\n"}
{"prompt": "I want to see potential suspicious BPF activity on Linux systems based on logs containing \"bpf_probe_write_user\".", "response": "datamodel\n| filter _raw_log contains \"bpf_probe_write_user\"\n\n\n\n"}
{"prompt": "I want to see firewall login events from external IPs on all Fortigate devices, categorized by their device name. If the device name contains \"NEWAVLON\", label it as \"New Avalon\" in the description.", "response": "datamodel dataset = fortinet_fortigate_raw\n| filter xdm.source.is_internal_ip != true and xdm.event.original_event_type in (\"0100032001\")\n\n| alter Desc_String = if(fortinet_fortigate_raw._broker_device_name contains \"NEWAVLON\", \"New Avalon\", \".\")"}
{"prompt": "I want to find events related to WMI persistence using scripts and the \"scrcons.exe\" process.", "response": "datamodel\n| filter (xdm.target.process.name = \"C:\\\\WINDOWS\\\\system32\\\\wbem\\\\scrcons.exe\" or xdm.source.process.name = \"C:\\\\WINDOWS\\\\system32\\\\wbem\\\\scrcons.exe\")\n\n\n\n"}
{"prompt": "I want to find instances where malicious processes are obfuscating code using compression techniques through the Service Control Manager.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \"new-object\" and actor_process_image_path contains \"text.encoding]::ascii\" and actor_process_image_path contains \"readtoend\") and (actor_process_image_path contains \":system.io.compression.deflatestream\" or actor_process_image_path contains \"system.io.streamreader\"))\n\n\n\n"}
{"prompt": "I want to see events where an Office Publisher file was dropped in a suspicious location on Windows.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or xdm.target.file.filename ~= \".*\\\\Users\\\\Public\\\\.*\" or xdm.target.file.filename ~= \".*\\\\Windows\\\\Temp\\\\.*\" or xdm.target.file.filename ~= \".*C\\:\\\\Temp\\\\.*\") and xdm.target.file.filename ~= \".*\\.pub\")\n\n\n\n"}
{"prompt": "I want to find instances of PowerShell scripts on endpoints that are likely collecting local email data.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Get-Inbox.ps1\" or ScriptBlockText contains \"Microsoft.Office.Interop.Outlook\" or ScriptBlockText contains \"Microsoft.Office.Interop.Outlook.olDefaultFolders\" or ScriptBlockText contains \"-comobject outlook.application\")\n\n\n\n"}
{"prompt": "I want to detect suspicious Amazon EC2 changes like instance creation and termination within a short timeframe.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name = \"EV_CloudTrail\"\n| filter eventName IN (\"CreateUser\", \"TerminateInstances\", \"RunInstances\")\n| sort asc _time\n| bin _time span = 5m\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| fields account_id, eventname, type, source_username,\ntarget_username, awsRegion, groupid, errorCode,\nuserAgent, srcaddr, username, bucketName, _time,\n_insert_time\n| alter pattern = if(eventname = \"CreateUser\", \"E1\", \"E2\")\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by source_username,\naccount_id\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events ~= \"[E1,]+E2\"\n| alter aggregation_criteria = \"ileventdesc\",\naggregation_criteria1 = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see AWS console login failures that have occurred at least three times for the same username.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name = \"EV_CloudTrail\"\n| filter eventtype IN (\"AwsConsoleSignIn\") and eventname IN (\"ConsoleLogin\")\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\nresponse = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| filter response IN (\"Failure\") and target_username NOT IN (\"HIDDEN_DUE_TO_SECURITY_REASONS\")\n| fields account_id, eventname, type, source_username,\ntarget_username, awsRegion, groupid, errorCode,\nuserAgent, srcaddr, username, bucketName, _time,\n_insert_time\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by target_username\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"illogonsessionid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to find activities where Winget is trying to add an insecure (http) download source.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\winget\\.exe\" or actor_process_file_original_name = \"winget.exe\") and (action_process_image_command_line contains \"source \" and action_process_image_command_line contains \"add \" and action_process_image_command_line contains \"http:\n\n\n\n"}
{"prompt": "I want to detect potential SNAKE malware activity by looking for it trying to store secrets in a specific registry key.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*SECURITY\\\\Policy\\\\Secrets\\\\n\"\n\n\n\n"}
{"prompt": "I want to see all instances where an admin account logged on remotely using Negotiate authentication.", "response": "preset = xdr_event_log\n| alter LogonType = regextract(to_json_string(action_evtlog_data_fields)->LogonType{}, \"\\\"(.*)\\\"\")\n| alter AuthenticationPackageName = regextract(to_json_string(action_evtlog_data_fields)->AuthenticationPackageName{}, \"\\\"(.*)\\\"\")\n| alter TargetUserName = regextract(to_json_string(action_evtlog_data_fields)->TargetUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4624 and LogonType = 10 and AuthenticationPackageName = \"Negotiate\" and TargetUserName ~= \"Admin.*\")\n\n\n\n"}
{"prompt": "I want to see alerts for when there are 10 or more object modifications by admins, especially if those admins belong to \"INTEG-Nsec-PRVDR1\" group or have it in their member list, within a 5 minute window.", "response": "config case_sensitive = false\n| dataset in (check_point_smartconsole_raw, check_point_smartview_tracker_raw, check_point_query_database_raw, check_point_smartdashboard_raw, check_point_license_mgmt_raw, check_point_smartupdate_raw, check_point_web_api_raw, check_point_web_ui_raw)\n| bin _time span = 5m\n| filter operation = \"Modify Object\" and administrator not in (\"localhost\", \"fwadmin\", \"smartupdate\", \"system\") and _final_reporting_device_ip != \"10.67.122.132\"\n| join\n(preset = ad_users\n| fields full_user_name, security_group_list, sam_account_name,\nmember_of\n) as cieusers administrator = cieusers.sam_account_name\n| filter security_group_list contains \"INTEG-Nsec-PRVDR1\" or member_of contains \"INTEG-Nsec-PRVDR1\"\n| alter user_agent = null,\nos_edition = null,\nsrc_port = null,\ndst_port = null,\nhostname = arrayindex(regextract(originsicname, \"o\\=([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(src_port) as src_port,\nvalues(dst_port) as dst_port,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(hostname) as hostname,\nvalues(additional_info) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\ncount() as matched_events by _time,\nadministrator\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see all instances where BPF Kprobes Tracing is enabled on endpoints. Specifically, I'm interested in commands that write \"1\" to the tracing directory and mention \"/myprobe/enable\" or \"/myretprobe/enable\".", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"echo 1 >\" and action_process_image_command_line contains \"/sys/kernel/debug/tracing/events/kprobes/\") and (action_process_image_command_line contains \"/myprobe/enable\" or action_process_image_command_line contains \"/myretprobe/enable\"))\n\n\n\n"}
{"prompt": "I want to find PowerShell events that use obfuscated IEX invocations with specific patterns like those involving environment variables and array manipulation.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText ~= \"\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\[\" or ScriptBlockText ~= \"\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\[\" or ScriptBlockText ~= \"\\$env\\:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env\\:Public\\[\" or ScriptBlockText ~= \"\\$env\\:ComSpec\\[(\\s*\\d{1,3}\\s*\\,){2}\" or ScriptBlockText ~= \"\\*mdr\\*W\\s*\\)\\.Name\" or ScriptBlockText ~= \"\\$VerbosePreference\\.ToString\\(\")\n\n\n\n"}
{"prompt": "I want to see alerts for Kerberos Policy modifications on Domain Controllers that were made by non-privileged users or administrators.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4713\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find the most commonly observed email server domains associated with spam emails detected by Trend Micro Email Security.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter headerTo != null and headerFrom != null and eventType in (\"Spam\")\n| alter headerTo_array = headerTo -> []\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\")\n| filter messageID ~= \"smtp\"\n| alter sender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0)\n| comp count() as total_events,\nvalues(sender_domain) as sender_domain by eventType\n| arrayexpand sender_domain\n| join type = left\n(dataset = trend_micro_email_security_raw\n| filter headerTo != null and headerFrom != null and eventType in (\"Spam\")\n| alter headerTo_array = headerTo -> []\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\")\n| filter messageID ~= \"smtp\"\n| alter sender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0)\n| comp count() as matched_events,\nvalues(headerFrom) as headerFrom,\nvalues(headerTo_string) as headerTo_string by sender_domain,\neventType\n) as domainevents domainevents.sender_domain = sender_domain and domainevents.eventType = eventType\n| alter domain_obser_stats = round(multiply(divide(matched_events, total_events), 100))\n| filter domain_obser_stats >= 40"}
{"prompt": "I want to see all events where PowerShell is being used to launch a script through rundll32.exe and shell32.dll, specifically looking for indicators of obfuscation.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"rundll32.exe\" and ScriptBlockText contains \"shell32.dll\" and ScriptBlockText contains \"shellexec_rundll\" and ScriptBlockText contains \"powershell\")\n\n\n\n"}
{"prompt": "I want to detect instances where Azure Global admin accounts are used.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"<id>\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| filter username IN (\"admin\", \"administrator\", \"root\")\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see a list of access denied events towards critical devices by critical enterprise users, including details like the error code, device hostname, and user information.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4625\", \"4825\")\n| alter logon_type = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Logon Type:\\t\\t\\t([^\\n]+)\"), 0))\n| alter status_code = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Status:\\t\\t\\t([^\\n]+)\"), 0))\n| filter ((xdm.event.id IN (\"4625\") and logon_type = \"10\" and status_code = \"0xc000015b\") or xdm.event.id IN (\"4825\"))\n| alter target_username = if(xdm.event.id IN (\"4825\"), arrayindex(regextract(xdm.event.description, \"User Name:\\t([^\\n]+)\"), 0), xdm.target.user.username)\n| alter target_username = if(target_username ~= \"@ad.infosys.com\", rtrim(target_username, \"@ad.infosys.com\"), if(target_username ~= \"@infosys.com\", rtrim(target_username, \"@infosys.com\"), if(target_username ~= \"itlinfosys\", ltrim(target_username, \"itlinfosys\\\\\"), target_username)))\n| join type = left\n(dataset IN (enterprise_admin_list, pan_dss_raw)\n| filter admin_type = \"domain_admin_win_admin\" or security_groups contains \"Tier0Users\"\n| alter enterprise_username = if(username ~= \"@ad.infosys.com\", rtrim(username, \"@ad.infosys.com\"), if(username ~= \"@infosys.com\", rtrim(username, \"@infosys.com\"), if(username ~= \"itlinfosys\", ltrim(username, \"itlinfosys\\\\\"), username)))\n) as enterprise_admin enterprise_admin.enterprise_username = target_username or enterprise_admin.sam_account_name = target_username\n| filter enterprise_username != null or sam_account_name != null\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| alter xdm.source.ipv4 = if(xdm.source.ipv4 = null, trim(arrayindex(regextract(xdm.event.description, \"Client Address:\\s([^\\n]+)\"), 0)), xdm.source.ipv4)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_username\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to detect malware using Invoke-Obfuscation STDIN+ Launcher on my endpoints. ", "response": "preset = xdr_process\n| filter action_process_image_command_line ~= \"cmd.{0,5}(?\\:\\/c|\\/r).+powershell.+(?\\:\\$\\{?input\\}?|noexit).+\\\"\"\n\n\n\n"}
{"prompt": "I want to see Cortex XDR events related to CMSTP execution processes accessed through Windows system calls.", "response": "preset = xdr_event_log\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| filter CallTrace contains \"cmlua.dll\"\n\n\n\n"}
{"prompt": "I want to detect potential persistence attempts using the Windows telemetry registry key.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\AppCompatFlags\\\\TelemetryController\\\\.*\" and action_registry_key_name ~= \".*\\\\Command\" and ((action_registry_value_name contains \".bat\" or action_registry_value_name contains \".bin\" or action_registry_value_name contains \".cmd\" or action_registry_value_name contains \".dat\" or action_registry_value_name contains \".dll\" or action_registry_value_name contains \".exe\" or action_registry_value_name contains \".hta\" or action_registry_value_name contains \".jar\" or action_registry_value_name contains \".js\" or action_registry_value_name contains \".msi\" or action_registry_value_name contains \".ps\" or action_registry_value_name contains \".sh\" or action_registry_value_name contains \".vb\") or (action_registry_data contains \".bat\" or action_registry_data contains \".bin\" or action_registry_data contains \".cmd\" or action_registry_data contains \".dat\" or action_registry_data contains \".dll\" or action_registry_data contains \".exe\" or action_registry_data contains \".hta\" or action_registry_data contains \".jar\" or action_registry_data contains \".js\" or action_registry_data contains \".msi\" or action_registry_data contains \".ps\" or action_registry_data contains \".sh\" or action_registry_data contains \".vb\"))) and  not (((action_registry_value_name contains \"\\\\system32\\\\CompatTelRunner.exe\" or action_registry_value_name contains \"\\\\system32\\\\DeviceCensus.exe\") or (action_registry_data contains \"\\\\system32\\\\CompatTelRunner.exe\" or action_registry_data contains \"\\\\system32\\\\DeviceCensus.exe\")))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious child processes created by Provlaunch.EXE that launch known malicious tools or access sensitive system locations.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\provlaunch\\.exe\" and ((action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\notepad\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or (action_process_image_path ~= \".*\\:\\\\PerfLogs\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\\\AppData\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\System32\\\\Tasks\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Temp\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see all instances where SID History has been added to Active Directory objects, including events related to object modifications and account creations.", "response": "preset = xdr_event_log\n| alter SidHistory = regextract(to_json_string(action_evtlog_data_fields)->SidHistory{}, \"\\\"(.*)\\\"\")\n| filter action_evtlog_event_id in (4765, 4766) or (action_evtlog_event_id = 4738 and  not (SidHistory in (\"-\", \"%%1793\")) and  not (SidHistory = \"None\"))\n\n\n\n"}
{"prompt": "I want to find instances of PowerShell code attempting to bypass AMSI by using Assembly.GetType and SetValue($null,$true) with \"NonPublic,Static\" keywords.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"[Ref].Assembly.GetType\" and ScriptBlockText contains \"SetValue($null,$true)\" and ScriptBlockText contains \"NonPublic,Static\")\n\n\n\n"}
{"prompt": "I want to see Cortex XQL results for HackTool - Koadic Execution activity on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and (action_process_image_command_line contains \"/q\" and action_process_image_command_line contains \"/c\" and action_process_image_command_line contains \"chcp\"))\n\n\n\n"}
{"prompt": "I want to find instances where Amsi.dll is loaded via potentially malicious processes like ExtExport.exe, odbcconf.exe, regsvr32.exe, or rundll32.exe.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\amsi\\.dll\" and (actor_process_image_path ~= \".*\\\\ExtExport\\.exe\" or actor_process_image_path ~= \".*\\\\odbcconf\\.exe\" or actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_image_path ~= \".*\\\\rundll32\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find users who are uploading significantly more data today than their average over the last 7 days.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and user_agent ~= \"^Microsoft\" and category ~= \"uncategorized\" and xdm.target.host.hostname !~= \"^autodiscover\"\n| comp sum(rbytes) as current_day_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and user_agent ~= \"^Microsoft\" and category ~= \"uncategorized\" and xdm.target.host.hostname !~= \"^autodiscover\"\n| comp sum(rbytes) as 7_days_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_upload) as 7_days_upload_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_upload_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_upload > multiply(7_days_upload_avg, 1.35)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find instances where a process launches \"Launch-VsDevShell.ps1\" and uses either \"VsWherePath\" or \"VsInstallationPath\" in its command line.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Launch-VsDevShell.ps1\" and (action_process_image_command_line contains \"VsWherePath \" or action_process_image_command_line contains \"VsInstallationPath \"))\n\n\n\n"}
{"prompt": "I want to find instances of malicious processes using Rundll32 that contain \"StartNodeRelay\" in their command line.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"rundll32.exe\" and action_process_image_command_line contains \".dll\" and action_process_image_command_line contains \"StartNodeRelay\")\n\n\n\n"}
{"prompt": "I want to see details about Administrative Access Misuse Predefined Security Alerts in Azure that have a specific reference ID (<id>).", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.security/locations/alerts/activate/action\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\"),\neventlog = json_extract_scalar(properties, \"$.eventName\")\n| filter referenceid in (\"<id>\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time, eventlog, resultDescription\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect PowerShell scripts using Invoke-Obfuscation to compress and obfuscate malicious code.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter ((Payload contains \"new-object\" and Payload contains \"text.encoding]::ascii\") and (Payload contains \"system.io.compression.deflatestream\" or Payload contains \"system.io.streamreader\") and Payload ~= \".*readtoend\")\n\n\n\n"}
{"prompt": "I want to see all alerts related to KrbRelayUp execution, including its command line arguments.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\KrbRelayUp\\.exe\" or actor_process_file_original_name = \"KrbRelayUp.exe\") or (action_process_image_command_line contains \" relay \" and action_process_image_command_line contains \" -Domain \" and action_process_image_command_line contains \" -ComputerName \") or (action_process_image_command_line contains \" krbscm \" and action_process_image_command_line contains \" -sc \") or (action_process_image_command_line contains \" spawn \" and action_process_image_command_line contains \" -d \" and action_process_image_command_line contains \" -cn \" and action_process_image_command_line contains \" -cp \"))\n\n\n\n"}
{"prompt": "I want to see alerts related to attackers renaming msdt.exe to evade detection.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"msdt.exe\" and  not (action_process_image_path ~= \".*\\\\msdt\\.exe\")\n\n\n\n"}
{"prompt": "I want to detect when new ODBC drivers are registered on a Windows system, excluding those related to SQL Server, Microsoft Access, or Microsoft Excel Driver.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\ODBC\\\\ODBCINST\\.INI\\\\.*\" and action_registry_key_name ~= \".*\\\\Driver\") and  not ((action_registry_key_name ~= \".*\\\\SQL\\ Server\\\\.*\" and (action_registry_value_name = \"%WINDIR%\\\\System32\\\\SQLSRV32.dll\" or action_registry_data = \"%WINDIR%\\\\System32\\\\SQLSRV32.dll\"))) and  not ((action_registry_key_name contains \"\\\\Microsoft Access \" and (action_registry_value_name ~= \"C\\:\\\\Progra.*\" or action_registry_data ~= \"C\\:\\\\Progra.*\") and (action_registry_value_name ~= \".*\\\\ACEODBC\\.DLL\" or action_registry_data ~= \".*\\\\ACEODBC\\.DLL\")) or (action_registry_key_name contains \"\\\\Microsoft Excel Driver\" and (action_registry_value_name ~= \"C\\:\\\\Progra.*\" or action_registry_data ~= \"C\\:\\\\Progra.*\") and (action_registry_value_name ~= \".*\\\\ACEODBC\\.DLL\" or action_registry_data ~= \".*\\\\ACEODBC\\.DLL\")))\n\n\n\n"}
{"prompt": " I want to detect suspicious instances of Sysmon being used as a parent process for other executions. ", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\Sysmon\\.exe\" or actor_process_image_path ~= \".*\\\\Sysmon64\\.exe\") and  not ((action_process_image_path contains \":\\\\Windows\\\\Sysmon.exe\" or action_process_image_path contains \":\\\\Windows\\\\Sysmon64.exe\" or action_process_image_path contains \":\\\\Windows\\\\System32\\\\conhost.exe\" or action_process_image_path contains \":\\\\Windows\\\\System32\\\\WerFault.exe\" or action_process_image_path contains \":\\\\Windows\\\\System32\\\\WerFaultSecure.exe\" or action_process_image_path contains \":\\\\Windows\\\\System32\\\\wevtutil.exe\" or action_process_image_path contains \":\\\\Windows\\\\SysWOW64\\\\wevtutil.exe\" or action_process_image_path contains \"\\\\AppData\\\\Local\\\\Temp\\\\Sysmon.exe\") or action_process_image_path = \"None\")\n\n\n\n"}
{"prompt": "I want to see Cortex XQL queries that detect PowerShell scripts compressing folders and files into temporary locations like AppData\\Local\\Temp or \\:\\\\Windows\\\\Temp.", "response": "preset = xdr_event_log\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter (ContextInfo contains \"Compress-Archive -Path*-DestinationPath $env:TEMP\" and ContextInfo ~= \".*Compress\\-Archive\\ \\-Path.*\\-DestinationPath.*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and ContextInfo ~= \".*Compress\\-Archive\\ \\-Path.*\\-DestinationPath.*\\:\\\\Windows\\\\Temp\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see all AWS Stop Logging events, including details like the event time, ARN, source IP address, account ID, and principal ID.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| alter arn = message -> userIdentity.arn,\neventName = message -> eventName,\nsourceIPAddress = message -> sourceIPAddress,\nprincipalId = message -> userIdentity.principalId,\naccountId = message -> userIdentity.accountId,\ncreationDate = message -> userIdentity.sessionContext.attributes.creationDate,\neventTime = message -> eventTime\n| filter eventName = \"StopLogging\"\n| fields _vendor, _product, eventTime, eventName, arn,\nsourceIPAddress, accountId, principalId"}
{"prompt": "I want to find instances of CMSTP UAC bypass attacks that utilize COM object access and involve the DllHost.exe process.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\DllHost\\.exe\" and (actor_process_image_command_line contains \" /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}\" or actor_process_image_command_line contains \" /Processid:{3E000D72-A845-4CD9-BD83-80C07C3B881F}\" or actor_process_image_command_line contains \" /Processid:{BD54C901-076B-434E-B6C7-17C531F4AB41}\" or actor_process_image_command_line contains \" /Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}\" or actor_process_image_command_line contains \" /Processid:{E9495B87-D950-4AB5-87A5-FF6D70BF3E90}\") and action_process_integrity_level in (\"High\", \"System\"))\n\n\n\n"}
{"prompt": "I want to see events related to the HackTool - ADCSPwn Execution process, specifically those that involve command lines containing both \" --adcs \" and \" --port \".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" --adcs \" and action_process_image_command_line contains \" --port \")\n\n\n\n"}
{"prompt": "I want to detect changes made to CheckPoint firewall policies and configurations.", "response": "config case_sensitive = false\n| dataset in (check_point_smartconsole_raw, check_point_web_api_raw, check_point_smartview_tracker_raw, check_point_query_database_raw, check_point_smartdashboard_raw)\n| filter subject != null and subject not in (\"Object Manipulation\", \"Administrator Logout\", \"Administrator Login\") and operation not in (\"File Retrieved\", \"Synchronize Peer\")\n| alter hostname = arrayindex(regextract(originsicname, \"o\\=([^\\,]+)\"), 0),\naggregation_criteria = \"ildestinationip\",\naggregation_criteria1 = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about changes made to AWS ElastiCache security groups, such as modifications or deletions.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"elasticache.amazonaws.com\" and eventName in (\"DeleteCacheSecurityGroup\", \"AuthorizeCacheSecurityGroupIngress\", \"RevokeCacheSecurityGroupIngress\", \"AuthorizeCacheSecurityGroupEgress\", \"RevokeCacheSecurityGroupEgress\"))\n\n\n\n"}
{"prompt": "I want to find suspicious activity where AnyDesk is writing files to disk that aren't the legitimate \"gcapi.dll\" file.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\anydesk\\.exe\" or xdm.source.process.name ~= \".*\\\\anydesk\\.exe\") and (xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\")) and  not (xdm.target.file.filename ~= \".*\\\\gcapi\\.dll\")\n\n\n\n"}
{"prompt": "I want to detect suspicious script executions that are running from temporary folders on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\") and (action_process_image_command_line contains \"\\\\Windows\\\\Temp\" or action_process_image_command_line contains \"\\\\Temporary Internet\" or action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\" or action_process_image_command_line contains \"\\\\AppData\\\\Roaming\\\\Temp\" or action_process_image_command_line contains \"%TEMP%\" or action_process_image_command_line contains \"%TMP%\" or action_process_image_command_line contains \"%LocalAppData%\\\\Temp\")) and  not ((action_process_image_command_line contains \" >\" or action_process_image_command_line contains \"Out-File\" or action_process_image_command_line contains \"ConvertTo-Json\" or action_process_image_command_line contains \"-WindowStyle hidden -Verb runAs\" or action_process_image_command_line ~= \".*\\\\Windows\\\\system32\\\\config\\\\systemprofile\\\\AppData\\\\Local\\\\Temp\\\\Amazon\\\\EC2\\-Windows\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when someone allows RDP connections through Netsh.EXE.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and ((action_process_image_command_line contains \"firewall \" and action_process_image_command_line contains \"add \" and action_process_image_command_line contains \"tcp \" and action_process_image_command_line contains \"3389\") and (action_process_image_command_line contains \"portopening\" or action_process_image_command_line contains \"allow\")))\n\n\n\n"}
{"prompt": "I want to detect Windows command lines that might be obfuscated or have typos by checking if they're missing spaces before or after the /c flag when using cmd.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"cmd.exe/c\" or action_process_image_command_line contains \"\\\\cmd/c\" or action_process_image_command_line contains \"\\\"cmd/c\" or action_process_image_command_line contains \"cmd.exe/k\" or action_process_image_command_line contains \"\\\\cmd/k\" or action_process_image_command_line contains \"\\\"cmd/k\" or action_process_image_command_line contains \"cmd.exe/r\" or action_process_image_command_line contains \"\\\\cmd/r\" or action_process_image_command_line contains \"\\\"cmd/r\") or (action_process_image_command_line contains \"/cwhoami\" or action_process_image_command_line contains \"/cpowershell\" or action_process_image_command_line contains \"/cschtasks\" or action_process_image_command_line contains \"/cbitsadmin\" or action_process_image_command_line contains \"/ccertutil\" or action_process_image_command_line contains \"/kwhoami\" or action_process_image_command_line contains \"/kpowershell\" or action_process_image_command_line contains \"/kschtasks\" or action_process_image_command_line contains \"/kbitsadmin\" or action_process_image_command_line contains \"/kcertutil\") or (action_process_image_command_line contains \"cmd.exe /c\" or action_process_image_command_line contains \"cmd /c\" or action_process_image_command_line contains \"cmd.exe /k\" or action_process_image_command_line contains \"cmd /k\" or action_process_image_command_line contains \"cmd.exe /r\" or action_process_image_command_line contains \"cmd /r\")) and  not ((action_process_image_command_line contains \"cmd.exe /c \" or action_process_image_command_line contains \"cmd /c \" or action_process_image_command_line contains \"cmd.exe /k \" or action_process_image_command_line contains \"cmd /k \" or action_process_image_command_line contains \"cmd.exe /r \" or action_process_image_command_line contains \"cmd /r \") or (action_process_image_command_line contains \"AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\\\\resources\\\\app\\\\node_modules\" or action_process_image_command_line ~= \".*cmd\\.exe\\/c\\ \\.\" or action_process_image_command_line = \"cmd.exe /c\"))\n\n\n\n"}
{"prompt": " I want to see Windows Event Log entries related to RedMimicry Winnti Playbook Registry Manipulation, specifically those that target \"HKLM\\\\SOFTWARE\\\\Microsoft\\\\HTMLHelp\\\\data\". ", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"HKLM\\\\SOFTWARE\\\\Microsoft\\\\HTMLHelp\\\\data\"\n\n\n\n"}
{"prompt": "I want to find instances of attackers hijacking the Windows Firewall Snap-In using mmc.exe and WF.msc to bypass UAC.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\mmc\\.exe\" and actor_process_image_command_line contains \"WF.msc\") and  not (action_process_image_path ~= \".*\\\\WerFault\\.exe\")\n\n\n\n"}
{"prompt": "I want to see events where processes are calling Win32_NTEventlogFile with potentially suspicious actions like backup, security permission changes, deletion, renaming, or ownership transfer.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Win32_NTEventlogFile\" and (action_process_image_command_line contains \".BackupEventlog(\" or action_process_image_command_line contains \".ChangeSecurityPermissions(\" or action_process_image_command_line contains \".ChangeSecurityPermissionsEx(\" or action_process_image_command_line contains \".ClearEventLog(\" or action_process_image_command_line contains \".Delete(\" or action_process_image_command_line contains \".DeleteEx(\" or action_process_image_command_line contains \".Rename(\" or action_process_image_command_line contains \".TakeOwnerShip(\" or action_process_image_command_line contains \".TakeOwnerShipEx(\"))\n\n\n\n"}
{"prompt": "I want to detect malicious JXA in-memory execution on macOS endpoints using OSAScript and JavaScript.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"osascript\" and action_process_image_command_line contains \" -e \" and action_process_image_command_line contains \"eval\" and action_process_image_command_line contains \"NSData.dataWithContentsOfURL\") and ((action_process_image_command_line contains \" -l \" and action_process_image_command_line contains \"JavaScript\") or action_process_image_command_line contains \".js\"))\n\n\n\n"}
{"prompt": "I want to detect potential C# code compilation attempts using Ilasm.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\ilasm\\.exe\" or actor_process_file_original_name = \"ilasm.exe\") and (action_process_image_command_line contains \" /dll\" or action_process_image_command_line contains \" /exe\"))\n\n\n\n"}
{"prompt": "I want to find out which end-user machines are infected with viruses or haven't been cured yet.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.observer.action ~= \"Left alone|All actions failed|No repair available|Bad\"\n| filter xdm.alert.name != null and xdm.alert.name not contains \"Tracking Cookies\"\n| filter xdm.alert.category = null or xdm.alert.category != \"Insight Network Threat\"\n| filter lowercase(xdm.target.file.path) !~= \"webex.exe|webex \\(\\d\\).exe|webex \\(\\d\\d\\).exe|webex \\(\\d\\d\\d\\).exe|webex \\(([1-9]|[1-9][0-9]|[1-9][0-9][0-9])\\).exe\"\n| filter lowercase(xdm.target.application.name) !~= \"[video]wandrv6.exe\"\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1),\nfile_hash = xdm.target.file.sha256,\nusername = xdm.source.user.username,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nprocess = xdm.target.file.path,\nrisk_name = xdm.alert.name,\naction = xdm.observer.action\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\"),\ntime = _time,\naggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of new kernel drivers being created via SC.EXE on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\sc\\.exe\" and (action_process_image_command_line contains \"create\" or action_process_image_command_line contains \"config\") and (action_process_image_command_line contains \"binPath\" and action_process_image_command_line contains \"type\" and action_process_image_command_line contains \"kernel\"))\n\n\n\n"}
{"prompt": "I want to find events where an attacker has disabled the Windows Firewall profile.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Set-NetFirewallProfile \" and ScriptBlockText contains \" -Enabled \" and ScriptBlockText contains \" False\") and (ScriptBlockText contains \" -All \" or ScriptBlockText contains \"Public\" or ScriptBlockText contains \"Domain\" or ScriptBlockText contains \"Private\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential Russian APT credential theft activity on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line ~= \".*xcopy\\ \\/S\\ \\/E\\ \\/C\\ \\/Q\\ \\/H\\ \\\\\\\\.*\" and action_process_image_command_line ~= \".*\\\\sysvol\\\\.*\") or (action_process_image_command_line ~= \".*adexplorer\\ \\-snapshot\\ \\\"\\\"\\ c\\:\\\\users\\\\.*\" and action_process_image_command_line ~= \".*\\\\downloads\\\\.*\" and action_process_image_command_line contains \".snp\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when Wusa.EXE is extracting CAB files from suspicious locations like Temp folders and Public shares.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wusa\\.exe\" and action_process_image_command_line contains \"/extract:\") and (action_process_image_command_line ~= \".*\\:\\\\PerfLogs\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Appdata\\\\Local\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find indicators of an attacker clearing their PowerShell history on endpoints.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter ((Payload contains \"Set-PSReadlineOption\" and Payload contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdHistorySaveStyle\" and Payload contains \"SaveNothing\") or (Payload contains \"Set-PSReadlineOption\" and Payload contains \"-HistorySaveStyle\" and Payload contains \"SaveNothing\")) or ((Payload contains \"del\" or Payload contains \"Remove-Item\" or Payload contains \"rm\") and Payload contains \"(Get-PSReadlineOption).HistorySavePath\")\n\n\n\n"}
{"prompt": "I want to find instances of Apache Threading Errors in my logs.", "response": "datamodel\n| filter _raw_log contains \"__pthread_tpp_change_priority: Assertion `new_prio == -1 || (new_prio >= fifo_min_prio && new_prio <= fifo_max_prio)\"\n\n\n\n"}
{"prompt": "I want to see activities related to the SOURGUM threat actor on my endpoints, including suspicious process creations and registry modifications.", "response": "preset = xdr_process\n| filter (action_process_image_path contains \"windows\\\\system32\\\\Physmem.sys\" or action_process_image_path contains \"Windows\\\\system32\\\\ime\\\\SHARED\\\\WimBootConfigurations.ini\" or action_process_image_path contains \"Windows\\\\system32\\\\ime\\\\IMEJP\\\\WimBootConfigurations.ini\" or action_process_image_path contains \"Windows\\\\system32\\\\ime\\\\IMETC\\\\WimBootConfigurations.ini\") or (((action_process_image_path contains \"windows\\\\system32\\\\filepath2\" or action_process_image_path contains \"windows\\\\system32\\\\ime\") and action_process_image_command_line contains \"reg add\") and (action_process_image_command_line contains \"HKEY_LOCAL_MACHINE\\\\software\\\\classes\\\\clsid\\\\{7c857801-7381-11cf-884d-00aa004b2e24}\\\\inprocserver32\" or action_process_image_command_line contains \"HKEY_LOCAL_MACHINE\\\\software\\\\classes\\\\clsid\\\\{cf4cc405-e2c5-4ddd-b3ce-5e7582d8c9fa}\\\\inprocserver32\"))\n\n\n\n"}
{"prompt": "I want to find processes that use obfuscation techniques involving special variables like \"{0}\" through \"{5}\" and include \"&&set\", \"cmd\", \"/c\", and \"-f\" in their command line.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"&&set\" and action_process_image_command_line contains \"cmd\" and action_process_image_command_line contains \"/c\" and action_process_image_command_line contains \"-f\") and (action_process_image_command_line contains \"{0}\" or action_process_image_command_line contains \"{1}\" or action_process_image_command_line contains \"{2}\" or action_process_image_command_line contains \"{3}\" or action_process_image_command_line contains \"{4}\" or action_process_image_command_line contains \"{5}\"))\n\n\n\n"}
{"prompt": "I want to see PowerShell scripts installed as services on my endpoints.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName contains \"powershell\" or ServiceFileName contains \"pwsh\"))\n\n\n\n"}
{"prompt": "I want to see events related to high privilege admin activity and role separation on Windows machines.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4897\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all instances where users were added or removed from the \"SOX Server\" local group on our Windows machines.", "response": "dataset = microsoft_windows_raw\n| alter TargetGroupName = event_data -> TargetUserName,\nSubjectUserName = event_data -> SubjectUserName,\nMemberName = event_data -> MemberName,\nSubjectUserSid = event_data -> SubjectUserSid,\nSubjectLogonId = event_data -> SubjectLogonId,\nMemberSid = event_data -> MemberSid,\nTargetSid = event_data -> TargetSid,\nPrivilegeList = event_data -> PrivilegeList,\nTargetDomainName = event_data -> TargetDomainName,\nSubjectDomainName = event_data -> SubjectDomainName,\nUser_Event_Action = arrayindex(regextract(message, \"(^.*?)\\.\\n\\n\"), 0),\nTargetUserName = User -> name\n| alter SubjectUserSid_DisplayName = if(SubjectUserSid = \"S-1-5-18\", \"System(or LocalSystem)\"),\nTargetSid_DisplayName = if(TargetSid = \"S-1-5-32-544\", \"Built-in Administrators\"),\nUser_Event_Action_Type = if(User_Event_Action contains \"added to\", \"Added\", if(User_Event_Action contains \"removed from\", \"Removed\"))\n| filter event_id in (4732, 4733) and SubjectUserName !~= \"\\$$\"\n| join\n(dataset = sox_servers\n) as ss ss.Hostname = _collector_hostname\n| filter Hostname = _collector_hostname\n| fields time_created, _time, _insert_time, User_Event_Action,\nTargetGroupName, SubjectUserName, host_name, User_Event_Action_Type,\n_collector_hostname, TargetUserName, MemberSid,\nevent_id, event_data, event_action, event_result,\nmessage"}
{"prompt": " I want to see alerts for potential exploitation of PaperCut MF/NG that involves executing suspicious processes like bash, calc, or PowerShell. ", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\pc\\-app\\.exe\" and (action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\csc\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\dllhost\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\msiexec\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\scriptrunner\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\wsl\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts about VBA DLLs being loaded through Office applications like Excel, Word, PowerPoint, etc.", "response": "preset = xdr_image_load\n| filter ((actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\mspub\\.exe\" or actor_process_image_path ~= \".*\\\\onenote\\.exe\" or actor_process_image_path ~= \".*\\\\onenoteim\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\winword\\.exe\") and (action_module_path ~= \".*\\\\VBE7\\.DLL\" or action_module_path ~= \".*\\\\VBEUI\\.DLL\" or action_module_path ~= \".*\\\\VBE7INTL\\.DLL\"))\n\n\n\n"}
{"prompt": "I want to find detections of the Rubeus hacking tool being used for credential access attacks.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"asreproast \" or ScriptBlockText contains \"dump /service:krbtgt \" or ScriptBlockText contains \"dump /luid:0x\" or ScriptBlockText contains \"kerberoast \" or ScriptBlockText contains \"createnetonly /program:\" or ScriptBlockText contains \"ptt /ticket:\" or ScriptBlockText contains \"/impersonateuser:\" or ScriptBlockText contains \"renew /ticket:\" or ScriptBlockText contains \"asktgt /user:\" or ScriptBlockText contains \"harvest /interval:\" or ScriptBlockText contains \"s4u /user:\" or ScriptBlockText contains \"s4u /ticket:\" or ScriptBlockText contains \"hash /password:\" or ScriptBlockText contains \"golden /aes256:\" or ScriptBlockText contains \"silver /user:\")\n\n\n\n"}
{"prompt": "I want to find any instances where there's a Log4j attempt followed by accepted traffic in my Cisco Firepower firewall logs.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"log4j\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name ~= \"qualys\"\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| join conflict_strategy = left type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.target.ipv4\n| filter (xdm.target.is_internal_ip = true or ip_address != null)\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| join type = left\n(datamodel dataset = check_point_vpn_1_firewall_1_raw\n| alter origin = check_point_vpn_1_firewall_1_raw.origin\n| filter xdm.observer.action = \"accept\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name ~= \"qualys\"\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.target.ipv4\n| filter (xdm.target.is_internal_ip = true or ip_address != null)\n| fields xdm.observer.action, xdm.source.ipv4 as fw_src_ip,\nxdm.source.port, xdm.event.description, xdm.target.ipv4,\nxdm.target.is_internal_ip\n) as fw_events fw_events.fw_src_ip = xdm.source.ipv4\n| filter fw_src_ip != null\n| comp values(*) as * by xdm.source.ipv4,\n_time\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious instances of Odbcconf.exe being used to execute response files.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\odbcconf\\.exe\" or actor_process_file_original_name = \"odbcconf.exe\") and action_process_image_command_line contains \" -f \") and  not (action_process_image_command_line contains \".rsp\" or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\runonce.exe\" and action_process_image_path = \"C:\\\\Windows\\\\System32\\\\odbcconf.exe\" and action_process_image_command_line contains \".exe /E /F \\\"C:\\\\WINDOWS\\\\system32\\\\odbcconf.tmp\\\"\"))\n\n\n\n"}
{"prompt": "I want to see all events where a member was removed from an O365 MFA exception group in Windows Event Logs.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4729\")\n| filter xdm.event.description contains \"A member was removed\" and (xdm.event.description contains \"GSG-\" and xdm.event.description contains \"-EXCEPTION\")\n| fields xdm.event.id, xdm.event.description, xdm.source.user.username,\nxdm.target.user.groups, xdm.target.user.username,\n*"}
{"prompt": "I want to detect suspicious Python path configuration files (.pth) being created in Windows environments.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"(?i)\\\\(venv|python(.+)?)\\\\lib\\\\site\\-packages\\\\\" and xdm.target.file.filename ~= \".*\\.pth\") and  not (((xdm.target.process.name ~= \".*\\\\python\\.exe\" or xdm.source.process.name ~= \".*\\\\python\\.exe\") and (xdm.target.file.filename ~= \".*\\\\pywin32\\.pth\" or xdm.target.file.filename ~= \".*\\\\distutils\\-precedence\\.pth\")))\n\n\n\n"}
{"prompt": "I want to detect if tar.exe is being used to extract compressed files on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\tar\\.exe\" or actor_process_file_original_name = \"bsdtar\") and action_process_image_command_line contains \"-x\")\n\n\n\n"}
{"prompt": " I want to see detections related to potential Active Directory enumeration using PowerShell and AD modules. ", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"Import-Module \" or action_process_image_command_line contains \"ipmo \") and action_process_image_command_line contains \"Microsoft.ActiveDirectory.Management.dll\")\n\n\n\n"}
{"prompt": "I want to find instances where a user is added to the Local Administrators group on endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_command_line contains \"localgroup \" and action_process_image_command_line contains \" /add\") or (action_process_image_command_line contains \"Add-LocalGroupMember \" and action_process_image_command_line contains \" -Group \")) and (action_process_image_command_line contains \" administrators \" or action_process_image_command_line contains \" administrateur\"))\n\n\n\n"}
{"prompt": "I want to see potential sensitive role access configurations within my Azure Kubernetes deployments.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/WRITE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/DELETE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/BIND/ACTION\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLES/ESCALATE/ACTION\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/WRITE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/DELETE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/BIND/ACTION\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLES/ESCALATE/ACTION\")\n\n\n\n"}
{"prompt": "I want to see alerts if there are 5 or more DHCP snooping events detected on Cisco Catalyst switches within a 4-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 4m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter (msg_id in (\"DHCP_SNOOPING-5-DHCP_SNOOPING_MATCH_MAC_FAIL\", \"DHCP_SNOOPING-5-DHCP_SNOOPING_UNTRUSTED_PORT\", \"DHCP_SNOOPING-5-DHCP_SNOOPING_FAKE_INTERFACE\", \"DHCP_SNOOPING-4-INVALID_RELEASE_OR_DECLINE_PKT\") or (msg_id in (\"DHCP_SNOOPING-5-DHCP_SNOOPING_NONZERO_GIADDR\") and xdm.event.description ~= \"message type: DHCPDECLINE\")) and device_ip != \"<ip>\" and xdm.event.description !~= \"message type: DHCPINFORM\" and eth_src not in (\"<ip>\", \"<ip>\", \"<ip>\", \"<ip>\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\nmsg_id,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to find alerts related to suspicious Dropbox API usage on Windows systems within my network.", "response": "#N/A"}
{"prompt": "I want to see if someone has enabled DNS-over-HTTPS on Windows machines.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Edge\\\\BuiltInDnsClientEnabled\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\")) or (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Google\\\\Chrome\\\\DnsOverHttpsMode\" and (action_registry_value_name = \"secure\" or action_registry_data = \"secure\")) or (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Policies\\\\Mozilla\\\\Firefox\\\\DNSOverHTTPS\\\\Enabled\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\")))\n\n\n\n"}
{"prompt": "I want to find instances of the Exchange ProxyShell attack pattern using network traffic data.", "response": "datamodel\n| filter (xdm.network.http.response_code = 401 and xdm.network.http.url contains \"/autodiscover.json\" and (xdm.network.http.url contains \"/powershell\" or xdm.network.http.url contains \"/mapi/nspi\" or xdm.network.http.url contains \"/EWS\" or xdm.network.http.url contains \"X-Rps-CAT\")) or (xdm.network.http.response_code = 401 and (xdm.network.http.url contains \"autodiscover.json*@\" or xdm.network.http.url contains \"autodiscover.json%3f@\" or xdm.network.http.url contains \"%3f@foo.com\" or xdm.network.http.url contains \"Email=autodiscover/autodiscover.json\" or xdm.network.http.url contains \"json*@foo.com\"))\n\n\n\n"}
{"prompt": "I want to find instances where Windows capabilities are added via PowerShell, specifically \"OpenSSH\", on endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and action_process_image_command_line contains \"Add-WindowsCapability\" and action_process_image_command_line contains \"OpenSSH.\")\n\n\n\n"}
{"prompt": "I want to find events related to the \"HackTool - DiagTrackEoP Default Named Pipe\" which uses a pipe named \"thisispipe\".", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter PipeName contains \"thisispipe\"\n\n\n\n"}
{"prompt": "I want to see all events where Fodhelper.exe is used to potentially bypass UAC.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\fodhelper\\.exe\"\n\n\n\n"}
{"prompt": "I want to find instances of malicious PowerShell scripts that use XML to execute commands.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"New-Object\" and ScriptBlockText contains \"System.Xml.XmlDocument\" and ScriptBlockText contains \".Load\") and (ScriptBlockText contains \"IEX \" or ScriptBlockText contains \"Invoke-Expression \" or ScriptBlockText contains \"Invoke-Command \" or ScriptBlockText contains \"ICM -\"))\n\n\n\n"}
{"prompt": "I want to see detections for Mimikatz DC Sync attacks.", "response": "preset = xdr_event_log\n| alter Properties = regextract(to_json_string(action_evtlog_data_fields)->Properties{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter SubjectDomainName = regextract(to_json_string(action_evtlog_data_fields)->SubjectDomainName{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4662 and (Properties contains \"Replicating Directory Changes All\" or Properties contains \"1131f6ad-9c07-11d1-f79f-00c04fc2dcd2\" or Properties contains \"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2\" or Properties contains \"9923a32a-3607-11d2-b9be-0000f87a36b2\" or Properties contains \"89e95b76-444d-4c62-991a-0facbeda640c\") and AccessMask = \"0x100\") and  not (SubjectDomainName = \"Window Manager\" or (SubjectUserName ~= \"NT\\ AUT.*\" or SubjectUserName ~= \"MSOL\\_.*\") or SubjectUserName ~= \".*\\$\")\n\n\n\n"}
{"prompt": "I want to see which VIP users are accessing suspicious websites according to BlueCoat Proxy logs.", "response": "datamodel dataset in (bluecoat_proxysg_raw)\n| fields xdm.event.duration, xdm.source.user.username, xdm.source.ipv4,\nxdm.event.outcome, xdm.network.http.response_code,\nxdm.source.port, xdm.source.host.hostname, xdm.network.http.url_category,\nxdm.source.user_agent, xdm.target.ipv4, xdm.source.host.ipv4_addresses,\nxdm.target.sent_bytes, xdm.source.sent_bytes, xdm.event.type,\nxdm.network.http.method, xdm.network.http.content_type,\nxdm.network.ip_protocol, xdm.event.outcome_reason\n| filter xdm.source.user.username != \"- \" and xdm.network.http.url_category contains \"Suspicious\"\n| join\n(dataset = pan_dss_raw\n| filter type = \"user\" and member_of contains \"vip\"\n| fields sam_account_name, upn, display_name, member_of,\nnetbios_and_sam_account_name\n) as lookup_vip lookup_vip.sam_account_name = xdm.source.user.username\n| alter xdm.source.user.username = netbios_and_sam_account_name"}
{"prompt": " I want to see all changes made to Windows domain policies, specifically looking for Event ID 4739. ", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4739) and _collector_type in (\"XDR Collector\")\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nDomainPolicyChanged = event_data -> DomainPolicyChanged,\nPasswordProperties = event_data -> PasswordProperties,\nDomainName = event_data -> DomainName\n| alter Changed_Attributes = arrayindex(split(message, \"Changed Attributes:\"), 1)\n| filter SubjectUserName !~= \"\\$$\" and DomainPolicyChanged != \"-\"\n| fields _time, event_id, SubjectUserName, _collector_hostname as Hostname,\nSubjectDomainName, DomainPolicyChanged, Changed_Attributes,\nDomainName"}
{"prompt": " I want to see alerts about potential Zerologon exploitation using tools like Kali and Mimikatz detected on endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id in (5805, 5723) and ( contains \"kali\" or  contains \"mimikatz\")\n\n\n\n"}
{"prompt": "I want to see any instances where PowerShell tokens are being obfuscated during process creation on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \"\\w+\\`(\\w+|\\-|.)\\`[\\w+|\\s]\" or action_process_image_command_line ~= \"\\\"(\\{\\d\\})+\\\"\\s*\\-f\" or action_process_image_command_line ~= \"\\$\\{((e|n|v)*\\`(e|n|v)*)+\\:path\\}|\\$\\{((e|n|v)*\\`(e|n|v)*)+\\:((p|a|t|h)*\\`(p|a|t|h)*)+\\}|\\$\\{env\\:((p|a|t|h)*\\`(p|a|t|h)*)+\\}\")\n\n\n\n"}
{"prompt": "I want to detect instances where an attacker uses dotnet.exe to execute arbitrary DLLs or Csproj code.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\dotnet\\.exe\" or actor_process_file_original_name = \".NET Host\") and (action_process_image_command_line ~= \".*\\.csproj\" or action_process_image_command_line ~= \".*\\.csproj\\\"\" or action_process_image_command_line ~= \".*\\.dll\" or action_process_image_command_line ~= \".*\\.dll\\\"\" or action_process_image_command_line ~= \".*\\.csproj\\'\" or action_process_image_command_line ~= \".*\\.dll\\'\"))\n\n\n\n"}
{"prompt": "I want to see all instances where bpftrace is being used with the \"--unsafe\" option.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*bpftrace\" and action_process_image_command_line contains \"--unsafe\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential PowerShell Execution Policy tampering detected through process creation on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"\\\\ShellIds\\\\Microsoft.PowerShell\\\\ExecutionPolicy\" or action_process_image_command_line contains \"\\\\Policies\\\\Microsoft\\\\Windows\\\\PowerShell\\\\ExecutionPolicy\") and (action_process_image_command_line contains \"Bypass\" or action_process_image_command_line contains \"RemoteSigned\" or action_process_image_command_line contains \"Unrestricted\"))\n\n\n\n"}
{"prompt": "I want to see information about when ESXi storage discovery is performed on endpoints using the ESXCLI command.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/esxcli\" and action_process_image_command_line contains \"storage\") and (action_process_image_command_line contains \" get\" or action_process_image_command_line contains \" list\"))\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to using the \"Get-ADDBAccount\" command on endpoints.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter (Payload contains \"Get-ADDBAccount\" and Payload contains \"BootKey \" and Payload contains \"DatabasePath \")\n\n\n\n"}
{"prompt": "I want to see detailed information about security alerts from Symantec Endpoint Protection, including the alert category, event description, target IP address, requested action, and file details.", "response": "datamodel dataset = symantec_ep_raw\n| filter xdm.observer.action in (\"Left alone\", \"All actions failed\", \"No repair available\", \"Bad\")\n| filter xdm.alert.name != null and xdm.alert.name !~= \"Tracking Cookies\"\n| filter xdm.alert.category = null or xdm.alert.category != \"Insight Network Threat\"\n| join type = left\n(preset = ad_users\n| fields sam_account_name, security_group_list, member_of\n) as cieusers cieusers.sam_account_name = xdm.source.user.username\n| filter member_of not contains \"Tier0Users\" and security_group_list not contains \"Tier0Users\"\n| join type = left\n(dataset = redcarpet_users_list\n) as redcarpusers xdm.source.user.username = redcarpusers.username\n| filter username in (null, NULL)\n| filter xdm.target.file.sha256 = null or uppercase(xdm.target.file.sha256) not in (\"9CCB05FE7F4B5E8AB55E3C25983752A90B1A7C83A795F3F47A343B87B80CF2CA\", \"683D6229690FFC9ED78F8FC64F83DBE087E4B4D37631DA3FBEA3DBD72C78D7E2\", \"1234190066CA9075B7F5898A9CF1650C94ACA18403B3F9640B1C6A504645133C\", \"2A1AD1958B0A1D220324E3CC84CB2C81A07D264C126247E96827826FC872AE62\", \"36ADFCBD3843B54C67E157A4E3A29C384B825258060F6CF1AD2199527DB129C4\", \"29CE4A204C1409653D83AB7A1AB7F0E03B99467891C4F3BAA7704A364ADC8E61\", \"2E74E5CF0F0DB7064030E47F72F14426E02DD5F49B1F5CA5D3305E4B478C4E24\", \"8E667A7C0D48F72DCF7784237AB22B1A2D958C59E3033E1A7AD276049A9C9C39\", \"0A9FC1A2031964C76C59F0734C67B45B9E6954968CD0BBCD02A0F15A2793460E\", \"1D527EED31DB812AD6852E8AAE31DF66E5A6D78FEDDD2D7F8A7650A94FF75F35\", \"AA7C95F468B4E6370CC83CC333B55ECDBDC4A67D1BDAA221FD0AEB22412DCE41\", \"20704CFABEBC40108A0D84250D7229AB996389963E64F6B01F7C854212B2EFFF\", \"E8DC3246FD90F4C37DD120919731C5EC2B57F97E23E492670F48B1E826818AD9\", \"B339CD40DA353E022D2D7F50C6D417AEAFC65EA9D9F3F657EAEB3924A02143AA\", \"A3F8FC72EFF1F75EA0EE0E9554AF2219C441B08899EF0509635079963EF44ED4\", \"752DE7C8D1A8BCAA27918733A0096463FEBCF39C1116389829A6DEDB76B40388\", \"4E11153F19C76562788C3F844644DECB40383960B9282C06F4D1EC36A1FEB92A\", \"D536989F1F1D7290A05ED2E778203DBFD6C70C6A6B918682B1471FDF993EF68B\", \"FFDDA09385662BA9C5404D709EDCDC7C77544552297EE5BF4B1FAC0783024584\", \"593013F2304D8A66D6ECF3E751CD0917AB34956D62E91E056AEB4AB7D1888072\", \"93E1D9D2E6C42A0B79B3E4CFD2259FB194AB1A747637A41C680F75C3AF9927EE\", \"877ADB61C4F766B479CE649511056F3DD471A80E32C8AC73CC3ED837B697CF2A\", \"983AB7C2A72DEE627B9F55AFA3B47F41717A46764B93CFA8BCB8B92E8AED1E96\", \"9253EF2FD150C7224F12FF9E868F15C966DBA047ED4083867A64B3C4DCCFC55B\", \"1D5F81D57FADBD48F54C5129A5AC59756D99277D4F7B3AC9C10B1BF7878FB636\", \"575CE47574B22B0BB4DCBEA3E0E5DDCC165CC4054E9C43A5A49D10973CE46BF0\", \"89178905DFBAEBB678E63D9D39A3E9FC9ADD179555FA44300E1C1E0166CB1D63\", \"6262C349C26C0BB6EB1EAFE663F415168E4094B8FB52E35F9E88EF93C75AD030\", \"29F46BB34F42B9E994EE5A4F8FCCED12340EC2130F705E6DAAEB7A03FE504836\", \"99AE9DD1F4BA6C2C321381633612DF7F14B53E7B692D8B91F8B61651E046DADA\", \"89BF58EC6EDA665A6C4C9F0766182E015120111F189E989940FAABAB3C3F2A61\", \"B15D6633DCF95C1E3C60772931787BC9DD31CC1108A9F66A707D64B07E189ADB\", \"2EB8F6AE6CE85208DF656999D597A06A773B65CD4D8FD6E0FF6F0803C9D15DF1\", \"AA1311C735AF0B72D301EB223B14BC27473ED742777D8E22F6A190A4D5ADF5B7\", \"4625AF97D8F875384E5B495C12C4D8645CF9A54EF1876CDDD8C1935EFDF8E278\", \"103267E8698BA0723FABDC7028BF52B4131F2A5533E098C8274EE3A6FFC4E168\", \"3AD0328F12D031FD285A9C8936026CF8B43E8D9E94A51E02788C6DD9995120F0\", \"1428F7AC38FCACB0D38141A2E4248518E4CE305B47E6C4D85513E149B01CDB6C\", \"E3C797E8AE6C0DA27869DEF2BEB9DE8FBC8D09595AC74A1C09D0D4A47B7D1FB4\", \"E3B0C44298FC1C149AFBF4C8996FB92427AE41E4649B934CA495991B7852B855\", \"6E4E1B65D95D7C6F855569BECAA8C6480443195F7C6DE3C4BAD8233F7BEE157B\", \"3989A09CE0A56B64BA9D48905DAF495645728C18C7137022358BDDE2E7761E94\")\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\"),\naction = xdm.observer.action,\nfile_hash = xdm.target.file.sha256,\nrisk_name = xdm.alert.name,\nprocess = xdm.target.file.path,\nsrc_ips = xdm.source.ipv4,\ndst_ips = xdm.target.ipv4,\nalert_category = xdm.alert.category\n| alter aggregation_criteria1 = \"ildestinationuser\",\naggregation_criteria2 = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts when there are at least 3 object modifications within a 5 minute period by non-admin users, excluding specific IPs and security groups.", "response": "config case_sensitive = false\n| dataset in (check_point_smartconsole_raw, check_point_smartview_tracker_raw, check_point_query_database_raw, check_point_smartdashboard_raw, check_point_license_mgmt_raw, check_point_smartupdate_raw, check_point_web_api_raw, check_point_web_ui_raw)\n| bin _time span = 5m\n| filter operation = \"Modify Object\" and administrator not in (\"localhost\", \"fwadmin\", \"smartupdate\", \"system\") and _final_reporting_device_ip != \"10.67.122.132\"\n| join type = left\n(preset = ad_users\n| fields security_identifier, full_user_name, security_group_list,\ndisplay_name, sam_account_name, member_of\n) as cieusers administrator = cieusers.sam_account_name\n| filter security_group_list not contains \"INTEG-Nsec-PRVDR1\" and member_of not contains \"INTEG-Nsec-PRVDR1\"\n| alter user_agent = null,\nos_edition = null,\nsrc_port = null,\ndst_port = null,\nhostname = arrayindex(regextract(originsicname, \"o\\=([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(src_port) as src_port,\nvalues(dst_port) as dst_port,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(hostname) as hostname,\nvalues(additional_info) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\ncount() as matched_events by _time,\nadministrator\n| filter matched_events >= 3\n| alter aggregate_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find PowerShell scripts that use WMI to create persistence on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"New-CimInstance \" and ScriptBlockText contains \"-Namespace root/subscription \" and ScriptBlockText contains \"-ClassName __EventFilter \" and ScriptBlockText contains \"-Property \") or (ScriptBlockText contains \"New-CimInstance \" and ScriptBlockText contains \"-Namespace root/subscription \" and ScriptBlockText contains \"-ClassName CommandLineEventConsumer \" and ScriptBlockText contains \"-Property \"))\n\n\n\n"}
{"prompt": "I want to detect potential homoglyph attacks by identifying files with filenames containing lookalike Unicode characters.", "response": "datamodel\n| filter ((xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\") or (xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or xdm.target.file.filename contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"))\n\n\n\n"}
{"prompt": "I want to see all events related to potential UAC bypass attempts using NTFS reparse points, specifically those involving files named \"api-ms-win-core-kernel32-legacy-l1.DLL\" located in the %TEMP% directory of user profiles.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\api\\-ms\\-win\\-core\\-kernel32\\-legacy\\-l1\\.DLL\")\n\n\n\n"}
{"prompt": "I want to find users who logged into Duo MFA using different operating systems and cities.", "response": "dataset = duo_duo_raw\n| filter email != null\n| alter Device_browser = access_device -> browser,\nDevice_browser_version = access_device -> browser_version,\nDevice_os = access_device -> os,\nDevice_os_version = access_device -> os_version,\nip = access_device -> ip,\ncity = access_device -> location.city,\nPhoneNumber = auth_device -> name,\nLogSource_ApplicationName = application -> name,\nDevCountry = access_device -> location.country,\nDevCity = access_device -> location.city\n| filter Device_os != null and Device_os not in (\"Android\", \"iOS\") and (reason != \"\"\"Trusted network\"\"\") and PhoneNumber not in (null, NULL, \"\"\"\"\"\")\n| fields access_device, Device_browser, Device_browser_version,\nDevice_os, Device_os_version, ip, city, auth_device,\nemail, PhoneNumber, _collector_type, _collector_name,\n_final_reporting_device_ip, _reporting_device_ip,\nDevice_os, application, LogSource_ApplicationName,\nDevCity, DevCountry\n| comp min(_time) as FirstEventTime,\nmax(_time) as LatestEventTime,\nvalues(Device_os) as MultipleOS,\nvalues(city) as MultipleCities,\nvalues(Device_browser) as Browsers,\nvalues(Device_browser_version) as BrowserVers,\nvalues(Device_os_version) as OsVers,\nvalues(DevCountry) as Countries,\nvalues(ip) as IPs,\ncount() as MultipleEvents by email,\nPhoneNumber,\nLogSource_ApplicationName addrawdata = true as ActivityRawData\n| filter array_length(MultipleOS) > 1 and array_length(MultipleCities) > 1\n| alter CorrelationRuleName = \"CNX_EU_PROD A user tried to use DUO MFA from multiple OS versions from multiple cities - V1\""}
{"prompt": "{I want to find processes that match the Mint Sandstorm - Log4J Wstomcat Process Execution signature.} \n\n\nThis prompt captures the user's intent based on the provided XQL query details:\n\n* **\"Find processes\"**:  Indicates the desired action is searching for specific processes.\n* **\"Match the Mint Sandstorm - Log4J Wstomcat Process Execution signature\"**: Explicitly states the criteria for selecting the processes. \n\n\n\nLet me know if you have any other XQL queries you'd like to turn into user prompts!", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\ws\\_tomcatservice\\.exe\" and  not (action_process_image_path ~= \".*\\\\repadmin\\.exe\")\n\n\n\n"}
{"prompt": "I want to see files that are suspicious and located within the Default GPO folder, specifically DLL or EXE files.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\Policies\\\\\\{31B2F340\\-016D\\-11D2\\-945F\\-00C04FB984F9\\}\\\\.*\" and (xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see events related to suspicious Tap Installer executions on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\tapinstall\\.exe\" and  not ((action_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Avast\\ Software\\\\SecureLine\\ VPN\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Avast\\ Software\\\\SecureLine\\ VPN\\\\.*\") or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\OpenVPN\\ Connect\\\\drivers\\\\tap\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Proton\\ Technologies\\\\ProtonVPNTap\\\\installer\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect malicious activity that uses MSHTA for obfuscation purposes.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName contains \"mshta\" and ServiceFileName contains \"vbscript:createobject\" and ServiceFileName contains \".run\" and ServiceFileName contains \"window.close\"))\n\n\n\n"}
{"prompt": " I want to see all O365 security compliance center searches that were created, including details about the search query, user ID, object ID, and timestamps one second before and after the creation.", "response": "dataset = msft_o365_general_raw\n| filter operation in (\"SearchCreated\") and Workload in (\"SecurityComplianceCenter\") and UserId not in (null, NULL, \"\"\"\"\"\")\n| alter SearchDetails = json_extract_scalar(Parameters, \"$[0].Value\"),\ntime_1sec_b4 = format_timestamp(\"%Y-%m-%d %H:%M:%S\", timestamp_seconds(to_integer(subtract(to_epoch(_time), 1)))),\ntime_1sec_after = format_timestamp(\"%Y-%m-%d %H:%M:%S\", timestamp_seconds(to_integer(add(to_epoch(_time), 2))))\n| fields UserId, Query, ObjectId, ExchangeLocations, ExtendedProperties,\nObjectType, Operation, Parameters, SearchDetails,\n*"}
{"prompt": "I want to see who has accessed the ADMIN$ network share on my endpoints.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5140 and ShareName = \"Admin$\") and  not (SubjectUserName ~= \".*\\$\")\n\n\n\n"}
{"prompt": "I want to find processes that download Diantz and compress it into a CAB file.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"diantz.exe\" and action_process_image_command_line ~= \".*\\ \\\\\\\\.*\" and action_process_image_command_line contains \".cab\")\n\n\n\n"}
{"prompt": "I want to see Cortex XDR alerts that show suspicious use of Get-WmiObject or gwmi commands on endpoints.  Exclude legitimate usage from CL_Utility.ps1 that checks free disk space.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| alter Path = regextract(to_json_string(action_evtlog_data_fields)->Path{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Get-WmiObject\" or ScriptBlockText contains \"gwmi\") and  not ((Path ~= \".*\\\\CL\\_Utility\\.ps1\" and (ScriptBlockText contains \"function Get-FreeSpace\" and ScriptBlockText contains \"SELECT * FROM Win32_LogicalDisk WHERE MediaType=12\")))\n\n\n\n"}
{"prompt": "{I want to find indicators of potential command and control activity related to PowerShell using `nslookup` to download files from a text resource.} \n\n\nLet me know if you have any other requests!", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\powershell\\.exe\" and action_process_image_path contains \"nslookup\" and action_process_image_command_line contains \"=txt \")\n\n\n\n"}
{"prompt": "I want to find suspicious downloads from Office domains using tools like curl or wget.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\curl\\.exe\" or action_process_image_path ~= \".*\\\\wget\\.exe\") or (action_process_image_command_line contains \"Invoke-WebRequest\" or action_process_image_command_line contains \"iwr \" or action_process_image_command_line contains \"curl \" or action_process_image_command_line contains \"wget \" or action_process_image_command_line contains \"Start-BitsTransfer\" or action_process_image_command_line contains \".DownloadFile(\" or action_process_image_command_line contains \".DownloadString(\")) and (action_process_image_command_line contains \"https:\n\n\n\n"}
{"prompt": "I want to find events related to cron files on Linux systems that could indicate persistence threats.", "response": "preset = xdr_file\n| filter ((action_file_name ~= \"\\/etc\\/cron\\.d\\/.*\" or action_file_name ~= \"\\/etc\\/cron\\.daily\\/.*\" or action_file_name ~= \"\\/etc\\/cron\\.hourly\\/.*\" or action_file_name ~= \"\\/etc\\/cron\\.monthly\\/.*\" or action_file_name ~= \"\\/etc\\/cron\\.weekly\\/.*\" or action_file_name ~= \"\\/var\\/spool\\/cron\\/crontabs\\/.*\") or (action_file_name contains \"/etc/cron.allow\" or action_file_name contains \"/etc/cron.deny\" or action_file_name contains \"/etc/crontab\"))\n\n\n\n"}
{"prompt": "I want to find instances where an attacker uses PowerShell commands like Remove-Item to delete files.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Remove-Item -Path \" or ScriptBlockText contains \"del -Path \" or ScriptBlockText contains \"erase -Path \" or ScriptBlockText contains \"rd -Path \" or ScriptBlockText contains \"ri -Path \" or ScriptBlockText contains \"rm -Path \" or ScriptBlockText contains \"rmdir -Path \")\n\n\n\n"}
{"prompt": "I want to see events related to suspicious Kerberos RC4 ticket encryption on my endpoints.", "response": "preset = xdr_event_log\n| alter TicketOptions = regextract(to_json_string(action_evtlog_data_fields)->TicketOptions{}, \"\\\"(.*)\\\"\")\n| alter TicketEncryptionType = regextract(to_json_string(action_evtlog_data_fields)->TicketEncryptionType{}, \"\\\"(.*)\\\"\")\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4769 and TicketOptions = \"0x40810000\" and TicketEncryptionType = \"0x17\") and  not (ServiceName ~= \".*\\$\")\n\n\n\n"}
{"prompt": "I want to see all instances of processes created with anonymous usernames that are running from paths like System32 or AppData folders.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\Windows\\\\System32\\\\.*\" or actor_process_image_path ~= \".*\\\\AppData\\\\.*\") and action_process_username contains \"ANONYMOUS\")\n\n\n\n"}
{"prompt": "I want to find instances where the \"DisallowRun\" execution feature has been added to the Windows registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\DisallowRun\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to find suspicious instances where files named like \"UsageLogs\\*.exe.log\" are created and used by processes, excluding known legitimate uses from Windows Installer.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\UsageLogs\\\\cmstp\\.exe\\.log\" or xdm.target.file.filename ~= \".*\\\\UsageLogs\\\\cscript\\.exe\\.log\" or xdm.target.file.filename ~= \".*\\\\UsageLogs\\\\mshta\\.exe\\.log\" or xdm.target.file.filename ~= \".*\\\\UsageLogs\\\\msxsl\\.exe\\.log\" or xdm.target.file.filename ~= \".*\\\\UsageLogs\\\\regsvr32\\.exe\\.log\" or xdm.target.file.filename ~= \".*\\\\UsageLogs\\\\rundll32\\.exe\\.log\" or xdm.target.file.filename ~= \".*\\\\UsageLogs\\\\svchost\\.exe\\.log\" or xdm.target.file.filename ~= \".*\\\\UsageLogs\\\\wscript\\.exe\\.log\" or xdm.target.file.filename ~= \".*\\\\UsageLogs\\\\wmic\\.exe\\.log\") and  not ((xdm.source.process.name ~= \".*\\\\MsiExec\\.exe\" and xdm.source.process.command_line contains \" -Embedding\" and (xdm.target.process.name ~= \".*\\\\rundll32\\.exe\" or xdm.source.process.name ~= \".*\\\\rundll32\\.exe\") and (xdm.target.process.command_line contains \"Temp\" and xdm.target.process.command_line contains \"zzzzInvokeManagedCustomActionOutOfProc\")))\n\n\n\n"}
{"prompt": "I want to see security alerts from AWS GuardDuty for my EV infrastructure, excluding unauthorized access events related to IAM users and instance credential exfiltration outside of AWS. I also want to group them by event type and log session ID.", "response": "config case_sensitive = false\n| dataset = aws_guardduty_raw\n| filter Type != \"UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS\"\n\n| alter target_username = trim(arrayindex(regextract(resource, \"UserName\\\":\\\"([^,]+)\"), 0), \"\\\"\"),\nipaddress = trim(arrayindex(regextract(Service, \"IpAddressV4\\\":\\\"([^,]+)\"), 0), \"\\\"\"),\ngroupname = regextract(resource, \"GroupName\\\":\\\"([^\\\"]+)\"),\ngroupid = regextract(resource, \"GroupId\\\":\\\"([^\\\"]+)\")\n| alter aggregation_criteria = \"ileventtype\",\naggregation_criteria1 = \"illogonsessionid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see real-time alerts for malware infections detected by Symantec IPS, showing details like the infected system name, event description, category type, source and destination IP addresses, requested action, and file information.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.alert.name ~= \"^System Infected\"\n| filter symantec_ep_raw._raw_log contains \",CIDS Signature string: System Infected:\"\n| alter host_name = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0)),\ncategory = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\"),\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\ntime = _time,\nusername = xdm.source.user.username\n| alter aggregation_criteria = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find users who have triggered over 100 Kerberos replay attack events within a timeframe of 5 minutes.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4649\")\n| sort asc _time\n| bin _time span = 5m\n| filter xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username != NULL\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 100\n\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 100)), 1)"}
{"prompt": "I want to find unusual server processes that are running outside of their normal time window based on a baseline established over the past week.", "response": "dataset = microsoft_windows_raw\n| filter event_id = 4688\n| alter 7days_t = date_floor(_time, \"h\")\n| alter domain = event_data -> SubjectDomainName\n| alter NewProcessName = event_data -> NewProcessName\n| alter tragetUserName = event_data -> TargetUserName\n| comp count() as 7day_c by domain,\nNewProcessName,\ntragetUserName,\ncomputer_name,\n7days_t\n| alter 7days_hour = extract_time(7days_t, \"HOUR\")\n| filter timestamp_diff(current_time(), 7days_t, \"hour\") > 144 and timestamp_diff(current_time(), 7days_t, \"hour\") <= 168\n| join type = right conflict_strategy = right\n(dataset = microsoft_windows_raw\n| filter event_id = 4688\n| alter d_t = date_floor(_time, \"h\")\n| alter domain = event_data -> SubjectDomainName\n| alter NewProcessName = event_data -> NewProcessName\n| alter tragetUserName = event_data -> TargetUserName\n| comp count() as d_c by domain,\nNewProcessName,\ntragetUserName,\ncomputer_name,\nd_t\n| alter d_hour = extract_time(d_t, \"HOUR\")\n| filter timestamp_diff(current_time(), d_t, \"hour\") > 144 and timestamp_diff(current_time(), d_t, \"hour\") <= 168\n) as d d.computer_name = computer_name and d.NewProcessName = NewProcessName and 7days_hour = d.d_hour and d.tragetUserName = tragetUserName\n| alter 7day_c = coalesce(7day_c, 0)\n| filter multiply(1.5, 7day_c) < d_c\n| filter NewProcessName not in (dataset = microsoft_windows_raw\n| filter event_id = 4688\n| alter NewProcessName = event_data -> NewProcessName\n| comp count() as c by NewProcessName\n| sort desc c\n| limit 10\n| fields NewProcessName)"}
{"prompt": "I want to see all DNS queries that target ufile.io from clients on my network.", "response": "datamodel\n| filter (xdm.event.id = 3008 and xdm.network.dns.dns_question.name contains \"ufile.io\")\n\n\n\n"}
{"prompt": "I want to find potential malicious activity related to unusual extensions in the \"Ime File\" registry value associated with Windows keyboard layouts.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Control\\\\Keyboard\\ Layouts\\\\.*\" and action_registry_key_name contains \"Ime File\") and  not ((action_registry_value_name ~= \".*\\.ime\" or action_registry_data ~= \".*\\.ime\"))\n\n\n\n"}
{"prompt": "I want to see alerts about when someone other than the mailbox owner gets full mailbox permissions.", "response": "config case_sensitive = false\n| dataset = msft_o365_exchange_online_raw\n| filter Operation IN (\"Add-MailboxPermission\")\n| alter arraycount = array_length(regextract(Parameters, \"Name\"))\n| alter permission = if(arraycount = 1, json_extract_scalar(parameters, \"$[0].Value\"), if(arraycount = 2, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\")), if(arraycount = 3, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\"), \",\", json_extract_scalar(parameters, \"$[2].Value\")), if(arraycount = 4, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\"), \",\", json_extract_scalar(parameters, \"$[2].Value\"), \",\", json_extract_scalar(parameters, \"$[3].Value\"))))))\n| fields Operation, MailboxOwnerUPN, UserId, ObjectId,\npermission, Parameters, ResultStatus, _time, CreationTime\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to see all inbound TCP flood attacks detected by Cisco ASA, Fortinet Fortigate, and SonicWall NS devices over the last 10 minutes.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter (xdm.source.is_internal_ip = false) and xdm.network.ip_protocol = \"\"\"TCP\"\"\" and xdm.source.sent_packets >= 100000 and xdm.event.duration >= 60000000000\n| fields *"}
{"prompt": "I want to see events where a process deletes all scheduled tasks on Windows endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \" /delete \" and action_process_image_command_line contains \"/tn \\*\" and action_process_image_command_line contains \" /f\"))\n\n\n\n"}
{"prompt": " I want to see all instances where the \"cytool protect disable\" command was executed and identify any potential tampering events by comparing it against other processes and system activities, including service status and timestamps.", "response": "config case_sensitive = false\n| dataset = xdr_data\n| filter (actor_process_command_line contains \"cytool protect disable\" and causality_actor_process_command_line not contains \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\\\" -executionpolicy bypass -file C:\\WINDOWS\\SCCM_ClientHealth\\ConfigMgrClientHealth.ps1 -config C:\\WINDOWS\\SCCM_ClientHealth\\config_\")\n| fields agent_hostname as Hostname, action_file_path, actor_process_image_path as apip,\nactor_process_command_line as apcl, causality_actor_process_image_path as capip,\ncausality_actor_process_command_line as capcl, os_actor_process_image_path as osapip,\nos_actor_process_command_line as ospcl, _time as CXReportTime\n| filter (apcl contains \"cytool protect disable\" and capip != \"\"\"C:\\\\Windows\\\\CCM\\\\CcmExec.exe\"\"\")\n| filter (apcl contains \"cytool protect disable\" and capcl not contains \"\"\"Machine\\\\Scripts\\\\Startup\\\\SMS_Service_Start.bat\"\"\")\n| dedup Hostname\n| join type = inner\n(dataset = host_inventory\n| arrayexpand services\n| alter Agent_Name = json_extract(services, \"$.display_name\"),\nAgent_Status = json_extract(services, \"$.started\"),\nAgent_State = json_extract(services, \"$.state\")\n| filter Agent_Name ~= \"(\\\"Cortex XDR\\\")\"\n) as AC AC.host_name = Hostname\n| alter diff = timestamp_diff(CXReportTime, _time, \"MINUTE\")\n| fields CXReportTime, Hostname, Agent_Name, Agent_Status,\ndiff as OTimeDiff, apip, apcl, _time as ObservedTime,\ncapip, capcl, osapip, ospcl\n| sort asc OTimeDiff,\ndesc Hostname"}
{"prompt": "I want to see who opened live terminal connections, excluding connections from Broker VMs.", "response": "config case_sensitive = false\n| dataset = management_auditing\n| filter management_auditing_type in (\"LIVE_TERMINAL\") and description in (\"Connection opened\")\n| filter host_name not contains \"Broker VM:\"\n| fields host_name, user_name, email"}
{"prompt": "I want to find PowerShell events that contain specific shellcode patterns like \"OiCAAAAYInlM\" or \"OiJAAAAYInlM\".", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"OiCAAAAYInlM\" or ScriptBlockText contains \"OiJAAAAYInlM\")\n\n\n\n"}
{"prompt": "I want to find files with names containing \"C:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\x64\\\\3\\\\old\\\\1\\\\123\", potentially indicating exploitation of the CVE-2021-1675 Print Spooler vulnerability.", "response": "datamodel\n| filter xdm.target.file.filename contains \"C:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\x64\\\\3\\\\old\\\\1\\\\123\"\n\n\n\n"}
{"prompt": "I want to find instances of Rundll32 being used to execute files with image extensions.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.exe\") and (action_process_image_command_line contains \".bmp\" or action_process_image_command_line contains \".cr2\" or action_process_image_command_line contains \".eps\" or action_process_image_command_line contains \".gif\" or action_process_image_command_line contains \".ico\" or action_process_image_command_line contains \".jpeg\" or action_process_image_command_line contains \".jpg\" or action_process_image_command_line contains \".nef\" or action_process_image_command_line contains \".orf\" or action_process_image_command_line contains \".png\" or action_process_image_command_line contains \".raw\" or action_process_image_command_line contains \".sr2\" or action_process_image_command_line contains \".tif\" or action_process_image_command_line contains \".tiff\"))\n\n\n\n"}
{"prompt": "I want to see all instances where a user was added or removed from a local group on any SOX server.", "response": "dataset = microsoft_windows_raw\n| alter TargetGroupName = event_data -> TargetUserName,\nSubjectUserName = event_data -> SubjectUserName,\nMemberName = event_data -> MemberName,\nSubjectUserSid = event_data -> SubjectUserSid,\nSubjectLogonId = event_data -> SubjectLogonId,\nMemberSid = event_data -> MemberSid,\nTargetSid = event_data -> TargetSid,\nPrivilegeList = event_data -> PrivilegeList,\nTargetDomainName = event_data -> TargetDomainName,\nSubjectDomainName = event_data -> SubjectDomainName,\nUser_Event_Action = arrayindex(regextract(message, \"(^.*?)\\.\\n\\n\"), 0),\nTargetUserName = User -> name\n| alter SubjectUserSid_DisplayName = if(SubjectUserSid = \"S-1-5-18\", \"System(or LocalSystem)\"),\nTargetSid_DisplayName = if(TargetSid = \"S-1-5-32-544\", \"Built-in Administrators\"),\nUser_Event_Action_Type = if(User_Event_Action contains \"added to\", \"Addition\", if(User_Event_Action contains \"removed from\", \"Removal\"))\n| filter event_id in (4732) and SubjectUserName !~= \"\\$$\"\n| join\n(dataset = sox_servers\n) as ss ss.Hostname = _collector_hostname\n| filter Hostname = _collector_hostname\n| fields time_created, _time, _insert_time, User_Event_Action,\nTargetGroupName, SubjectUserName, host_name, User_Event_Action_Type,\n_collector_hostname, TargetUserName, MemberSid,\nevent_id, event_data, event_action, event_result,\nmessage"}
{"prompt": "I want to find instances of the Domestic Kitten FurBall malware pattern in my data.", "response": "datamodel\n| filter (xdm.network.http.url contains \"Get~~~AllBrowser\" or xdm.network.http.url contains \"Get~~~HardwareInfo\" or xdm.network.http.url contains \"Take~~RecordCall\" or xdm.network.http.url contains \"Reset~~~AllCommand\")\n\n\n\n"}
{"prompt": "I want to see alerts for potential abuse of the ShellDispatch.DLL functionality through rundll32.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and action_process_image_command_line contains \"RunDll_ShellExecuteW\")\n\n\n\n"}
{"prompt": "I want to find instances of AWS STS GetSessionToken misuse, specifically when an IAMUser requests a session token.", "response": "dataset = amazon_aws_raw\n| alter userIdentity_type = json_extract_scalar(userIdentity , \"$.type\")\n| filter (eventSource = \"sts.amazonaws.com\" and eventName = \"GetSessionToken\" and userIdentity.type = \"IAMUser\")\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is executing code directly from a file using commands like \"iex\", \"Invoke-Expression\", \"Invoke-Command\", or \"icm\" and reading content with \"cat\", \"get-content\", or \"type\", specifically with the \"-raw\" flag.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"iex \" or action_process_image_command_line contains \"Invoke-Expression \" or action_process_image_command_line contains \"Invoke-Command \" or action_process_image_command_line contains \"icm \") and (action_process_image_command_line contains \"cat \" or action_process_image_command_line contains \"get-content \" or action_process_image_command_line contains \"type \") and action_process_image_command_line contains \" -raw\")\n\n\n\n"}
{"prompt": "I want to detect if multiple failed login attempts are coming from unauthorized users using iRemote.", "response": "dataset = msft_azure_ad_raw\n| alter result_code = to_integer(status -> errorCode),\nresult_desc = status -> failureReason,\nuser_dst = arrayindex(split(userPrincipalName, \"@\"), 0)\n| filter result_code != 0 and appDisplayName ~= \"iremote\"\n| join type = left\n(preset = ad_users\n| fields sam_account_name\n) as adusers adusers.sam_account_name = user_dst\n| filter sam_account_name = null\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(userDisplayName) as username,\nvalues(ipAddress) as ipAddress,\nvalues(appDisplayName) as server,\nvalues(result_code) as result_code,\nvalues(result_desc) as result_desc,\nvalues(userAgent) as user_agent,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildestinationuser\""}
{"prompt": "I want to find any activity related to accessing Firefox profile data through SQLite databases on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_signature_product = \"SQLite\" or (action_process_image_path ~= \".*\\\\sqlite\\.exe\" or action_process_image_path ~= \".*\\\\sqlite3\\.exe\")) and (action_process_image_command_line contains \"cookies.sqlite\" or action_process_image_command_line contains \"places.sqlite\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious activity related to using fsutil.exe to enumerate drives on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\fsutil\\.exe\" or actor_process_file_original_name = \"fsutil.exe\") and action_process_image_command_line contains \"drives\")\n\n\n\n"}
{"prompt": "I want to identify users with multiple failed Cisco ACS login attempts within a 5-minute window.", "response": "config case_sensitive = false\n\n| datamodel dataset = cisco_acs_raw\n| sort asc _time\n| bin _time span = 5m\n\n| alter device_ip = cisco_acs_raw._final_reporting_device_ip\n| filter xdm.event.id IN (\"24401\", \"12308\", \"24495\", \"11013\", \"11012\", \"11007\", \"11050\", \"11309\", \"13017\", \"22056\", \"10001\", \"10002\", \"10003\", \"11036\", \"11037\", \"11038\", \"24493\", \"24444\", \"24421\", \"24415\", \"24408\", \"24463\", \"86009\", \"86010\", \"24428\", \"22040\", \"24429\", \"13031\", \"5400\", \"5401\", \"5415\", \"5431\", \"5437\", \"11003\", \"11039\", \"11040\", \"11052\", \"11054\", \"11514\", \"11813\", \"11815\", \"12006\", \"12108\", \"24406\", \"24407\", \"24409\", \"24410\", \"24411\", \"24412\", \"24413\", \"24414\", \"24418\", \"24423\", \"24427\", \"24485\", \"24486\", \"24487\", \"24489\", \"24490\", \"24491\", \"24492\", \"24522\", \"24613\", \"51000\", \"51005\", \"51006\", \"51007\", \"51008\", \"51020\", \"51021\", \"51022\") AND xdm.source.user.username != NULL AND xdm.source.user.username NOT IN (\"_DCMPAMadmin\", \"AUSPRIADM\", \"INDPRIADM\", \"USAPRIADM\", \"EURPRIADM\") AND xdm.source.ipv4 NOT IN (\"<ip>\")\n| alter server_name = arrayindex(regextract(cisco_acs_raw._raw_log, \"\\d+\\:\\d+\\:\\d+\\s([^\\s]+)\"), 0),\nec_activity = \"Logon\",\nec_subject = \"User\",\nevent_type = arrayindex(regextract(cisco_acs_raw._raw_log, \"Type=([^\\\\,]+)\"), 0),\nreference_id = arrayindex(regextract(cisco_acs_raw._raw_log, \"<\\d+>\\w+\\s*\\d+\\s\\d+:\\d+:\\d+\\s[\\S]+\\s\\w+\\s(\\d+)\"), 0)\n| fields xdm.observer.action, server_name, xdm.event.type,\nxdm.target.ipv4, xdm.source.port, xdm.target.port,\nxdm.source.user.username, _product, _vendor, device_ip,\nec_activity, ec_subject, event_type, xdm.intermediate.ipv4,\nxdm.network.session_id, xdm.event.description, xdm.event.id,\nxdm.network.application_protocol, xdm.alert.description,\nxdm.event.outcome, xdm.source.ipv4, _time, xdm.source.host.hostname,\nxdm.target.host.hostname, reference_id\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.source.user.username,\nxdm.source.ipv4,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria1 = \"ildestinationuser\",\naggregation_criteria2 = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to detect suspicious activities related to querying group membership using the \"whoami\" executable.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\whoami\\.exe\" or actor_process_file_original_name = \"whoami.exe\") and (action_process_image_command_line contains \" /groups\" or action_process_image_command_line contains \" -groups\"))\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is using MSHTA for obfuscation.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"set\" and ScriptBlockText contains \"&&\" and ScriptBlockText contains \"mshta\" and ScriptBlockText contains \"vbscript:createobject\" and ScriptBlockText contains \".run\" and ScriptBlockText contains \"(window.close)\")\n\n\n\n"}
{"prompt": "I want to see all AWS IAM policy changes that are not from specific accounts or users.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name != \"EV_CloudTrail\"\n| filter eventName IN (\"DeleteGroupPolicy\", \"DeleteRolePolicy\", \"DeleteUserPolicy\", \"PutGroupPolicy\", \"PutRolePolicy\", \"PutUserPolicy\", \"CreatePolicy\", \"DeletePolicy\", \"CreatePolicyVersion\", \"DeletePolicyVersion\", \"AttachRolePolicy\", \"DetachRolePolicy\", \"AttachUserPolicy\", \"DetachUserPolicy\", \"AttachGroupPolicy\", \"DetachGroupPolicy\")\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter account_id NOT IN (\"<account id>\") and target_username NOT IN (\"AWSControlTowerExecution\", \"AWSServiceRoleForCloudFormationStackSetsOrgMember\", \"stacksets-exec-a8dedb52cb414b97b1a9c62b75573038\", \"AWSServiceRoleForSSO\", \"AWS-QuickSetup-StackSet-Local-ExecutionRole\") and target_username !~= \"AWS-QuickSetup-\"\n| filter source_username not contains \"VeeamBackupSession\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where the SyncAppvPublishingServer.exe process is being used to potentially bypass PowerShell restrictions.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\SyncAppvPublishingServer\\.exe\"\n\n\n\n"}
{"prompt": "I want to find suspicious processes that are discovered using the \"Get-Process\" command.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Get-Process\"\n\n\n\n"}
{"prompt": "I want to see how many times admins delete firewall objects in the last 5 minutes and flag any admin who deletes more than 10 objects.", "response": "config case_sensitive = false\n| dataset = check_point_smartconsole_raw\n| bin _time span = 5m\n| filter operation = \"Delete Object\" and lowercase(administrator) not in (\"<user>\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(subject) as result,\nvalues(_product) as product,\ncount() as matched_events by administrator,\n_time\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential cases of DBGHELP.DLL being sideloaded, excluding known locations.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\dbghelp\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\SoftwareDistribution\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\SystemTemp\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\")) and  not ((action_module_path ~= \".*\\\\Anaconda3\\\\Lib\\\\site\\-packages\\\\vtrace\\\\platforms\\\\windll\\\\amd64\\\\dbghelp\\.dll\" or action_module_path ~= \".*\\\\Anaconda3\\\\Lib\\\\site\\-packages\\\\vtrace\\\\platforms\\\\windll\\\\i386\\\\dbghelp\\.dll\") or (action_module_path ~= \".*\\\\Epic\\ Games\\\\Launcher\\\\Engine\\\\Binaries\\\\ThirdParty\\\\DbgHelp\\\\dbghelp\\.dll\" or action_module_path ~= \".*\\\\Epic\\ Games\\\\MagicLegends\\\\x86\\\\dbghelp\\.dll\"))\n\n\n\n"}
{"prompt": "I want to find events where PowerShell is exporting a mailbox to a share.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"New-MailboxExportRequest\" and action_process_image_command_line contains \" -Mailbox \" and action_process_image_command_line ~= \".*\\ \\-FilePath\\ \\\\\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see users who have deleted more than 100 security groups within a 5 minute timeframe across local/global/universal scopes.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4730\", \"4734\", \"4758\")\n\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.user.username\n| filter matched_events >= 100\n\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 100)), 1)"}
{"prompt": "I want to see alerts about unusual file deletions performed by dns.exe.", "response": "datamodel\n| filter (xdm.target.process.name ~= \".*\\\\dns\\.exe\" or xdm.source.process.name ~= \".*\\\\dns\\.exe\") and  not (xdm.target.file.filename ~= \".*\\\\dns\\.log\")\n\n\n\n"}
{"prompt": "I want to see alerts when there is inbound traffic towards SMB ports from any source except those listed, including the ASN information.", "response": "datamodel dataset = check_point_vpn_1_firewall_1_raw\n| filter xdm.target.port in (139, 445) and xdm.source.ipv4 not in (\"<ip>\") and lowercase(xdm.observer.action) = \"accept\" and (xdm.event.type not in (\"geo_protection\") or xdm.event.type = null) and xdm.source.zone = null and xdm.target.zone != null and check_point_vpn_1_firewall_1_raw._final_reporting_device_ip != \"<ip>\"\n| filter xdm.source.ipv4 !~= \"216.251.48.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"216.251.49.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"4.33.177.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"4.33.175.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"11.244.93.(6[4-9]|[7-9][0-9]|1[0-1][0-9]|12[0-6])\" and xdm.source.ipv4 !~= \"172.130.119.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"11.48.[0-9]{1,3}.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"11.120.[0-9]{1,3}.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"100.65.[0-9]{1,3}.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"100.(6[4-9]|7[0-9]|8[0-9]|9[0-9]|1[0-1][0-9]|12[0-7]).[0-9]{1,3}.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"103.75.173.[0-9]{1,3}\" and xdm.source.ipv4 not in (\"<ip>\", \"<ip>\", \"<ip>\")\n| iploc xdm.source.ipv4 loc_asn_org\n| filter loc_asn_org != null or loc_asn_org in (\"<org>\", \"<org>\") and (loc_asn_org contains \"<org>\")\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see if the same user is logging into different machines through VPN using Verizon IP addresses.", "response": "dataset = check_point_connectra_raw\n| filter act = \"Log In\" and origin in (\"<ips>\") and duser != null and duser not in (\"VRZVPN_Monitoring\") and _final_reporting_device_ip != \"<ip>\"\n| alter host_name = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), duser))\n| alter user_dst = if(user_dst ~= \"<org>\\n\", concat(\"n\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), if(user_dst ~= \"<org>\\r\", concat(\"r\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)))\n| alter action = act,\nsource_port = spt,\ndest_port = dpt,\nhostname = host_name,\norigin = origin,\nsource_ip = src,\ndst_ip = host_ip,\nresult = outcome,\nuser_agent = requestClientApplication,\nos_edition = os_edition,\nproduct = _product\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestTime,\nvalues(source_ip) as src_ip,\nvalues(host_ip) as dst_ip,\nvalues(source_port) as src_port,\nvalues(dest_port) as dst_port,\nvalues(act) as action,\nvalues(hostname) as host_name,\nvalues(origin) as origin,\nvalues(result) as result,\nvalues(cs5) as agentid,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(product) as product,\ncount() as alert_org,\ncount() as alert_rule_id,\ncount() as alert_rule_name by user_dst\n| filter array_length(host_name) >= 2\n| alter aggregation_criteria = \"ildestinationuser\",\nalert_rule_id = 451,\nalert_rule_name = \"Same_user_login_from_different_machines_through_VPN\",\nalert_org = \"IL\",\nildevicecategory = \"FW\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see events where PowerShell is executing a script from the Public folder on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \"-f C:\\\\Users\\\\Public\" or action_process_image_command_line contains \"-f \\\"C:\\\\Users\\\\Public\" or action_process_image_command_line contains \"-f %Public%\" or action_process_image_command_line contains \"-fi C:\\\\Users\\\\Public\" or action_process_image_command_line contains \"-fi \\\"C:\\\\Users\\\\Public\" or action_process_image_command_line contains \"-fi %Public%\" or action_process_image_command_line contains \"-fil C:\\\\Users\\\\Public\" or action_process_image_command_line contains \"-fil \\\"C:\\\\Users\\\\Public\" or action_process_image_command_line contains \"-fil %Public%\" or action_process_image_command_line contains \"-file C:\\\\Users\\\\Public\" or action_process_image_command_line contains \"-file \\\"C:\\\\Users\\\\Public\" or action_process_image_command_line contains \"-file %Public%\"))\n\n\n\n"}
{"prompt": "I want to find suspicious processes that are created using Wmic.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"process \" and action_process_image_command_line contains \"call \" and action_process_image_command_line contains \"create \") and (action_process_image_command_line contains \"rundll32\" or action_process_image_command_line contains \"bitsadmin\" or action_process_image_command_line contains \"regsvr32\" or action_process_image_command_line contains \"cmd.exe /c \" or action_process_image_command_line contains \"cmd.exe /k \" or action_process_image_command_line contains \"cmd.exe /r \" or action_process_image_command_line contains \"cmd /c \" or action_process_image_command_line contains \"cmd /k \" or action_process_image_command_line contains \"cmd /r \" or action_process_image_command_line contains \"powershell\" or action_process_image_command_line contains \"pwsh\" or action_process_image_command_line contains \"certutil\" or action_process_image_command_line contains \"cscript\" or action_process_image_command_line contains \"wscript\" or action_process_image_command_line contains \"mshta\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_process_image_command_line contains \"%temp%\" or action_process_image_command_line contains \"%tmp%\" or action_process_image_command_line contains \"%ProgramData%\" or action_process_image_command_line contains \"%appdata%\" or action_process_image_command_line contains \"%comspec%\" or action_process_image_command_line contains \"%localappdata%\"))\n\n\n\n"}
{"prompt": " I want to see all instances where a single user has had 10 or more failed sudo attempts within a 5 minute window, along with their device IP and the time of the event.", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| bin _time span = 5m\n| alter xdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), xdm.source.user.username),\nxdm.target.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"password\\s+changed\\s+for\\s+([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"changed\\s+password\\s+expiry\\s+for\\s+([\\w\\-\\.]+)\"), 0), if(xdm.event.type = \"useradd\", arrayindex(regextract(xdm.event.description, \"name=([^,]+)\"), 0)), xdm.target.user.username),\nxdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.event.type in (\"sudo\") and xdm.event.description ~= \"user NOT in sudoers|authentication failure\" and xdm.source.ipv4 not in (\"<ip>\")\n| alter xdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0)),\nxdm.target.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"password\\s+changed\\s+for\\s+([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"changed\\s+password\\s+expiry\\s+for\\s+([\\w\\-\\.]+)\"), 0), if(xdm.event.type = \"useradd\", arrayindex(regextract(xdm.event.description, \"name=([^,]+)\"), 0)))\n| filter xdm.source.user.username != null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, device_ip, _product, _vendor, _insert_time\n| comp count() as matched_events,\nvalues(*) as * by xdm.source.user.username,\ndevice_ip,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to find out if there are repeated configuration changes happening on my F5 load balancers.", "response": "config case_sensitive = false\n| datamodel dataset = f5_load_balancer_raw\n| filter xdm.event.type = \"Audit\"\n| sort asc _time\n| bin _time span = 1m\n| filter xdm.observer.action = null\n| filter xdm.source.process.command_line ~= \".*show.*\" and xdm.source.process.command_line ~= \".*list.*\" and trim(xdm.source.process.command_line) NOT IN (\"show sys mcp-state field-fmt\", \"list sys db\", \"show sys mcp-state\", \"save sys ucs\", \"save sys config partitions all\", \"show sys hardware\", \"save / sys config partitions all base\", \"save / sys config partitions all\", \"show net cmetrics\", \"show net ipsec ike-sa all-properties\", \"show sys crypto fips key field-fmt include-public-keys all-properties\", \"exit\", \"quit\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.event.type) as event_type,\nvalues(xdm.event.description) as event_desc,\nvalues(xdm.observer.action) as action,\nvalues(xdm.event.outcome_reason) as status,\nvalues(xdm.target.resource.name) as resource,\nvalues(xdm.source.process.command_line) as command_line,\nvalues(xdm.source.process.pid) as process_id,\nvalues(xdm.source.process.name) as process_name,\nvalues(xdm.source.process.executable.path) as folder_path,\nvalues(xdm.source.user.username) as source_username,\nvalues(f5_load_balancer_raw._final_reporting_device_ip) as device_ip,\ncount() as matched_events by xdm.source.host.hostname\n| filter matched_events >= 2\n| alter aggregation_criteria = \"ildevicehost\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 2)), 1)"}
{"prompt": "I want to see alerts about Visual Studio Code Tunnel Service installations that involve suspicious activity on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"tunnel \" and action_process_image_command_line contains \"service\" and action_process_image_command_line contains \"internal-run\" and action_process_image_command_line contains \"tunnel-service.log\")\n\n\n\n"}
{"prompt": "I want to find instances where a new Netsh helper DLL is registered from a suspicious location in the Windows registry.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\NetSh\" and (((action_registry_value_name ~= \".*\\:\\\\Perflogs\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_value_name contains \"\\\\Temporary Internet\") or (action_registry_data ~= \".*\\:\\\\Perflogs\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_data contains \"\\\\Temporary Internet\")) or (((action_registry_value_name ~= \".*\\:\\\\Users\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\.*\") and (action_registry_value_name ~= \".*\\\\Favorites\\\\.*\" or action_registry_data ~= \".*\\\\Favorites\\\\.*\")) or ((action_registry_value_name ~= \".*\\:\\\\Users\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\.*\") and (action_registry_value_name ~= \".*\\\\Favourites\\\\.*\" or action_registry_data ~= \".*\\\\Favourites\\\\.*\")) or ((action_registry_value_name ~= \".*\\:\\\\Users\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\.*\") and (action_registry_value_name ~= \".*\\\\Contacts\\\\.*\" or action_registry_data ~= \".*\\\\Contacts\\\\.*\")) or ((action_registry_value_name ~= \".*\\:\\\\Users\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\.*\") and (action_registry_value_name ~= \".*\\\\Pictures\\\\.*\" or action_registry_data ~= \".*\\\\Pictures\\\\.*\"))))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that store files in alternate data streams using `Start-Process`,  `-FilePath \"$env:comspec\"`, `-ArgumentList`, and `>`. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Start-Process\" and ScriptBlockText contains \"-FilePath \\\"$env:comspec\\\" \" and ScriptBlockText contains \"-ArgumentList \" and ScriptBlockText contains \">\")\n\n\n\n"}
{"prompt": " I want to see alerts about Active Directory policy modifications on Windows systems. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"566\", \"5137\", \"5138\", \"5139\", \"5141\") and xdm.source.user.username not in (\"indhyinfsccmo01$\", \"eurlninfsccmo01$\", \"auspminfsccm01$\", \"indpkinfsccmo02$\", \"indpkinfsccmo01$\", \"usadlinfosccm02$\", \"indhyinfsccmc01$\", null, \"\") and xdm.event.description ~= \"modified|create|delete|move\"\n| filter xdm.source.user.username !~= \"\\w+\\$$\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of the CVE-2017-8759 exploit that uses WINWORD.EXE and csc.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\WINWORD\\.EXE\" and action_process_image_path ~= \".*\\\\csc\\.exe\")\n\n\n\n"}
{"prompt": "I want to see all activity related to Equation Group DLL_U Export Function Load, which involves processes loading a DLL with the \"_u\" export function.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"-export dll_u\" or (action_process_image_command_line ~= \".*\\,dll\\_u\" or action_process_image_command_line ~= \".*\\ dll\\_u\"))\n\n\n\n"}
{"prompt": "I want to detect COLDSTEEL malware persistence by identifying suspicious Service Control Manager events related to \"Name\", \"msupdate\", or \"msupdate2\" services running within svchost.exe.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and ServiceName in (\"Name\", \"msupdate\", \"msupdate2\") and actor_process_image_path contains \"\\\\Windows\\\\System32\\\\svchost.exe\")\n\n\n\n"}
{"prompt": "I want to see activity related to the Trickbot malware, specifically focusing on processes that involve wermgr.exe and rundll32.exe being used with the \"DllRegisterServer\" command.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\wermgr\\.exe\" and actor_process_image_path ~= \".*\\\\rundll32\\.exe\" and actor_process_image_command_line contains \"DllRegisterServer\")\n\n\n\n"}
{"prompt": "I want to find any web server logs that mention \"exited on signal 6 (core dumped)\" because it suggests an Nginx core dump.", "response": "datamodel\n| filter _raw_log contains \"exited on signal 6 (core dumped)\"\n\n\n\n"}
{"prompt": "I want to see events where an LZX file was successfully downloaded through a suspicious User Agent on IIS, excluding Microsoft Outlook and \"-\" entries.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.network.http.url ~= \"\\.lzx\" and xdm.network.http.response_code = XDM_CONST.HTTP_RSP_CODE_OK and xdm.source.user_agent !~= \"microsoft|macoutlook\" and xdm.source.user_agent != \"-\"\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where PHP is being used with the \"-r\" flag and the \"fsockopen\" function, potentially indicating a reverse shell attempt.", "response": "preset = xdr_process\n| filter (action_process_image_path contains \"/php\" and (action_process_image_command_line contains \" -r \" and action_process_image_command_line contains \"fsockopen\") and (action_process_image_command_line contains \"ash\" or action_process_image_command_line contains \"bash\" or action_process_image_command_line contains \"bsh\" or action_process_image_command_line contains \"csh\" or action_process_image_command_line contains \"ksh\" or action_process_image_command_line contains \"pdksh\" or action_process_image_command_line contains \"sh\" or action_process_image_command_line contains \"tcsh\" or action_process_image_command_line contains \"zsh\"))\n\n\n\n"}
{"prompt": "I want to see all SMB file sharing activity originating from internal IP addresses on my network and going to external destinations.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter (xdm.source.is_internal_ip = true and xdm.target.is_internal_ip = false) and (xdm.target.port in (135, 445))\n| filter (xdm.network.application_protocol = \"\"\"SMB\"\"\" and xdm.network.ip_protocol = \"\"\"TCP\"\"\")\n| filter (xdm.observer.action not in (\"\"\"client-rst\"\"\", \"\"\"server-rst\"\"\", \"\"\"timeout\"\"\"))\n| fields *"}
{"prompt": "{Show me all events where the \"ilsourceuser\" is John Doe.} \n\n\nLet me know if you'd like to refine this prompt further! For example, we could add specific timeframes or operation types.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect when TeamViewer starts a session on a Windows host initiated by a remote user.", "response": "preset = xdr_process\n| filter (action_process_image_path = \"TeamViewer_Desktop.exe\" and actor_process_image_path = \"TeamViewer_Service.exe\" and action_process_image_command_line ~= \".*TeamViewer\\_Desktop\\.exe\\ \\-\\-IPCport\\ 5939\\ \\-\\-Module\\ 1\")\n\n\n\n"}
{"prompt": "I want to find instances of the Shellshock vulnerability in my system logs.", "response": "datamodel\n| filter ( contains \"(){:;};\" or  contains \"() {:;};\" or  contains \"() { :;};\" or  contains \"() { :; };\")\n\n\n\n"}
{"prompt": "I want to see who created or updated security solutions in Azure.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.SECURITY/SECURITYSOLUTIONS/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find DNS queries that are searching for LDAP servers but aren't coming from common system processes or web browsers.", "response": "datamodel\n| filter xdm.network.dns.dns_question.name ~= \"\\_ldap\\..*\" and  not (((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\.*\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\.*\")) or ((xdm.target.process.name ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\Platform\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\Platform\\\\.*\") and (xdm.target.process.name ~= \".*\\\\MsMpEng\\.exe\" or xdm.source.process.name ~= \".*\\\\MsMpEng\\.exe\")) or (xdm.target.process.name = \"<unknown process>\" or xdm.source.process.name = \"<unknown process>\") or (xdm.target.process.name = \"None\" or xdm.source.process.name = \"None\")) and  not ((xdm.target.process.name ~= \"C\\:\\\\WindowsAzure\\\\GuestAgent.*\" or xdm.source.process.name ~= \"C\\:\\\\WindowsAzure\\\\GuestAgent.*\") or ((xdm.target.process.name ~= \".*\\\\chrome\\.exe\" or xdm.target.process.name ~= \".*\\\\firefox\\.exe\" or xdm.target.process.name ~= \".*\\\\opera\\.exe\") or (xdm.source.process.name ~= \".*\\\\chrome\\.exe\" or xdm.source.process.name ~= \".*\\\\firefox\\.exe\" or xdm.source.process.name ~= \".*\\\\opera\\.exe\")))\n\n\n\n"}
{"prompt": "I want to detect potentially suspicious Electron applications based on their command lines.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\chrome\\.exe\" or action_process_image_path ~= \".*\\\\code\\.exe\" or action_process_image_path ~= \".*\\\\discord\\.exe\" or action_process_image_path ~= \".*\\\\GitHubDesktop\\.exe\" or action_process_image_path ~= \".*\\\\keybase\\.exe\" or action_process_image_path ~= \".*\\\\msedge\\_proxy\\.exe\" or action_process_image_path ~= \".*\\\\msedge\\.exe\" or action_process_image_path ~= \".*\\\\msedgewebview2\\.exe\" or action_process_image_path ~= \".*\\\\msteams\\.exe\" or action_process_image_path ~= \".*\\\\slack\\.exe\" or action_process_image_path ~= \".*\\\\Teams\\.exe\") or actor_process_file_original_name in (\"chrome.exe\", \"code.exe\", \"discord.exe\", \"GitHubDesktop.exe\", \"keybase.exe\", \"msedge_proxy.exe\", \"msedge.exe\", \"msedgewebview2.exe\", \"msteams.exe\", \"slack.exe\", \"Teams.exe\")) and (action_process_image_command_line contains \"--browser-subprocess-path\" or action_process_image_command_line contains \"--gpu-launcher\" or action_process_image_command_line contains \"--renderer-cmd-prefix\" or action_process_image_command_line contains \"--utility-cmd-prefix\"))\n\n\n\n"}
{"prompt": "I want to find instances of UAC bypass attempts using ICMLuaUtil where the process \"dllhost.exe\" is involved and the command line contains specific process IDs.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\dllhost\\.exe\" and (actor_process_image_command_line contains \"/Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}\" or actor_process_image_command_line contains \"/Processid:{D2E7041B-2927-42FB-8E9F-7CE93B6DC937}\")) and  not ((action_process_image_path ~= \".*\\\\WerFault\\.exe\" or actor_process_file_original_name = \"WerFault.exe\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious access to LSASS via MalSecLogon.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and SourceImage ~= \".*\\\\svchost\\.exe\" and GrantedAccess = \"0x14c0\" and CallTrace contains \"seclogon.dll\")\n\n\n\n"}
{"prompt": "I want to detect potential instances of arbitrary code execution via Node.EXE on my endpoints by looking for suspicious command-line arguments that leverage .exec() and network socket connections.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\node\\.exe\" and (action_process_image_command_line contains \" -e \" or action_process_image_command_line contains \" --eval \")) and ((action_process_image_command_line contains \".exec(\" and action_process_image_command_line contains \"net.socket\" and action_process_image_command_line contains \".connect\" and action_process_image_command_line contains \"child_process\"))\n\n\n\n"}
{"prompt": "I want to find instances of malicious PowerShell scripts attempting to copy the SAM file from the System32\\config directory.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"\\\\HarddiskVolumeShadowCopy\" and action_process_image_command_line contains \"System32\\\\config\\\\sam\") and (action_process_image_command_line contains \"Copy-Item\" or action_process_image_command_line contains \"cp $_.\" or action_process_image_command_line contains \"cpi $_.\" or action_process_image_command_line contains \"copy $_.\" or action_process_image_command_line contains \".File]::Copy(\"))\n\n\n\n"}
{"prompt": "I want to see a list of users who were recently removed from SOX-related Active Directory groups on Windows systems.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter _collector_type = \"XDR Collector\"\n| filter event_id in (4729, 633)\n| alter TargetGroupName = event_data -> TargetUserName,\nTargetSID = event_data -> MemberSid,\nTargetDomainName = event_data -> TargetDomainName,\nSubjectUserName = event_data -> SubjectUserName,\nAction = regextract(message, \"(.*)\\n\\nSubject:\"),\nTargetUserName = User -> name\n| alter Username = concat(TargetDomainName, \"\\\", TargetGroupName),\nshortAction = \"Removal\"\n| filter Username in (\"NA\\SEC_Server_Admin_Access\", \"NA\\Global Service Accounts\", \"NA\\SEC_Server_Admin_NA\", \"NA\\SEC_APS_SA\", \"NA\\CVG_eStart_Production_Support\", \"NA\\Domain Admins\", \"NA\\ML.BI.DBAs\", \"NA\\Sec_EDW_Prod_Suppt\", \"NA\\Sec_EDW_Dev\", \"NA\\DCS_OSG_NBU\", \"NA\\SEC_SOX_Compliance\", \"NA\\NA-DBA\", \"CONVERGYS\\Elevated_Server Managers\", \"\\Domain Admins\", \"\\Server Team India\", \"\\GRP_IND_RTASQLUSERS\", \"\\SEC.Global.Windows.Server.Admin\", \"\\grp_sec_rakija_operators\", \"\\Grp_Ind_MTP_Payroll_APIServer_Access\", \"\\SQLDBAGLOBAL\", \"\\Amer Server Admins\", \"\\Grp_US_Sec_Aps_SA\", \"\\grp_sec_jpsupport\", \"\\grp_usa_it_manage_computers\", \"\\SGP-SAGE-Admin\", \"\\emea_serverteam\", \"\\MIG_na_Sec_EDW_Prod_Suppt\", \"\\seg_grp_bi_sql_admins\", \"\\Sec_UDW_Dev\", \"\\Sec_UDW_Prod_Support\", \"\\grp_all_it_Bomgar\", \"\\grp_can_it_operations_admin\", \"\\grp_usa_az_it_system_admin\", \"\\grp_usa_sc_gvl_backup_admin\", \"\\US Network Server Team\", \"\\emea-bmc-svc\") and SubjectUserName !~= \"\\$$\"\n| fields Action, Username, SubjectUserName, TargetUserName,\nshortAction, TargetSID"}
{"prompt": "I want to see indicators of Linux crypto mining pool connections on my network.", "response": "preset = network_story\n| filter action_external_hostname in (\"pool.minexmr.com\", \"fr.minexmr.com\", \"de.minexmr.com\", \"sg.minexmr.com\", \"ca.minexmr.com\", \"us-west.minexmr.com\", \"pool.supportxmr.com\", \"mine.c3pool.com\", \"xmr-eu1.nanopool.org\", \"xmr-eu2.nanopool.org\", \"xmr-us-east1.nanopool.org\", \"xmr-us-west1.nanopool.org\", \"xmr-asia1.nanopool.org\", \"xmr-jp1.nanopool.org\", \"xmr-au1.nanopool.org\", \"xmr.2miners.com\", \"xmr.hashcity.org\", \"xmr.f2pool.com\", \"xmrpool.eu\", \"pool.hashvault.pro\", \"moneroocean.stream\", \"monerocean.stream\")\n\n\n\n"}
{"prompt": "I want to see activities related to AWS Glue Development Endpoints, such as creating, updating, or deleting them.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"glue.amazonaws.com\" and eventName in (\"CreateDevEndpoint\", \"DeleteDevEndpoint\", \"UpdateDevEndpoint\"))\n\n\n\n"}
{"prompt": "I want to find events that indicate someone might be trying to access sensitive registry hives from suspicious locations like the temp directory.", "response": "preset = xdr_event_log\n| alter HiveName = regextract(to_json_string(action_evtlog_data_fields)->HiveName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 16 and provider_name = \"Microsoft-Windows-Kernel-General\" and (HiveName contains \"\\\\Temp\\\\SAM\" or HiveName contains \"\\\\Temp\\\\SECURITY\"))\n\n\n\n"}
{"prompt": "I want to find suspicious bit jobs by identifying connections made using bit-related user agents or applications and filtering out known domains.", "response": "config case_sensitive = false\n| dataset in (zscaler_nssweblog_raw)\n| alter user_agent = replace(arrayindex(regextract(_raw_json, \"cs\\(User\\-Agent\\)\\\"\\: ([^\\,]+)\"), 0), \"\\\"\", \"\"),\nalias_host = json_extract_scalar(_raw_json, \"$.x-client-device-name\"),\nresult = json_extract_scalar(_raw_json, \"$.cs-method\"),\nrbytes = json_extract_scalar(_raw_json, \"$.cs-bytes\"),\ngroups = json_extract_scalar(_raw_json, \"$.cs-auth-groups\"),\nbytes_src = json_extract_scalar(_raw_json, \"$.sc-bytes\"),\ndevice_name = regextract(requestContext, \"devicehostname=I-([^\\n]+)\")\n| alter sld1 = if(dhost ~= \"[\\d]+\\.[\\d]+\\.[\\d]+\\.[\\d]+\", dhost, arrayindex(split(dhost, \".\"), -2))\n| filter user_agent contains \"bits\" or requestClientApplication contains \"bits\"\n| filter dhost != null\n| filter sld1 != null\n| filter cat IN (\"Miscellaneous or Unknown\", \"Non Categorizable\", \"Anonymizer\")\n| filter sld1 not in (\"google\", \"microsoft\", \"edgesuite\", \"ansaldoenergia\", \"autodesk\", \"c-wss\", \"c-ij\", \"siemens\", \"cloudfront\", \"webex\", \"gvt1\", \"s-msn\", \"google-analytics\", \"googleapis\", \"googleusercontent\", \"windowsupdate\", \"adobe\", \"akamaized\", \"live\", \"gvt1-cn\")\n| fields suser, dhost, device_name, cat as category, cs3,\nact, dst, src, request, requestContext, requestClientApplication,\ncontenttype, deviceowner, requestMethod, reason,\nfileType, user_agent, alias_host, result, rbytes,\ngroups, bytes_src, sld1, _final_reporting_device_ip"}
{"prompt": "I want to see if any new or renamed user accounts contain the dollar sign character ($). This could indicate an attempt to hide malicious activity.", "response": "preset = xdr_event_log\n| alter SamAccountName = regextract(to_json_string(action_evtlog_data_fields)->SamAccountName{}, \"\\\"(.*)\\\"\")\n| alter NewTargetUserName = regextract(to_json_string(action_evtlog_data_fields)->NewTargetUserName{}, \"\\\"(.*)\\\"\")\n| alter TargetUserName = regextract(to_json_string(action_evtlog_data_fields)->TargetUserName{}, \"\\\"(.*)\\\"\")\n| filter ((action_evtlog_event_id = 4720 and SamAccountName contains \"$\") or (action_evtlog_event_id = 4781 and NewTargetUserName contains \"$\")) and  not ((action_evtlog_event_id = 4720 and TargetUserName = \"HomeGroupUser$\"))\n\n\n\n"}
{"prompt": "I want to see logs that indicate deleted audit logs from Windows Event Log.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"1102\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where an attacker might be interacting with a local admin share on the network.", "response": "datamodel\n| filter (xdm.target.file.filename contains \"\\\\\\\\127.0.0\" and xdm.target.file.filename ~= \".*\\\\ADMIN\\$\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see all events related to memory dumps of the LSASS process by WerFault.", "response": "datamodel\n| filter ((xdm.target.process.name = \"C:\\\\WINDOWS\\\\system32\\\\WerFault.exe\" or xdm.source.process.name = \"C:\\\\WINDOWS\\\\system32\\\\WerFault.exe\") and (xdm.target.file.filename contains \"\\\\lsass\" or xdm.target.file.filename contains \"lsass.exe\"))\n\n\n\n"}
{"prompt": "I want to find files related to the Adwind RAT / JRAT malware.", "response": "datamodel\n| filter ((xdm.target.file.filename contains \"\\\\AppData\\\\Roaming\\\\Oracle\\\\bin\\\\java\" and xdm.target.file.filename contains \".exe\") or (xdm.target.file.filename contains \"\\\\Retrive\" and xdm.target.file.filename contains \".vbs\"))\n\n\n\n"}
{"prompt": "I want to see all activity where internal IPs are connecting to external IPs on ports 1080, 3128, or 8080 using TCP.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter (xdm.source.is_internal_ip = true and xdm.target.is_internal_ip = false) and (xdm.target.port in (1080, 3128, 8080)) and xdm.network.ip_protocol = \"\"\"TCP\"\"\"\n| fields *"}
{"prompt": "I want to find PowerShell scripts on endpoints that are using specific Windows API functions like AddSecurityPackage, AdjustTokenPrivileges, and others listed in the query.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"AddSecurityPackage\" or ScriptBlockText contains \"AdjustTokenPrivileges\" or ScriptBlockText contains \"CloseHandle\" or ScriptBlockText contains \"CreateProcessWithToken\" or ScriptBlockText contains \"CreateRemoteThread\" or ScriptBlockText contains \"CreateThread\" or ScriptBlockText contains \"CreateUserThread\" or ScriptBlockText contains \"DangerousGetHandle\" or ScriptBlockText contains \"DuplicateTokenEx\" or ScriptBlockText contains \"EnumerateSecurityPackages\" or ScriptBlockText contains \"FreeLibrary\" or ScriptBlockText contains \"GetDelegateForFunctionPointer\" or ScriptBlockText contains \"GetLogonSessionData\" or ScriptBlockText contains \"GetModuleHandle\" or ScriptBlockText contains \"GetProcAddress\" or ScriptBlockText contains \"GetProcessHandle\" or ScriptBlockText contains \"GetTokenInformation\" or ScriptBlockText contains \"ImpersonateLoggedOnUser\" or ScriptBlockText contains \"LoadLibrary\" or ScriptBlockText contains \"memcpy\" or ScriptBlockText contains \"MiniDumpWriteDump\" or ScriptBlockText contains \"OpenDesktop\" or ScriptBlockText contains \"OpenProcess\" or ScriptBlockText contains \"OpenProcessToken\" or ScriptBlockText contains \"OpenThreadToken\" or ScriptBlockText contains \"OpenWindowStation\" or ScriptBlockText contains \"QueueUserApc\" or ScriptBlockText contains \"ReadProcessMemory\" or ScriptBlockText contains \"RevertToSelf\" or ScriptBlockText contains \"RtlCreateUserThread\" or ScriptBlockText contains \"SetThreadToken\" or ScriptBlockText contains \"VirtualAlloc\" or ScriptBlockText contains \"VirtualFree\" or ScriptBlockText contains \"VirtualProtect\" or ScriptBlockText contains \"WaitForSingleObject\" or ScriptBlockText contains \"WriteInt32\" or ScriptBlockText contains \"WriteProcessMemory\" or ScriptBlockText contains \"ZeroFreeGlobalAllocUnicode\")\n\n\n\n"}
{"prompt": "I want to see alerts about Microsoft Excel add-ins being loaded from unusual locations like my Desktop or Downloads folder.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\excel\\.exe\" and (action_module_path ~= \".*\\\\Desktop\\\\.*\" or action_module_path ~= \".*\\\\Downloads\\\\.*\" or action_module_path ~= \".*\\\\Perflogs\\\\.*\" or action_module_path ~= \".*\\\\Temp\\\\.*\" or action_module_path ~= \".*\\\\Users\\\\Public\\\\.*\" or action_module_path ~= \".*\\\\Windows\\\\Tasks\\\\.*\") and action_module_path ~= \".*\\.xll\")\n\n\n\n"}
{"prompt": "I want to see events related to system network configuration on Linux endpoints, such as firewall commands, network utilities, and DNS resolution.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/firewall\\-cmd\" or action_process_image_path ~= \".*\\/ufw\" or action_process_image_path ~= \".*\\/iptables\" or action_process_image_path ~= \".*\\/netstat\" or action_process_image_path ~= \".*\\/ss\" or action_process_image_path ~= \".*\\/ip\" or action_process_image_path ~= \".*\\/ifconfig\" or action_process_image_path ~= \".*\\/systemd\\-resolve\" or action_process_image_path ~= \".*\\/route\") or action_process_image_command_line contains \"/etc/resolv.conf\")\n\n\n\n"}
{"prompt": "I want to find Cisco Catalyst devices that have experienced at least 5 failed SNMP authentication attempts recently.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"SNMP-3-AUTHFAIL\")\n| comp count() as matched_events,\nlatest(_time) as event_time,\nvalues(*) as * by device_ip,\nxdm.source.ipv4\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildeviceip\",\naggregation_criteria1 = \"ilsourceip\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", event_time)"}
{"prompt": "I want to find PowerShell scripts that use compression obfuscation techniques.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"new-object\" and ScriptBlockText contains \"text.encoding]::ascii\") and (ScriptBlockText contains \"system.io.compression.deflatestream\" or ScriptBlockText contains \"system.io.streamreader\") and ScriptBlockText ~= \".*readtoend\")\n\n\n\n"}
{"prompt": "I want to see activity related to retrieving domain hashes from NTDS.dit files.", "response": "preset = xdr_process\n| filter action_process_image_command_line in (\"vssadmin.exe Delete Shadows\", \"vssadmin create shadow /for=C:\", \"copy \\\\*\\\\GLOBALROOT\\\\Device\\\\*\\\\windows\\\\ntds\\\\ntds.dit\", \"copy \\\\*\\\\GLOBALROOT\\\\Device\\\\*\\\\config\\\\SAM\", \"vssadmin delete shadows /for=C:\", \"reg SAVE HKLM\\\\SYSTEM \", \"esentutl.exe /y /vss *\\\\ntds.dit*\", \"esentutl.exe /y /vss *\\\\SAM\", \"esentutl.exe /y /vss *\\\\SYSTEM\")\n\n\n\n"}
{"prompt": "I want to detect instances of weak encryption being enabled and potential Kerberoast attacks.", "response": "preset = xdr_event_log\n| alter NewUacValue = regextract(to_json_string(action_evtlog_data_fields)->NewUacValue{}, \"\\\"(.*)\\\"\")\n| alter OldUacValue = regextract(to_json_string(action_evtlog_data_fields)->OldUacValue{}, \"\\\"(.*)\\\"\")\n| filter action_evtlog_event_id = 4738 and (((NewUacValue ~= \".*8.*.*.*\" or NewUacValue ~= \".*9.*.*.*\" or NewUacValue ~= \".*A.*.*.*\" or NewUacValue ~= \".*B.*.*.*\" or NewUacValue ~= \".*C.*.*.*\" or NewUacValue ~= \".*D.*.*.*\" or NewUacValue ~= \".*E.*.*.*\" or NewUacValue ~= \".*F.*.*.*\") and  not ((OldUacValue ~= \".*8.*.*.*\" or OldUacValue ~= \".*9.*.*.*\" or OldUacValue ~= \".*A.*.*.*\" or OldUacValue ~= \".*B.*.*.*\" or OldUacValue ~= \".*C.*.*.*\" or OldUacValue ~= \".*D.*.*.*\" or OldUacValue ~= \".*E.*.*.*\" or OldUacValue ~= \".*F.*.*.*\"))) or ((NewUacValue ~= \".*1.*.*.*.*\" or NewUacValue ~= \".*3.*.*.*.*\" or NewUacValue ~= \".*5.*.*.*.*\" or NewUacValue ~= \".*7.*.*.*.*\" or NewUacValue ~= \".*9.*.*.*.*\" or NewUacValue ~= \".*B.*.*.*.*\" or NewUacValue ~= \".*D.*.*.*.*\" or NewUacValue ~= \".*F.*.*.*.*\") and  not ((OldUacValue ~= \".*1.*.*.*.*\" or OldUacValue ~= \".*3.*.*.*.*\" or OldUacValue ~= \".*5.*.*.*.*\" or OldUacValue ~= \".*7.*.*.*.*\" or OldUacValue ~= \".*9.*.*.*.*\" or OldUacValue ~= \".*B.*.*.*.*\" or OldUacValue ~= \".*D.*.*.*.*\" or OldUacValue ~= \".*F.*.*.*.*\"))) or ((NewUacValue ~= \".*8.*.*\" or NewUacValue ~= \".*9.*.*\" or NewUacValue ~= \".*A.*.*\" or NewUacValue ~= \".*B.*.*\" or NewUacValue ~= \".*C.*.*\" or NewUacValue ~= \".*D.*.*\" or NewUacValue ~= \".*E.*.*\" or NewUacValue ~= \".*F.*.*\") and  not ((OldUacValue ~= \".*8.*.*\" or OldUacValue ~= \".*9.*.*\" or OldUacValue ~= \".*A.*.*\" or OldUacValue ~= \".*B.*.*\" or OldUacValue ~= \".*C.*.*\" or OldUacValue ~= \".*D.*.*\" or OldUacValue ~= \".*E.*.*\" or OldUacValue ~= \".*F.*.*\"))))\n\n\n\n"}
{"prompt": "I want to find potential data exfiltration attempts happening via command line tools like PowerShell, cmd, curl, and wget.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") and (action_process_image_command_line contains \"Invoke-WebRequest\" or action_process_image_command_line contains \"iwr \" or action_process_image_command_line contains \"wget \" or action_process_image_command_line contains \"curl \") and (action_process_image_command_line contains \" -ur\" and action_process_image_command_line contains \" -me\" and action_process_image_command_line contains \" -b\" and action_process_image_command_line contains \" POST \")) or ((action_process_image_path ~= \".*\\\\curl\\.exe\" and action_process_image_command_line contains \"--ur\") and (action_process_image_command_line contains \" -d \" or action_process_image_command_line contains \" --data \")) or (action_process_image_path ~= \".*\\\\wget\\.exe\" and (action_process_image_command_line contains \"--post-data\" or action_process_image_command_line contains \"--post-file\"))) and ((action_process_image_command_line contains \"Get-Content\" or action_process_image_command_line contains \"GetBytes\" or action_process_image_command_line contains \"hostname\" or action_process_image_command_line contains \"ifconfig\" or action_process_image_command_line contains \"ipconfig\" or action_process_image_command_line contains \"net view\" or action_process_image_command_line contains \"netstat\" or action_process_image_command_line contains \"nltest\" or action_process_image_command_line contains \"qprocess\" or action_process_image_command_line contains \"sc query\" or action_process_image_command_line contains \"systeminfo\" or action_process_image_command_line contains \"tasklist\" or action_process_image_command_line contains \"ToBase64String\" or action_process_image_command_line contains \"whoami\") or (action_process_image_command_line contains \"type \" and action_process_image_command_line contains \" > \" and action_process_image_command_line ~= \".*\\ C\\:\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances where an attacker uses `chcp.com` to potentially manipulate code pages through `cmd.exe`. ", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\cmd\\.exe\" and (actor_process_image_command_line contains \" -c \" or actor_process_image_command_line contains \" -r \" or actor_process_image_command_line contains \" -k \") and action_process_image_path ~= \".*\\\\chcp\\.com\" and (action_process_image_command_line ~= \".*chcp\" or action_process_image_command_line ~= \".*chcp\\ \" or action_process_image_command_line ~= \".*chcp\\ \\ \"))\n\n\n\n"}
{"prompt": "I want to see all messages from Datamodel that mention \"Trojan\\*FOUND\", \"VirTool\\*FOUND\", \"Webshell\\*FOUND\", \"Rootkit\\*FOUND\", or \"Htran\\*FOUND\".", "response": "datamodel\n| filter ( contains \"Trojan\\*FOUND\" or  contains \"VirTool\\*FOUND\" or  contains \"Webshell\\*FOUND\" or  contains \"Rootkit\\*FOUND\" or  contains \"Htran\\*FOUND\")\n\n\n\n"}
{"prompt": "I want to see information about multiple login failures on routers, switches, and network devices from Cisco Catalyst sources.  Show me the IP address, username, type of event, and the number of failed login attempts in a short time window.", "response": "datamodel dataset = cisco_catalyst_raw\n| alter xdm.observer.unique_identifier = cisco_catalyst_raw._final_reporting_device_ip\n| alter Desc_String = if(cisco_catalyst_raw._broker_device_name contains \"NEWAVLON\", \"New Avalon\", \"..\")\n| filter xdm.event.type = \"LOGIN_FAILED\" and xdm.event.description ~= \"LOGIN_FAILED|Login failed\"\n| filter xdm.source.user.username != \"solarwinds-ncm-nas\" and xdm.source.user.username != \"solarwinds-ncm-\"\n| comp earliest(_time) as FirstEventTimestamp,\nlatest(_time) as LatestEventTimestamp,\ncount() as EventCount by xdm.observer.unique_identifier,\nxdm.source.user.username,\nxdm.source.ipv4,\nxdm.event.type,\nxdm.observer.type\naddrawdata = true as RW\n| filter EventCount >= 3\n\n\n"}
{"prompt": " I want to find indicators of malware persistence that use registry modifications related to Safe Boot services. ", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\Control\\\\SafeBoot\\\\Minimal\\\\.*\" or action_registry_key_name ~= \".*\\\\Control\\\\SafeBoot\\\\Network\\\\.*\") and action_registry_key_name ~= \".*\\\\\\(Default\\)\" and (action_registry_value_name = \"Service\" or action_registry_data = \"Service\")) and  not ((actor_process_image_path = \"C:\\\\WINDOWS\\\\system32\\\\msiexec.exe\" and (action_registry_key_name ~= \".*\\\\Control\\\\SafeBoot\\\\Minimal\\\\SAVService\\\\\\(Default\\)\" or action_registry_key_name ~= \".*\\\\Control\\\\SafeBoot\\\\Network\\\\SAVService\\\\\\(Default\\)\")))\n\n\n\n"}
{"prompt": "I want to see all operations performed by a specific user, grouped by day and hour.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.AUTHORIZATION/POLICYASSIGNMENTS/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events where files are transferred over network shares and potentially contain credential data, such as those targeting lsass, mimidrv, or sensitive system folders.", "response": "preset = xdr_event_log\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and (RelativeTargetName contains \"\\\\mimidrv\" or RelativeTargetName contains \"\\\\lsass\" or RelativeTargetName ~= \".*\\\\windows\\\\minidump\\\\.*\" or RelativeTargetName contains \"\\\\hiberfil\" or RelativeTargetName contains \"\\\\sqldmpr\" or RelativeTargetName contains \"\\\\sam\" or RelativeTargetName contains \"\\\\ntds.dit\" or RelativeTargetName contains \"\\\\security\"))\n\n\n\n"}
{"prompt": "I want to find suspicious processes using Findstr.exe on endpoints that have a specific command line containing \"385201\".", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\find\\.exe\" or action_process_image_path ~= \".*\\\\findstr\\.exe\") or actor_process_file_original_name in (\"FIND.EXE\", \"FINDSTR.EXE\")) and action_process_image_command_line contains \" 385201\")\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious processes on my endpoints that use X509Enrollment with the command line containing \"X509Enrollment.CBinaryConverter\" or \"884e2002-217d-11da-b2a4-000e7bbb2b09\".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"X509Enrollment.CBinaryConverter\" or action_process_image_command_line contains \"884e2002-217d-11da-b2a4-000e7bbb2b09\")\n\n\n\n"}
{"prompt": "I want to detect if AddinUtil.exe is launching unusual child processes, which could indicate malicious activity.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\addinutil\\.exe\" and  not ((action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\conhost\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\werfault\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\werfault\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances where someone might be trying to create a hidden directory on Windows using the  \"::$index_allocation\" stream.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"::$index_allocation\"\n\n\n\n"}
{"prompt": "I want to see events related to renamed Sysinternals tools where the EULA was accepted through registry changes, but not directly by executing those tools.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"\\\\PsExec\" or action_registry_key_name contains \"\\\\ProcDump\" or action_registry_key_name contains \"\\\\Handle\" or action_registry_key_name contains \"\\\\LiveKd\" or action_registry_key_name contains \"\\\\Process Explorer\" or action_registry_key_name contains \"\\\\PsLoglist\" or action_registry_key_name contains \"\\\\PsPasswd\" or action_registry_key_name contains \"\\\\Active Directory Explorer\") and action_registry_key_name ~= \".*\\\\EulaAccepted\") and  not ((actor_process_image_path ~= \".*\\\\PsExec\\.exe\" or actor_process_image_path ~= \".*\\\\PsExec64\\.exe\" or actor_process_image_path ~= \".*\\\\procdump\\.exe\" or actor_process_image_path ~= \".*\\\\procdump64\\.exe\" or actor_process_image_path ~= \".*\\\\handle\\.exe\" or actor_process_image_path ~= \".*\\\\handle64\\.exe\" or actor_process_image_path ~= \".*\\\\livekd\\.exe\" or actor_process_image_path ~= \".*\\\\livekd64\\.exe\" or actor_process_image_path ~= \".*\\\\procexp\\.exe\" or actor_process_image_path ~= \".*\\\\procexp64\\.exe\" or actor_process_image_path ~= \".*\\\\psloglist\\.exe\" or actor_process_image_path ~= \".*\\\\psloglist64\\.exe\" or actor_process_image_path ~= \".*\\\\pspasswd\\.exe\" or actor_process_image_path ~= \".*\\\\pspasswd64\\.exe\" or actor_process_image_path ~= \".*\\\\ADExplorer\\.exe\" or actor_process_image_path ~= \".*\\\\ADExplorer64\\.exe\")) and  not (actor_process_image_path = \"None\")\n\n\n\n"}
{"prompt": "I want to find DNS queries related to the HybridConnectionManager service using Service Bus.", "response": "datamodel\n| filter (xdm.network.dns.dns_question.name contains \"servicebus.windows.net\" and (xdm.target.process.name contains \"HybridConnectionManager\" or xdm.source.process.name contains \"HybridConnectionManager\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious executions of the GrpConv tool on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"grpconv.exe -o\" or action_process_image_command_line contains \"grpconv -o\")\n\n\n\n"}
{"prompt": "I want to find suspicious PowerShell downloads that are larger than 5MB based on historical data from Zscaler.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter user_agent ~= \"powershell\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\nsum(bytes_src) as total_bytes_download,\nvalues(user_agent) as user_agent by user_dst\n| filter total_bytes_download >= 5000000\n| alter alert_category = \"Initial Access\""}
{"prompt": "I want to find suspicious processes that access Windows credential manager and vault files, potentially indicating credential theft.", "response": "datamodel\n| filter (xdm.target.file.path ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Credentials\\\\.*\" or xdm.target.file.path ~= \".*\\\\AppData\\\\Roaming\\\\Microsoft\\\\Credentials\\\\.*\" or xdm.target.file.path ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Vault\\\\.*\" or xdm.target.file.path ~= \".*\\\\ProgramData\\\\Microsoft\\\\Vault\\\\.*\") and  not (((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to detect if any process is creating the Process Explorer driver, excluding legitimate instances of Process Explorer itself.", "response": "datamodel\n| filter (xdm.target.file.filename contains \"\\\\PROCEXP\" and xdm.target.file.filename ~= \".*\\.sys\") and  not (((xdm.target.process.name ~= \".*\\\\procexp\\.exe\" or xdm.target.process.name ~= \".*\\\\procexp64\\.exe\") or (xdm.source.process.name ~= \".*\\\\procexp\\.exe\" or xdm.source.process.name ~= \".*\\\\procexp64\\.exe\")))\n\n\n\n"}
{"prompt": "I want to see alerts for when Nltest.EXE or nltestrk.exe is executed on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\nltest\\.exe\" or actor_process_file_original_name = \"nltestrk.exe\")\n\n\n\n"}
{"prompt": "I want to find instances of \"cmdkey.exe\" being used to add generic credentials.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmdkey\\.exe\" or actor_process_file_original_name = \"cmdkey.exe\") and action_process_image_command_line contains \" -g\" and action_process_image_command_line contains \" -u\" and action_process_image_command_line contains \" -p\")\n\n\n\n"}
{"prompt": "I want to see events where WmiPrvSE spawned a new process and identify any suspicious activity related to it.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\WmiPrvSe\\.exe\" and  not (action_process_logon_id in (\"0x3e7\", \"null\") or (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\") or action_process_image_path ~= \".*\\\\WmiPrvSE\\.exe\" or action_process_image_path ~= \".*\\\\WerFault\\.exe\" or action_process_logon_id = \"None\")\n\n\n\n"}
{"prompt": "I want to detect when an attacker is exporting registry keys from a system to a file using regedit.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regedit\\.exe\" or actor_process_file_original_name = \"REGEDIT.EXE\") and action_process_image_command_line contains \" -E \") and  not ((action_process_image_command_line contains \"hklm\" or action_process_image_command_line contains \"hkey_local_machine\") and (action_process_image_command_line ~= \".*\\\\system\" or action_process_image_command_line ~= \".*\\\\sam\" or action_process_image_command_line ~= \".*\\\\security\"))\n\n\n\n"}
{"prompt": "I want to see all failed password change attempts for <username> using the ADSSP tool from ManageEngine.", "response": "config case_sensitive = false\n| dataset = manage_engine_adssp_raw\n| filter _raw_log contains \"\\\"productName\\\":\\\"ADSSP\\\"}\"\n| alter json_message = arrayindex(regextract(_raw_log, \"\\d+\\.\\d+\\.\\d+\\.\\d+\\s(.*)\"), 0) -> {}\n| alter STATUS = json_message -> message.STATUS\n| alter json_message = replace(replace(json_message, \"LOGIN NAME\", \"LOGIN_NAME\"), \"DOMAIN NAME\", \"DOMAIN_NAME\")\n| alter Login_Name = json_message -> message.LOGIN_NAME,\nACCESS_MODE = json_message -> message.ACCESS_MODE,\nIP = json_message -> message.IP,\nHOST = json_message -> message.HOST,\nDOMAIN_NAME = json_message -> message.DOMAIN_NAME,\nDATE_TIME = json_message -> message.DATE_TIME,\nACTION_NAME = json_message -> message.ACTION_NAME,\nCat = \"ADSSP User Change Password failed\"\n| filter ACTION_NAME in (\"Change Password\") and STATUS contains \"Password change failed. The admin credentials used to configure the AD domain is no longer valid.\"\n| filter Login_Name in (\"<username>\")"}
{"prompt": "I want to see information about local system accounts on macOS systems.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/dscl\" and (action_process_image_command_line contains \"list\" and action_process_image_command_line contains \"/users\")) or (action_process_image_path ~= \".*\\/dscacheutil\" and (action_process_image_command_line contains \"-q\" and action_process_image_command_line contains \"user\")) or action_process_image_command_line contains \"'x:0:'\" or (action_process_image_path ~= \".*\\/cat\" and (action_process_image_command_line contains \"/etc/passwd\" or action_process_image_command_line contains \"/etc/sudoers\")) or action_process_image_path ~= \".*\\/id\" or (action_process_image_path ~= \".*\\/lsof\" and action_process_image_command_line contains \"-u\"))\n\n\n\n"}
{"prompt": "I want to see events where a user's password was changed unexpectedly and potentially compromised.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| alter xdm.target.user.username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| alter xdm.source.user.username = if(xdm.source.user.username ~= \"@ad.infosys.com\", rtrim(xdm.source.user.username, \"@ad.infosys.com\"), if(xdm.source.user.username ~= \"@infosys.com\", rtrim(xdm.source.user.username, \"@infosys.com\"), if(xdm.source.user.username ~= \"itlinfosys\", ltrim(xdm.source.user.username, \"itlinfosys\\\\\"), xdm.source.user.username)))\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| filter message_id in (\"Security_4723_Microsoft-Windows-Security-Auditing\")\n| filter xdm.target.user.username != xdm.source.user.username\n| filter xdm.source.user.username not in (\"ANONYMOUS LOGON\", \"_shpadmin\", \"prodxm10admin\", \"_aksadfssvc\", \"ISCTXADM\", \"_infdirsync\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps(wingrps.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or wingrps.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE in (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| filter xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username != NULL\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for ManageEngine ADSSP logs originating from countries outside of the business-approved list.", "response": "config case_sensitive = false\n| dataset = manage_engine_adssp_raw\n| filter _raw_log contains \"\\\"productName\\\":\\\"ADSSP\\\"}\"\n| alter json_message = arrayindex(regextract(_raw_log, \"\\d+\\.\\d+\\.\\d+\\.\\d+\\s(.*)\"), 0) -> {}\n| alter STATUS = json_message -> message.STATUS\n| filter json_message contains \"IP\"\n| alter json_message = replace(replace(json_message, \"LOGIN NAME\", \"LOGIN_NAME\"), \"DOMAIN NAME\", \"DOMAIN_NAME\")\n| alter Login_Name = json_message -> message.LOGIN_NAME,\nACCESS_MODE = json_message -> message.ACCESS_MODE,\nIP = json_message -> message.IP,\nHOST = json_message -> message.HOST,\nDOMAIN_NAME = json_message -> message.DOMAIN_NAME,\nDATE_TIME = json_message -> message.DATE_TIME,\nACTION_NAME = json_message -> message.ACTION_NAME\n| iploc IP loc_country as IP_Country\n| filter IP_Country not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\") and IP_Country not in (null, \"\"\"\"\"\", NULL)"}
{"prompt": "I want to find multiple failed login attempts from unauthorized users on Unix servers.", "response": "datamodel dataset = linux_linux_raw\n| bin _time span = 1m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"RSD-Unix-servers\", \"sdam_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"sshd\" and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol != \"ssh2\" and xdm.source.user.username not in (NULL, \"<user>\") and xdm.source.ipv4 not in (\"<ip>\")\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"isg_server_qualys_src\")\n) as device_grps device_grps.IP = xdm.source.ipv4\n| filter IP = null\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name, security_groups\n| filter security_groups contains \"UNIX_Group_R1\" or security_groups contains \"UNIX_Group_R2\"\n) as ad_users ad_users.sam_account_name = xdm.source.user.username\n| filter sam_account_name = null\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, device_ip\n| comp count() as matched_events,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to detect FlowCloud malware based on its registry markers.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\HARDWARE\\\\{2DB80286-1784-48b5-A751-B6ED1F490303}\" or action_registry_key_name contains \"\\\\HARDWARE\\\\{804423C2-F490-4ac3-BFA5-13DEDE63A71A}\" or action_registry_key_name contains \"\\\\HARDWARE\\\\{A5124AF5-DF23-49bf-B0ED-A18ED3DEA027}\" or action_registry_key_name ~= \".*\\\\SYSTEM\\\\Setup\\\\PrintResponsor\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find out if malicious users are modifying Sudoers files on Linux systems.", "response": "preset = xdr_file\n| filter action_file_name ~= \"\\/etc\\/sudoers\\.d\\/.*\"\n\n\n\n"}
{"prompt": "I want to see activity that looks like malicious use of svchost.exe.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*svchost\\.exe\" and action_process_image_path ~= \".*\\\\svchost\\.exe\") and  not (((actor_process_image_path ~= \".*\\\\rpcnet\\.exe\" or actor_process_image_path ~= \".*\\\\rpcnetp\\.exe\") or action_process_image_command_line = \"None\"))\n\n\n\n"}
{"prompt": " I want to find instances where \"del\" or \"erase\" commands are used from cmd.exe, especially with flags like -f, -s, or -q. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and (action_process_image_command_line contains \"del \" or action_process_image_command_line contains \"erase \") and (action_process_image_command_line contains \" -f\" or action_process_image_command_line contains \" -s\" or action_process_image_command_line contains \" -q\"))\n\n\n\n"}
{"prompt": "I want to see all instances where users are querying or viewing mailbox permissions, even if they don't have the necessary privileges.", "response": "config case_sensitive = false\n| datamodel dataset = msft_admin_audit_raw\n| filter xdm.observer.action in (\"Get-MailboxFolderPermission\", \"Get-MailboxPermission\", \"Get-RecipientPermission\", \"Get-AdPermission\")\n| alter parameter_length = array_length(split(xdm.event.description, \" \")),\nparameter_values = split(xdm.event.operation, \" \")\n| alter mailbox = arrayindex(split(xdm.target.user.username, \"/\"), -1),\nMailboxAccessGivenTo = if(parameter_length = 3, arrayindex(parameter_values, 1), arrayindex(parameter_values, 3)),\naccessrights = if(parameter_length = 3, arrayindex(parameter_values, 0), arrayindex(parameter_values, 2)),\nxdm.source.user.username = arrayindex(split(xdm.source.user.username, \"@\"), 0),\nlog_src_name = \"AdminAudit\",\nserver_name = msft_admin_audit_raw._collector_hostname\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name, security_groups\n| filter security_groups contains \"Tier0Users\" or security_groups contains \"Tier1Users\"\n) as ad_users ad_users.sam_account_name = xdm.source.user.username\n| filter sam_account_name = null\n| fields xdm.target.user.username, xdm.source.user.username,\nxdm.observer.action, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.event.id, xdm.event.description, xdm.event.operation,\nxdm.event.operation_sub_type, xdm.observer.type,\nxdm.event.is_completed, xdm.logon.is_elevated, MailboxAccessGivenTo,\nmailbox, accessrights, _time, _insert_time, log_src_name,\nserver_name, msft_admin_audit_raw.rundate\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find PowerShell processes that are using Base64 encoded WMI classes in their command lines.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and ((action_process_image_command_line contains \"VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQ\" or action_process_image_command_line contains \"cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkA\" or action_process_image_command_line contains \"XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5A\" or action_process_image_command_line contains \"V2luMzJfU2hhZG93Y29we\" or action_process_image_command_line contains \"dpbjMyX1NoYWRvd2NvcH\" or action_process_image_command_line contains \"XaW4zMl9TaGFkb3djb3B5\") or (action_process_image_command_line contains \"VwBpAG4AMwAyAF8AUwBjAGgAZQBkAHUAbABlAGQASgBvAGIA\" or action_process_image_command_line contains \"cAaQBuADMAMgBfAFMAYwBoAGUAZAB1AGwAZQBkAEoAbwBiA\" or action_process_image_command_line contains \"XAGkAbgAzADIAXwBTAGMAaABlAGQAdQBsAGUAZABKAG8AYg\" or action_process_image_command_line contains \"V2luMzJfU2NoZWR1bGVkSm9i\" or action_process_image_command_line contains \"dpbjMyX1NjaGVkdWxlZEpvY\" or action_process_image_command_line contains \"XaW4zMl9TY2hlZHVsZWRKb2\") or (action_process_image_command_line contains \"VwBpAG4AMwAyAF8AUAByAG8AYwBlAHMAcw\" or action_process_image_command_line contains \"cAaQBuADMAMgBfAFAAcgBvAGMAZQBzAHMA\" or action_process_image_command_line contains \"XAGkAbgAzADIAXwBQAHIAbwBjAGUAcwBzA\" or action_process_image_command_line contains \"V2luMzJfUHJvY2Vzc\" or action_process_image_command_line contains \"dpbjMyX1Byb2Nlc3\" or action_process_image_command_line contains \"XaW4zMl9Qcm9jZXNz\") or (action_process_image_command_line contains \"VwBpAG4AMwAyAF8AVQBzAGUAcgBBAGMAYwBvAHUAbgB0A\" or action_process_image_command_line contains \"cAaQBuADMAMgBfAFUAcwBlAHIAQQBjAGMAbwB1AG4AdA\" or action_process_image_command_line contains \"XAGkAbgAzADIAXwBVAHMAZQByAEEAYwBjAG8AdQBuAHQA\" or action_process_image_command_line contains \"V2luMzJfVXNlckFjY291bn\" or action_process_image_command_line contains \"dpbjMyX1VzZXJBY2NvdW50\" or action_process_image_command_line contains \"XaW4zMl9Vc2VyQWNjb3Vud\") or (action_process_image_command_line contains \"VwBpAG4AMwAyAF8ATABvAGcAZwBlAGQATwBuAFUAcwBlAHIA\" or action_process_image_command_line contains \"cAaQBuADMAMgBfAEwAbwBnAGcAZQBkAE8AbgBVAHMAZQByA\" or action_process_image_command_line contains \"XAGkAbgAzADIAXwBMAG8AZwBnAGUAZABPAG4AVQBzAGUAcg\" or action_process_image_command_line contains \"V2luMzJfTG9nZ2VkT25Vc2Vy\" or action_process_image_command_line contains \"dpbjMyX0xvZ2dlZE9uVXNlc\" or action_process_image_command_line contains \"XaW4zMl9Mb2dnZWRPblVzZX\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious Extexport.exe executions on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Extexport.exe\" or action_process_image_path ~= \".*\\\\Extexport\\.exe\" or actor_process_file_original_name = \"extexport.exe\")\n\n\n\n"}
{"prompt": "{I want to find all instances of Avalon users logging into VPN from countries outside their usual locations, especially if they match known attacker usernames and involve events like login attempts or successful connections.} \n\n\nLet me know if you'd like me to adjust this prompt further!", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| union (dataset in (cnxbscn, Avalon_Users))\n| filter (xdm.event.original_event_type ~= \"722051|39424\") and ((xdm.source.location.country != countryname or xdm.target.location.continent != countryname) and xdm.target.user.username ~= `attacker user id`)"}
{"prompt": "I want to identify users whose current daily upload exceeds 150% of their average upload over the last seven days and is greater than 1 million bytes.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|toyotaeurope.service-now.com|sftpsite-prod-west.s3-accelerate.amazonaws.com|partner.westpacgroup.com|erasgw.portal.sony.biz\"\n| comp avg(rbytes) as current_day_upload_byte,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|toyotaeurope.service-now.com|sftpsite-prod-west.s3-accelerate.amazonaws.com|partner.westpacgroup.com|erasgw.portal.sony.biz\"\n| comp avg(rbytes) as 7_days_upload_byte,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_upload_byte) as 7_days_upload_byte_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_upload_byte_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter 7_days_upload_byte_avg > 1000000 and current_day_upload_byte > multiply(7_days_upload_byte_avg, 1.5)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see all events related to DarkGate malware dropping a loader in the C:\\Temp directory.", "response": "#N/A"}
{"prompt": "I want to see if any unusual deletions of user accounts happened within the last few minutes.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4726\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.source.user.username\n| filter matched_events >= 500\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 500)), 1)"}
{"prompt": "I want to see how many times objects were modified on CheckPoint by \"ajesh_s\" over the last 5 minutes and flag any instances where it happened more than 10 times.", "response": "config case_sensitive = false\n| dataset = check_point_smartconsole_raw\n| bin _time span = 5m\n| filter operation = \"Modify Object\" and lowercase(administrator) in (\"ajesh_s\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(subject) as result,\nvalues(_product) as product,\ncount() as matched_events by administrator,\n_time\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all Amazon S3 bucket activity that involves privileged administrative actions, like changing permissions or configurations.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = json_extract_scalar(requestParameters, \"$.groupId\"),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"PutBucketAcl\", \"PutBucketPolicy\", \"PutBucketCors\", \"PutBucketLifecycle\", \"PutBucketReplication\", \"PutBucketReplication\", \"DeleteBucketPolicy\", \"DeleteBucketCors\", \"DeleteBucketLifecycle\", \"DeleteBucketReplication\")\n| filter target_username not contains \"<account id>\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of the exploit for CVE-2017-0261, specifically looking for processes that involve WINWORD.EXE and FLTLDR.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\WINWORD\\.EXE\" and action_process_image_path contains \"\\\\FLTLDR.exe\")\n\n\n\n"}
{"prompt": "I want to see information about PowerShell scripts that are trying to export data to a temporary file location.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Get-Service \" or ScriptBlockText contains \"Get-ChildItem \" or ScriptBlockText contains \"Get-Process \") and ScriptBlockText ~= \".*\\>\\ \\$env\\:TEMP\\\\.*\")\n\n\n\n"}
{"prompt": " I want to find instances where a local Windows account was both created and deleted within 24 hours. ", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4720, 4726) and _collector_type in (\"XDR Collector\")\n| alter event_id_description = if(event_id = 4720, \"A user account was CREATED\", if(event_id = 4726, \"A user account was DELETED\")),\nSubjectUserName = event_data -> SubjectUserName,\nTargetUserName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| alter Local = if(TargetDomainName = _collector_hostname, \"yes\", \"no\")\n| filter Local = \"yes\"\n| filter SubjectUserName not contains \"$\" and (SubjectUserName not in (\"\"\"\"\"\", null, NULL) and TargetUserName not in (\"\"\"\"\"\", null, NULL))\n| comp values(event_id_description) as Multiple_Events,\nvalues(event_id) as Multiple_EventIDs,\nvalues(event_data) as Activity_Data,\nvalues(message) as Message_Data by SubjectUserName,\nTargetUserName,\n_collector_type\n| filter array_length(Multiple_EventIDs) > 1"}
{"prompt": " I want to see all events from the \"Drona\" or \"dr0na\" accounts on Windows systems, including their usernames, logon types, error codes, and descriptions. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter xdm.target.user.username = if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<user>\", ltrim(xdm.target.user.username, \"<user>\\\\\"), xdm.target.user.username)))\n| alter xdm.source.user.username = if(xdm.source.user.username ~= \"<domain>\", rtrim(xdm.source.user.username, \"<domain>\"), if(xdm.source.user.username ~= \"<domain>\", rtrim(xdm.source.user.username, \"<domain>\"), if(xdm.source.user.username ~= \"<user>\", ltrim(xdm.source.user.username, \"<user>\\\\\"), xdm.source.user.username)))\n| filter xdm.target.user.username in (\"drona\", \"dr0na\") or xdm.source.user.username in (\"drona\", \"dr0na\") or xdm.target.user.username contains \"dr0na\" or xdm.source.user.username contains \"dr0na\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _time\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect instances of the \"Empire PowerShell UAC Bypass\" HackTool on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" -NoP -NonI -w Hidden -c $x=$((gp HKCU:Software\\\\Microsoft\\\\Windows Update).Update)\" or action_process_image_command_line contains \" -NoP -NonI -c $x=$((gp HKCU:Software\\\\Microsoft\\\\Windows Update).Update);\")\n\n\n\n"}
{"prompt": "I want to find potential instances of persistence on my system that might be using Scrobj.dll through COM hijacking.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*InprocServer32\\\\\\(Default\\)\" and (action_registry_value_name = \"C:\\\\WINDOWS\\\\system32\\\\scrobj.dll\" or action_registry_data = \"C:\\\\WINDOWS\\\\system32\\\\scrobj.dll\"))\n\n\n\n"}
{"prompt": "I want to find potential Linux process code injections happening through the use of the DD utility.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/dd\" and (action_process_image_command_line contains \"of=\" and action_process_image_command_line contains \"/proc/\" and action_process_image_command_line contains \"/mem\"))\n\n\n\n"}
{"prompt": "I want to find instances where an attacker might be using a symlink between Osk and Cmd for privilege escalation.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and (action_process_image_command_line contains \"mklink\" and action_process_image_command_line contains \"\\\\osk.exe\" and action_process_image_command_line contains \"\\\\cmd.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts for processes that redirect to the local admin share using suspicious command lines like those containing \">\" and targeting \"\\\\127.0.0.1\\admin\\$\" or \"\\\\localhost\\admin\\$\".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \">\" and (action_process_image_command_line ~= \".*\\\\\\\\127\\.0\\.0\\.1\\\\admin\\$\\\\.*\" or action_process_image_command_line ~= \".*\\\\\\\\localhost\\\\admin\\$\\\\.*\"))\n\n\n\n"}
{"prompt": "{ I want to find users who have accessed multiple SymantecWSS P2P category URLs within an hour based on behavioral analysis. } \n\n\nLet me know if you'd like me to adjust this prompt further!", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and category ~= \"Peer-to-Peer(P2P)\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find PowerShell scripts being run from within the AppData folder.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"powershell.exe\" or action_process_image_command_line contains \"\\\\powershell\" or action_process_image_command_line contains \"\\\\pwsh\" or action_process_image_command_line contains \"pwsh.exe\") and ((action_process_image_command_line contains \"/c \" and action_process_image_command_line ~= \".*\\\\AppData\\\\.*\") and (action_process_image_command_line ~= \".*Local\\\\.*\" or action_process_image_command_line ~= \".*Roaming\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see activity related to suspicious history file operations on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \".bash_history\" or action_process_image_command_line contains \".zsh_history\" or action_process_image_command_line contains \".zhistory\" or action_process_image_command_line contains \".history\" or action_process_image_command_line contains \".sh_history\" or action_process_image_command_line contains \"fish_history\")\n\n\n\n"}
{"prompt": "I want to find instances of high privilege Registry value modifications on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id = \"4657\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ibpmsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find users who have a sudden spike in activity compared to their average behavior over the last 7 days.", "response": "dataset = symantec_ep_raw\n| filter _raw_log ~= \",Intrusion\\sURL:\"\n| filter subtract(to_integer(format_timestamp(\"%d\", current_time())), to_integer(format_timestamp(\"%d\", _time))) = 0\n| alter category = to_string(arrayindex(regextract(_raw_log, \"CIDS Signature string:\\s([^,]+),\"), 0)),\nusername = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0))\n| filter category ~= \"^audit|^web attack|^malicious Site|^system infected|^os attack|^attack\" and username not in (\"SYSTEM\", null, \"None\")\n| alter day = extract_time(_time, \"DAYOFWEEK\"),\nevent_desc = to_string(arrayindex(regextract(_raw_log, \"Event Description:\\s([^,]+),\"), 0)),\nevent_type = to_string(arrayindex(regextract(_raw_log, \"Event Type:\\s([^,]+),\"), 0)),\nserver_name = arrayindex(regextract(_raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\ntarget_url = to_string(arrayindex(regextract(_raw_log, \"Intrusion URL:\\s([^,]+),\"), 0)),\nusername = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0)),\nsrc_ip = arrayindex(regextract(_raw_log, \"Local Host IP:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\ndst_ip = arrayindex(regextract(_raw_log, \"Remote Host IP:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nhostname = coalesce(to_string(arrayindex(regextract(_raw_log, \"Local Host Name:\\s([^,]+),\"), 0)), to_string(arrayindex(regextract(_raw_log, \"Remote Host Name:\\s([^,]+),\"), 0)))\n| comp count() as current_day_count,\nvalues(server_name) as server_name,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(event_type) as event_type,\nvalues(src_ip) as src_ip,\nvalues(dst_ip) as dst_ip,\nvalues(hostname) as hostname,\nvalues(target_url) as target_url by day,\nusername\n| join type = left conflict_strategy = both\n(dataset = symantec_ep_raw\n| filter _raw_log ~= \",Intrusion\\sURL:\"\n| alter category = to_string(arrayindex(regextract(_raw_log, \"CIDS Signature string:\\s([^,]+),\"), 0)),\nusername = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0))\n| filter category ~= \"^audit|^web attack|^malicious Site|^system infected|^os attack|^attack\" and username not in (\"SYSTEM\", null, \"None\")\n| alter day = extract_time(_time, \"DAYOFWEEK\"),\nevent_desc = to_string(arrayindex(regextract(_raw_log, \"Event Description:\\s([^,]+),\"), 0)),\nevent_type = to_string(arrayindex(regextract(_raw_log, \"Event Type:\\s([^,]+),\"), 0)),\nserver_name = arrayindex(regextract(_raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\ntarget_url = to_string(arrayindex(regextract(_raw_log, \"Intrusion URL:\\s([^,]+),\"), 0)),\nusername = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0)),\nsrc_ip = arrayindex(regextract(_raw_log, \"Local Host IP:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\ndst_ip = arrayindex(regextract(_raw_log, \"Remote Host IP:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nhostname = coalesce(to_string(arrayindex(regextract(_raw_log, \"Local Host Name:\\s([^,]+),\"), 0)), to_string(arrayindex(regextract(_raw_log, \"Remote Host Name:\\s([^,]+),\"), 0)))\n| comp count() as 7_days_count,\nvalues(server_name) as server_name,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(event_type) as event_type,\nvalues(src_ip) as src_ip,\nvalues(dst_ip) as dst_ip,\nvalues(hostname) as hostname,\nvalues(target_url) as target_url by day,\nusername\n| comp avg(7_days_count) as 7_days_count_avg,\nvalues(to_string(server_name)) as server_name,\nvalues(to_string(category)) as category,\nvalues(to_string(event_desc)) as event_desc,\nvalues(to_string(event_type)) as event_type,\nvalues(to_string(src_ip)) as src_ip,\nvalues(to_string(dst_ip)) as dst_ip,\nvalues(to_string(hostname)) as hostname,\nvalues(to_string(target_url)) as target_url by username addrawdata = true as avg_raw\n| alter user = username\n| fields user, 7_days_count_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = username\n| filter current_day_count > multiply(7_days_count_avg, 3)"}
{"prompt": "I want to see details about Azure firewall rule changes for a specific resource ID (<id>), including who made the changes, their target username, and the protocol used.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.sql/servers/firewallrules/write\", \"microsoft.dbformysql/servers/firewallrules/write\", \"microsoft.network/azurefirewalls/write\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"<id>\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "{I want to find instances of malicious scripts that use spaces after filenames in their commands.} \n\n\nThis prompt reflects the query's focus on detecting suspicious activities related to filename manipulation and potentially harmful script execution.", "response": "datamodel\n| filter (_raw_log contains \"echo \\\"\\*\\\" > \\* && chmod +x \\*\" and _raw_log contains \"mv \\* \\\"\\* \\\"\")\n\n\n\n"}
{"prompt": "I want to see events related to FoggyWeb Backdoor DLL Loading that involve the \"C:\\\\Windows\\\\ADFS\\\\version.dll\" file path.", "response": "preset = xdr_image_load\n| filter action_module_path = \"C:\\\\Windows\\\\ADFS\\\\version.dll\"\n\n\n\n"}
{"prompt": "I want to detect instances where a hidden user account is being created on macOS endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/dscl\" and action_process_image_command_line contains \"create\") and (action_process_image_command_line contains \"UniqueID\" and action_process_image_command_line ~= \"([0-9]|[1-9][0-9]|[1-4][0-9]{2})\") or (action_process_image_path ~= \".*\\/dscl\" and action_process_image_command_line contains \"create\") and (action_process_image_command_line contains \"IsHidden\" and (action_process_image_command_line contains \"true\" or action_process_image_command_line contains \"yes\" or action_process_image_command_line contains \"1\"))\n\n\n\n"}
{"prompt": "I want to see a list of policy assignments created in Azure, specifically those involving the given reference IDs.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.AUTHORIZATION/POLICYASSIGNMENTS/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"9227fdca-483d-424c-bc56-9fd2b4030484\", \"3fd7f1e1-88df-41df-982e-90c0daa354b9\", \"f2a4f062-8a8b-444f-82b8-e668b51cf42e\", \"71cce8cd-49d7-4463-bf9f-20dd2a68c5eb\", \"416105b8-5451-4d32-8f96-fcb0deb64ae0\", \"799febb6-d243-48d7-86a3-e94c956f46ba\", \"7269cfc9-f839-4437-9ded-f6d4bdec41d2\", \"8de7d5e6-d76e-497e-97c2-557d13d801e8\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about suspicious child processes created by HTML Help HH.EXE that launch tools like CertReq.exe, powershell.exe, or rundll32.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\hh\\.exe\" and (action_process_image_path ~= \".*\\\\CertReq\\.exe\" or action_process_image_path ~= \".*\\\\CertUtil\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\installutil\\.exe\" or action_process_image_path ~= \".*\\\\MSbuild\\.exe\" or action_process_image_path ~= \".*\\\\MSHTA\\.EXE\" or action_process_image_path ~= \".*\\\\msiexec\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to HH.EXE being used to execute CHM files.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"HH.exe\" or action_process_image_path ~= \".*\\\\hh\\.exe\") and action_process_image_command_line contains \".chm\")\n\n\n\n"}
{"prompt": "I want to find suspicious files located in the Startup folder that could be used for persistence.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\Windows\\\\Start\\ Menu\\\\Programs\\\\Startup\\\\.*\" and (xdm.target.file.filename ~= \".*\\.vbs\" or xdm.target.file.filename ~= \".*\\.vbe\" or xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.hta\" or xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.jar\" or xdm.target.file.filename ~= \".*\\.msi\" or xdm.target.file.filename ~= \".*\\.scr\" or xdm.target.file.filename ~= \".*\\.cmd\"))\n\n\n\n"}
{"prompt": "I want to find instances where a program uses the \"assoc\" command to change the default file association of an extension to an executable.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and (action_process_image_command_line contains \"assoc \" and action_process_image_command_line contains \"exefile\")) and  not (action_process_image_command_line contains \".exe=exefile\")\n\n\n\n"}
{"prompt": "I want to see Windows events related to group type modifications by admin users, which could indicate unauthorized privilege escalation.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4764\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "{I want to find indicators of compromise related to Twilio that have been detected by my Fortinet Fortigate firewall.} \n\n\nLet me know if you need any other variations! \ud83d\ude0a", "response": "config case_sensitive = false\n| datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter (xdm.source.ipv4 in (\"<ip>\") or (xdm.target.host.fqdn in (\"<domain>\") or xdm.network.http.url ~= \"<domain>\"))"}
{"prompt": "I want to find malicious files that try to hijack DLL loading by using extra spaces in their names to mimic system folders.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \"C\\:\\\\Windows\\ \\\\.*\" or xdm.target.file.filename ~= \"C\\:\\\\Program\\ Files\\ \\\\.*\" or xdm.target.file.filename ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\ \\\\.*\") and xdm.target.file.filename ~= \".*\\.dll\")\n\n\n\n"}
{"prompt": "I want to see alerts related to potential ReflectDebugger content execution using WerFault.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\WerFault\\.exe\" or actor_process_file_original_name = \"WerFault.exe\") and action_process_image_command_line contains \" -pr \")\n\n\n\n"}
{"prompt": "I want to detect potential PowerShell base64 encoded shellcode that might be used for evasion techniques.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"OiCAAAAYInlM\" or action_process_image_command_line contains \"OiJAAAAYInlM\")\n\n\n\n"}
{"prompt": "I want to find instances where suspicious executables like cmd.exe or powershell.exe are used to launch Chromium browsers with custom extensions loaded.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") and (action_process_image_path ~= \".*\\\\brave\\.exe\" or action_process_image_path ~= \".*\\\\chrome\\.exe\" or action_process_image_path ~= \".*\\\\msedge\\.exe\" or action_process_image_path ~= \".*\\\\opera\\.exe\" or action_process_image_path ~= \".*\\\\vivaldi\\.exe\") and action_process_image_command_line contains \"--load-extension=\")\n\n\n\n"}
{"prompt": "I want to see all instances where Psr.exe is used with \"/start\" or \"-start\" in the command line.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\Psr\\.exe\" and (action_process_image_command_line contains \"/start\" or action_process_image_command_line contains \"-start\"))\n\n\n\n"}
{"prompt": "I want to see all failed login attempts on the Hitachi PAM platform.", "response": "config case_sensitive = false\n| dataset = hitachi_pam_raw\n| filter oper ~= \"ADIS\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nevent_desc = \"NA\",\ndevice_type = \"pam\""}
{"prompt": "I want to find Cisco CLI commands that involve deleting, erasing, or formatting files.", "response": "datamodel\n| filter ( contains \"erase\" or  contains \"delete\" or  contains \"format\")\n\n\n\n"}
{"prompt": "I want to find instances of potential exploitation attempts for CVE-2010-5278 in my system logs.", "response": "datamodel\n| filter xdm.network.http.url contains \"/manager/controllers/default/resource/tvs.php*class_key=../../../../../../../../../../windows/win.ini%00\"\n\n\n\n"}
{"prompt": " I want to see alerts when a Windows Defender exclusion has been deleted on my endpoints. ", "response": "preset = xdr_event_log\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4660 and ObjectName ~= \".*\\\\Microsoft\\\\Windows\\ Defender\\\\Exclusions\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see events where a process accesses the Sysvol Policies share that isn't a common Windows process.", "response": "datamodel\n| filter (xdm.target.file.path ~= \"\\\\.*\" and (xdm.target.file.path ~= \".*\\\\sysvol\\\\.*\" and xdm.target.file.path ~= \".*\\\\Policies\\\\.*\")) and  not (((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name contains \":\\\\Windows\\\\explorer.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name contains \":\\\\Windows\\\\explorer.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see alerts for users who deleted over 500 AD objects within a 5 minute period.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"5141\") and xdm.source.user.username NOT IN (\"system\")\n\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.user.username\n| filter matched_events >= 50\n\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 50)), 1)"}
{"prompt": "I want to see alerts for new AWS user profiles being created, including details like the username, group ID, bucket name, and account ID.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = json_extract_scalar(requestParameters, \"$.groupId\"),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventname IN (\"CreateLoginProfile\")\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"illogonsessionid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see unusual Windows activity for any SET users, pulling from the Windows Event Log.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id != null and _collector_type in (\"XDR Collector\")\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = if(message contains \"CN=\", arrayindex(regextract(message, \"Account Name:\\t\\tCN\\=([^\\,]+)\\,\"), 0), event_data -> TargetUserName),\nTargetGroupName = if(message contains \"CN=\", event_data -> TargetUserName, arrayindex(regextract(message, \"Group Name:\\t\\t(.*?)\\r\\n\\tGroup Domain\"), 0)),\nTargetDomainName = event_data -> TargetDomainName\n| filter (SubjectUserName in (\"<users>\"))"}
{"prompt": "I want to find instances of ScreenConnect being temporarily installed on systems.", "response": "datamodel\n| filter xdm.target.file.filename contains \"\\\\Bin\\\\ScreenConnect.\"\n\n\n\n"}
{"prompt": "I want to find instances where a shell program like PowerShell or Command Prompt is launched with system privileges.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\", \"Cmd.Exe\")) and ((action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\") and action_process_logon_id = \"0x3e7\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to potential exploitation attempts of CVE-2022-21587 in Oracle EBS.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and (xdm.network.http.url contains \"/OA_HTML/BneViewerXMLService*bne:uueupload=TRUE\" or xdm.network.http.url contains \"/OA_HTML/BneUploaderService*bne:uueupload=TRUE\" or xdm.network.http.url contains \"/OA_HTML/BneDownloadService*bne:uueupload=TRUE\" or xdm.network.http.url contains \"/OA_HTML/BneOfflineLOVService*bne:uueupload=TRUE\"))\n\n\n\n"}
{"prompt": "I want to see events related to browsers being executed in headless mode, specifically Chrome, Brave, Edge, Opera, and Vivaldi.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\brave\\.exe\" or action_process_image_path ~= \".*\\\\chrome\\.exe\" or action_process_image_path ~= \".*\\\\msedge\\.exe\" or action_process_image_path ~= \".*\\\\opera\\.exe\" or action_process_image_path ~= \".*\\\\vivaldi\\.exe\") and action_process_image_command_line contains \"--headless\")\n\n\n\n"}
{"prompt": "I want to detect potential account name spoofing attacks exploiting CVE-2021-42287 on my endpoints.", "response": "preset = xdr_event_log\n| alter OldTargetUserName = regextract(to_json_string(action_evtlog_data_fields)->OldTargetUserName{}, \"\\\"(.*)\\\"\")\n| alter NewTargetUserName = regextract(to_json_string(action_evtlog_data_fields)->NewTargetUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4781 and OldTargetUserName contains \"$\") and  not (NewTargetUserName contains \"$\")\n\n\n\n"}
{"prompt": "I want to detect when the \"whoami.exe\" process is renamed on endpoints.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"whoami.exe\" and  not (action_process_image_path ~= \".*\\\\whoami\\.exe\")\n\n\n\n"}
{"prompt": "I want to detect if \"system_profiler\" is being used to gather system information on my endpoints, specifically looking for those using common data types like hardware, applications, network, and USB.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/system\\_profiler\" or action_process_image_command_line contains \"system_profiler\") and (action_process_image_command_line contains \"SPApplicationsDataType\" or action_process_image_command_line contains \"SPHardwareDataType\" or action_process_image_command_line contains \"SPNetworkDataType\" or action_process_image_command_line contains \"SPUSBDataType\"))\n\n\n\n"}
{"prompt": "I want to see all system infection alerts from Symantec EP that include specific threat IDs and exclude those related to Chrome, Edge, or Firefox.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.alert.name ~= \"^Audit\"\n| filter to_integer(xdm.alert.original_threat_id) in (20566, 31959, 31960, 31999, 32111, 32431, 32526, 32552, 30843, 32841, 31551, 31842, 31880, 32037, 32078, 32085, 32104, 32421, 32432, 32438, 32444, 32459, 32460, 32463, 31234, 32470, 32476, 32481, 32519, 32520, 32521, 32536, 32541, 32543, 32570, 32571, 32607, 32884, 33049, 32551, 30864, 30279, 30617, 30582, 30835, 30847, 30852, 31175, 30913, 31843, 32540, 32912, 32721, 33211, 33602, 33413, 33545, 33271, 31402, 32619, 33038, 33331, 33112, 30162, 33358, 33090, 30021, 33119, 32346, 33183, 31031, 33534, 32969, 33328, 32363, 33332)\n| filter xdm.target.file.sha256 = null or uppercase(xdm.target.file.sha256) not in (\"35B1B7B689177B51F41BCD47F5EFED2495DED97DDB2E55B37E3F2492F22EAD1C\", \"13AF5FCA7C707AB559AF84EB538AF610E913EAF5886583752CB1F5485C02FF0C\")\n| filter lowercase(xdm.source.application.name) !~= \"chrome.exe$|edge.exe$|firefox.exe$\"\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1),\nfile_hash = xdm.target.file.sha256,\nusername = xdm.source.user.username,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nprocess = xdm.target.file.path,\nrisk_name = xdm.alert.name,\naction = xdm.observer.action\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\"),\ntime = _time,\naggregation_criteria = \"ibpmhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential persistence threats related to Outlook forms.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\outlook\\.exe\" or xdm.source.process.name ~= \".*\\\\outlook\\.exe\") and (xdm.target.file.filename contains \"\\\\AppData\\\\Local\\\\Microsoft\\\\FORMS\\\\IPM\" or xdm.target.file.filename contains \"\\\\Local Settings\\\\Application Data\\\\Microsoft\\\\Forms\"))\n\n\n\n"}
{"prompt": "I want to find suspicious child processes spawned by common Electron apps like Discord, Slack, and Teams.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\chrome\\.exe\" or actor_process_image_path ~= \".*\\\\discord\\.exe\" or actor_process_image_path ~= \".*\\\\GitHubDesktop\\.exe\" or actor_process_image_path ~= \".*\\\\keybase\\.exe\" or actor_process_image_path ~= \".*\\\\msedge\\.exe\" or actor_process_image_path ~= \".*\\\\msedgewebview2\\.exe\" or actor_process_image_path ~= \".*\\\\msteams\\.exe\" or actor_process_image_path ~= \".*\\\\slack\\.exe\" or actor_process_image_path ~= \".*\\\\Teams\\.exe\") and ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or (action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Temp\\\\.*\")) and  not ((actor_process_image_path ~= \".*\\\\chrome\\.exe\" and action_process_image_path ~= \".*\\\\chrome\\.exe\") or (actor_process_image_path ~= \".*\\\\discord\\.exe\" and action_process_image_path ~= \".*\\\\discord\\.exe\") or (actor_process_image_path ~= \".*\\\\GitHubDesktop\\.exe\" and action_process_image_path ~= \".*\\\\GitHubDesktop\\.exe\") or (actor_process_image_path ~= \".*\\\\keybase\\.exe\" and action_process_image_path ~= \".*\\\\keybase\\.exe\") or (actor_process_image_path ~= \".*\\\\msedge\\.exe\" and action_process_image_path ~= \".*\\\\msedge\\.exe\") or (actor_process_image_path ~= \".*\\\\msedgewebview2\\.exe\" and action_process_image_path ~= \".*\\\\msedgewebview2\\.exe\") or (actor_process_image_path ~= \".*\\\\msteams\\.exe\" and action_process_image_path ~= \".*\\\\msteams\\.exe\") or (actor_process_image_path ~= \".*\\\\slack\\.exe\" and action_process_image_path ~= \".*\\\\slack\\.exe\") or (actor_process_image_path ~= \".*\\\\teams\\.exe\" and action_process_image_path ~= \".*\\\\teams\\.exe\") or action_process_image_path in (\"C:\\\\Windows\\\\SysWOW64\\\\WerFault.exe\", \"C:\\\\Windows\\\\System32\\\\WerFault.exe\")) and  not ((actor_process_image_path ~= \".*\\\\Discord\\.exe\" and action_process_image_command_line contains \"\\\\NVSMI\\\\nvidia-smi.exe\"))\n\n\n\n"}
{"prompt": "I want to create a rule that triggers when communications involve malicious COVID domains.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter xdm.observer.action in (\"accept\", \"ip-conn\")\n| join\n(dataset = cv_fb_mz_iocs\n| filter ioc_description in (\"COVID Domain\") and ioc_type in (\"domain\")\n) as ioclookup ioclookup.ioc_value = xdm.target.host.fqdn\n| filter (xdm.network.http.domain ~= ioc_value) or (ioc_value ~= xdm.target.host.fqdn)"}
{"prompt": "I want to detect attempts to launch Taskmgr as the LOCAL_SYSTEM account with suspicious usernames.", "response": "preset = xdr_process\n| filter ((action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\") and action_process_image_path ~= \".*\\\\taskmgr\\.exe\")\n\n\n\n"}
{"prompt": "I want to find instances where the Windows Firewall was disabled using PowerShell.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"Set-NetFirewallProfile \" and action_process_image_command_line contains \" -Enabled \" and action_process_image_command_line contains \" False\") and (action_process_image_command_line contains \" -All \" or action_process_image_command_line contains \"Public\" or action_process_image_command_line contains \"Domain\" or action_process_image_command_line contains \"Private\"))\n\n\n\n"}
{"prompt": "I want to see any suspicious file creation activity related to fake \"Recycle.Bin\" folders.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*RECYCLERS\\.BIN\\\\.*\" or xdm.target.process.name ~= \".*RECYCLER\\.BIN\\\\.*\") or (xdm.source.process.name ~= \".*RECYCLERS\\.BIN\\\\.*\" or xdm.source.process.name ~= \".*RECYCLER\\.BIN\\\\.*\")) or (xdm.target.file.filename ~= \".*RECYCLERS\\.BIN\\\\.*\" or xdm.target.file.filename ~= \".*RECYCLER\\.BIN\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see all instances where the Ksetup.exe process was used to change a logged-on user's password.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\ksetup\\.exe\" or actor_process_file_original_name = \"ksetup.exe\") and action_process_image_command_line contains \" /ChangePassword \")\n\n\n\n"}
{"prompt": "I want to find instances where an adversary might be trying to dump credentials from Windows Credential Manager using PowerShell.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Get-PasswordVaultCredentials\" or ScriptBlockText contains \"Get-CredManCreds\") or (ScriptBlockText contains \"New-Object\" and ScriptBlockText contains \"Windows.Security.Credentials.PasswordVault\") or (ScriptBlockText contains \"New-Object\" and ScriptBlockText contains \"Microsoft.CSharp.CSharpCodeProvider\" and ScriptBlockText contains \"[System.Runtime.InteropServices.RuntimeEnvironment]::GetRuntimeDirectory())\" and ScriptBlockText contains \"Collections.ArrayList\" and ScriptBlockText contains \"System.CodeDom.Compiler.CompilerParameters\"))\n\n\n\n"}
{"prompt": "I want to see Windows event log entries for account unlock activities performed by non-admin users that might indicate unauthorized privilege escalation.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.source.user.username not in (\"_accman\", \"emsg_passaid\", \"_mimsvc\", \"epsinvagen\", \"mdtdeploy\", \"_pamaccmgr\", \"_adobjmgmt\") and xdm.event.id = \"4767\"\n| join type = left\n(dataset = device_group_static_list\n) as wingrps(wingrps.HOSTNAME = xdm.source.host.hostname or wingrps.IP = microsoft_windows_raw._reporting_device_ip)\n| filter TYPE in (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n) as ent_admin_dst ent_admin_dst.username = xdm.source.user.username or ent_admin_dst.sam_account_name = xdm.source.user.username\n| filter (admin_type = null and security_groups = null) or (admin_type not in (\"domain_admin_win_admin\", \"win_accop\", \"win_admin\", \"win_admin_accop\") and to_string(security_groups) !~= \"Tier0Users|Tier1Users\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about changes to authentication policies, such as new trusts being created or existing trusts being removed.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4706\", \"4707\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, xdm.target.user.sam_account_name, _insert_time\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious DNS queries that contain \"==.\"", "response": "datamodel\n| filter xdm.network.dns.dns_question.name contains \"==.\"\n\n\n\n"}
{"prompt": "I want to find potential credential dumping attempts that involve cloning the LSASS process.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\Windows\\\\System32\\\\lsass\\.exe\" and action_process_image_path ~= \".*\\\\Windows\\\\System32\\\\lsass\\.exe\")\n\n\n\n"}
{"prompt": "I want to find instances where someone might be trying to disable Symantec Endpoint Protection by killing the ccSvcHst.exe process.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"taskkill\" and action_process_image_command_line contains \" /F \" and action_process_image_command_line contains \" /IM \" and action_process_image_command_line contains \"ccSvcHst.exe\")\n\n\n\n"}
{"prompt": "I want to find potential SocGholish second stage C2 DNS queries.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\wscript\\.exe\" or xdm.source.process.name ~= \".*\\\\wscript\\.exe\") and xdm.network.dns.dns_question.name ~= \"[a-f0-9]{4,8}\\.(?\\:[a-z0-9\\-]+\\.){2}[a-z0-9\\-]+\")\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that contain specific strings like \"cleanLL\", \"usersfiles.war\", and \"Remove-Item -Path \\\"$tomcat_dir\"  indicating potential evidence erasure by the Lace Tempest APT group exploiting CVE-2023-47246.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"cleanLL\" and ScriptBlockText contains \"usersfiles.war\" and ScriptBlockText contains \"Remove-Item -Path \\\"$tomcat_dir\" and ScriptBlockText contains \"SysAidServer\" and ScriptBlockText contains \"sleep \" and ScriptBlockText contains \"while(1)\")\n\n\n\n"}
{"prompt": "I want to find instances of the Xwizard tool being used with the \"RunWizard\" flag and a GUID-like argument, as this could indicate malicious activity like executing custom COM objects.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\xwizard\\.exe\" or actor_process_file_original_name = \"xwizard.exe\") and (action_process_image_command_line = \"RunWizard\" and action_process_image_command_line ~= \"\\{[a-fA-F0-9]{8}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{12}\\}\")) or ((action_process_image_command_line = \"RunWizard\" and action_process_image_command_line ~= \"\\{[a-fA-F0-9]{8}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{4}\\-[a-fA-F0-9]{12}\\}\") and  not ((action_process_image_path ~= \".*\\\\xwizard\\.exe\" or actor_process_file_original_name = \"xwizard.exe\")))\n\n\n\n"}
{"prompt": "I want to detect suspicious Netcat executions on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\nc\\.exe\" or action_process_image_path ~= \".*\\\\ncat\\.exe\" or action_process_image_path ~= \".*\\\\netcat\\.exe\") or (action_process_image_command_line contains \" -lvp \" or action_process_image_command_line contains \" -lvnp\" or action_process_image_command_line contains \" -l -v -p \" or action_process_image_command_line contains \" -lv -p \" or action_process_image_command_line contains \" -l --proxy-type http \" or action_process_image_command_line contains \" -vnl --exec \" or action_process_image_command_line contains \" -vnl -e \" or action_process_image_command_line contains \" --lua-exec \" or action_process_image_command_line contains \" --sh-exec \"))\n\n\n\n"}
{"prompt": "I want to find instances of NSudo being executed with suspicious command line arguments.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\NSudo\\.exe\" or action_process_image_path ~= \".*\\\\NSudoLC\\.exe\" or action_process_image_path ~= \".*\\\\NSudoLG\\.exe\") or actor_process_file_original_name in (\"NSudo.exe\", \"NSudoLC.exe\", \"NSudoLG.exe\")) and (action_process_image_command_line contains \"-U:S \" or action_process_image_command_line contains \"-U:T \" or action_process_image_command_line contains \"-U:E \" or action_process_image_command_line contains \"-P:E \" or action_process_image_command_line contains \"-M:S \" or action_process_image_command_line contains \"-M:H \" or action_process_image_command_line contains \"-U=S \" or action_process_image_command_line contains \"-U=T \" or action_process_image_command_line contains \"-U=E \" or action_process_image_command_line contains \"-P=E \" or action_process_image_command_line contains \"-M=S \" or action_process_image_command_line contains \"-M=H \" or action_process_image_command_line contains \"-ShowWindowMode:Hide\"))\n\n\n\n"}
{"prompt": "I want to see alerts about changes made to Azure DNS zones, such as modifications or deletions.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter (properties.operationName ~= \"MICROSOFT\\.NETWORK\\/DNSZONES.*\" and (properties.operationName ~= \".*\\/WRITE\" or properties.operationName ~= \".*\\/DELETE\"))\n\n\n\n"}
{"prompt": "I want to see events related to the Sitecore Pre-Auth RCE vulnerability CVE-2021-42237.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and xdm.network.http.url contains \"/sitecore/shell/ClientBin/Reporting/Report.ashx\" and xdm.network.http.response_code = 200)\n\n\n\n"}
{"prompt": "I want to see alerts for potentially malicious use of the Qemu utility on Windows systems, based on the techniques described in the Kaspersky report.", "response": "#N/A"}
{"prompt": "I want to find PowerShell activity that uses Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter Payload ~= \"(?i)\\&\\&set.*(\\{\\d\\}){2,}\\\\\\\"\\s+?\\-f.*\\&\\&.*cmd.*\\/c\"\n\n\n\n"}
{"prompt": "I want to detect if someone has added new file exclusions to Time Machine on macOS using the \"tmutil\" utility.", "response": "#N/A"}
{"prompt": "I want to see alerts about potential DNS reconnaissance activity using dnscmd.exe, specifically when it's used with commands like \"/enumrecords\", \"/enumzones\", \"/ZonePrint\", or \"/info.\"", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\dnscmd\\.exe\" and (action_process_image_command_line contains \"/enumrecords\" or action_process_image_command_line contains \"/enumzones\" or action_process_image_command_line contains \"/ZonePrint\" or action_process_image_command_line contains \"/info\"))\n\n\n\n"}
{"prompt": "I want to find instances where a new user is created and then immediately runs or terminates instances on Amazon EC2.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name != \"EV_CloudTrail\"\n| filter eventname IN (\"CreateUser\", \"TerminateInstances\", \"RunInstances\")\n| sort asc _time\n| bin _time span = 5m\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| filter account_id NOT IN (\"462352741814\")\n| fields account_id, eventname, type, source_username,\ntarget_username, awsRegion, groupid, errorCode,\nuserAgent, srcaddr, username, bucketName, _time,\n_insert_time\n| alter pattern = if(eventname = \"CreateUser\", \"E1\", \"E2\")\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by source_username,\naccount_id\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events ~= \"E1,E2\"\n\n\n\n| alter aggregation_criteria = \"ileventdesc\",\naggregation_criteria1 = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see events related to services being disabled or changed to \"demand\" start via sc.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sc\\.exe\" or actor_process_file_original_name = \"sc.exe\") and ((action_process_image_command_line contains \" config \" and action_process_image_command_line contains \"start\") and (action_process_image_command_line contains \"disabled\" or action_process_image_command_line contains \"demand\")))\n\n\n\n"}
{"prompt": "I want to find events related to Active Directory replication happening from non-machine accounts on my endpoints.", "response": "preset = xdr_event_log\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter Properties = regextract(to_json_string(action_evtlog_data_fields)->Properties{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4662 and AccessMask = \"0x100\" and (Properties contains \"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2\" or Properties contains \"1131f6ad-9c07-11d1-f79f-00c04fc2dcd2\" or Properties contains \"89e95b76-444d-4c62-991a-0facbeda640c\")) and  not ((SubjectUserName ~= \".*\\$\" or SubjectUserName ~= \"MSOL\\_.*\"))\n\n\n\n"}
{"prompt": "I want to find all Cisco devices that have output from common CLI commands like \"show arp\", \"show ip interface\", or \"show version\".", "response": "datamodel\n| filter ( contains \"dir\" or  contains \"show arp\" or  contains \"show cdp\" or  contains \"show clock\" or  contains \"show ip interface\" or  contains \"show ip route\" or  contains \"show ip sockets\" or  contains \"show processes\" or  contains \"show ssh\" or  contains \"show users\" or  contains \"show version\")\n\n\n\n"}
{"prompt": "I want to see events related to UAC bypass attempts using Event Viewer RecentViews.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"\\\\Event Viewer\\\\RecentViews\" or action_process_image_command_line contains \"\\\\EventV~1\\\\RecentViews\") and action_process_image_command_line contains \">\")\n\n\n\n"}
{"prompt": "I want to see alerts for when a large number of account unlocks happen within a short period of time, specifically 500 or more unlocks within 5 minutes.", "response": "datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4767\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.target.user.username\n| filter matched_events >= 200\n| alter aggregation_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 500)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)\n"}
{"prompt": "I want to see how many times OAB path is accessed via suspicious user agents and when those events occurred.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.network.http.url ~= \"oab\\.xml\" and xdm.source.user_agent !~= \"microsoft|macoutlook\" and xdm.source.user_agent != \"-\"\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.ipv4\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "{I want to find instances where a process uses `net.exe` or `net1.exe` to stop a Windows service.} \n\n\nLet me know if you need any further assistance!", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name in (\"net.exe\", \"net1.exe\") or (action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\")) and action_process_image_command_line contains \" stop \")\n\n\n\n"}
{"prompt": "I want to find instances where wget.exe downloads files from known file-sharing domains.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wget\\.exe\" or actor_process_file_original_name = \"wget.exe\") and (action_process_image_command_line contains \".githubusercontent.com\" or action_process_image_command_line contains \"anonfiles.com\" or action_process_image_command_line contains \"cdn.discordapp.com\" or action_process_image_command_line contains \"cdn.discordapp.com/attachments/\" or action_process_image_command_line contains \"ddns.net\" or action_process_image_command_line contains \"dl.dropboxusercontent.com\" or action_process_image_command_line contains \"ghostbin.co\" or action_process_image_command_line contains \"glitch.me\" or action_process_image_command_line contains \"gofile.io\" or action_process_image_command_line contains \"hastebin.com\" or action_process_image_command_line contains \"mediafire.com\" or action_process_image_command_line contains \"mega.nz\" or action_process_image_command_line contains \"onrender.com\" or action_process_image_command_line contains \"paste.ee\" or action_process_image_command_line contains \"pastebin.com\" or action_process_image_command_line contains \"pastebin.pl\" or action_process_image_command_line contains \"pastetext.net\" or action_process_image_command_line contains \"privatlab.com\" or action_process_image_command_line contains \"privatlab.net\" or action_process_image_command_line contains \"send.exploit.in\" or action_process_image_command_line contains \"sendspace.com\" or action_process_image_command_line contains \"storage.googleapis.com\" or action_process_image_command_line contains \"storjshare.io\" or action_process_image_command_line contains \"supabase.co\" or action_process_image_command_line contains \"temp.sh\" or action_process_image_command_line contains \"transfer.sh\" or action_process_image_command_line contains \"ufile.io\") and action_process_image_command_line contains \"http\" and (action_process_image_command_line ~= \"\\s\\-O\\s\" or action_process_image_command_line contains \"--output-document\") and (action_process_image_command_line ~= \".*\\.ps1\" or action_process_image_command_line ~= \".*\\.ps1\\'\" or action_process_image_command_line ~= \".*\\.ps1\\\"\" or action_process_image_command_line ~= \".*\\.dat\" or action_process_image_command_line ~= \".*\\.dat\\'\" or action_process_image_command_line ~= \".*\\.dat\\\"\" or action_process_image_command_line ~= \".*\\.msi\" or action_process_image_command_line ~= \".*\\.msi\\'\" or action_process_image_command_line ~= \".*\\.msi\\\"\" or action_process_image_command_line ~= \".*\\.bat\" or action_process_image_command_line ~= \".*\\.bat\\'\" or action_process_image_command_line ~= \".*\\.bat\\\"\" or action_process_image_command_line ~= \".*\\.exe\" or action_process_image_command_line ~= \".*\\.exe\\'\" or action_process_image_command_line ~= \".*\\.exe\\\"\" or action_process_image_command_line ~= \".*\\.vbs\" or action_process_image_command_line ~= \".*\\.vbs\\'\" or action_process_image_command_line ~= \".*\\.vbs\\\"\" or action_process_image_command_line ~= \".*\\.vbe\" or action_process_image_command_line ~= \".*\\.vbe\\'\" or action_process_image_command_line ~= \".*\\.vbe\\\"\" or action_process_image_command_line ~= \".*\\.hta\" or action_process_image_command_line ~= \".*\\.hta\\'\" or action_process_image_command_line ~= \".*\\.hta\\\"\" or action_process_image_command_line ~= \".*\\.dll\" or action_process_image_command_line ~= \".*\\.dll\\'\" or action_process_image_command_line ~= \".*\\.dll\\\"\" or action_process_image_command_line ~= \".*\\.psm1\" or action_process_image_command_line ~= \".*\\.psm1\\'\" or action_process_image_command_line ~= \".*\\.psm1\\\"\"))\n\n\n\n"}
{"prompt": "I want to find instances of PowerShell scripts downloading files from the web.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \".DownloadString(\" or action_process_image_command_line contains \".DownloadFile(\" or action_process_image_command_line contains \"Invoke-WebRequest \" or action_process_image_command_line contains \"iwr \")\n\n\n\n"}
{"prompt": "I want to find suspicious DNS queries that are looking up IP information from known services.", "response": "datamodel\n| filter (xdm.network.dns.dns_question.name in (\"www.ip.cn\", \"l2.io\") or (xdm.network.dns.dns_question.name contains \"api.2ip.ua\" or xdm.network.dns.dns_question.name contains \"api.bigdatacloud.net\" or xdm.network.dns.dns_question.name contains \"api.ipify.org\" or xdm.network.dns.dns_question.name contains \"bot.whatismyipaddress.com\" or xdm.network.dns.dns_question.name contains \"canireachthe.net\" or xdm.network.dns.dns_question.name contains \"checkip.amazonaws.com\" or xdm.network.dns.dns_question.name contains \"checkip.dyndns.org\" or xdm.network.dns.dns_question.name contains \"curlmyip.com\" or xdm.network.dns.dns_question.name contains \"db-ip.com\" or xdm.network.dns.dns_question.name contains \"edns.ip-api.com\" or xdm.network.dns.dns_question.name contains \"eth0.me\" or xdm.network.dns.dns_question.name contains \"freegeoip.app\" or xdm.network.dns.dns_question.name contains \"geoipy.com\" or xdm.network.dns.dns_question.name contains \"getip.pro\" or xdm.network.dns.dns_question.name contains \"icanhazip.com\" or xdm.network.dns.dns_question.name contains \"ident.me\" or xdm.network.dns.dns_question.name contains \"ifconfig.io\" or xdm.network.dns.dns_question.name contains \"ifconfig.me\" or xdm.network.dns.dns_question.name contains \"ip-api.com\" or xdm.network.dns.dns_question.name contains \"ip.360.cn\" or xdm.network.dns.dns_question.name contains \"ip.anysrc.net\" or xdm.network.dns.dns_question.name contains \"ip.taobao.com\" or xdm.network.dns.dns_question.name contains \"ip.tyk.nu\" or xdm.network.dns.dns_question.name contains \"ipaddressworld.com\" or xdm.network.dns.dns_question.name contains \"ipapi.co\" or xdm.network.dns.dns_question.name contains \"ipconfig.io\" or xdm.network.dns.dns_question.name contains \"ipecho.net\" or xdm.network.dns.dns_question.name contains \"ipinfo.io\" or xdm.network.dns.dns_question.name contains \"ipip.net\" or xdm.network.dns.dns_question.name contains \"ipof.in\" or xdm.network.dns.dns_question.name contains \"ipv4.icanhazip.com\" or xdm.network.dns.dns_question.name contains \"ipv4bot.whatismyipaddress.com\" or xdm.network.dns.dns_question.name contains \"ipv6-test.com\" or xdm.network.dns.dns_question.name contains \"ipwho.is\" or xdm.network.dns.dns_question.name contains \"jsonip.com\" or xdm.network.dns.dns_question.name contains \"myexternalip.com\" or xdm.network.dns.dns_question.name contains \"seeip.org\" or xdm.network.dns.dns_question.name contains \"wgetip.com\" or xdm.network.dns.dns_question.name contains \"whatismyip.akamai.com\" or xdm.network.dns.dns_question.name contains \"whois.pconline.com.cn\" or xdm.network.dns.dns_question.name contains \"wtfismyip.com\")) and  not ((xdm.target.process.name ~= \".*\\\\brave\\.exe\" or xdm.source.process.name ~= \".*\\\\brave\\.exe\") or (xdm.target.process.name in (\"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\", \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\") or xdm.source.process.name in (\"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\", \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\")) or (xdm.target.process.name in (\"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\", \"C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe\") or xdm.source.process.name in (\"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\", \"C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe\")) or (xdm.target.process.name in (\"C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe\", \"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\") or xdm.source.process.name in (\"C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe\", \"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\")) or (xdm.target.process.name ~= \".*\\\\maxthon\\.exe\" or xdm.source.process.name ~= \".*\\\\maxthon\\.exe\") or ((xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\.*\") or (xdm.target.process.name ~= \".*\\\\WindowsApps\\\\MicrosoftEdge\\.exe\" or xdm.source.process.name ~= \".*\\\\WindowsApps\\\\MicrosoftEdge\\.exe\") or (xdm.target.process.name in (\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\", \"C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\") or xdm.source.process.name in (\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\", \"C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\"))) or (((xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeCore\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\\\EdgeCore\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeCore\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\\\EdgeCore\\\\.*\")) and ((xdm.target.process.name ~= \".*\\\\msedge\\.exe\" or xdm.target.process.name ~= \".*\\\\msedgewebview2\\.exe\") or (xdm.source.process.name ~= \".*\\\\msedge\\.exe\" or xdm.source.process.name ~= \".*\\\\msedgewebview2\\.exe\"))) or (xdm.target.process.name ~= \".*\\\\opera\\.exe\" or xdm.source.process.name ~= \".*\\\\opera\\.exe\") or (xdm.target.process.name ~= \".*\\\\safari\\.exe\" or xdm.source.process.name ~= \".*\\\\safari\\.exe\") or (xdm.target.process.name ~= \".*\\\\seamonkey\\.exe\" or xdm.source.process.name ~= \".*\\\\seamonkey\\.exe\") or (xdm.target.process.name ~= \".*\\\\vivaldi\\.exe\" or xdm.source.process.name ~= \".*\\\\vivaldi\\.exe\") or (xdm.target.process.name ~= \".*\\\\whale\\.exe\" or xdm.source.process.name ~= \".*\\\\whale\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances of PowerShell scripts executing Dnscat2 for potential exfiltration attacks.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Start-Dnscat2\"\n\n\n\n"}
{"prompt": "I want to see alerts for when all backups are deleted via wbadmin.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wbadmin\\.exe\" or actor_process_file_original_name = \"WBADMIN.EXE\") and ((action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"backup\") and action_process_image_command_line contains \"keepVersions:0\"))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that use Send-MailMessage to exfiltrate data over SMTP.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Send-MailMessage\" and  not (ScriptBlockText contains \"CmdletsToExport\")\n\n\n\n"}
{"prompt": "I want to see Cortex XQL queries that detect obfuscation techniques using VAR++ LAUNCHER OBFUSCATION - System.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \"&&set\" and actor_process_image_path contains \"cmd\" and actor_process_image_path contains \"/c\" and actor_process_image_path contains \"-f\") and (actor_process_image_path contains \"{0}\" or actor_process_image_path contains \"{1}\" or actor_process_image_path contains \"{2}\" or actor_process_image_path contains \"{3}\" or actor_process_image_path contains \"{4}\" or actor_process_image_path contains \"{5}\"))\n\n\n\n"}
{"prompt": "I want to find suspicious processes on endpoints that are trying to discover local accounts.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" and (action_process_image_command_line contains \" /c\" and action_process_image_command_line contains \"dir \" and action_process_image_command_line ~= \".*\\\\Users\\\\.*\")) and  not (action_process_image_command_line contains \" rmdir \")) or (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") and action_process_image_command_line contains \"user\") and  not ((action_process_image_command_line contains \"/domain\" or action_process_image_command_line contains \"/add\" or action_process_image_command_line contains \"/delete\" or action_process_image_command_line contains \"/active\" or action_process_image_command_line contains \"/expires\" or action_process_image_command_line contains \"/passwordreq\" or action_process_image_command_line contains \"/scriptpath\" or action_process_image_command_line contains \"/times\" or action_process_image_command_line contains \"/workstations\"))) or ((action_process_image_path ~= \".*\\\\whoami\\.exe\" or action_process_image_path ~= \".*\\\\quser\\.exe\" or action_process_image_path ~= \".*\\\\qwinsta\\.exe\") or (action_process_image_path ~= \".*\\\\wmic\\.exe\" and (action_process_image_command_line contains \"useraccount\" and action_process_image_command_line contains \"get\")) or (action_process_image_path ~= \".*\\\\cmdkey\\.exe\" and action_process_image_command_line contains \" /l\"))\n\n\n\n"}
{"prompt": "I want to see events related to Net.EXE being used with commands that involve users, groups, shares, or account management.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and (action_process_image_command_line contains \" accounts\" or action_process_image_command_line contains \" group\" or action_process_image_command_line contains \" localgroup\" or action_process_image_command_line contains \" share\" or action_process_image_command_line contains \" start\" or action_process_image_command_line contains \" stop \" or action_process_image_command_line contains \" user\" or action_process_image_command_line contains \" view\"))\n\n\n\n"}
{"prompt": "I want to detect if an attacker is using the Microsoft Visual Studio Debugger (\"vsjitdebugger.exe\") to execute malicious code disguised as a legitimate process.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\vsjitdebugger\\.exe\" and  not (action_process_image_path ~= \".*\\\\vsimmersiveactivatehelper.*\\.exe\" or action_process_image_path ~= \".*\\\\devenv\\.exe\")\n\n\n\n"}
{"prompt": "I want to find potential C2 communication for the Goofy Guineapig backdoor based on HTTP requests with specific browser information and domain.", "response": "datamodel\n| filter (xdm.network.http.browser = \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/54.0.2840.71 Safari/537.36\" and xdm.network.http.domain = \"static.tcplog.com\")\n\n\n\n"}
{"prompt": "I want to find events related to shadow copy deletion on endpoints using common operating system utilities like PowerShell, WMIC, and VSSADMIN.", "response": "preset = xdr_process\n| filter ((((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\vssadmin\\.exe\" or action_process_image_path ~= \".*\\\\diskshadow\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\", \"wmic.exe\", \"VSSADMIN.EXE\", \"diskshadow.exe\")) and (action_process_image_command_line contains \"shadow\" and action_process_image_command_line contains \"delete\"))) or (((action_process_image_path ~= \".*\\\\wbadmin\\.exe\" or actor_process_file_original_name = \"WBADMIN.EXE\") and (action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"catalog\" and action_process_image_command_line contains \"quiet\"))) or (((action_process_image_path ~= \".*\\\\vssadmin\\.exe\" or actor_process_file_original_name = \"VSSADMIN.EXE\") and ((action_process_image_command_line contains \"resize\" and action_process_image_command_line contains \"shadowstorage\") and (action_process_image_command_line contains \"unbounded\" or action_process_image_command_line contains \"/MaxSize=\"))))\n\n\n\n"}
{"prompt": "I want to find instances of malicious PowerShell code that utilize CL_Mutexverifiers.ps1 and attempt to execute commands after process cancellation.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"CL_Mutexverifiers.ps1\" and ScriptBlockText contains \"runAfterCancelProcess\")\n\n\n\n"}
{"prompt": "I want to find suspicious PowerShell activity where a process is started using the -PassThru flag.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Start-Process\" and ScriptBlockText contains \"-PassThru \" and ScriptBlockText contains \"-FilePath \")\n\n\n\n"}
{"prompt": "I want to see all changes made to AWS IAM policies, including who made the changes and what specific actions were taken.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name = \"EV_CloudTrail\"\n| filter eventName IN (\"DeleteGroupPolicy\", \"DeleteRolePolicy\", \"DeleteUserPolicy\", \"PutGroupPolicy\", \"PutRolePolicy\", \"PutUserPolicy\", \"CreatePolicy\", \"DeletePolicy\", \"CreatePolicyVersion\", \"DeletePolicyVersion\", \"AttachRolePolicy\", \"DetachRolePolicy\", \"AttachUserPolicy\", \"DetachUserPolicy\", \"AttachGroupPolicy\", \"DetachGroupPolicy\")\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter target_username !~= \"AWS-QuickSetup-\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect suspicious file or folder permissions modifications on endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\cacls\\.exe\" or action_process_image_path ~= \".*\\\\icacls\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") and (action_process_image_command_line contains \"/grant\" or action_process_image_command_line contains \"/setowner\" or action_process_image_command_line contains \"/inheritance:r\")) or (action_process_image_path ~= \".*\\\\attrib\\.exe\" and action_process_image_command_line contains \"-r\") or action_process_image_path ~= \".*\\\\takeown\\.exe\") and  not (action_process_image_command_line ~= \".*ICACLS\\ C\\:\\\\ProgramData\\\\dynatrace\\\\gateway\\\\config\\\\connectivity\\.history\\ \\/reset\" or (action_process_image_command_line contains \"ICACLS C:\\\\ProgramData\\\\dynatrace\\\\gateway\\\\config\\\\config.properties /grant :r \" and action_process_image_command_line contains \"S-1-5-19:F\") or (action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Programs\\\\Microsoft VS Code\" or action_process_image_command_line contains \":\\\\Program Files\\\\Microsoft VS Code\") or (action_process_image_command_line contains \":\\\\Program Files (x86)\\\\Avira\" or action_process_image_command_line contains \":\\\\Program Files\\\\Avira\"))\n\n\n\n"}
{"prompt": "I want to see events related to Tor client or browser executions on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\tor\\.exe\" or action_process_image_path ~= \".*\\\\Tor\\ Browser\\\\Browser\\\\firefox\\.exe\")\n\n\n\n"}
{"prompt": "I want to see events where someone has tried to write to or delete desktop.ini files on endpoints.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| alter AccessList = regextract(to_json_string(action_evtlog_data_fields)->AccessList{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ObjectType = \"File\" and RelativeTargetName ~= \".*\\\\desktop\\.ini\" and (AccessList contains \"WriteData\" or AccessList contains \"DELETE\" or AccessList contains \"WriteDAC\" or AccessList contains \"AppendData\" or AccessList contains \"AddSubdirectory\"))\n\n\n\n"}
{"prompt": "I want to see all VPN logins from countries **outside** of Argentina, Australia, Brazil, etc. on our Fortigate firewall. I also want to label any logins from \"New Avalon\" specifically.", "response": "datamodel dataset = fortinet_fortigate_raw\n| filter (xdm.event.original_event_type in (\"0101039424\"))\n| iploc xdm.target.ipv4 loc_country as TargetIPCountry\n| alter xdm.target.location.country = if(xdm.target.location.country in (NULL, null, \"\"\"\"\"\"), TargetIPCountry, xdm.target.location.country)\n| filter xdm.target.location.country not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Dominican Republic\", \"Denmark\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\")\n| alter Desc_String = if(fortinet_fortigate_raw._broker_device_name contains \"NEWAVLON\", \"New Avalon\", \".\")\n| fields *\n| view column order = populated"}
{"prompt": "I want to see all Windows Defender threat detections.", "response": "datamodel\n| filter xdm.event.id in (1006, 1015, 1116, 1117)\n\n\n\n"}
{"prompt": "I want to see events where PowerShell is used to export certificates.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Export-PfxCertificate \" or action_process_image_command_line contains \"Export-Certificate \")\n\n\n\n"}
{"prompt": "I want to see events related to changes made to AWS Network Gateways, including creating, deleting, attaching, and detaching gateways.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = json_extract_scalar(requestParameters, \"$.groupId\"),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"CreateCustomerGateway\", \"DeleteCustomerGateway\", \"AttachInternetGateway\", \"CreateInternetGateway\", \"DeleteInternetGateway\", \"DetachInternetGateway\")\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious activities related to kernel dumps using Dtrace on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\dtrace\\.exe\" and action_process_image_command_line contains \"lkd(0)\") or (action_process_image_command_line contains \"syscall:::return\" and action_process_image_command_line contains \"lkd(\"))\n\n\n\n"}
{"prompt": "I want to find instances where the \"fsutil\" command is used to set the SymlinkEvaluation behavior.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\fsutil\\.exe\" or actor_process_file_original_name = \"fsutil.exe\") and (action_process_image_command_line contains \"behavior \" and action_process_image_command_line contains \"set \" and action_process_image_command_line contains \"SymlinkEvaluation\"))\n\n\n\n"}
{"prompt": "I want to detect if someone is using grep to find out information about the operating system architecture.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/grep\" and (action_process_image_command_line ~= \".*aarch64\" or action_process_image_command_line ~= \".*arm\" or action_process_image_command_line ~= \".*i386\" or action_process_image_command_line ~= \".*i686\" or action_process_image_command_line ~= \".*mips\" or action_process_image_command_line ~= \".*x86\\_64\"))\n\n\n\n"}
{"prompt": "I want to find instances where SettingSyncHost.exe is being used as a LOLBin by analyzing process creation events on endpoints.", "response": "preset = xdr_process\n| filter  not ((action_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\")) and (actor_process_image_command_line contains \"cmd.exe /c\" and actor_process_image_command_line contains \"RoamDiag.cmd\" and actor_process_image_command_line contains \"-outputpath\")\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple URLs categorized as botnets based on Zscaler logs.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category ~= \"botnet\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 5"}
{"prompt": "I want to find events where malware is using rundll32.exe and shell32.dll to launch obfuscated PowerShell code.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \"rundll32.exe\" and actor_process_image_path contains \"shell32.dll\" and actor_process_image_path contains \"shellexec_rundll\" and actor_process_image_path contains \"powershell\"))\n\n\n\n"}
{"prompt": "I want to see Windows events with IDs 2887 and 2889 from XDR, including details about the user and group involved.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id in (2887, 2889)\n| alter SourceUserName = json_extract_scalar(action_evtlog_data_fields, \"$.SubjectUserName\"),\nSourceDomainName = json_extract_scalar(action_evtlog_data_fields, \"$.SubjectDomainName\"),\nTargetUserName = json_extract_scalar(action_evtlog_data_fields, \"$.TargetUserName\"),\nTargetDomainName = json_extract_scalar(action_evtlog_data_fields, \"$.TargetDomainName\"),\nTargetGroupName = arrayindex(regextract(action_evtlog_message, \"Group Name\\:\\t\\t(.*?)\\r\"), 0)\n| filter SourceUserName not contains \"$\" and TargetUserName not contains \"$\""}
{"prompt": "I want to find events where services are configured with image paths pointing to folders like AppData or ProgramData, which might indicate attacker activity.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"ControlSet\" and action_registry_key_name ~= \".*\\\\Services\\\\.*\") and action_registry_key_name ~= \".*\\\\ImagePath\" and ((action_registry_value_name ~= \".*\\:\\\\ProgramData\\\\.*\" or action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_registry_value_name ~= \".*\\\\AppData\\\\Roaming\\\\.*\") or (action_registry_data ~= \".*\\:\\\\ProgramData\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Roaming\\\\.*\"))) and  not (((action_registry_key_name ~= \".*\\\\Services\\\\WinDefend\\\\.*\" or action_registry_key_name contains \"\\\\Services\\\\MpKs\") and (action_registry_value_name ~= \".*C\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\.*\" or action_registry_data ~= \".*C\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\.*\"))) and  not ((action_registry_key_name contains \"\\\\Services\\\\ZoomCptService\" and (action_registry_value_name contains \"C:\\\\Program Files\\\\Common Files\\\\Zoom\\\\Support\\\\CptService.exe\" or action_registry_data contains \"C:\\\\Program Files\\\\Common Files\\\\Zoom\\\\Support\\\\CptService.exe\")) or (action_registry_key_name contains \"\\\\Services\\\\MBAMInstallerService\" and ((action_registry_value_name ~= \".*C\\:\\\\Users\\\\.*\" or action_registry_data ~= \".*C\\:\\\\Users\\\\.*\") and (action_registry_value_name contains \"AppData\\\\Local\\\\Temp\\\\MBAMInstallerService.exe\" or action_registry_data contains \"AppData\\\\Local\\\\Temp\\\\MBAMInstallerService.exe\"))))\n\n\n\n"}
{"prompt": "I want to find suspicious copies of programs from system directories like System32, SysWOW64, and WinSxS.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" and action_process_image_command_line contains \"copy \") or ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \"copy-item\" or action_process_image_command_line contains \" copy \" or action_process_image_command_line contains \"cpi \" or action_process_image_command_line contains \" cp \")) or ((action_process_image_path ~= \".*\\\\robocopy\\.exe\" or action_process_image_path ~= \".*\\\\xcopy\\.exe\") or actor_process_file_original_name in (\"robocopy.exe\", \"XCOPY.EXE\"))) and (action_process_image_command_line contains \"\\\\System32\" or action_process_image_command_line contains \"\\\\SysWOW64\" or action_process_image_command_line contains \"\\\\WinSxS\")\n\n\n\n"}
{"prompt": "I want to see events related to changes in Azure Kubernetes Network Policies.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/NETWORKING.K8S.IO/NETWORKPOLICIES/WRITE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/NETWORKING.K8S.IO/NETWORKPOLICIES/DELETE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/EXTENSIONS/NETWORKPOLICIES/WRITE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/EXTENSIONS/NETWORKPOLICIES/DELETE\")\n\n\n\n"}
{"prompt": "I want to see alerts about when EKS clusters are created or deleted on AWS.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"eks.amazonaws.com\" and eventName in (\"CreateCluster\", \"DeleteCluster\"))\n\n\n\n"}
{"prompt": "I want to see all instances of delegation access provisioning recorded in Camssiem, along with details about the delegator, delegatee, and the specific access granted.", "response": "config case_sensitive = false\n| dataset IN (cams_Camssiem_audit_raw, cams_Camssiem_raw)\n| filter txtProvActionStatus != \"Delete\" and txtDelegatedEmpNo != NULL and txtdelegatedempno ~= \"(\\d)+\"\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_dst, company_name as companyname1\n) as JT1 JT1.companyname1 = trim(EmpNo)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_src, company_name as companyname2\n) as JT2 JT2.companyname2 = trim(Access_Provided_By)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as fullname, company_name as companyname3\n) as JT3 JT3.companyname3 = trim(txtDelegatedEmpNo)\n| alter EmpNo = trim(EmpNo),\ntxtDelegatedEmpNo = trim(txtDelegatedEmpNo),\nAccess_Provided_By = trim(Access_Provided_By)\n| alter aggregation_criteria = \"ileventuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious registry entries related to keyboard layout IMEs that might be used by attackers to load malicious DLLs.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Control\\\\Keyboard\\ Layouts\\\\.*\" and action_registry_key_name contains \"Ime File\") and (((action_registry_value_name ~= \".*\\:\\\\Perflogs\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or action_registry_value_name contains \"\\\\Temporary Internet\") or (action_registry_data ~= \".*\\:\\\\Perflogs\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or action_registry_data contains \"\\\\Temporary Internet\")) or (((action_registry_value_name ~= \".*\\:\\\\Users\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\.*\") and (action_registry_value_name ~= \".*\\\\Favorites\\\\.*\" or action_registry_data ~= \".*\\\\Favorites\\\\.*\")) or ((action_registry_value_name ~= \".*\\:\\\\Users\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\.*\") and (action_registry_value_name ~= \".*\\\\Favourites\\\\.*\" or action_registry_data ~= \".*\\\\Favourites\\\\.*\")) or ((action_registry_value_name ~= \".*\\:\\\\Users\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\.*\") and (action_registry_value_name ~= \".*\\\\Contacts\\\\.*\" or action_registry_data ~= \".*\\\\Contacts\\\\.*\"))))\n\n\n\n"}
{"prompt": "I want to find Windows accounts that were disabled and then enabled again within two hours.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id in (4725, 4722)\n| alter TUserName = json_extract_scalar(action_evtlog_data_fields, \"$.SubjectUserName\"),\nAccountName = arrayindex(regextract(action_evtlog_message, \"Account Name\\:(.*)\"), 0),\nGrpName = arrayindex(regextract(action_evtlog_message, \"Group Name\\:(.*)\"), 0),\nTargetDomainName = json_extract_scalar(action_evtlog_data_fields, \"$.TargetDomainName\"),\nSamAccountName = json_extract_scalar(action_evtlog_data_fields, \"$.SamAccountName\")\n| filter TUserName !~= \".*?$\"\n| comp earliest(_time) as FirstEvtTime,\nlatest(_time) as LastEvtTime,\ncount_distinct(action_evtlog_event_id) as UniqEvtIDs,\nvalues(action_evtlog_event_id) as EvtIds by AccountName"}
{"prompt": "I want to detect instances of CrackMapExec running on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\crackmapexec\\.exe\"\n\n\n\n"}
{"prompt": " I want to see events related to the \"Triple Cross eBPF Rootkit Default LockFile\" that involve the file \"/tmp/rootlog\" on Linux systems. ", "response": "preset = xdr_file\n| filter action_file_name = \"/tmp/rootlog\"\n\n\n\n"}
{"prompt": "I want to see Cortex XDR alerts about potentially suspicious named pipes created using mkfifo, especially those located in the /tmp directory.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/mkfifo\" and action_process_image_command_line contains \" /tmp/\")\n\n\n\n"}
{"prompt": "I want to detect malicious activity related to Invoke-Obfuscation VAR+ Launcher on endpoints by looking for system calls that trigger obfuscation.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \"cmd\" and actor_process_image_path contains \"\\\"set\" and actor_process_image_path contains \"-f\") and (actor_process_image_path contains \"/c\" or actor_process_image_path contains \"/r\"))\n\n\n\n"}
{"prompt": "I want to find out if anyone is trying to check or change system time on my endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") and action_process_image_command_line contains \"time\") or (action_process_image_path ~= \".*\\\\w32tm\\.exe\" and action_process_image_command_line contains \"tz\"))\n\n\n\n"}
{"prompt": " I want to find instances where Tomcat web server logs have been deleted on Windows systems. ", "response": "datamodel\n| filter ((xdm.target.file.filename contains \"\\\\Tomcat\" and xdm.target.file.filename ~= \".*\\\\logs\\\\.*\") and (xdm.target.file.filename contains \"catalina.\" or xdm.target.file.filename contains \"_access_log.\" or xdm.target.file.filename contains \"localhost.\"))\n\n\n\n"}
{"prompt": "I want to find threats where an attacker is hijacking legitimate Remote Desktop Protocol (RDP) sessions to move malware into the Startup folder.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\mstsc\\.exe\" or xdm.source.process.name ~= \".*\\\\mstsc\\.exe\") and xdm.target.file.filename ~= \".*\\\\Microsoft\\\\Windows\\\\Start\\ Menu\\\\Programs\\\\Startup\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find instances where the sc.exe process is used to modify service security descriptors using suspicious command line arguments.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sc\\.exe\" or actor_process_file_original_name = \"sc.exe\") and (action_process_image_command_line contains \"sdset\" and action_process_image_command_line contains \"A;\") and (action_process_image_command_line contains \";IU\" or action_process_image_command_line contains \";SU\" or action_process_image_command_line contains \";BA\" or action_process_image_command_line contains \";SY\" or action_process_image_command_line contains \";WD\"))\n\n\n\n"}
{"prompt": "I want to see a list of hosts showing frequent Password Spraying attacks based on Windows Event Log data with descriptions containing \"0xc000006a\" or \"0xc0000064\", grouped by 10-minute intervals over the past day.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id = \"4776\" and (xdm.event.description contains \"0xc000006a\" or xdm.event.description contains \"0xc0000064\") and xdm.source.ipv4 not in (\"10.205.216.51\", \"10.197.8.41\", \"192.168.150.200\", \"172.17.131.72\", \"10.17.193.142\", \"10.39.193.41\", \"10.39.65.12\", \"10.39.33.14\", \"10.39.97.32\", \"10.255.40.19\", \"172.31.22.230\", \"10.148.1.240\", \"192.168.77.106\", \"10.224.1.240\", \"10.225.1.240\", \"10.225.33.240\", \"10.213.33.240\", \"172.19.0.240\", \"10.75.98.240\", \"10.5.81.142\", \"10.75.2.240\", \"10.5.65.240\", \"10.5.97.240\", \"10.253.69.24\", \"10.78.3.28\", \"10.5.17.240\", \"10.253.73.40\", \"172.19.34.100\", \"10.5.161.240\", \"172.19.110.240\", \"10.130.33.239\", \"10.130.97.240\", \"10.130.128.240\", \"10.130.161.240\", \"10.212.129.240\", \"10.215.1.240\", \"10.214.1.240\", \"172.22.0.240\", \"10.214.193.240\", \"10.214.33.240\", \"10.215.65.240\", \"10.214.66.240\", \"10.212.16.240\", \"10.215.33.240\", \"10.215.161.239\", \"192.168.4.240\", \"172.24.0.240\", \"10.212.161.240\", \"10.61.33.240\", \"10.61.65.240\", \"10.35.129.240\", \"10.35.33.240\", \"10.35.81.240\", \"10.140.1.240\", \"10.140.65.240\", \"10.140.33.240\", \"10.226.1.240\", \"10.189.20.42\", \"172.29.255.203\", \"10.134.148.5\", \"10.136.116.5\", \"10.136.36.5\", \"10.136.20.5\", \"10.134.132.5\", \"10.136.177.5\", \"10.136.132.5\", \"10.133.68.5\", \"10.133.52.5\", \"10.133.148.5\", \"10.135.0.5\", \"10.134.100.5\", \"10.134.84.5\", \"10.133.84.5\", \"10.133.36.5\", \"10.134.68.5\", \"10.134.116.5\", \"10.104.24.70\", \"192.168.3.202\", \"10.18.53.136\", \"10.8.50.42\", \"10.8.114.209\", \"10.28.27.30\", \"10.190.63.200\", \"10.3.1.25\", \"10.38.100.17\")\n| alter bin_time = _time\n| bin bin_time span = 10m timeshift = 1705881600\n| comp count(xdm.event.description) as event_count,\nvalues(xdm.event.description) as events by bin_time,\nxdm.target.host.hostname,\nxdm.event.id\n| filter event_count >= 10\n| fields *"}
{"prompt": "I want to find suspicious instances of the \"schtasks\" executable being used to create tasks in the AppData folder, especially when they involve remote execution or system accounts.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \"/Create\" and action_process_image_command_line contains \"/RU\" and action_process_image_command_line contains \"/TR\" and action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\.*\") and (action_process_image_command_line contains \"NT AUT\" or action_process_image_command_line contains \" SYSTEM \")) and  not (((actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and actor_process_image_path contains \"TeamViewer_.exe\") and action_process_image_path ~= \".*\\\\schtasks\\.exe\" and action_process_image_command_line contains \"/TN TVInstallRestore\"))\n\n\n\n"}
{"prompt": "I want to find users who have had their accounts locked out multiple times recently.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4740\") and xdm.source.host.hostname != null\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp count() as events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by xdm.target.user.username\n| filter events >= 4\n| alter aggregation_criteria = \"ibpmsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to detect suspicious loads of the VSS_PS.dll file.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\vss\\_ps\\.dll\" and  not ((actor_process_image_path ~= \"C\\:\\\\Windows\\\\.*\" and (actor_process_image_path ~= \".*\\\\clussvc\\.exe\" or actor_process_image_path ~= \".*\\\\dismhost\\.exe\" or actor_process_image_path ~= \".*\\\\dllhost\\.exe\" or actor_process_image_path ~= \".*\\\\inetsrv\\\\appcmd\\.exe\" or actor_process_image_path ~= \".*\\\\inetsrv\\\\iissetup\\.exe\" or actor_process_image_path ~= \".*\\\\msiexec\\.exe\" or actor_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_image_path ~= \".*\\\\searchindexer\\.exe\" or actor_process_image_path ~= \".*\\\\srtasks\\.exe\" or actor_process_image_path ~= \".*\\\\svchost\\.exe\" or actor_process_image_path ~= \".*\\\\System32\\\\SystemPropertiesAdvanced\\.exe\" or actor_process_image_path ~= \".*\\\\taskhostw\\.exe\" or actor_process_image_path ~= \".*\\\\thor\\.exe\" or actor_process_image_path ~= \".*\\\\thor64\\.exe\" or actor_process_image_path ~= \".*\\\\tiworker\\.exe\" or actor_process_image_path ~= \".*\\\\vssvc\\.exe\" or actor_process_image_path ~= \".*\\\\WmiPrvSE\\.exe\" or actor_process_image_path ~= \".*\\\\wsmprovhost\\.exe\")) or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\") or (actor_process_image_command_line ~= \"C\\:\\\\\\$WinREAgent\\\\Scratch\\\\.*\" and actor_process_image_command_line contains \"\\\\dismhost.exe {\") or actor_process_image_path = \"None\")\n\n\n\n"}
{"prompt": "I want to see suspicious container activity by identifying processes that access `/proc` or related directories and use common Linux utilities like `awk`, `cat`, `grep`, etc.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*awk\" or action_process_image_path ~= \".*\\/cat\" or action_process_image_path ~= \".*grep\" or action_process_image_path ~= \".*\\/head\" or action_process_image_path ~= \".*\\/less\" or action_process_image_path ~= \".*\\/more\" or action_process_image_path ~= \".*\\/nl\" or action_process_image_path ~= \".*\\/tail\") and (action_process_image_command_line contains \"/proc/2/\" or (action_process_image_command_line contains \"/proc/\" and (action_process_image_command_line ~= \".*\\/cgroup\" or action_process_image_command_line ~= \".*\\/sched\")))\n\n\n\n"}
{"prompt": "I want to find instances where OneNote files (.one or .onepkg) are dropped in suspicious locations like the Temp folder or Public folder, but not if they are directly related to legitimate Office processes.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or xdm.target.file.filename ~= \".*\\\\Users\\\\Public\\\\.*\" or xdm.target.file.filename ~= \".*\\\\Windows\\\\Temp\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Temp\\\\.*\") and (xdm.target.file.filename ~= \".*\\.one\" or xdm.target.file.filename ~= \".*\\.onepkg\")) and  not (((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\.*\") and (xdm.target.process.name ~= \".*\\\\ONENOTE\\.EXE\" or xdm.source.process.name ~= \".*\\\\ONENOTE\\.EXE\")))\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to ntdsutil.exe being used for Active Directory manipulation.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\ntdsutil\\.exe\" or actor_process_file_original_name = \"ntdsutil.exe\") and ((action_process_image_command_line contains \"snapshot\" and action_process_image_command_line contains \"mount \") or (action_process_image_command_line contains \"ac\" and action_process_image_command_line contains \" i\" and action_process_image_command_line contains \" ntds\")))\n\n\n\n"}
{"prompt": "I want to see Windows DNS entries that were modified, created, or deleted, excluding those from known system accounts and with additional context based on the collector's IP address.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (5136, 5137, 5141) and (event_data -> ObjectClass in (\"dnsNode\"))\n| alter ObjectDN = event_data -> ObjectDN,\nDSName = event_data -> DSName,\nSubjectUserName = event_data -> SubjectUserName,\nDSType = event_data -> DSType,\nObjectClass = event_data -> ObjectClass,\nAppCorrelationID = event_data -> AppCorrelationID,\nAttributeValue = event_data -> AttributeValue,\nOperationType = event_data -> OperationType,\nAttributeLDAPDisplayName = event_data -> AttributeLDAPDisplayName,\nSubjectDomainName = event_data -> SubjectDomainName,\nObjectGUID = event_data -> ObjectGUID,\nSubjectUserSid = event_data -> SubjectUserSid,\nOpCorrelationID = event_data -> OpCorrelationID,\nAttributeSyntaxOID = event_data -> AttributeSyntaxOID,\nSubjectLogonId = event_data -> SubjectLogonId,\nevent_id_description = if(event_id = 5136, \"A directory service object was MODIFIED\", if(event_id = 5137, \"A directory service object was CREATED\", if(event_id = 5141, \"A directory service object was DELETED\")))\n| filter (SubjectUserName not in (\"\"\"\"\"\", null, NULL, \"svc_DhcpDnsUpdate\", \"SYSTEM\", \"-\") and SubjectUserName not contains \"\"\"$\"\"\")\n| alter Desc_String = if(incidr(_collector_internal_ip_address, \"10.208.0.0/16\"), \"New Avalon\", if(incidr(_collector_internal_ip_address, \"10.38.0.0/16\"), \"New Avalon\", \".\"))\n| fields event_id, event_id_description, event_action, event_result,\nSubjectUserName, host_name, _collector_hostname,\ncomputer_name, DSName, message, event_data, *"}
{"prompt": "I want to find instances where the Disable-WindowsOptionalFeature PowerShell cmdlet is used to disable Windows Defender features or related components.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Disable-WindowsOptionalFeature\" and ScriptBlockText contains \"-Online\" and ScriptBlockText contains \"-FeatureName\") and (ScriptBlockText contains \"Windows-Defender-Gui\" or ScriptBlockText contains \"Windows-Defender-Features\" or ScriptBlockText contains \"Windows-Defender\" or ScriptBlockText contains \"Windows-Defender-ApplicationGuard\"))\n\n\n\n"}
{"prompt": "I want to find instances of processes on Linux endpoints that are actively performing file and directory discovery.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/file\" and action_process_image_command_line ~= \"(.){200,}\") or (action_process_image_path ~= \".*\\/ls\" and action_process_image_command_line contains \"-R\") or action_process_image_path ~= \".*\\/find\" or action_process_image_path ~= \".*\\/tree\")\n\n\n\n"}
{"prompt": "I want to find activity related to a backdoor that uses \"updata.exe\" and connects with a config server using msdtc and starts itself automatically.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\updata\\.exe\" and (action_process_image_command_line contains \"config\" and action_process_image_command_line contains \"msdtc\" and action_process_image_command_line contains \"start\" and action_process_image_command_line contains \"auto\"))\n\n\n\n"}
{"prompt": "I want to see when profiles were deleted from Swift applications.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"profile deleted\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious instances of PsExec being used on my endpoints based on event logs.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName = \"\\\\\\\\\\*\\\\IPC$\" and (RelativeTargetName ~= \".*\\-stdin\" or RelativeTargetName ~= \".*\\-stdout\" or RelativeTargetName ~= \".*\\-stderr\")) and  not (RelativeTargetName ~= \"PSEXESVC.*\")\n\n\n\n"}
{"prompt": "I want to see all instances of high privilege registry value modifications on Windows systems, excluding specific hosts.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4657\")\n| filter xdm.source.host.hostname not in (\"MSAZHXINFAMDTS0\", \"MSAZSUBSGVPAS01.GV.Local\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of Regsvr32 being used with file extensions that are commonly associated with malicious files.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_file_original_name = \"REGSVR32.EXE\") and (action_process_image_command_line ~= \".*\\.bin\" or action_process_image_command_line ~= \".*\\.bmp\" or action_process_image_command_line ~= \".*\\.cr2\" or action_process_image_command_line ~= \".*\\.dat\" or action_process_image_command_line ~= \".*\\.eps\" or action_process_image_command_line ~= \".*\\.gif\" or action_process_image_command_line ~= \".*\\.ico\" or action_process_image_command_line ~= \".*\\.jpeg\" or action_process_image_command_line ~= \".*\\.jpg\" or action_process_image_command_line ~= \".*\\.nef\" or action_process_image_command_line ~= \".*\\.orf\" or action_process_image_command_line ~= \".*\\.png\" or action_process_image_command_line ~= \".*\\.raw\" or action_process_image_command_line ~= \".*\\.sr2\" or action_process_image_command_line ~= \".*\\.temp\" or action_process_image_command_line ~= \".*\\.tif\" or action_process_image_command_line ~= \".*\\.tiff\" or action_process_image_command_line ~= \".*\\.tmp\" or action_process_image_command_line ~= \".*\\.rtf\" or action_process_image_command_line ~= \".*\\.txt\"))\n\n\n\n"}
{"prompt": "I want to find processes that use Invoke-Obfuscation VAR+ Launcher techniques for evasion.", "response": "datamodel\n| filter xdm.target.process.executable.path ~= \".*cmd.{0,5}(?\\:\\/c|\\/r)(?\\:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?\\:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?\\:.*\\)){1,}.*\\\"\"\n\n\n\n"}
{"prompt": "I want to see alerts about potential RDP session hijacking activity on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\tscon\\.exe\" or actor_process_file_original_name = \"tscon.exe\") and action_process_integrity_level = \"SYSTEM\")\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious instances of InstallUtil being used without logging to a file.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\InstallUtil\\.exe\" and action_process_image_path contains \"Microsoft.NET\\\\Framework\" and (action_process_image_command_line contains \"/logfile= \" and action_process_image_command_line contains \"/LogToConsole=false\"))\n\n\n\n"}
{"prompt": "I want to see which Fortigate and ASA devices haven't sent any logs in the last 4 hours.", "response": "preset = metrics_view\n| filter _collector_type in (\"Syslog\") and _product in (\"Fortigate\", \"ASA\")\n| comp latest(_time) as MaxTime,\nlatest(last_seen) as LastSeen,\nsum(total_event_count) as LastEventCount by _vendor,\n_product,\n_broker_device_ip,\n_final_reporting_device_ip\n| alter Hours_Since_LastEvent = timestamp_diff(current_time(), LastSeen, \"HOUR\"),\ncategory = \"Device_Not_Sending_Logs\"\n| filter LastEventCount = 0\n| filter _final_reporting_device_ip not in (\"<ip>\")"}
{"prompt": "I want to see a list of all infected end user machines that triggered an AV action, including details about the infection like file name, server name, and the specific actions taken.", "response": "datamodel dataset = symantec_ep_raw\n| filter xdm.observer.action not in (\"Left alone\", \"All actions failed\", \"No repair available\", \"Bad\")\n| filter xdm.alert.category != null and xdm.alert.category = \"Virus\"\n| filter symantec_ep_raw._raw_log ~= \"Category set: Malware\" and symantec_ep_raw._raw_log ~= \"Category type: Virus\"\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\")\n| filter category = \"Malware\" and event_type = \"Virus\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(xdm.target.file.sha256) as file_hash,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(directory) as directory,\nvalues(file_name) as file_name,\nvalues(file_extension) as file_extension,\nvalues(server_name) as aliashost,\nvalues(xdm.source.user.username) as username,\nvalues(symantec_server_name) as symantec_server_name,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ip,\nvalues(xdm.target.ipv4) as dst_ip,\ncount() as matched_events by xdm.target.host.hostname\n| alter aggregation_criteria = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see events related to CobaltStrike using named pipes on endpoints.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter ((PipeName contains \"\\\\MSSE-\" and PipeName contains \"-server\") or PipeName ~= \"\\\\postex\\_.*\" or PipeName ~= \"\\\\status\\_.*\" or PipeName ~= \"\\\\msagent\\_.*\" or PipeName ~= \"\\\\mojo\\_.*\" or PipeName ~= \"\\\\interprocess\\_.*\" or PipeName ~= \"\\\\samr\\_.*\" or PipeName ~= \"\\\\netlogon\\_.*\" or PipeName ~= \"\\\\srvsvc\\_.*\" or PipeName ~= \"\\\\lsarpc\\_.*\" or PipeName ~= \"\\\\wkssvc\\_.*\")\n\n\n\n"}
{"prompt": "I want to see a list of users whose risk state is high or compromised in Azure Identity Protection and include their severity level.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n| alter Risk_State = properties -> riskState,\nUser_Name = properties -> userPrincipalName,\nSeverity_level = properties -> riskLevelAggregated\n| filter Risk_State in (\"atRisk\", \"compromised\") and (Severity_level != \"\"\"low\"\"\")\n| fields Risk_State, User_Name, Severity_level, *"}
{"prompt": "I want to find PowerShell scripts that set ACLs on Windows folders, specifically those targeting the \"C:\\\\Windows\" path or the environment variable \"$env:windir\", and grant FullControl or Allow permissions.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Set-Acl \" and ScriptBlockText contains \"-AclObject \") and (ScriptBlockText contains \"-Path \\\"C:\\\\Windows\" or ScriptBlockText contains \"-Path \\\"C:/Windows\" or ScriptBlockText contains \"-Path 'C:\\\\Windows\" or ScriptBlockText contains \"-Path 'C:/Windows\" or ScriptBlockText contains \"-Path C:\\\\Windows\" or ScriptBlockText contains \"-Path C:/Windows\" or ScriptBlockText contains \"-Path $env:windir\" or ScriptBlockText contains \"-Path \\\"$env:windir\" or ScriptBlockText contains \"-Path '$env:windir\") and (ScriptBlockText contains \"FullControl\" or ScriptBlockText contains \"Allow\"))\n\n\n\n"}
{"prompt": "I want to see information about macOS startup items detected by Cortex XDR.", "response": "datamodel\n| filter (xdm.target.file.filename contains \"/Library/StartupItems/\" or xdm.target.file.filename ~= \".*\\.plist\")\n\n\n\n"}
{"prompt": "I want to find instances where the Windows Recall feature has been enabled through registry changes.", "response": "#N/A"}
{"prompt": "I want to see alerts about unusual file modifications made by dns.exe.", "response": "datamodel\n| filter (xdm.target.process.name ~= \".*\\\\dns\\.exe\" or xdm.source.process.name ~= \".*\\\\dns\\.exe\") and  not (xdm.target.file.filename ~= \".*\\\\dns\\.log\")\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is used to create remote threads targeting uncommon executables like rundll32 or regsvr32.", "response": "datamodel\n| filter ((xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\") and (xdm.target.process.name ~= \".*\\\\rundll32\\.exe\" or xdm.target.process.name ~= \".*\\\\regsvr32\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect attempts to enable Microsoft Dynamic Data Exchange (DDE) in Windows through registry changes.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\Word\\\\Security\\\\AllowDDE\" and (action_registry_value_name in (\"DWORD (0x00000001)\", \"DWORD (0x00000002)\") or action_registry_data in (\"DWORD (0x00000001)\", \"DWORD (0x00000002)\"))) or ((action_registry_key_name ~= \".*\\\\Excel\\\\Security\\\\DisableDDEServerLaunch\" or action_registry_key_name ~= \".*\\\\Excel\\\\Security\\\\DisableDDEServerLookup\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\")))\n\n\n\n"}
{"prompt": "I want to find suspicious instances where AtBroker.EXE is being used to execute uncommon assistive technology applications.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\AtBroker\\.exe\" or actor_process_file_original_name = \"AtBroker.exe\") and action_process_image_command_line contains \"start\") and  not ((action_process_image_command_line contains \"animations\" or action_process_image_command_line contains \"audiodescription\" or action_process_image_command_line contains \"caretbrowsing\" or action_process_image_command_line contains \"caretwidth\" or action_process_image_command_line contains \"colorfiltering\" or action_process_image_command_line contains \"cursorindicator\" or action_process_image_command_line contains \"cursorscheme\" or action_process_image_command_line contains \"filterkeys\" or action_process_image_command_line contains \"focusborderheight\" or action_process_image_command_line contains \"focusborderwidth\" or action_process_image_command_line contains \"highcontrast\" or action_process_image_command_line contains \"keyboardcues\" or action_process_image_command_line contains \"keyboardpref\" or action_process_image_command_line contains \"livecaptions\" or action_process_image_command_line contains \"magnifierpane\" or action_process_image_command_line contains \"messageduration\" or action_process_image_command_line contains \"minimumhitradius\" or action_process_image_command_line contains \"mousekeys\" or action_process_image_command_line contains \"Narrator\" or action_process_image_command_line contains \"osk\" or action_process_image_command_line contains \"overlappedcontent\" or action_process_image_command_line contains \"showsounds\" or action_process_image_command_line contains \"soundsentry\" or action_process_image_command_line contains \"speechreco\" or action_process_image_command_line contains \"stickykeys\" or action_process_image_command_line contains \"togglekeys\" or action_process_image_command_line contains \"voiceaccess\" or action_process_image_command_line contains \"windowarranging\" or action_process_image_command_line contains \"windowtracking\" or action_process_image_command_line contains \"windowtrackingtimeout\" or action_process_image_command_line contains \"windowtrackingzorder\")) and  not (action_process_image_command_line contains \"Oracle_JavaAccessBridge\")\n\n\n\n"}
{"prompt": "I want to see alerts for Wmiprvse Wbemcomn DLL hijacking events where the System process is involved and the target file name matches \"wbemcomn.dll\".", "response": "datamodel\n| filter ((xdm.target.process.name = \"System\" or xdm.source.process.name = \"System\") and xdm.target.file.filename ~= \".*\\\\wbem\\\\wbemcomn\\.dll\")\n\n\n\n"}
{"prompt": "I want to see suspicious activity security alerts from Guard Duty for my EV infrastructure, excluding unauthorized access related to IAM users and instance credential exfiltration outside of AWS.  The results should group by event type and log session ID, with timestamps formatted as YYYY-MM-DD HH:MM:SS.", "response": "config case_sensitive = false\n| dataset = aws_guardduty_raw\n| filter _collector_name contains \"EV_GuardDuty\"\n| filter Type != \"UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS\"\n\n| alter target_username = trim(arrayindex(regextract(resource, \"UserName\\\":\\\"([^,]+)\"), 0), \"\\\"\"),\nipaddress = trim(arrayindex(regextract(Service, \"IpAddressV4\\\":\\\"([^,]+)\"), 0), \"\\\"\"),\ngroupname = regextract(resource, \"GroupName\\\":\\\"([^\\\"]+)\"),\ngroupid = regextract(resource, \"GroupId\\\":\\\"([^\\\"]+)\")\n| alter aggregation_criteria = \"ileventtype\",\naggregation_criteria1 = \"illogonsessionid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about suspicious instances of Curl being used on Linux endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\/curl\"\n\n\n\n"}
{"prompt": "I want to detect potential DD file overwrite attacks on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path in (\"/bin/dd\", \"/usr/bin/dd\") and action_process_image_command_line contains \"of=\" and (action_process_image_command_line contains \"if=/dev/zero\" or action_process_image_command_line contains \"if=/dev/null\"))\n\n\n\n"}
{"prompt": "I want to see all events where an AppX package deployment was blocked by AppLocker.", "response": "datamodel\n| filter xdm.event.id = 412\n\n\n\n"}
{"prompt": "I want to find registry events related to an Office Test application that modifies keys under \"Software\\\\Microsoft\\\\Office test\\\\Special\\\\Perf\".", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Office test\\\\Special\\\\Perf\"\n\n\n\n"}
{"prompt": "I want to detect malicious activity where Certutil.exe is used to encode files in suspicious locations like AppData, Desktop, or Temp folders.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_file_original_name = \"CertUtil.exe\") and (action_process_image_command_line contains \"-encode\" or action_process_image_command_line contains \"/encode\") and (action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\" or action_process_image_command_line ~= \".*\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\PerfLogs\\\\.*\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line contains \"$Recycle.Bin\"))\n\n\n\n"}
{"prompt": "I want to see events related to High PrivTestege Admin Activity Role Separation Enabled on Windows Event Logs.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4897\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ibpmeventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect malicious use of MMC to spawn Windows shells like cmd, powershell, or other suspicious tools.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\mmc\\.exe\" and ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\reg\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\") or action_process_image_path contains \"\\\\BITSADMIN\"))\n\n\n\n"}
{"prompt": "I want to find instances where the Microsoft Office Trusted Location has been updated, excluding changes made by legitimate Office applications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"Security\\\\Trusted Locations\\\\Location\" and action_registry_key_name ~= \".*\\\\Path\") and  not ((actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\.*\" and actor_process_image_path ~= \".*\\\\OfficeClickToRun\\.exe\") or (actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Office\\\\.*\"))\n\n\n\n"}
{"prompt": " I want to find suspicious processes that use GUIDs like folder names in their command lines on endpoints. ", "response": "preset = xdr_process\n| filter ((action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") and (action_process_image_command_line contains \"\\\\{\" and action_process_image_command_line ~= \".*\\}\\\\.*\")) and  not ((action_process_image_path contains \"\\\\{\" and action_process_image_path ~= \".*\\}\\\\.*\") or action_process_image_path = \"None\" or action_process_image_path = \"C:\\\\Windows\\\\System32\\\\drvinst.exe\")\n\n\n\n"}
{"prompt": "I want to see which users triggered an abnormally high number of password resets within a short period.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4724\") and xdm.source.user.username NOT IN (\"BPMSCCMADMIN\")\n\n\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.user.username\n| filter matched_events >= 100\n\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 100)), 1)"}
{"prompt": "I want to detect suspicious ADSI cache file creations that aren't coming from common Windows tools.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\Local\\\\Microsoft\\\\Windows\\\\SchCache\\\\.*\" and xdm.target.file.filename ~= \".*\\.sch\") and  not ((((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\Cylance\\\\Desktop\\\\CylanceSvc\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\CCM\\\\CcmExec\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\windows\\\\system32\\\\dllhost\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\dsac\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\efsui\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\windows\\\\system32\\\\mmc\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\windows\\\\system32\\\\svchost\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\windows\\\\system32\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\.exe\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\Cylance\\\\Desktop\\\\CylanceSvc\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\CCM\\\\CcmExec\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\windows\\\\system32\\\\dllhost\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\dsac\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\efsui\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\windows\\\\system32\\\\mmc\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\windows\\\\system32\\\\svchost\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\windows\\\\system32\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\.exe\")) or ((xdm.target.process.name contains \":\\\\Windows\\\\ccmsetup\\\\autoupgrade\\\\ccmsetup\" or xdm.target.process.name contains \":\\\\Program Files\\\\SentinelOne\\\\Sentinel Agent\") or (xdm.source.process.name contains \":\\\\Windows\\\\ccmsetup\\\\autoupgrade\\\\ccmsetup\" or xdm.source.process.name contains \":\\\\Program Files\\\\SentinelOne\\\\Sentinel Agent\"))) or (((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\") and (xdm.target.process.name contains \"\\\\Microsoft Office\" or xdm.source.process.name contains \"\\\\Microsoft Office\")) and (xdm.target.process.name ~= \".*\\\\OUTLOOK\\.EXE\" or xdm.source.process.name ~= \".*\\\\OUTLOOK\\.EXE\"))) and  not ((xdm.target.process.name ~= \".*\\\\LANDesk\\\\LDCLient\\\\ldapwhoami\\.exe\" or xdm.source.process.name ~= \".*\\\\LANDesk\\\\LDCLient\\\\ldapwhoami\\.exe\") or (xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\Citrix\\\\Receiver\\ StoreFront\\\\Services\\\\DefaultDomainServices\\\\Citrix\\.DeliveryServices\\.DomainServices\\.ServiceHost\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\Citrix\\\\Receiver\\ StoreFront\\\\Services\\\\DefaultDomainServices\\\\Citrix\\.DeliveryServices\\.DomainServices\\.ServiceHost\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts for EMWEB attacks detected on my wireless LAN controllers. I need details like the attack type, severity, description, timestamps, and involved devices.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_wlc_raw\n| alter msg_id = concat(xdm.event.original_event_type, \"-\", xdm.alert.severity, \"-\", xdm.event.operation_sub_type),\ndevice_ip = cisco_wlc_raw._final_reporting_device_ip,\nserver_name = arrayindex(regextract(cisco_wlc_raw._raw_log, \"\\<\\d+\\>([^\\:]+)\"), 0),\nmac_address = arrayindex(regextract(cisco_wlc_raw._raw_log, \"for\\s+client\\s([^\\s]+)\"), 0),\nxdm.source.user.username = if(xdm.source.user.username = null, arrayindex(regextract(cisco_wlc_raw._raw_log, \"user\\saccount\\s\\(([^\\)]+)\"), 0), xdm.source.user.username)\n| alter mac_address = coalesce(mac_address, if(xdm.source.host.mac_addresses = null, null, to_string(xdm.source.host.mac_addresses)))\n| filter msg_id in (\"EMWEB-3-ATTACK_DETECTED\")\n| fields msg_id, xdm.event.original_event_type, xdm.alert.severity,\nxdm.event.operation_sub_type, xdm.event.description,\nxdm.event.log_level, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.source.ipv4, xdm.source.ipv6, xdm.source.port,\nmac_address, xdm.source.process.name, xdm.source.user.username,\nxdm.source.agent.identifier, xdm.source.agent.type,\nxdm.target.ipv4, xdm.target.ipv6, xdm.target.port,\nxdm.target.host.ipv4_addresses, xdm.target.host.ipv6_addresses,\nxdm.target.interface, xdm.target.agent.identifier,\nxdm.target.host.hostname, xdm.target.host.mac_addresses,\nxdm.target.resource.type, xdm.target.resource_before.value,\nxdm.target.resource.value, xdm.session_context_id,\nxdm.alert.description, xdm.network.rule, xdm.network.ip_protocol,\nxdm.network.tls.cipher, cisco_wlc_raw._raw_log, device_ip,\nserver_name, _time, _insert_time, _product, _vendor\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of the SharpView tool being executed on endpoints.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name = \"SharpView.exe\" or action_process_image_path ~= \".*\\\\SharpView\\.exe\" or (action_process_image_command_line contains \"Add-RemoteConnection\" or action_process_image_command_line contains \"Convert-ADName\" or action_process_image_command_line contains \"ConvertFrom-SID\" or action_process_image_command_line contains \"ConvertFrom-UACValue\" or action_process_image_command_line contains \"Convert-SidToName\" or action_process_image_command_line contains \"Export-PowerViewCSV\" or action_process_image_command_line contains \"Find-DomainObjectPropertyOutlier\" or action_process_image_command_line contains \"Find-DomainProcess\" or action_process_image_command_line contains \"Find-DomainShare\" or action_process_image_command_line contains \"Find-DomainUserEvent\" or action_process_image_command_line contains \"Find-DomainUserLocation\" or action_process_image_command_line contains \"Find-ForeignGroup\" or action_process_image_command_line contains \"Find-ForeignUser\" or action_process_image_command_line contains \"Find-GPOComputerAdmin\" or action_process_image_command_line contains \"Find-GPOLocation\" or action_process_image_command_line contains \"Find-Interesting\" or action_process_image_command_line contains \"Find-LocalAdminAccess\" or action_process_image_command_line contains \"Find-ManagedSecurityGroups\" or action_process_image_command_line contains \"Get-CachedRDPConnection\" or action_process_image_command_line contains \"Get-DFSshare\" or action_process_image_command_line contains \"Get-DomainComputer\" or action_process_image_command_line contains \"Get-DomainController\" or action_process_image_command_line contains \"Get-DomainDFSShare\" or action_process_image_command_line contains \"Get-DomainDNSRecord\" or action_process_image_command_line contains \"Get-DomainFileServer\" or action_process_image_command_line contains \"Get-DomainForeign\" or action_process_image_command_line contains \"Get-DomainGPO\" or action_process_image_command_line contains \"Get-DomainGroup\" or action_process_image_command_line contains \"Get-DomainGUIDMap\" or action_process_image_command_line contains \"Get-DomainManagedSecurityGroup\" or action_process_image_command_line contains \"Get-DomainObject\" or action_process_image_command_line contains \"Get-DomainOU\" or action_process_image_command_line contains \"Get-DomainPolicy\" or action_process_image_command_line contains \"Get-DomainSID\" or action_process_image_command_line contains \"Get-DomainSite\" or action_process_image_command_line contains \"Get-DomainSPNTicket\" or action_process_image_command_line contains \"Get-DomainSubnet\" or action_process_image_command_line contains \"Get-DomainTrust\" or action_process_image_command_line contains \"Get-DomainUserEvent\" or action_process_image_command_line contains \"Get-ForestDomain\" or action_process_image_command_line contains \"Get-ForestGlobalCatalog\" or action_process_image_command_line contains \"Get-ForestTrust\" or action_process_image_command_line contains \"Get-GptTmpl\" or action_process_image_command_line contains \"Get-GroupsXML\" or action_process_image_command_line contains \"Get-LastLoggedOn\" or action_process_image_command_line contains \"Get-LoggedOnLocal\" or action_process_image_command_line contains \"Get-NetComputer\" or action_process_image_command_line contains \"Get-NetDomain\" or action_process_image_command_line contains \"Get-NetFileServer\" or action_process_image_command_line contains \"Get-NetForest\" or action_process_image_command_line contains \"Get-NetGPO\" or action_process_image_command_line contains \"Get-NetGroupMember\" or action_process_image_command_line contains \"Get-NetLocalGroup\" or action_process_image_command_line contains \"Get-NetLoggedon\" or action_process_image_command_line contains \"Get-NetOU\" or action_process_image_command_line contains \"Get-NetProcess\" or action_process_image_command_line contains \"Get-NetRDPSession\" or action_process_image_command_line contains \"Get-NetSession\" or action_process_image_command_line contains \"Get-NetShare\" or action_process_image_command_line contains \"Get-NetSite\" or action_process_image_command_line contains \"Get-NetSubnet\" or action_process_image_command_line contains \"Get-NetUser\" or action_process_image_command_line contains \"Get-PathAcl\" or action_process_image_command_line contains \"Get-PrincipalContext\" or action_process_image_command_line contains \"Get-RegistryMountedDrive\" or action_process_image_command_line contains \"Get-RegLoggedOn\" or action_process_image_command_line contains \"Get-WMIRegCachedRDPConnection\" or action_process_image_command_line contains \"Get-WMIRegLastLoggedOn\" or action_process_image_command_line contains \"Get-WMIRegMountedDrive\" or action_process_image_command_line contains \"Get-WMIRegProxy\" or action_process_image_command_line contains \"Invoke-ACLScanner\" or action_process_image_command_line contains \"Invoke-CheckLocalAdminAccess\" or action_process_image_command_line contains \"Invoke-Kerberoast\" or action_process_image_command_line contains \"Invoke-MapDomainTrust\" or action_process_image_command_line contains \"Invoke-RevertToSelf\" or action_process_image_command_line contains \"Invoke-Sharefinder\" or action_process_image_command_line contains \"Invoke-UserImpersonation\" or action_process_image_command_line contains \"Remove-DomainObjectAcl\" or action_process_image_command_line contains \"Remove-RemoteConnection\" or action_process_image_command_line contains \"Request-SPNTicket\" or action_process_image_command_line contains \"Set-DomainObject\" or action_process_image_command_line contains \"Test-AdminAccess\"))\n\n\n\n"}
{"prompt": "I want to see events where suspicious access masks are requested from LSASS.", "response": "preset = xdr_event_log\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter AccessList = regextract(to_json_string(action_evtlog_data_fields)->AccessList{}, \"\\\"(.*)\\\"\")\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| filter ((action_evtlog_event_id = 4656 and ObjectName ~= \".*\\\\lsass\\.exe\" and (AccessMask contains \"0x40\" or AccessMask contains \"0x1400\" or AccessMask contains \"0x100000\" or AccessMask contains \"0x1410\" or AccessMask contains \"0x1010\" or AccessMask contains \"0x1438\" or AccessMask contains \"0x143a\" or AccessMask contains \"0x1418\" or AccessMask contains \"0x1f0fff\" or AccessMask contains \"0x1f1fff\" or AccessMask contains \"0x1f2fff\" or AccessMask contains \"0x1f3fff\")) or (action_evtlog_event_id = 4663 and ObjectName ~= \".*\\\\lsass\\.exe\" and (AccessList contains \"4484\" or AccessList contains \"4416\"))) and  not (((ProcessName ~= \".*\\\\csrss\\.exe\" or ProcessName ~= \".*\\\\GamingServices\\.exe\" or ProcessName ~= \".*\\\\lsm\\.exe\" or ProcessName ~= \".*\\\\MicrosoftEdgeUpdate\\.exe\" or ProcessName ~= \".*\\\\minionhost\\.exe\" or ProcessName ~= \".*\\\\MRT\\.exe\" or ProcessName ~= \".*\\\\MsMpEng\\.exe\" or ProcessName ~= \".*\\\\perfmon\\.exe\" or ProcessName ~= \".*\\\\procexp\\.exe\" or ProcessName ~= \".*\\\\procexp64\\.exe\" or ProcessName ~= \".*\\\\svchost\\.exe\" or ProcessName ~= \".*\\\\taskmgr\\.exe\" or ProcessName ~= \".*\\\\thor\\.exe\" or ProcessName ~= \".*\\\\thor64\\.exe\" or ProcessName ~= \".*\\\\vmtoolsd\\.exe\" or ProcessName ~= \".*\\\\VsTskMgr\\.exe\" or ProcessName ~= \".*\\\\wininit\\.exe\" or ProcessName ~= \".*\\\\wmiprvse\\.exe\" or ProcessName ~= \".*RtkAudUService64\") and (ProcessName ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or ProcessName ~= \".*\\:\\\\Program\\ Files\\\\.*\" or ProcessName ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\Platform\\\\.*\" or ProcessName ~= \".*\\:\\\\Windows\\\\SysNative\\\\.*\" or ProcessName ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or ProcessName ~= \".*\\:\\\\Windows\\\\SysWow64\\\\.*\" or ProcessName ~= \".*\\:\\\\Windows\\\\Temp\\\\asgard2\\-agent\\\\.*\")) or ProcessName contains \":\\\\Program Files\" or (ProcessName ~= \".*\\:\\\\Windows\\\\System32\\\\taskhostw\\.exe\" or ProcessName ~= \".*\\:\\\\Windows\\\\System32\\\\msiexec\\.exe\" or ProcessName ~= \".*\\:\\\\Windows\\\\CCM\\\\CcmExec\\.exe\") or (ProcessName ~= \".*\\:\\\\Windows\\\\Sysmon64\\.exe\" and AccessList contains \"%%4484\") or (ProcessName ~= \".*\\:\\\\Windows\\\\Temp\\\\asgard2\\-agent\\-sc\\\\aurora\\\\.*\" and ProcessName ~= \".*\\\\aurora\\-agent\\-64\\.exe\" and AccessList contains \"%%4484\") or (ProcessName ~= \".*\\\\x64\\\\SCENARIOENGINE\\.EXE\" and AccessList contains \"%%4484\") or ((ProcessName ~= \".*\\:\\\\Users\\\\.*\" and ProcessName contains \"\\\\AppData\\\\Local\\\\Temp\\\\is-\") and ProcessName ~= \".*\\\\avira\\_system\\_speedup\\.tmp\" and AccessList contains \"%%4484\") or (ProcessName ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" and ProcessName ~= \".*\\\\avira\\_speedup\\_setup\\_update\\.tmp\" and AccessList contains \"%%4484\") or (ProcessName ~= \".*\\:\\\\Windows\\\\System32\\\\snmp\\.exe\" and AccessList contains \"%%4484\") or (ProcessName ~= \".*\\:\\\\Windows\\\\SystemTemp\\\\.*\" and ProcessName ~= \".*\\\\GoogleUpdate\\.exe\" and AccessList contains \"%%4484\")) and  not (((ProcessName ~= \".*\\\\procmon64\\.exe\" or ProcessName ~= \".*\\\\procmon\\.exe\") and AccessList contains \"%%4484\"))\n\n\n\n"}
{"prompt": "I want to find instances where someone has disabled security features within Microsoft Office applications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Office\\\\.*\" and (action_registry_key_name ~= \".*VBAWarnings\" or action_registry_key_name ~= \".*DisableInternetFilesInPV\" or action_registry_key_name ~= \".*DisableUnsafeLocationsInPV\" or action_registry_key_name ~= \".*DisableAttachementsInPV\") and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential hijacking of Linux Amazon SSM Agents.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/amazon\\-ssm\\-agent\" and (action_process_image_command_line contains \"-register \" and action_process_image_command_line contains \"-code \" and action_process_image_command_line contains \"-id \" and action_process_image_command_line contains \"-region \"))\n\n\n\n"}
{"prompt": "I want to see details about changes made to Log Analytics workspaces in Azure, including who made the changes, what was changed, and when.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/WRITE\", \"MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"e71052a7-d2ad-4e43-ac28-7609a37a4ef7\", \"19053629-38ac-4f7a-bcbf-6effda51368e\", \"b1617c40-5fe7-4804-9138-161068eece0f\", \"a4909bd3-2023-4cd7-b521-d5bf29109761\", \"160421b8-c8e9-47bd-94ac-22a1e74353e0\", \"3bf1b93b-e895-498a-bb92-fa4c26c0da64\", \"918574c0-98eb-4eca-8c95-8d474abf8b10\", \"79d75b98-7df9-4f9c-af73-aeaa3a8b7c0a\", \"0254815d-161b-46a1-a419-9f2cf9324ae3\", \"a704c3a4-580c-40b7-9054-73d55b8234ae\", \"fc257d35-1522-4b2a-bbd8-29c8c4b47bd0\", \"e1dc9585-f94d-4f70-8165-b6ba1140af51\", \"4e6a7a01-59a1-4bd0-aa31-143f66640add\", \"5069f056-0890-4ee2-a5db-a5fa3584984a\", \"756ca836-d3cc-4966-a56a-a47fcade6b10\", \"3076e74d-719e-49a2-9c31-46f8a8adaf7f\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to detect when NetSupport Manager is installed on endpoints through the system event log. ", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (actor_process_image_path contains \"\\\\NetSupport Manager\\\\client32.exe\" or ServiceName = \"Client32\"))\n\n\n\n"}
{"prompt": "I want to find instances where a Windows PowerShell User Agent string is detected in HTTP requests.", "response": "datamodel\n| filter xdm.network.http.browser contains \" WindowsPowerShell/\"\n\n\n\n"}
{"prompt": "I want to see events related to USB devices being plugged in, specifically IDs 2003, 2100, and 2102.", "response": "datamodel\n| filter xdm.event.id in (2003, 2100, 2102)\n\n\n\n"}
{"prompt": "I want to detect suspicious service installation scripts on endpoints using common tools like cscript, mshta, PowerShell, and regsvr32.", "response": "preset = xdr_event_log\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (actor_process_image_path contains \" -c \" or actor_process_image_path contains \" -r \" or actor_process_image_path contains \" -k \") and (actor_process_image_path contains \"cscript\" or actor_process_image_path contains \"mshta\" or actor_process_image_path contains \"powershell\" or actor_process_image_path contains \"pwsh\" or actor_process_image_path contains \"regsvr32\" or actor_process_image_path contains \"rundll32\" or actor_process_image_path contains \"wscript\"))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious PowerShell invocations that originate from script engines like Wscript and Cscript.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\wscript\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\") and (action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\")) and  not (action_process_cwd ~= \".*\\\\Health\\ Service\\ State\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find Windows accounts that were both created and deleted within a 24 hour period.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (4720, 4726) and _collector_type in (\"XDR Collector\")\n| alter event_id_description = if(event_id = 4720, \"A user account was CREATED\", if(event_id = 4726, \"A user account was DELETED\")),\nSubjectUserName = event_data -> SubjectUserName,\nTargetUserName = event_data -> TargetUserName\n| filter SubjectUserName not contains \"$\" and (SubjectUserName not in (\"\"\"\"\"\", null, NULL) and TargetUserName not in (\"\"\"\"\"\", null, NULL))\n| comp values(event_id_description) as Multiple_Events,\nvalues(event_id) as Multiple_EventIDs,\nvalues(event_data) as Activity_Data,\nvalues(message) as Message_Data by SubjectUserName,\nTargetUserName,\n_collector_type\n| filter array_length(Multiple_EventIDs) > 1"}
{"prompt": "I want to find out if any applications other than TeamViewer are making DNS queries to TeamViewer domains like \"taf.teamviewer.com\" and \"udp.ping.teamviewer.com\".", "response": "datamodel\n| filter xdm.network.dns.dns_question.name in (\"taf.teamviewer.com\", \"udp.ping.teamviewer.com\") and  not ((xdm.target.process.name contains \"TeamViewer\" or xdm.source.process.name contains \"TeamViewer\"))\n\n\n\n"}
{"prompt": "I want to see notifications about any modifications or deletions made to Okta applications.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type in (\"application.lifecycle.update\", \"application.lifecycle.delete\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to manipulation of default accounts using Net.exe on endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and action_process_image_command_line contains \" user \" and (action_process_image_command_line contains \" J\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdrjestelm\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdnvalvoja \" or action_process_image_command_line contains \" Rendszergazda \" or action_process_image_command_line contains \" \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd \" or action_process_image_command_line contains \" Administrateur \" or action_process_image_command_line contains \" Administrador \" or action_process_image_command_line contains \" Administrat\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdr \" or action_process_image_command_line contains \" Administrator \" or action_process_image_command_line contains \" guest \" or action_process_image_command_line contains \" DefaultAccount \" or action_process_image_command_line contains \" \\\"J\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdrjestelm\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdnvalvoja\\\" \" or action_process_image_command_line contains \" \\\"Rendszergazda\\\" \" or action_process_image_command_line contains \" \\\"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\\\" \" or action_process_image_command_line contains \" \\\"Administrateur\\\" \" or action_process_image_command_line contains \" \\\"Administrador\\\" \" or action_process_image_command_line contains \" \\\"Administrat\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdr\\\" \" or action_process_image_command_line contains \" \\\"Administrator\\\" \" or action_process_image_command_line contains \" \\\"guest\\\" \" or action_process_image_command_line contains \" \\\"DefaultAccount\\\" \" or action_process_image_command_line contains \" 'J\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdrjestelm\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdnvalvoja' \" or action_process_image_command_line contains \" 'Rendszergazda' \" or action_process_image_command_line contains \" '\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd' \" or action_process_image_command_line contains \" 'Administrateur' \" or action_process_image_command_line contains \" 'Administrador' \" or action_process_image_command_line contains \" 'Administrat\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdr' \" or action_process_image_command_line contains \" 'Administrator' \" or action_process_image_command_line contains \" 'guest' \" or action_process_image_command_line contains \" 'DefaultAccount' \")) and  not ((action_process_image_command_line contains \"guest\" and action_process_image_command_line contains \"/active no\"))\n\n\n\n"}
{"prompt": "I want to find detections related to rundll32 being used to install screensavers on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and action_process_image_command_line contains \"InstallScreenSaver\")\n\n\n\n"}
{"prompt": "I want to identify instances where a large number of user accounts are being disabled on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4725\")\n\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.event.id\n| filter matched_events >= 100\n\n| alter aggregation_criteria = \"ibpmeventtype\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 100)), 1)"}
{"prompt": "I want to see detections for files being encoded into base64 using Certutil.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_file_original_name = \"CertUtil.exe\") and (action_process_image_command_line contains \"-encode\" or action_process_image_command_line contains \"/encode\"))\n\n\n\n"}
{"prompt": "I want to find Windows systems that have experienced issues logging events related to Security group membership (Event ID 521) and identify if those issues persisted over time.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (521)\n| alter Username = user -> name,\nUsertype = user -> type,\nUserdomain = user -> domain,\nUseridentifier = user -> identifier,\nErrorStatusCode = event_data -> param1,\nErrorcode = event_data -> param2,\nErrortrackcount = to_integer(event_data -> param3)\n| fields message, keywords, event_action, event_result,\n_collector_hostname as LogSourceHostname, _collector_ip_address as LogSourceIPAddress,\n_product, _vendor, host_name, Username, Userdomain,\nUsertype, Useridentifier, ErrorStatusCode, Errorcode,\nErrortrackcount, event_id\n| comp earliest(_time) as First_Timestamp,\nlatest(_time) as Latest_Timestamp by LogSourceHostname\n| join\n(dataset = microsoft_windows_raw\n| comp earliest(_time) as Initial_TS,\nlatest(_time) as Final_TS,\nvalues(event_id) as Multiple_EventIDs by _collector_hostname\n) as ds ds._collector_hostname = LogSourceHostname\n| filter to_epoch(Final_TS) > to_epoch(Latest_Timestamp) and array_length(Multiple_EventIDs) = 1"}
{"prompt": "I want to detect potential Active Directory enumeration attempts using PowerShell modules that import Microsoft.ActiveDirectory.Management.dll.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter ((Payload contains \"Import-Module \" or Payload contains \"ipmo \") and Payload contains \"Microsoft.ActiveDirectory.Management.dll\")\n\n\n\n"}
{"prompt": "I want to know if an attacker is registering new IFilters for persistence on my system.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"\\\\SOFTWARE\\\\Classes\\\\.\" and action_registry_key_name contains \"\\\\PersistentHandler\") or (action_registry_key_name contains \"\\\\SOFTWARE\\\\Classes\\\\CLSID\" and action_registry_key_name contains \"\\\\PersistentAddinsRegistered\\\\{89BCB740-6119-101A-BCB7-00DD010655AF}\")) and  not ((action_registry_key_name ~= \".*\\\\CLSID\\\\\\{4F46F75F\\-199F\\-4C63\\-8B7D\\-86D48FE7970C\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{4887767F\\-7ADC\\-4983\\-B576\\-88FB643D6F79\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{D3B41FA1\\-01E3\\-49AF\\-AA25\\-1D0D824275AE\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{72773E1A\\-B711\\-4d8d\\-81FA\\-B9A43B0650DD\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{098f2470\\-bae0\\-11cd\\-b579\\-08002b30bfeb\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{1AA9BF05\\-9A97\\-48c1\\-BA28\\-D9DCE795E93C\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{2e2294a9\\-50d7\\-4fe7\\-a09f\\-e6492e185884\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{34CEAC8D\\-CBC0\\-4f77\\-B7B1\\-8A60CB6DA0F7\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{3B224B11\\-9363\\-407e\\-850F\\-C9E1FFACD8FB\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{3DDEB7A4\\-8ABF\\-4D82\\-B9EE\\-E1F4552E95BE\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{5645C8C1\\-E277\\-11CF\\-8FDA\\-00AA00A14F93\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{5645C8C4\\-E277\\-11CF\\-8FDA\\-00AA00A14F93\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{58A9EBF6\\-5755\\-4554\\-A67E\\-A2467AD1447B\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{5e941d80\\-bf96\\-11cd\\-b579\\-08002b30bfeb\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{698A4FFC\\-63A3\\-4E70\\-8F00\\-376AD29363FB\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{7E9D8D44\\-6926\\-426F\\-AA2B\\-217A819A5CCE\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{8CD34779\\-9F10\\-4f9b\\-ADFB\\-B3FAEABDAB5A\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{9694E38A\\-E081\\-46ac\\-99A0\\-8743C909ACB6\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{98de59a0\\-d175\\-11cd\\-a7bd\\-00006b827d94\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{AA10385A\\-F5AA\\-4EFF\\-B3DF\\-71B701E25E18\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{B4132098\\-7A03\\-423D\\-9463\\-163CB07C151F\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{d044309b\\-5da6\\-4633\\-b085\\-4ed02522e5a5\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{D169C14A\\-5148\\-4322\\-92C8\\-754FC9D018D8\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{DD75716E\\-B42E\\-4978\\-BB60\\-1497B92E30C4\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{E2F83EED\\-62DE\\-4A9F\\-9CD0\\-A1D40DCD13B6\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{E772CEB3\\-E203\\-4828\\-ADF1\\-765713D981B8\\}\\\\.*\" or action_registry_key_name contains \"\\\\CLSID\\\\{eec97550-47a9-11cf-b952-00aa0051fe20}\" or action_registry_key_name ~= \".*\\\\CLSID\\\\\\{FB10BD80\\-A331\\-4e9e\\-9EB7\\-00279903AD99\\}\\\\.*\") or (actor_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\.*\"))\n\n\n\n"}
{"prompt": " I want to see alerts about users logging in from the same workstation with different usernames, especially if they are part of the \"Tier1Users\" group and appear on non-owned platform machines.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| sort asc _time\n| bin _time span = 5m\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4776\")\n| join type = left\n(dataset = enterprise_platform_static_list\n| filter PLATFORM_TYPE IN (\"ad_hostsrc\", \"exchange_hostsrc\")\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP_ADDRESS = microsoft_windows_raw._final_reporting_device_ip)\n| filter PLATFORM_TYPE = null\n| join type = left\n(dataset = pan_dss_raw\n) as JT2 xdm.target.user.username = JT2.sam_account_name\n| filter company_name !~= \"^SPL\"\n| alter pattern = if(security_groups ~= \"Tier1Users\", \"E1\", \"E2\")\n| alter target_host = lowercase(arrayindex(regextract(xdm.event.description, \"Source Workstation:\\t([^\\n]+)\"), 0))\n| filter xdm.target.user.username != \"ANONYMOUS LOGON\" and xdm.target.user.username !~= \"infosys.com\" and target_host != NULL and target_host !~= \"isvctxxap\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, pattern, target_host\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\nvalues(xdm.target.user.username) as target_user by target_host\n| filter pattern_events contains \"E1\" and array_length(target_user) >= 2\n| alter aggregation_criteria = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see alerts for when the same user has more than 10 failed login attempts on iRemote within a 5 minute period.", "response": "dataset = msft_azure_raw\n| bin _time span = 5m\n| filter operationName = \"Sign-in activity\" and category = \"SignInLogs\"\n| alter result_code = to_integer(resultType),\nresult_desc = resultDescription,\nuser_dst = properties -> userPrincipalName,\nappDisplayName = properties -> appDisplayName,\nuserDisplayName = properties -> userDisplayName,\nuserAgent = properties -> userAgent,\nOS = json_extract_scalar(properties, \"$.deviceDetail.operatingSystem\"),\nresult = trim(arrayindex(regextract(properties, \"result\\\":\\\"([^,]+)\"), 0), \"\\\"\")\n| iploc callerIpAddress loc_country,\nloc_asn_org\n| filter result_code != 0 and appDisplayName ~= \"iremote\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(userDisplayName) as username,\nvalues(callerIpAddress) as sourceip,\nvalues(appDisplayName) as server,\nvalues(result_code) as result_code,\nvalues(result_desc) as result_desc,\nvalues(userAgent) as user_agent,\nvalues(loc_country) as country,\nvalues(loc_asn_org) as org,\nvalues(OS) as OS,\nvalues(result) as result,\ncount() as matched_events by _time,\nuser_dst\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see instances where AWS Console access was performed using the \"root\" username.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name = \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username1 = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username2 = json_extract_scalar(userIdentity, \"$.userName\"),\ntarget_username3 = trim(json_extract(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"\\\"\")\n| filter target_username1 = \"root\" or target_username2 = \"root\" or target_username3 = \"root\" or source_username = \"root\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "{I want to find instances where a script interpreter like Wscript or Cscript connects to a local network share to download or execute a script.} \n\n\nLet me know if you'd like to adjust this prompt further!", "response": "#N/A"}
{"prompt": "I want to find events where PowerShell is used to retrieve live memory dumps using Get-StorageDiagnosticInfo with the -IncludeLiveDump parameter.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Get-StorageDiagnosticInfo\" and ScriptBlockText contains \"-IncludeLiveDump\")\n\n\n\n"}
{"prompt": " I want to find instances where Wmic.exe is used to gather information about computer systems. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wmic\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and action_process_image_command_line contains \"computersystem\")\n\n\n\n"}
{"prompt": " I want to see information about terminated user activity related to proxy access via Zscaler. I need details like usernames, IP addresses, websites visited, and the organization units they belong to.  ", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter user_agent not in (\"-\")\n| alter user_dst = arrayindex(split(user_dst, \"@\"), 0)\n| join type = left\n(dataset = pan_dss_raw\n| fields company_name, sam_account_name, ou\n) as adusers adusers.sam_account_name = user_dst\n| filter sam_account_name != null and company_name ~= \"^SEP|^SEPX\" and host_dst != \"proxy\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(host_dst) as host_dst,\nvalues(web_page) as web_page,\nvalues(to_string(OU)) as org_unit,\nvalues(result) as result,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(company_name) as emp_id by user_dst\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see all events where Sysmon blocked file shredding occurred on endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 28\n\n\n\n"}
{"prompt": "I want to detect if there have been over 1000 file or folder deletions on my NetApp filer within a 5 minute window.", "response": "datamodel dataset = netapp_nas_filers_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"4656\" and xdm.observer.action ~= \"ReadAttributes DELETE\" and xdm.target.file.directory !~= \"\\.tmp$\"\n| fields xdm.source.host.hostname, xdm.event.id, xdm.event.description,\nxdm.source.ipv4, xdm.source.user.username, xdm.target.user.username,\nxdm.observer.action, xdm.target.file.directory, xdm.target.file.filename,\n_time\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 1000\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 1000)), 1)"}
{"prompt": "{I want to find suspicious instances of the tscon.exe process being started by SYSTEM with a username containing \"AUTHORI\" or \"AUTORI\".} \n\n\nThis prompt captures the intent of the query in a natural and understandable way.", "response": "preset = xdr_process\n| filter ((action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\") and action_process_image_path ~= \".*\\\\tscon\\.exe\")\n\n\n\n"}
{"prompt": "I want to see information about allowed traffic on critical ports (21, 22, 23, 3389) from my Cisco ASA firewall. Please exclude any traffic originating from known malicious IP addresses and exclude ICMP messages.", "response": "datamodel dataset = cisco_asa_raw\n| fields xdm.event.id, xdm.event.description, xdm.event.outcome_reason,\nxdm.event.outcome, xdm.source.ipv4, xdm.source.port,\nxdm.source.sent_bytes, xdm.source.interface, xdm.source.zone,\nxdm.target.ipv4, xdm.target.port, xdm.target.zone,\nxdm.target.interface, xdm.observer.name, xdm.event.is_completed,\nxdm.alert.severity, _time, _insert_time, xdm.source.port,\nxdm.target.port\n| filter xdm.event.description ~= \"built|permitted|succeeded|accept|successful|created|received|passed| est-allowed|up|granted\" and xdm.event.description !~= \"deny\" and xdm.target.port in (21, 22, 23, 3389) and incidr(xdm.source.ipv4, \"10.0.0.0/8\") = false and incidr(xdm.source.ipv4, \"172.16.0.0/12\") = false and incidr(xdm.source.ipv4, \"192.168.0.0/16\") = false\n| filter xdm.source.ipv4 !~= \"155\\.(11[1-9]|12[0-9])\\.([0-9]{1,3})\\.([0-9]{1,3})\" and xdm.source.ipv4 !~= \"73\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\" and xdm.source.ipv4 not in (\"121.243.87.36\", \"213.86.11.74\", \"125.21.231.195\", \"169.254.1.3\", \"169.254.1.1\", \"206.164.210.161\", \"160.72.32.26\", \"143.34.16.2\", \"143.27.27.2\") and xdm.event.description not contains \"ICMP\"\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see CyberArk privileged activity logs for suspicious command execution on station 10.64.103.83 or with device_ip <ip> , specifically those related to keystroke logging and commands like \"sudo su -\", excluding activities from  <username>. I need the logs formatted with event time in YYYY-MM-DD HH:MM:SS.", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_dst = xdm.target.user.username,\nuser_src = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station = \"10.64.103.83\" or device_ip in (\"<ip>\")\n| filter action in (\"Keystroke logging\", \"Keystroke logging failed\") and command ~= \"sudo  su -|sudo su|sudo su -|sudo su - root\" and user_src not in (\"<username>\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all Azure activity logs that mention \"named location\" in the ActivityDisplayName field.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n| alter ID = properties -> id,\ncategory = properties -> category,\nCorrelationId = properties -> correlationId,\nResult = properties -> result,\nActivityDisplayName = properties -> activityDisplayName,\nactivityDateTime = properties -> activityDateTime,\nloggedByService = properties -> loggedByService,\noperationType = properties -> operationType,\nuserAgent = properties -> userAgent,\nUserId = properties -> initiatedBy.user.id,\nUser_Email = properties -> initiatedBy.user.userPrincipalName\n| filter ActivityDisplayName contains \"named location\""}
{"prompt": "I want to find instances where an attacker is using the MSSQL Xp_cmdshell stored procedure to execute commands through cmd.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and actor_process_image_path ~= \".*\\\\sqlservr\\.exe\")\n\n\n\n"}
{"prompt": "I want to find alerts about Excel using wmic to execute regsvr32 or similar commands as a potential payload, especially if it involves an Office application like Word or PowerPoint.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"regsvr32\" or action_process_image_command_line contains \"rundll32\" or action_process_image_command_line contains \"msiexec\" or action_process_image_command_line contains \"mshta\" or action_process_image_command_line contains \"verclsid\") and (action_process_image_path ~= \".*\\\\wbem\\\\WMIC\\.exe\" or action_process_image_command_line contains \"wmic \") and (actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\") and (action_process_image_command_line contains \"process\" and action_process_image_command_line contains \"create\" and action_process_image_command_line contains \"call\"))\n\n\n\n"}
{"prompt": "I want to see Workday logins from blocked countries that were successful.", "response": "dataset = workday_signon_raw\n| dedup User_Name by desc Signon_IP_Address\n| iploc Signon_IP_Address loc_country as SrcCountry,\nloc_asn as SrcASN,\nloc_city as SrcCity\n| alter success = if(Successful = \"1\" or Successful = \"true\", true, false)\n| filter SrcCountry != NULL and success = true\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter (Signon_IP_Address != wl_ipv4 and incidr(Signon_IP_Address, wl_cidr) = false) and SrcCountry not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\")\n| filter Signon_IP_Address != NULL and SrcCountry != NULL\n| fields *\n| view column order = populated"}
{"prompt": "I want to see alerts for accounts locked out due to multiple logon failures, specifically focusing on Red Carpet users.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4740\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type)\n| alter target_user = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| join type = inner\n(dataset = redcarpet_users_list\n| fields username\n) as redcarpusers redcarpusers.username = target_user\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_user, xdm.target.port\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where Odbcconf.exe is executing from a response file.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\odbcconf\\.exe\" or actor_process_file_original_name = \"odbcconf.exe\") and action_process_image_command_line contains \" -f \" and action_process_image_command_line contains \".rsp\")\n\n\n\n"}
{"prompt": "I want to find instances where the PDQDeploy service was installed on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (actor_process_image_path contains \"PDQDeployService.exe\" or ServiceName in (\"PDQDeploy\", \"PDQ Deploy\")))\n\n\n\n"}
{"prompt": "I want to see information about suspicious processes related to Adobe Creative Cloud Experience running the node.exe file but not those that are executing JavaScript.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\Adobe\\ Creative\\ Cloud\\ Experience\\\\libs\\\\node\\.exe\" and  not (action_process_image_command_line contains \"Adobe Creative Cloud Experience\\\\js\")\n\n\n\n"}
{"prompt": " I want to see events related to Cobalt Strike commands being executed using the cmd.exe process. ", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"Cmd.Exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") and ((action_process_image_command_line ~= \"cmd\\ .*\" or action_process_image_command_line ~= \"cmd\\.exe.*\" or action_process_image_command_line ~= \"c\\:\\\\windows\\\\system32\\\\cmd\\.exe.*\") and (action_process_image_command_line contains \"psinject\" or action_process_image_command_line contains \"spawnas\" or action_process_image_command_line contains \"make_token\" or action_process_image_command_line contains \"remote-exec\" or action_process_image_command_line contains \"rev2self\" or action_process_image_command_line contains \"dcsync\" or action_process_image_command_line contains \"logonpasswords\" or action_process_image_command_line contains \"execute-assembly\" or action_process_image_command_line contains \"getsystem\")))\n\n\n\n"}
{"prompt": "I want to see alerts for port scanning activity between external IP addresses that is being blocked by my firewalls.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw, cisco_asa_raw)\n\n| join type = inner\n(dataset = wl_ip_cidrs\n| filter wl_logsrc = \"cnx_ext_pub_ip\" and wl_type = \"ipv4\"\n) as cnxextips cnxextips.wl_value = xdm.target.ipv4\n| filter (xdm.source.is_internal_ip = false and xdm.target.is_internal_ip = false) and xdm.observer.action in (\"deny\") and len(to_string(xdm.target.port)) <= 4 and wl_value = xdm.target.ipv4\n| comp first(_time) as FirstTimestamp,\nlatest(_time) as LatestTimestamp,\nvalues(xdm.target.port) as TargetPorts,\ncount() as EventCount by xdm.source.ipv4,\nxdm.target.ipv4,\nxdm.network.ip_protocol,\nxdm.event.original_event_type,\nxdm.observer.product,\nxdm.observer.action\n| filter array_length(TargetPorts) >= 5 and timestamp_diff(LatestTimestamp, FirstTimestamp, \"MINUTE\") <= 30"}
{"prompt": "I want to see events related to potentially malicious AppX package installations from uncommon locations.", "response": "datamodel\n| filter xdm.event.id = 854 and  not ((xdm.target.process.executable.path ~= \".*C\\:\\\\Program\\ Files\\\\WindowsApps\\\\.*\" or xdm.target.process.executable.path ~= \".*C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.target.process.executable.path ~= \".*C\\:\\\\Windows\\\\SystemApps\\\\.*\" or xdm.target.process.executable.path ~= \".*C\\:\\\\Windows\\\\PrintDialog\\\\.*\" or xdm.target.process.executable.path ~= \".*C\\:\\\\Windows\\\\ImmersiveControlPanel\\\\.*\" or xdm.target.process.executable.path contains \"x-windowsupdate:\n\n\n\n"}
{"prompt": "I want to find users who are transferring more than 200 million bytes of data remotely in a single day.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category ~= \"remote access\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\nsum(rbytes) as total_bytes,\ncount() as matched_events by user_dst\n| filter total_bytes > 200000000\n| alter alert_category = \"Initial Access\""}
{"prompt": "I want to see alerts for suspicious Kerberos manipulation events on my endpoints.", "response": "preset = xdr_event_log\n| alter Status = regextract(to_json_string(action_evtlog_data_fields)->Status{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (675, 4768, 4769, 4771) and Status in (\"0x9\", \"0xA\", \"0xB\", \"0xF\", \"0x10\", \"0x11\", \"0x13\", \"0x14\", \"0x1A\", \"0x1F\", \"0x21\", \"0x22\", \"0x23\", \"0x24\", \"0x26\", \"0x27\", \"0x28\", \"0x29\", \"0x2C\", \"0x2D\", \"0x2E\", \"0x2F\", \"0x31\", \"0x32\", \"0x3E\", \"0x3F\", \"0x40\", \"0x41\", \"0x43\", \"0x44\"))\n\n\n\n"}
{"prompt": "I want to see alerts about foreign clients being dropped on my wireless LAN controller.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_wlc_raw\n| alter msg_id = concat(xdm.event.original_event_type, \"-\", xdm.alert.severity, \"-\", xdm.event.operation_sub_type),\ndevice_ip = cisco_wlc_raw._final_reporting_device_ip,\nserver_name = arrayindex(regextract(cisco_wlc_raw._raw_log, \"\\<\\d+\\>([^\\:]+)\"), 0),\nmac_address = arrayindex(regextract(cisco_wlc_raw._raw_log, \"for\\s+client\\s([^\\s]+)\"), 0),\nxdm.source.user.username = if(xdm.source.user.username = null, arrayindex(regextract(cisco_wlc_raw._raw_log, \"user\\saccount\\s\\(([^\\)]+)\"), 0), xdm.source.user.username)\n| alter mac_address = coalesce(mac_address, if(xdm.source.host.mac_addresses = null, null, to_string(xdm.source.host.mac_addresses)))\n| filter msg_id in (\"DHCP-3-DROP_FOREIGN_CLIENT\")\n| fields msg_id, xdm.event.original_event_type, xdm.alert.severity,\nxdm.event.operation_sub_type, xdm.event.description,\nxdm.event.log_level, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.source.ipv4, xdm.source.ipv6, xdm.source.port,\nmac_address, xdm.source.process.name, xdm.source.user.username,\nxdm.source.agent.identifier, xdm.source.agent.type,\nxdm.target.ipv4, xdm.target.ipv6, xdm.target.port,\nxdm.target.host.ipv4_addresses, xdm.target.host.ipv6_addresses,\nxdm.target.interface, xdm.target.agent.identifier,\nxdm.target.host.hostname, xdm.target.host.mac_addresses,\nxdm.target.resource.type, xdm.target.resource_before.value,\nxdm.target.resource.value, xdm.session_context_id,\nxdm.alert.description, xdm.network.rule, xdm.network.ip_protocol,\nxdm.network.tls.cipher, cisco_wlc_raw._raw_log, device_ip,\nserver_name, _time, _insert_time, _product, _vendor\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see if PowerShell script execution is enabled on Windows systems.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Policies\\\\Microsoft\\\\Windows\\\\PowerShell\\\\EnableScripts\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to detect instances of attackers using the GUP utility to execute arbitrary binaries on Windows endpoints by launching explorer.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\gup\\.exe\" and action_process_image_path ~= \".*\\\\explorer\\.exe\") and  not ((action_process_image_path ~= \".*\\\\explorer\\.exe\" and action_process_image_command_line contains \"\\\\Notepad++\\\\notepad++.exe\") or actor_process_image_path ~= \".*\\\\Notepad\\+\\+\\\\updater\\\\.*\" or action_process_image_command_line = \"None\")\n\n\n\n"}
{"prompt": "I want to see Amazon VPC changes detected by Cortex XQL.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name = \"EV_CloudTrail\"\n| filter eventName IN (\"Createvpc\", \"Deletevpc\", \"ModifyvpcAttribute\", \"AcceptvpcPeeringConnection\", \"CreatevpcPeeringConnection\", \"DeletevpcPeeringConnection\", \"RejectvpcPeeringConnection\", \"AttachClassicLinkvpc\", \"DetachClassicLinkvpc\", \"DisablevpcClassicLink\", \"EnablevpcClassicLink\")\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username1 = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username2 = json_extract_scalar(userIdentity, \"$.userName\"),\ntarget_username3 = trim(json_extract(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"\\\"\")\n| filter target_username1 = \"root\" or target_username2 = \"root\" or target_username3 = \"root\" or source_username = \"root\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find out if any new .evtx files are being created in unusual locations on my system.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\.evtx\" and  not (xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\winevt\\\\Logs\\\\.*\" or (xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Containers\\\\BaseImages\\\\.*\" and xdm.target.file.filename ~= \".*\\\\Windows\\\\System32\\\\winevt\\\\Logs\\\\\"))\n\n\n\n"}
{"prompt": "I want to see a list of Cisco Firepower events that have triggered an alert for signature \"430001\" within the last 5 minutes, excluding known good sources and showing the number of matched events.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.observer.action = \"alert\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\" and xdm.source.ipv4 != \"0.0.0.0\" and xdm.target.ipv4 != \"0.0.0.0\"\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.event.description,\n_time\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ilsourceip\",\naggregation_criteria1 = \"ilsigname\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of malicious activity where PowerShell is used to run scripts retrieved from Active Directory.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \"Get-Content\" and action_process_image_command_line contains \"-Stream\"))\n\n\n\n"}
{"prompt": "I want to detect if someone is using a backdoor technique similar to Sticky Keys by looking at changes made to the Windows registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Image\\ File\\ Execution\\ Options\\\\sethc\\.exe\\\\Debugger\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Image\\ File\\ Execution\\ Options\\\\utilman\\.exe\\\\Debugger\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Image\\ File\\ Execution\\ Options\\\\osk\\.exe\\\\Debugger\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Image\\ File\\ Execution\\ Options\\\\Magnify\\.exe\\\\Debugger\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Image\\ File\\ Execution\\ Options\\\\Narrator\\.exe\\\\Debugger\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Image\\ File\\ Execution\\ Options\\\\DisplaySwitch\\.exe\\\\Debugger\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Image\\ File\\ Execution\\ Options\\\\atbroker\\.exe\\\\Debugger\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Image\\ File\\ Execution\\ Options\\\\HelpPane\\.exe\\\\Debugger\")\n\n\n\n"}
{"prompt": "I want to see events related to malicious Base64 encoded PowerShell invoke cmdlets on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"SQBuAHYAbwBrAGUALQBCAGwAbwBvAGQASABvAHUAbgBkA\" or action_process_image_command_line contains \"kAbgB2AG8AawBlAC0AQgBsAG8AbwBkAEgAbwB1AG4AZA\" or action_process_image_command_line contains \"JAG4AdgBvAGsAZQAtAEIAbABvAG8AZABIAG8AdQBuAGQA\" or action_process_image_command_line contains \"SQBuAHYAbwBrAGUALQBNAGkAbQBpAGsAYQB0AHoA\" or action_process_image_command_line contains \"kAbgB2AG8AawBlAC0ATQBpAG0AaQBrAGEAdAB6A\" or action_process_image_command_line contains \"JAG4AdgBvAGsAZQAtAE0AaQBtAGkAawBhAHQAeg\" or action_process_image_command_line contains \"SQBuAHYAbwBrAGUALQBXAE0ASQBFAHgAZQBjA\" or action_process_image_command_line contains \"kAbgB2AG8AawBlAC0AVwBNAEkARQB4AGUAYw\" or action_process_image_command_line contains \"JAG4AdgBvAGsAZQAtAFcATQBJAEUAeABlAGMA\")\n\n\n\n"}
{"prompt": "I want to see alerts for malicious activity related to \"esentutl.exe\" that accesses the WebCache folder, specifically when it uses the \"-r\" or \"/r\" switch.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\esentutl\\.exe\" or actor_process_file_original_name = \"esentutl.exe\") and (action_process_image_command_line contains \"-r\" or action_process_image_command_line contains \"/r\") and action_process_image_command_line contains \"\\\\Windows\\\\WebCache\")\n\n\n\n"}
{"prompt": "I want to see a list of users who have had 10 or more failed SSH login attempts on Unix servers within the last 5 minutes.", "response": "datamodel dataset = linux_linux_raw\n| bin _time span = 5m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"RSD-Unix-servers\", \"sdam_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"sshd\" and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol = \"ssh2\" and xdm.source.user.username not in (NULL, \"<users>\") and xdm.source.ipv4 not in (\"<ip>\")\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"isg_server_qualys_src\")\n) as device_grps device_grps.IP = xdm.source.ipv4\n| filter IP = null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, linux_linux_raw._final_reporting_device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| comp count() as matched_events,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find indicators of adversaries attempting to disable the Scripted Diagnostics Turn Off Check on Windows systems through registry modifications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Policies\\\\Microsoft\\\\Windows\\\\ScriptedDiagnostics\\\\TurnOffCheck\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to see details about failed login attempts from disabled Windows accounts on my network, including the IP address and username of the attempted login.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| alter TargetUserName = event_data -> TargetUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nSubjectUserSid = event_data -> SubjectUserSid,\nTargetDomainName = event_data -> TargetDomainName,\nStatus = event_data -> Status,\nStatusDescription = \"Indicates referenced user name and authentication information are valid, but some user account restriction has prevent successful authentication.\",\nProcessId = event_data -> ProcessId,\nSubjectUserName = event_data -> SubjectUserName,\nSubjectLogonId = event_data -> SubjectLogonId,\nTargetUserSid = event_data -> TargetUserSid,\nFailureReason = event_data -> FailureReason,\nSubStatus = event_data -> SubStatus,\nSubStatusDescription = \"Account is currently disabled\",\nLogonType = event_data -> LogonType,\nLogonTypeDescription = \"A user or computer logged on to this computer from the network.\",\nLogonProcessName = event_data -> LogonProcessName,\nAuthenticationPackageName = event_data -> AuthenticationPackageName,\nWorkstationName = event_data -> WorkstationName,\nTransmittedServices = event_data -> TransmittedServices,\nLmPackageName = event_data -> LmPackageName,\nKeyLength = event_data -> KeyLength,\nProcessName = event_data -> ProcessName,\nIpAddress = event_data -> IpAddress,\nIpPort = event_data -> IpPort\n| filter event_id in (4625) and SubStatus in (\"0xC0000072\")\n| alter Desc_String = if(incidr(_collector_internal_ip_address, \"10.208.0.0/16\"), \"New Avalon\", if(incidr(_collector_internal_ip_address, \"10.38.0.0/16\"), \"New Avalon\", \".\"))\n| fields WorkstationName, host_name, IpAddress, SubjectUserName,\nSubjectDomainName, SubjectLogonId, TargetUserName,\nTargetDomainName, FailureReason, SubStatus, SubStatusDescription,\nLogonType, LogonTypeDescription, *"}
{"prompt": "I want to see network activity related to Silenttrinity stagers that use Msbuild.exe and communicate on ports 80 or 443.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter actor_process_image_path ~= \".*\\\\msbuild\\.exe\" and ((action_local_port in (80, 443) or action_remote_port in (80, 443)) and Initiated = \"true\")\n\n\n\n"}
{"prompt": "I want to find information about the Moriya Rootkit that targets system services on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and ServiceName = \"ZzNetSvc\")\n\n\n\n"}
{"prompt": "I want to detect instances of COM Hijacking via TreatAs attacks based on registry modifications detected by Windows Event Logs.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*TreatAs\\\\\\(Default\\)\" and  not ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\.*\" and actor_process_image_path ~= \".*\\\\OfficeClickToRun\\.exe\") or actor_process_image_path = \"C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe\" or actor_process_image_path = \"C:\\\\Windows\\\\system32\\\\svchost.exe\" or actor_process_image_path in (\"C:\\\\Windows\\\\system32\\\\msiexec.exe\", \"C:\\\\Windows\\\\SysWOW64\\\\msiexec.exe\"))\n\n\n\n"}
{"prompt": "I want to see all firewall pairs that haven't received any log entries for the last 4 hours across Avalon Firewalls.", "response": "config case_sensitive = false\n| preset = metrics_view\n| filter _product in (\"ASA\", \"Fortigate\")\n| alter Search_Span_Diff = last_seen\n| bin Search_Span_Diff span = 4H\n| alter Desc_String = if(_broker_device_name contains \"NEWAVLON\", \"New Avalon\", \".\")\n| join type = left\n(dataset = Avalon_Firewalls_Pri_Sec\n| alter DevicePair_Pri_Sec = concat(\"Pri-\", Source_IP_Pri, \"-Sec-\", Source_IP_Sec)\n) as dev_ps2(dev_ps2.Source_IP_Pri = _final_reporting_device_ip or dev_ps2.Source_IP_Sec = _final_reporting_device_ip)\n| comp sum(total_event_count) as tec,\nvalues(DevicePair_Pri_Sec) as DevicePair_Pri_n_Sec by _final_reporting_device_ip,\nSearch_Span_Diff,\n_product,\n_vendor,\nRegion,\nLocation addrawdata = true as RW\n| alter DevicePair_PriSec = arrayindex(DevicePair_Pri_n_Sec, 0)\n| filter DevicePair_PriSec not in (\"\"\"\"\"\", null, NULL)\n| comp sum(tec) as final_event_count by DevicePair_PriSec,\n_product,\n_vendor,\nRegion,\nLocation addrawdata = true as RW\n| alter Source_IP_Pri = arrayindex(split(DevicePair_PriSec, \"-\"), 1),\nSource_IP_Sec = arrayindex(split(DevicePair_PriSec, \"-\"), 3)\n| filter final_event_count = 0\n| alter RW1 = to_json_string(RW)\n| alter DS = RW1 -> [0]\n| alter Desc_String = DS -> Desc_String"}
{"prompt": "I want to find events related to the BlueKeep RDP vulnerability exploit on endpoints where the target username is \"AAAAAAA\".", "response": "preset = xdr_event_log\n| alter TargetUserName = regextract(to_json_string(action_evtlog_data_fields)->TargetUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4625 and TargetUserName = \"AAAAAAA\")\n\n\n\n"}
{"prompt": "I want to find events where a user is added to the root or sudoers group using the usermod command.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/usermod\" and (action_process_image_command_line contains \"-aG root\" or action_process_image_command_line contains \"-aG sudoers\"))\n\n\n\n"}
{"prompt": "I want to identify potentially malicious processes disguised as legitimate Sysinternals tools.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\accesschk\\.exe\" or action_process_image_path ~= \".*\\\\accesschk64\\.exe\" or action_process_image_path ~= \".*\\\\AccessEnum\\.exe\" or action_process_image_path ~= \".*\\\\ADExplorer\\.exe\" or action_process_image_path ~= \".*\\\\ADExplorer64\\.exe\" or action_process_image_path ~= \".*\\\\ADInsight\\.exe\" or action_process_image_path ~= \".*\\\\ADInsight64\\.exe\" or action_process_image_path ~= \".*\\\\adrestore\\.exe\" or action_process_image_path ~= \".*\\\\adrestore64\\.exe\" or action_process_image_path ~= \".*\\\\Autologon\\.exe\" or action_process_image_path ~= \".*\\\\Autologon64\\.exe\" or action_process_image_path ~= \".*\\\\Autoruns\\.exe\" or action_process_image_path ~= \".*\\\\Autoruns64\\.exe\" or action_process_image_path ~= \".*\\\\autorunsc\\.exe\" or action_process_image_path ~= \".*\\\\autorunsc64\\.exe\" or action_process_image_path ~= \".*\\\\Bginfo\\.exe\" or action_process_image_path ~= \".*\\\\Bginfo64\\.exe\" or action_process_image_path ~= \".*\\\\Cacheset\\.exe\" or action_process_image_path ~= \".*\\\\Cacheset64\\.exe\" or action_process_image_path ~= \".*\\\\Clockres\\.exe\" or action_process_image_path ~= \".*\\\\Clockres64\\.exe\" or action_process_image_path ~= \".*\\\\Contig\\.exe\" or action_process_image_path ~= \".*\\\\Contig64\\.exe\" or action_process_image_path ~= \".*\\\\Coreinfo\\.exe\" or action_process_image_path ~= \".*\\\\Coreinfo64\\.exe\" or action_process_image_path ~= \".*\\\\CPUSTRES\\.EXE\" or action_process_image_path ~= \".*\\\\CPUSTRES64\\.EXE\" or action_process_image_path ~= \".*\\\\ctrl2cap\\.exe\" or action_process_image_path ~= \".*\\\\Dbgview\\.exe\" or action_process_image_path ~= \".*\\\\dbgview64\\.exe\" or action_process_image_path ~= \".*\\\\Desktops\\.exe\" or action_process_image_path ~= \".*\\\\Desktops64\\.exe\" or action_process_image_path ~= \".*\\\\disk2vhd\\.exe\" or action_process_image_path ~= \".*\\\\disk2vhd64\\.exe\" or action_process_image_path ~= \".*\\\\diskext\\.exe\" or action_process_image_path ~= \".*\\\\diskext64\\.exe\" or action_process_image_path ~= \".*\\\\Diskmon\\.exe\" or action_process_image_path ~= \".*\\\\Diskmon64\\.exe\" or action_process_image_path ~= \".*\\\\DiskView\\.exe\" or action_process_image_path ~= \".*\\\\DiskView64\\.exe\" or action_process_image_path ~= \".*\\\\du\\.exe\" or action_process_image_path ~= \".*\\\\du64\\.exe\" or action_process_image_path ~= \".*\\\\efsdump\\.exe\" or action_process_image_path ~= \".*\\\\FindLinks\\.exe\" or action_process_image_path ~= \".*\\\\FindLinks64\\.exe\" or action_process_image_path ~= \".*\\\\handle\\.exe\" or action_process_image_path ~= \".*\\\\handle64\\.exe\" or action_process_image_path ~= \".*\\\\hex2dec\\.exe\" or action_process_image_path ~= \".*\\\\hex2dec64\\.exe\" or action_process_image_path ~= \".*\\\\junction\\.exe\" or action_process_image_path ~= \".*\\\\junction64\\.exe\" or action_process_image_path ~= \".*\\\\ldmdump\\.exe\" or action_process_image_path ~= \".*\\\\listdlls\\.exe\" or action_process_image_path ~= \".*\\\\listdlls64\\.exe\" or action_process_image_path ~= \".*\\\\livekd\\.exe\" or action_process_image_path ~= \".*\\\\livekd64\\.exe\" or action_process_image_path ~= \".*\\\\loadOrd\\.exe\" or action_process_image_path ~= \".*\\\\loadOrd64\\.exe\" or action_process_image_path ~= \".*\\\\loadOrdC\\.exe\" or action_process_image_path ~= \".*\\\\loadOrdC64\\.exe\" or action_process_image_path ~= \".*\\\\logonsessions\\.exe\" or action_process_image_path ~= \".*\\\\logonsessions64\\.exe\" or action_process_image_path ~= \".*\\\\movefile\\.exe\" or action_process_image_path ~= \".*\\\\movefile64\\.exe\" or action_process_image_path ~= \".*\\\\notmyfault\\.exe\" or action_process_image_path ~= \".*\\\\notmyfault64\\.exe\" or action_process_image_path ~= \".*\\\\notmyfaultc\\.exe\" or action_process_image_path ~= \".*\\\\notmyfaultc64\\.exe\" or action_process_image_path ~= \".*\\\\ntfsinfo\\.exe\" or action_process_image_path ~= \".*\\\\ntfsinfo64\\.exe\" or action_process_image_path ~= \".*\\\\pendmoves\\.exe\" or action_process_image_path ~= \".*\\\\pendmoves64\\.exe\" or action_process_image_path ~= \".*\\\\pipelist\\.exe\" or action_process_image_path ~= \".*\\\\pipelist64\\.exe\" or action_process_image_path ~= \".*\\\\portmon\\.exe\" or action_process_image_path ~= \".*\\\\procdump\\.exe\" or action_process_image_path ~= \".*\\\\procdump64\\.exe\" or action_process_image_path ~= \".*\\\\procexp\\.exe\" or action_process_image_path ~= \".*\\\\procexp64\\.exe\" or action_process_image_path ~= \".*\\\\Procmon\\.exe\" or action_process_image_path ~= \".*\\\\Procmon64\\.exe\" or action_process_image_path ~= \".*\\\\psExec\\.exe\" or action_process_image_path ~= \".*\\\\psExec64\\.exe\" or action_process_image_path ~= \".*\\\\psfile\\.exe\" or action_process_image_path ~= \".*\\\\psfile64\\.exe\" or action_process_image_path ~= \".*\\\\psGetsid\\.exe\" or action_process_image_path ~= \".*\\\\psGetsid64\\.exe\" or action_process_image_path ~= \".*\\\\psInfo\\.exe\" or action_process_image_path ~= \".*\\\\psInfo64\\.exe\" or action_process_image_path ~= \".*\\\\pskill\\.exe\" or action_process_image_path ~= \".*\\\\pskill64\\.exe\" or action_process_image_path ~= \".*\\\\pslist\\.exe\" or action_process_image_path ~= \".*\\\\pslist64\\.exe\" or action_process_image_path ~= \".*\\\\psLoggedon\\.exe\" or action_process_image_path ~= \".*\\\\psLoggedon64\\.exe\" or action_process_image_path ~= \".*\\\\psloglist\\.exe\" or action_process_image_path ~= \".*\\\\psloglist64\\.exe\" or action_process_image_path ~= \".*\\\\pspasswd\\.exe\" or action_process_image_path ~= \".*\\\\pspasswd64\\.exe\" or action_process_image_path ~= \".*\\\\psping\\.exe\" or action_process_image_path ~= \".*\\\\psping64\\.exe\" or action_process_image_path ~= \".*\\\\psService\\.exe\" or action_process_image_path ~= \".*\\\\psService64\\.exe\" or action_process_image_path ~= \".*\\\\psshutdown\\.exe\" or action_process_image_path ~= \".*\\\\psshutdown64\\.exe\" or action_process_image_path ~= \".*\\\\pssuspend\\.exe\" or action_process_image_path ~= \".*\\\\pssuspend64\\.exe\" or action_process_image_path ~= \".*\\\\RAMMap\\.exe\" or action_process_image_path ~= \".*\\\\RDCMan\\.exe\" or action_process_image_path ~= \".*\\\\RegDelNull\\.exe\" or action_process_image_path ~= \".*\\\\RegDelNull64\\.exe\" or action_process_image_path ~= \".*\\\\regjump\\.exe\" or action_process_image_path ~= \".*\\\\ru\\.exe\" or action_process_image_path ~= \".*\\\\ru64\\.exe\" or action_process_image_path ~= \".*\\\\sdelete\\.exe\" or action_process_image_path ~= \".*\\\\sdelete64\\.exe\" or action_process_image_path ~= \".*\\\\ShareEnum\\.exe\" or action_process_image_path ~= \".*\\\\ShareEnum64\\.exe\" or action_process_image_path ~= \".*\\\\shellRunas\\.exe\" or action_process_image_path ~= \".*\\\\sigcheck\\.exe\" or action_process_image_path ~= \".*\\\\sigcheck64\\.exe\" or action_process_image_path ~= \".*\\\\streams\\.exe\" or action_process_image_path ~= \".*\\\\streams64\\.exe\" or action_process_image_path ~= \".*\\\\strings\\.exe\" or action_process_image_path ~= \".*\\\\strings64\\.exe\" or action_process_image_path ~= \".*\\\\sync\\.exe\" or action_process_image_path ~= \".*\\\\sync64\\.exe\" or action_process_image_path ~= \".*\\\\Sysmon\\.exe\" or action_process_image_path ~= \".*\\\\Sysmon64\\.exe\" or action_process_image_path ~= \".*\\\\tcpvcon\\.exe\" or action_process_image_path ~= \".*\\\\tcpvcon64\\.exe\" or action_process_image_path ~= \".*\\\\tcpview\\.exe\" or action_process_image_path ~= \".*\\\\tcpview64\\.exe\" or action_process_image_path ~= \".*\\\\Testlimit\\.exe\" or action_process_image_path ~= \".*\\\\Testlimit64\\.exe\" or action_process_image_path ~= \".*\\\\vmmap\\.exe\" or action_process_image_path ~= \".*\\\\vmmap64\\.exe\" or action_process_image_path ~= \".*\\\\Volumeid\\.exe\" or action_process_image_path ~= \".*\\\\Volumeid64\\.exe\" or action_process_image_path ~= \".*\\\\whois\\.exe\" or action_process_image_path ~= \".*\\\\whois64\\.exe\" or action_process_image_path ~= \".*\\\\Winobj\\.exe\" or action_process_image_path ~= \".*\\\\Winobj64\\.exe\" or action_process_image_path ~= \".*\\\\ZoomIt\\.exe\" or action_process_image_path ~= \".*\\\\ZoomIt64\\.exe\") and  not (action_process_signature_vendor in (\"Sysinternals - www.sysinternals.com\", \"Sysinternals\") or action_process_signature_vendor = \"None\")\n\n\n\n"}
{"prompt": "I want to find users who are exhibiting unusually high web traffic today compared to their average over the last week, specifically those looking for jobs or employment on websites.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and category contains \"Job/Employment Search\"\n| comp count() as current_day_access,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and category contains \"Job/Employment Search\"\n| comp count() as 7_days_traffic,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp count() as 7_days_access_times,\navg(7_days_traffic) as 7_days_traffic_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_access > multiply(7_days_traffic_avg, 2) and 7_days_access_times >= 3\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find XDR Collectors that haven't sent any logs for at least 4 hours and have only received one set of logs during this period.", "response": "config case_sensitive = false\n| preset = metrics_view\n| fields - _collector_hostname\n| filter _collector_type in (\"XDR Collector\")\n| alter Desc_String = if(incidr(_collector_internal_ip_address, \"<ip>\"), \"New Avalon\", if(incidr(_collector_internal_ip_address, \"<ip>\"), \"New Avalon\", \".\"))\n| join type = inner\n(config case_sensitive = false\n| dataset = bb_xdrc_id_hn_ip_grpnm\n) as xdrci xdrci.XDR_Collector_ID = _collector_id\n| alter bin_time = _time\n| bin bin_time span = 240m timeshift = 1707782400\n| filter XDR_Collector_IPAddress not in (\"<ip>\")\n| comp latest(last_seen) as Last_Seen,\nsum(total_event_count) as Last_Event_Count,\ncount_distinct(total_event_count) as DC_TEC,\nvalues(to_string(total_event_count)) as List_TEC,\nvalues(XDR_Collector_IPAddress) as XDR_Collector_IPAddress,\nvalues(XDR_Host_Name) as XDR_Host_Name,\nvalues(XDR_Collector_GroupName) as XDR_Collector_GroupName by bin_time,\nXDR_Collector_ID,\n_collector_name,\n_vendor,\n_product addrawdata = true as RW\n| alter Minutes_Since_Last_Event = timestamp_diff(current_time(), Last_Seen, \"MINUTE\"),\nXDR_Collector_IPAddress = arraystring(XDR_Collector_IPAddress, \"\"),\nXDR_Host_Name = arraystring(XDR_Host_Name, \"\"),\nList_TEC = arraydistinct(List_TEC),\nXDR_Collector_GroupName = arraystring(XDR_Collector_GroupName, \"\")\n| filter (DC_TEC = 1 and array_length(List_TEC) = 1 and Minutes_Since_Last_Event >= 240) and Last_Event_Count = 0\n| alter RW1 = to_json_string(RW)\n| alter DS = RW1 -> [0]\n| alter Desc_String = DS -> Desc_String"}
{"prompt": "I want to see detections related to Windows processes connecting to GitHub repositories.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (Initiated = \"true\" and (action_external_hostname ~= \".*\\.github\\.com\" or action_external_hostname ~= \".*\\.githubusercontent\\.com\") and actor_process_image_path ~= \"C\\:\\\\Windows\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find instances of PHP code executing inline commands using the `-r` flag.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\php\\.exe\" or actor_process_file_original_name = \"php.exe\") and action_process_image_command_line contains \" -r\")\n\n\n\n"}
{"prompt": "I want to find instances where AgentExecutor.exe is used with PowerShell and potential remediation scripts, excluding normal system calls.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\AgentExecutor\\.exe\" or actor_process_file_original_name = \"AgentExecutor.exe\") and (action_process_image_command_line contains \" -powershell\" or action_process_image_command_line contains \" -remediationScript\")) and  not ((action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1\\.0\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1\\.0\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see events related to files named \"ds7002.lnk\", \"ds7002.pdf\", or \"ds7002.zip\" associated with the APT29 2018 Phishing Campaign.", "response": "datamodel\n| filter (xdm.target.file.filename contains \"ds7002.lnk\" or xdm.target.file.filename contains \"ds7002.pdf\" or xdm.target.file.filename contains \"ds7002.zip\")\n\n\n\n"}
{"prompt": " I want to see events related to the Apache Spark Shell Command Injection vulnerability that involve process creation on endpoints. ", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\bash\" and (action_process_image_command_line contains \"id -Gn `\" or action_process_image_command_line contains \"id -Gn '\"))\n\n\n\n"}
{"prompt": "I want to see alerts for potential Denial of Service attacks through excessive Proxy authentication requests on my Cisco Catalyst devices.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"AP-1-AUTH_PROXY_DDOS_ATTACK\", \"AP-1-AUTH_PROXY_DOS_ATTACK\", \"AP-1-AUTH_PROXY_DOS_ATTACK:01\")\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential suspicious child processes on macOS endpoints that are created by JAMF and involve bash or sh scripts.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\/jamf\" and (action_process_image_path ~= \".*\\/bash\" or action_process_image_path ~= \".*\\/sh\"))\n\n\n\n"}
{"prompt": "I want to see events where users accessed sensitive file extensions like .bak, .dmp, or .edb on endpoints.", "response": "preset = xdr_event_log\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and (RelativeTargetName ~= \".*\\.bak\" or RelativeTargetName ~= \".*\\.dmp\" or RelativeTargetName ~= \".*\\.edb\" or RelativeTargetName ~= \".*\\.kirbi\" or RelativeTargetName ~= \".*\\.msg\" or RelativeTargetName ~= \".*\\.nsf\" or RelativeTargetName ~= \".*\\.nst\" or RelativeTargetName ~= \".*\\.oab\" or RelativeTargetName ~= \".*\\.ost\" or RelativeTargetName ~= \".*\\.pst\" or RelativeTargetName ~= \".*\\.rdp\" or RelativeTargetName ~= \".*\\\\groups\\.xml\"))\n\n\n\n"}
{"prompt": "I want to see events where a user is removed from specific SOX monitoring groups on Concentrix and Daksh domains.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (4729)\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = arrayindex(regextract(message, \"Account Name:\\t\\tCN\\=([^\\,]+)\\,\"), 0),\nTargetGroupName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| filter SubjectUserName not contains \"$\" and TargetUserName not contains \"$\" and TargetUserName not in (null, NULL, \"\"\"\"\"\")\n| fields SubjectUserName, SubjectDomainName, TargetUserName,\nTargetDomainName, event_id, event_result, event_action,\nevent_data, _collector_name, _collector_type, _collector_hostname,\n_collector_ip_address, _collector_id, *\n| filter (TargetDomainName contains \"concentrix\" and (TargetGroupName contains \"grp_cnx_phl_it_system_admin_privileged_access\" or TargetGroupName contains \"SQLDBAGLOBAL\" or TargetGroupName contains \"Domain Admins\" or TargetGroupName contains \"emea_Serverteam\" or TargetGroupName contains \"SGP-SAGE-Admin\")) or (TargetDomainName contains \"Daksh\" and TargetGroupName contains \"Domain Admins\")"}
{"prompt": "I want to find instances of the AdminSDHolder Backdoor attack, which is a type of Lateral Movement tactic, by looking for specific events in the Windows Event Log.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"5136\") and xdm.event.description contains \"CN=AdminSDHolder,CN=System*\"\n| fields xdm.event.id, xdm.event.description, xdm.event.*,\nxdm.alert.*, xdm.observer.*, *"}
{"prompt": "I want to find instances where Ldifde.exe is used with the \"-i\" flag to import LDAP data files from remote servers.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\ldifde\\.exe\" or actor_process_file_original_name = \"ldifde.exe\") and (action_process_image_command_line contains \"-i\" and action_process_image_command_line contains \"-f\"))\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple Zscaler potentially Unwanted Software category URLs based on behavioral study.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category contains \"shareware\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 25\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see details about malicious activity flagged by Symantec EP, including web browsing information from Zscaler.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Risk\")\n| alter hostname = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| filter xdm.target.file.sha256 != null and hostname != null\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\ndownload_site = arrayindex(regextract(symantec_ep_raw._raw_log, \"Download site:\\s([^\\,]+)\"), 0),\ndownloaded_by = arrayindex(regextract(symantec_ep_raw._raw_log, \"Downloaded by:\\s([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlast(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(server_name) as server_name,\nvalues(xdm.source.user.username) as username,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ips,\nvalues(xdm.target.ipv4) as dst_ips,\nvalues(download_site) as download_site,\nvalues(downloaded_by) as downloaded_by,\nvalues(xdm.target.file.sha256) as file_hash by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nxdm.target.host.hostname\n| join type = left\n(datamodel dataset = zscaler_nssweblog_raw\n| filter xdm.source.user.username contains \"@\" and xdm.network.application_protocol_category ~= \"Malicious Content\"\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.sam_account_name,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| arrayexpand xdm.source.host.ipv4_addresses\n| filter incidr(xdm.source.host.ipv4_addresses, \"10.0.0.0/8\") = true or incidr(xdm.source.host.ipv4_addresses, \"192.168.0.0/16\") = true or incidr(xdm.source.host.ipv4_addresses, \"172.16.0.0./12\") = true\n| alter machine_ip = xdm.source.host.ipv4_addresses\n| comp values(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url by machine_ip,\nuser_dst,\nMachinename\n) as proxyevents(proxyevents.machine_ip = xdm.target.ipv4 or proxyevents.user_dst = xdm.source.user.sam_account_name or proxyevents.Machinename = `xdm.target.host.hostname`)\n| filter (ip_src != null or user_dst != null or Machinename != null)\n| alter process = replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_address = replace(replace(replace(to_string(ip_address), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nrisk_name = replace(replace(replace(to_string(risk_name), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nfile_name = arrayindex(split(replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"), \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(process, file_name, \"\")"}
{"prompt": "I want to detect activity from the LockerGoga ransomware using process creation events on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"-i SM-tgytutrc -s\"\n\n\n\n"}
{"prompt": " I want to find instances where \"Enable-WindowsOptionalFeature\" is used to enable potentially suspicious Windows features like TelnetServer, Internet Explorer Optional, TFTP, SMB1Protocol, Client-ProjFS, or Microsoft-Windows-Subsystem-Linux. ", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"Enable-WindowsOptionalFeature\" and action_process_image_command_line contains \"-Online\" and action_process_image_command_line contains \"-FeatureName\") and (action_process_image_command_line contains \"TelnetServer\" or action_process_image_command_line contains \"Internet-Explorer-Optional-amd64\" or action_process_image_command_line contains \"TFTP\" or action_process_image_command_line contains \"SMB1Protocol\" or action_process_image_command_line contains \"Client-ProjFS\" or action_process_image_command_line contains \"Microsoft-Windows-Subsystem-Linux\"))\n\n\n\n"}
{"prompt": "I want to identify potential system DLL sideloading attacks from non-system locations based on provided process and module information.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\shfolder\\.dll\" or action_module_path ~= \".*\\\\activeds\\.dll\" or action_module_path ~= \".*\\\\adsldpc\\.dll\" or action_module_path ~= \".*\\\\aepic\\.dll\" or action_module_path ~= \".*\\\\apphelp\\.dll\" or action_module_path ~= \".*\\\\applicationframe\\.dll\" or action_module_path ~= \".*\\\\appxalluserstore\\.dll\" or action_module_path ~= \".*\\\\appxdeploymentclient\\.dll\" or action_module_path ~= \".*\\\\archiveint\\.dll\" or action_module_path ~= \".*\\\\atl\\.dll\" or action_module_path ~= \".*\\\\audioses\\.dll\" or action_module_path ~= \".*\\\\auditpolcore\\.dll\" or action_module_path ~= \".*\\\\authfwcfg\\.dll\" or action_module_path ~= \".*\\\\authz\\.dll\" or action_module_path ~= \".*\\\\avrt\\.dll\" or action_module_path ~= \".*\\\\bcd\\.dll\" or action_module_path ~= \".*\\\\bcp47langs\\.dll\" or action_module_path ~= \".*\\\\bcp47mrm\\.dll\" or action_module_path ~= \".*\\\\bcrypt\\.dll\" or action_module_path ~= \".*\\\\cabinet\\.dll\" or action_module_path ~= \".*\\\\cabview\\.dll\" or action_module_path ~= \".*\\\\certenroll\\.dll\" or action_module_path ~= \".*\\\\cldapi\\.dll\" or action_module_path ~= \".*\\\\clipc\\.dll\" or action_module_path ~= \".*\\\\clusapi\\.dll\" or action_module_path ~= \".*\\\\cmpbk32\\.dll\" or action_module_path ~= \".*\\\\coloradapterclient\\.dll\" or action_module_path ~= \".*\\\\colorui\\.dll\" or action_module_path ~= \".*\\\\comdlg32\\.dll\" or action_module_path ~= \".*\\\\connect\\.dll\" or action_module_path ~= \".*\\\\coremessaging\\.dll\" or action_module_path ~= \".*\\\\credui\\.dll\" or action_module_path ~= \".*\\\\cryptbase\\.dll\" or action_module_path ~= \".*\\\\cryptdll\\.dll\" or action_module_path ~= \".*\\\\cryptui\\.dll\" or action_module_path ~= \".*\\\\cryptxml\\.dll\" or action_module_path ~= \".*\\\\cscapi\\.dll\" or action_module_path ~= \".*\\\\cscobj\\.dll\" or action_module_path ~= \".*\\\\cscui\\.dll\" or action_module_path ~= \".*\\\\d2d1\\.dll\" or action_module_path ~= \".*\\\\d3d10\\.dll\" or action_module_path ~= \".*\\\\d3d10\\_1\\.dll\" or action_module_path ~= \".*\\\\d3d10\\_1core\\.dll\" or action_module_path ~= \".*\\\\d3d10core\\.dll\" or action_module_path ~= \".*\\\\d3d10warp\\.dll\" or action_module_path ~= \".*\\\\d3d11\\.dll\" or action_module_path ~= \".*\\\\d3d12\\.dll\" or action_module_path ~= \".*\\\\d3d9\\.dll\" or action_module_path ~= \".*\\\\dataexchange\\.dll\" or action_module_path ~= \".*\\\\davclnt\\.dll\" or action_module_path ~= \".*\\\\dcomp\\.dll\" or action_module_path ~= \".*\\\\defragproxy\\.dll\" or action_module_path ~= \".*\\\\desktopshellext\\.dll\" or action_module_path ~= \".*\\\\deviceassociation\\.dll\" or action_module_path ~= \".*\\\\devicecredential\\.dll\" or action_module_path ~= \".*\\\\devicepairing\\.dll\" or action_module_path ~= \".*\\\\devobj\\.dll\" or action_module_path ~= \".*\\\\devrtl\\.dll\" or action_module_path ~= \".*\\\\dhcpcmonitor\\.dll\" or action_module_path ~= \".*\\\\dhcpcsvc\\.dll\" or action_module_path ~= \".*\\\\dhcpcsvc6\\.dll\" or action_module_path ~= \".*\\\\directmanipulation\\.dll\" or action_module_path ~= \".*\\\\dismapi\\.dll\" or action_module_path ~= \".*\\\\dismcore\\.dll\" or action_module_path ~= \".*\\\\dmcfgutils\\.dll\" or action_module_path ~= \".*\\\\dmcmnutils\\.dll\" or action_module_path ~= \".*\\\\dmenrollengine\\.dll\" or action_module_path ~= \".*\\\\dmenterprisediagnostics\\.dll\" or action_module_path ~= \".*\\\\dmiso8601utils\\.dll\" or action_module_path ~= \".*\\\\dmoleaututils\\.dll\" or action_module_path ~= \".*\\\\dmprocessxmlfiltered\\.dll\" or action_module_path ~= \".*\\\\dmpushproxy\\.dll\" or action_module_path ~= \".*\\\\dmxmlhelputils\\.dll\" or action_module_path ~= \".*\\\\dnsapi\\.dll\" or action_module_path ~= \".*\\\\dot3api\\.dll\" or action_module_path ~= \".*\\\\dot3cfg\\.dll\" or action_module_path ~= \".*\\\\drprov\\.dll\" or action_module_path ~= \".*\\\\dsclient\\.dll\" or action_module_path ~= \".*\\\\dsparse\\.dll\" or action_module_path ~= \".*\\\\dsreg\\.dll\" or action_module_path ~= \".*\\\\dsrole\\.dll\" or action_module_path ~= \".*\\\\dui70\\.dll\" or action_module_path ~= \".*\\\\duser\\.dll\" or action_module_path ~= \".*\\\\dusmapi\\.dll\" or action_module_path ~= \".*\\\\dwmapi\\.dll\" or action_module_path ~= \".*\\\\dwrite\\.dll\" or action_module_path ~= \".*\\\\dxgi\\.dll\" or action_module_path ~= \".*\\\\dxva2\\.dll\" or action_module_path ~= \".*\\\\eappcfg\\.dll\" or action_module_path ~= \".*\\\\eappprxy\\.dll\" or action_module_path ~= \".*\\\\edputil\\.dll\" or action_module_path ~= \".*\\\\efsadu\\.dll\" or action_module_path ~= \".*\\\\efsutil\\.dll\" or action_module_path ~= \".*\\\\esent\\.dll\" or action_module_path ~= \".*\\\\execmodelproxy\\.dll\" or action_module_path ~= \".*\\\\explorerframe\\.dll\" or action_module_path ~= \".*\\\\fastprox\\.dll\" or action_module_path ~= \".*\\\\faultrep\\.dll\" or action_module_path ~= \".*\\\\fddevquery\\.dll\" or action_module_path ~= \".*\\\\feclient\\.dll\" or action_module_path ~= \".*\\\\fhcfg\\.dll\" or action_module_path ~= \".*\\\\firewallapi\\.dll\" or action_module_path ~= \".*\\\\flightsettings\\.dll\" or action_module_path ~= \".*\\\\fltlib\\.dll\" or action_module_path ~= \".*\\\\fveapi\\.dll\" or action_module_path ~= \".*\\\\fwbase\\.dll\" or action_module_path ~= \".*\\\\fwcfg\\.dll\" or action_module_path ~= \".*\\\\fwpolicyiomgr\\.dll\" or action_module_path ~= \".*\\\\fwpuclnt\\.dll\" or action_module_path ~= \".*\\\\getuname\\.dll\" or action_module_path ~= \".*\\\\hid\\.dll\" or action_module_path ~= \".*\\\\hnetmon\\.dll\" or action_module_path ~= \".*\\\\httpapi\\.dll\" or action_module_path ~= \".*\\\\idstore\\.dll\" or action_module_path ~= \".*\\\\ieadvpack\\.dll\" or action_module_path ~= \".*\\\\iedkcs32\\.dll\" or action_module_path ~= \".*\\\\iernonce\\.dll\" or action_module_path ~= \".*\\\\iertutil\\.dll\" or action_module_path ~= \".*\\\\ifmon\\.dll\" or action_module_path ~= \".*\\\\iphlpapi\\.dll\" or action_module_path ~= \".*\\\\iri\\.dll\" or action_module_path ~= \".*\\\\iscsidsc\\.dll\" or action_module_path ~= \".*\\\\iscsium\\.dll\" or action_module_path ~= \".*\\\\isv\\.exe\\_rsaenh\\.dll\" or action_module_path ~= \".*\\\\joinutil\\.dll\" or action_module_path ~= \".*\\\\ksuser\\.dll\" or action_module_path ~= \".*\\\\ktmw32\\.dll\" or action_module_path ~= \".*\\\\licensemanagerapi\\.dll\" or action_module_path ~= \".*\\\\licensingdiagspp\\.dll\" or action_module_path ~= \".*\\\\linkinfo\\.dll\" or action_module_path ~= \".*\\\\loadperf\\.dll\" or action_module_path ~= \".*\\\\logoncli\\.dll\" or action_module_path ~= \".*\\\\logoncontroller\\.dll\" or action_module_path ~= \".*\\\\lpksetupproxyserv\\.dll\" or action_module_path ~= \".*\\\\magnification\\.dll\" or action_module_path ~= \".*\\\\mapistub\\.dll\" or action_module_path ~= \".*\\\\mfcore\\.dll\" or action_module_path ~= \".*\\\\mfplat\\.dll\" or action_module_path ~= \".*\\\\mi\\.dll\" or action_module_path ~= \".*\\\\midimap\\.dll\" or action_module_path ~= \".*\\\\miutils\\.dll\" or action_module_path ~= \".*\\\\mlang\\.dll\" or action_module_path ~= \".*\\\\mmdevapi\\.dll\" or action_module_path ~= \".*\\\\mobilenetworking\\.dll\" or action_module_path ~= \".*\\\\mpr\\.dll\" or action_module_path ~= \".*\\\\mprapi\\.dll\" or action_module_path ~= \".*\\\\mrmcorer\\.dll\" or action_module_path ~= \".*\\\\msacm32\\.dll\" or action_module_path ~= \".*\\\\mscms\\.dll\" or action_module_path ~= \".*\\\\mscoree\\.dll\" or action_module_path ~= \".*\\\\msctf\\.dll\" or action_module_path ~= \".*\\\\msctfmonitor\\.dll\" or action_module_path ~= \".*\\\\msdrm\\.dll\" or action_module_path ~= \".*\\\\msftedit\\.dll\" or action_module_path ~= \".*\\\\msi\\.dll\" or action_module_path ~= \".*\\\\msutb\\.dll\" or action_module_path ~= \".*\\\\mswb7\\.dll\" or action_module_path ~= \".*\\\\mswsock\\.dll\" or action_module_path ~= \".*\\\\msxml3\\.dll\" or action_module_path ~= \".*\\\\mtxclu\\.dll\" or action_module_path ~= \".*\\\\napinsp\\.dll\" or action_module_path ~= \".*\\\\ncrypt\\.dll\" or action_module_path ~= \".*\\\\ndfapi\\.dll\" or action_module_path ~= \".*\\\\netid\\.dll\" or action_module_path ~= \".*\\\\netiohlp\\.dll\" or action_module_path ~= \".*\\\\netplwiz\\.dll\" or action_module_path ~= \".*\\\\netprofm\\.dll\" or action_module_path ~= \".*\\\\netsetupapi\\.dll\" or action_module_path ~= \".*\\\\netshell\\.dll\" or action_module_path ~= \".*\\\\netutils\\.dll\" or action_module_path ~= \".*\\\\networkexplorer\\.dll\" or action_module_path ~= \".*\\\\newdev\\.dll\" or action_module_path ~= \".*\\\\ninput\\.dll\" or action_module_path ~= \".*\\\\nlaapi\\.dll\" or action_module_path ~= \".*\\\\nlansp\\_c\\.dll\" or action_module_path ~= \".*\\\\npmproxy\\.dll\" or action_module_path ~= \".*\\\\nshhttp\\.dll\" or action_module_path ~= \".*\\\\nshipsec\\.dll\" or action_module_path ~= \".*\\\\nshwfp\\.dll\" or action_module_path ~= \".*\\\\ntdsapi\\.dll\" or action_module_path ~= \".*\\\\ntlanman\\.dll\" or action_module_path ~= \".*\\\\ntlmshared\\.dll\" or action_module_path ~= \".*\\\\ntmarta\\.dll\" or action_module_path ~= \".*\\\\ntshrui\\.dll\" or action_module_path ~= \".*\\\\oleacc\\.dll\" or action_module_path ~= \".*\\\\omadmapi\\.dll\" or action_module_path ~= \".*\\\\onex\\.dll\" or action_module_path ~= \".*\\\\osbaseln\\.dll\" or action_module_path ~= \".*\\\\osuninst\\.dll\" or action_module_path ~= \".*\\\\p2p\\.dll\" or action_module_path ~= \".*\\\\p2pnetsh\\.dll\" or action_module_path ~= \".*\\\\p9np\\.dll\" or action_module_path ~= \".*\\\\pcaui\\.dll\" or action_module_path ~= \".*\\\\pdh\\.dll\" or action_module_path ~= \".*\\\\peerdistsh\\.dll\" or action_module_path ~= \".*\\\\pla\\.dll\" or action_module_path ~= \".*\\\\pnrpnsp\\.dll\" or action_module_path ~= \".*\\\\policymanager\\.dll\" or action_module_path ~= \".*\\\\polstore\\.dll\" or action_module_path ~= \".*\\\\printui\\.dll\" or action_module_path ~= \".*\\\\propsys\\.dll\" or action_module_path ~= \".*\\\\prvdmofcomp\\.dll\" or action_module_path ~= \".*\\\\puiapi\\.dll\" or action_module_path ~= \".*\\\\radcui\\.dll\" or action_module_path ~= \".*\\\\rasapi32\\.dll\" or action_module_path ~= \".*\\\\rasgcw\\.dll\" or action_module_path ~= \".*\\\\rasman\\.dll\" or action_module_path ~= \".*\\\\rasmontr\\.dll\" or action_module_path ~= \".*\\\\reagent\\.dll\" or action_module_path ~= \".*\\\\regapi\\.dll\" or action_module_path ~= \".*\\\\resutils\\.dll\" or action_module_path ~= \".*\\\\rmclient\\.dll\" or action_module_path ~= \".*\\\\rpcnsh\\.dll\" or action_module_path ~= \".*\\\\rsaenh\\.dll\" or action_module_path ~= \".*\\\\rtutils\\.dll\" or action_module_path ~= \".*\\\\rtworkq\\.dll\" or action_module_path ~= \".*\\\\samcli\\.dll\" or action_module_path ~= \".*\\\\samlib\\.dll\" or action_module_path ~= \".*\\\\sapi\\_onecore\\.dll\" or action_module_path ~= \".*\\\\sas\\.dll\" or action_module_path ~= \".*\\\\scansetting\\.dll\" or action_module_path ~= \".*\\\\scecli\\.dll\" or action_module_path ~= \".*\\\\schedcli\\.dll\" or action_module_path ~= \".*\\\\secur32\\.dll\" or action_module_path ~= \".*\\\\shell32\\.dll\" or action_module_path ~= \".*\\\\slc\\.dll\" or action_module_path ~= \".*\\\\snmpapi\\.dll\" or action_module_path ~= \".*\\\\spp\\.dll\" or action_module_path ~= \".*\\\\sppc\\.dll\" or action_module_path ~= \".*\\\\srclient\\.dll\" or action_module_path ~= \".*\\\\srpapi\\.dll\" or action_module_path ~= \".*\\\\srvcli\\.dll\" or action_module_path ~= \".*\\\\ssp\\.exe\\_rsaenh\\.dll\" or action_module_path ~= \".*\\\\ssp\\_isv\\.exe\\_rsaenh\\.dll\" or action_module_path ~= \".*\\\\sspicli\\.dll\" or action_module_path ~= \".*\\\\ssshim\\.dll\" or action_module_path ~= \".*\\\\staterepository\\.core\\.dll\" or action_module_path ~= \".*\\\\structuredquery\\.dll\" or action_module_path ~= \".*\\\\sxshared\\.dll\" or action_module_path ~= \".*\\\\tapi32\\.dll\" or action_module_path ~= \".*\\\\tbs\\.dll\" or action_module_path ~= \".*\\\\tdh\\.dll\" or action_module_path ~= \".*\\\\tquery\\.dll\" or action_module_path ~= \".*\\\\tsworkspace\\.dll\" or action_module_path ~= \".*\\\\ttdrecord\\.dll\" or action_module_path ~= \".*\\\\twext\\.dll\" or action_module_path ~= \".*\\\\twinapi\\.dll\" or action_module_path ~= \".*\\\\twinui\\.appcore\\.dll\" or action_module_path ~= \".*\\\\uianimation\\.dll\" or action_module_path ~= \".*\\\\uiautomationcore\\.dll\" or action_module_path ~= \".*\\\\uireng\\.dll\" or action_module_path ~= \".*\\\\uiribbon\\.dll\" or action_module_path ~= \".*\\\\updatepolicy\\.dll\" or action_module_path ~= \".*\\\\userenv\\.dll\" or action_module_path ~= \".*\\\\utildll\\.dll\" or action_module_path ~= \".*\\\\uxinit\\.dll\" or action_module_path ~= \".*\\\\uxtheme\\.dll\" or action_module_path ~= \".*\\\\vaultcli\\.dll\" or action_module_path ~= \".*\\\\virtdisk\\.dll\" or action_module_path ~= \".*\\\\vssapi\\.dll\" or action_module_path ~= \".*\\\\vsstrace\\.dll\" or action_module_path ~= \".*\\\\wbemprox\\.dll\" or action_module_path ~= \".*\\\\wbemsvc\\.dll\" or action_module_path ~= \".*\\\\wcmapi\\.dll\" or action_module_path ~= \".*\\\\wcnnetsh\\.dll\" or action_module_path ~= \".*\\\\wdi\\.dll\" or action_module_path ~= \".*\\\\wdscore\\.dll\" or action_module_path ~= \".*\\\\webservices\\.dll\" or action_module_path ~= \".*\\\\wecapi\\.dll\" or action_module_path ~= \".*\\\\wer\\.dll\" or action_module_path ~= \".*\\\\wevtapi\\.dll\" or action_module_path ~= \".*\\\\whhelper\\.dll\" or action_module_path ~= \".*\\\\wimgapi\\.dll\" or action_module_path ~= \".*\\\\winbrand\\.dll\" or action_module_path ~= \".*\\\\windows\\.storage\\.dll\" or action_module_path ~= \".*\\\\windows\\.storage\\.search\\.dll\" or action_module_path ~= \".*\\\\windowscodecs\\.dll\" or action_module_path ~= \".*\\\\windowscodecsext\\.dll\" or action_module_path ~= \".*\\\\windowsudk\\.shellcommon\\.dll\" or action_module_path ~= \".*\\\\winhttp\\.dll\" or action_module_path ~= \".*\\\\wininet\\.dll\" or action_module_path ~= \".*\\\\winipsec\\.dll\" or action_module_path ~= \".*\\\\winmde\\.dll\" or action_module_path ~= \".*\\\\winmm\\.dll\" or action_module_path ~= \".*\\\\winnsi\\.dll\" or action_module_path ~= \".*\\\\winrnr\\.dll\" or action_module_path ~= \".*\\\\winsqlite3\\.dll\" or action_module_path ~= \".*\\\\winsta\\.dll\" or action_module_path ~= \".*\\\\wkscli\\.dll\" or action_module_path ~= \".*\\\\wlanapi\\.dll\" or action_module_path ~= \".*\\\\wlancfg\\.dll\" or action_module_path ~= \".*\\\\wldp\\.dll\" or action_module_path ~= \".*\\\\wlidprov\\.dll\" or action_module_path ~= \".*\\\\wmiclnt\\.dll\" or action_module_path ~= \".*\\\\wmidcom\\.dll\" or action_module_path ~= \".*\\\\wmiutils\\.dll\" or action_module_path ~= \".*\\\\wmsgapi\\.dll\" or action_module_path ~= \".*\\\\wofutil\\.dll\" or action_module_path ~= \".*\\\\wpdshext\\.dll\" or action_module_path ~= \".*\\\\wshbth\\.dll\" or action_module_path ~= \".*\\\\wshelper\\.dll\" or action_module_path ~= \".*\\\\wtsapi32\\.dll\" or action_module_path ~= \".*\\\\wwapi\\.dll\" or action_module_path ~= \".*\\\\xmllite\\.dll\" or action_module_path ~= \".*\\\\xolehlp\\.dll\" or action_module_path ~= \".*\\\\xwizards\\.dll\" or action_module_path ~= \".*\\\\xwtpw32\\.dll\" or action_module_path ~= \".*\\\\aclui\\.dll\" or action_module_path ~= \".*\\\\bderepair\\.dll\" or action_module_path ~= \".*\\\\bootmenuux\\.dll\" or action_module_path ~= \".*\\\\dcntel\\.dll\" or action_module_path ~= \".*\\\\dwmcore\\.dll\" or action_module_path ~= \".*\\\\dynamoapi\\.dll\" or action_module_path ~= \".*\\\\fhsvcctl\\.dll\" or action_module_path ~= \".*\\\\fxsst\\.dll\" or action_module_path ~= \".*\\\\inproclogger\\.dll\" or action_module_path ~= \".*\\\\iumbase\\.dll\" or action_module_path ~= \".*\\\\kdstub\\.dll\" or action_module_path ~= \".*\\\\maintenanceui\\.dll\" or action_module_path ~= \".*\\\\mdmdiagnostics\\.dll\" or action_module_path ~= \".*\\\\mintdh\\.dll\" or action_module_path ~= \".*\\\\msdtctm\\.dll\" or action_module_path ~= \".*\\\\nettrace\\.dll\" or action_module_path ~= \".*\\\\osksupport\\.dll\" or action_module_path ~= \".*\\\\reseteng\\.dll\" or action_module_path ~= \".*\\\\resetengine\\.dll\" or action_module_path ~= \".*\\\\spectrumsyncclient\\.dll\" or action_module_path ~= \".*\\\\srcore\\.dll\" or action_module_path ~= \".*\\\\systemsettingsthresholdadminflowui\\.dll\" or action_module_path ~= \".*\\\\timesync\\.dll\" or action_module_path ~= \".*\\\\upshared\\.dll\" or action_module_path ~= \".*\\\\wmpdui\\.dll\" or action_module_path ~= \".*\\\\wwancfg\\.dll\" or action_module_path ~= \".*\\\\dpx\\.dll\" or action_module_path ~= \".*\\\\fxsapi\\.dll\" or action_module_path ~= \".*\\\\fxstiff\\.dll\" or action_module_path ~= \".*\\\\xpsservices\\.dll\" or action_module_path ~= \".*\\\\appvpolicy\\.dll\" or action_module_path ~= \".*\\\\batmeter\\.dll\" or action_module_path ~= \".*\\\\bootux\\.dll\" or action_module_path ~= \".*\\\\cmutil\\.dll\" or action_module_path ~= \".*\\\\configmanager2\\.dll\" or action_module_path ~= \".*\\\\coredplus\\.dll\" or action_module_path ~= \".*\\\\coreuicomponents\\.dll\" or action_module_path ~= \".*\\\\cryptsp\\.dll\" or action_module_path ~= \".*\\\\dmcommandlineutils\\.dll\" or action_module_path ~= \".*\\\\drvstore\\.dll\" or action_module_path ~= \".*\\\\dsprop\\.dll\" or action_module_path ~= \".*\\\\dxcore\\.dll\" or action_module_path ~= \".*\\\\edgeiso\\.dll\" or action_module_path ~= \".*\\\\framedynos\\.dll\" or action_module_path ~= \".*\\\\fveskybackup\\.dll\" or action_module_path ~= \".*\\\\fvewiz\\.dll\" or action_module_path ~= \".*\\\\gpapi\\.dll\" or action_module_path ~= \".*\\\\icmp\\.dll\" or action_module_path ~= \".*\\\\ifsutil\\.dll\" or action_module_path ~= \".*\\\\iumsdk\\.dll\" or action_module_path ~= \".*\\\\lockhostingframework\\.dll\" or action_module_path ~= \".*\\\\lrwizdll\\.dll\" or action_module_path ~= \".*\\\\mbaexmlparser\\.dll\" or action_module_path ~= \".*\\\\mfc42u\\.dll\" or action_module_path ~= \".*\\\\msiso\\.dll\" or action_module_path ~= \".*\\\\msvcp110\\_win\\.dll\" or action_module_path ~= \".*\\\\netapi32\\.dll\" or action_module_path ~= \".*\\\\netjoin\\.dll\" or action_module_path ~= \".*\\\\netprovfw\\.dll\" or action_module_path ~= \".*\\\\opcservices\\.dll\" or action_module_path ~= \".*\\\\pkeyhelper\\.dll\" or action_module_path ~= \".*\\\\playsndsrv\\.dll\" or action_module_path ~= \".*\\\\powrprof\\.dll\" or action_module_path ~= \".*\\\\prntvpt\\.dll\" or action_module_path ~= \".*\\\\profapi\\.dll\" or action_module_path ~= \".*\\\\proximitycommon\\.dll\" or action_module_path ~= \".*\\\\proximityservicepal\\.dll\" or action_module_path ~= \".*\\\\rasdlg\\.dll\" or action_module_path ~= \".*\\\\security\\.dll\" or action_module_path ~= \".*\\\\sppcext\\.dll\" or action_module_path ~= \".*\\\\srmtrace\\.dll\" or action_module_path ~= \".*\\\\tpmcoreprovisioning\\.dll\" or action_module_path ~= \".*\\\\umpdc\\.dll\" or action_module_path ~= \".*\\\\unattend\\.dll\" or action_module_path ~= \".*\\\\urlmon\\.dll\" or action_module_path ~= \".*\\\\vdsutil\\.dll\" or action_module_path ~= \".*\\\\version\\.dll\" or action_module_path ~= \".*\\\\winbio\\.dll\" or action_module_path ~= \".*\\\\windows\\.ui\\.immersive\\.dll\" or action_module_path ~= \".*\\\\winscard\\.dll\" or action_module_path ~= \".*\\\\winsync\\.dll\" or action_module_path ~= \".*\\\\wscapi\\.dll\" or action_module_path ~= \".*\\\\wsmsvc\\.dll\" or action_module_path ~= \".*\\\\FxsCompose\\.dll\" or action_module_path ~= \".*\\\\WfsR\\.dll\" or action_module_path ~= \".*\\\\rpchttp\\.dll\" or action_module_path ~= \".*\\\\storageusage\\.dll\" or action_module_path ~= \".*\\\\amsi\\.dll\" or action_module_path ~= \".*\\\\PrintIsolationProxy\\.dll\" or action_module_path ~= \".*\\\\msdtcVSp1res\\.dll\" or action_module_path ~= \".*\\\\rdpendp\\.dll\" or action_module_path ~= \".*\\\\dxilconv\\.dll\" or action_module_path ~= \".*\\\\utcutil\\.dll\" or action_module_path ~= \".*\\\\appraiser\\.dll\" or action_module_path ~= \".*\\\\dsound\\.dll\" or action_module_path ~= \".*\\\\DispBroker\\.dll\" or action_module_path ~= \".*\\\\FXSRESM\\.DLL\" or action_module_path ~= \".*\\\\cryptnet\\.dll\" or action_module_path ~= \".*\\\\COMRES\\.DLL\" or action_module_path ~= \".*\\\\igdumdim64\\.dll\" or action_module_path ~= \".*\\\\igd10iumd64\\.dll\" or action_module_path ~= \".*\\\\igd12umd64\\.dll\" or action_module_path ~= \".*\\\\igdusc64\\.dll\" or action_module_path ~= \".*\\\\WLBSCTRL\\.dll\" or action_module_path ~= \".*\\\\TSMSISrv\\.dll\" or action_module_path ~= \".*\\\\TSVIPSrv\\.dll\" or action_module_path ~= \".*\\\\wow64log\\.dll\" or action_module_path ~= \".*\\\\WptsExtensions\\.dll\" or action_module_path ~= \".*\\\\wbemcomn\\.dll\") and  not ((action_module_path ~= \".*C\\:\\\\\\$WINDOWS\\.\\~BT\\\\.*\" or action_module_path ~= \".*C\\:\\\\\\$WinREAgent\\\\.*\" or action_module_path ~= \".*C\\:\\\\Windows\\\\SoftwareDistribution\\\\.*\" or action_module_path ~= \".*C\\:\\\\Windows\\\\System32\\\\.*\" or action_module_path ~= \".*C\\:\\\\Windows\\\\SystemTemp\\\\.*\" or action_module_path ~= \".*C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_module_path ~= \".*C\\:\\\\Windows\\\\WinSxS\\\\.*\") or (action_module_path ~= \"C\\:\\\\Windows\\\\Microsoft\\.NET\\\\.*\" and action_module_path ~= \".*\\\\cscui\\.dll\") or (action_module_path ~= \".*C\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\Platform\\\\.*\" and action_module_path ~= \".*\\\\version\\.dll\")) and  not ((action_module_path ~= \".*C\\:\\\\Program\\ Files\\\\Microsoft\\\\Exchange\\ Server\\\\.*\" and action_module_path ~= \".*\\\\mswb7\\.dll\") or (action_module_path contains \"C:\\\\Program Files\\\\Arsenal-Image-Mounter-\" and (action_module_path ~= \".*\\\\mi\\.dll\" or action_module_path ~= \".*\\\\miutils\\.dl\")) or (actor_process_image_path ~= \".*C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\microsoft\\ shared\\\\ClickToRun\\\\OfficeClickToRun\\.exe\" and action_module_path ~= \".*C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\microsoft\\ shared\\\\ClickToRun\\\\AppVPolicy\\.dll\") or action_module_path ~= \".*C\\:\\\\Packages\\\\Plugins\\\\Microsoft\\.GuestConfiguration\\.ConfigurationforWindows\\\\.*\" or ((actor_process_image_path contains \"C:\\\\Program Files\\\\WindowsApps\\\\DellInc.DellSupportAssistforPCs\" or actor_process_image_path contains \"C:\\\\Windows\\\\System32\\\\backgroundTaskHost.exe\") and action_module_path contains \":\\\\Program Files\\\\WindowsApps\\\\DellInc.DellSupportAssistforPCs\") or (actor_process_image_path contains \"C:\\\\Program Files\\\\WindowsApps\\\\DellInc.DellSupportAssistforPCs\" and actor_process_image_path ~= \".*\\\\wldp\\.dll\") or ((actor_process_image_path ~= \".*C\\:\\\\Program\\ Files\\\\CheckPoint\\\\.*\" or actor_process_image_path ~= \".*C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\CheckPoint\\\\.*\") and actor_process_image_path ~= \".*\\\\SmartConsole\\.exe\" and (action_module_path ~= \".*C\\:\\\\Program\\ Files\\\\CheckPoint\\\\.*\" or action_module_path ~= \".*C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\CheckPoint\\\\.*\") and action_module_path ~= \".*\\\\PolicyManager\\.dll\"))\n\n\n\n"}
{"prompt": " I want to find suspicious activities related to the \"mshtml.dll\" RunHTMLApplication export being used for potentially malicious code execution. ", "response": "preset = xdr_process\n| filter ((action_process_image_command_line ~= \".*\\\\\\.\\.\\\\.*\" and action_process_image_command_line contains \"mshtml\") and (action_process_image_command_line contains \"#135\" or action_process_image_command_line contains \"RunHTMLApplication\"))\n\n\n\n"}
{"prompt": "I want to find suspicious process hollowing attempts that load Notepad and modules like samlib.dll or WinSCard.dll.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\notepad\\.exe\" and (action_module_path ~= \".*\\\\samlib\\.dll\" or action_module_path ~= \".*\\\\WinSCard\\.dll\"))\n\n\n\n"}
{"prompt": "I want to find instances where non-system accounts are accessing LSASS on endpoints.", "response": "preset = xdr_event_log\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4663, 4656) and AccessMask in (\"0x100000\", \"0x1010\", \"0x1400\", \"0x1410\", \"0x1418\", \"0x1438\", \"0x143a\", \"0x1f0fff\", \"0x1f1fff\", \"0x1f2fff\", \"0x1f3fff\", \"0x40\", \"143a\", \"1f0fff\", \"1f1fff\", \"1f2fff\", \"1f3fff\") and ObjectType = \"Process\" and ObjectName ~= \".*\\\\lsass\\.exe\") and  not (SubjectUserName ~= \".*\\$\" or (ProcessName ~= \".*\\:\\\\Program\\ Files\\\\.*\" or ProcessName ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\") or (ProcessName = \"C:\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe\" and AccessMask = \"0x1410\")) and  not (ProcessName ~= \".*\\\\SteamLibrary\\\\steamapps\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to querying and accessing event logs on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"Microsoft-Windows-TerminalServices-LocalSessionManager/Operational\" or action_process_image_command_line contains \"Microsoft-Windows-Terminal-Services-RemoteConnectionManager/Operational\" or action_process_image_command_line contains \"Security\") or (action_process_image_command_line contains \"-InstanceId 4624\" or action_process_image_command_line contains \"System[EventID=4624]\" or action_process_image_command_line contains \"EventCode=*4624*\" or action_process_image_command_line contains \"EventIdentifier=*4624*\" or action_process_image_command_line contains \"-InstanceId 4778\" or action_process_image_command_line contains \"System[EventID=4778]\" or action_process_image_command_line contains \"EventCode=*4778*\" or action_process_image_command_line contains \"EventIdentifier=*4778*\" or action_process_image_command_line contains \"-InstanceId 25\" or action_process_image_command_line contains \"System[EventID=25]\" or action_process_image_command_line contains \"EventCode=*25*\" or action_process_image_command_line contains \"EventIdentifier=*25*\")) and ((action_process_image_command_line contains \"Select\" and action_process_image_command_line contains \"Win32_NTLogEvent\") or ((action_process_image_path ~= \".*\\\\wevtutil\\.exe\" or actor_process_file_original_name = \"wevtutil.exe\") and (action_process_image_command_line contains \" qe \" or action_process_image_command_line contains \" query-events \")) or ((action_process_image_path ~= \".*\\\\wmic\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and action_process_image_command_line contains \" ntevent\") or (action_process_image_command_line contains \"Get-WinEvent \" or action_process_image_command_line contains \"get-eventlog \"))\n\n\n\n"}
{"prompt": "I want to find firewall pairs (Cisco ASA and Fortinet Fortigate) where no logs have been received for the last 8 hours.", "response": "config case_sensitive = false\n| preset = metrics_view\n| filter _product in (\"ASA\", \"Fortigate\")\n| alter Search_Span_Diff = last_seen\n| bin Search_Span_Diff span = 8H\n| join type = left conflict_strategy = left\n(dataset = CNX_EU_ASA_Fortigates_Pair\n| alter DevicePair_Pri_Sec = concat(\"Pri-\", deviceAddress, \"-Sec-\", deviceAddress2)\n) as dev_ps2(dev_ps2.deviceAddress = _final_reporting_device_ip or dev_ps2.deviceAddress2 = _final_reporting_device_ip)\n| filter deviceAddress not in (\"\"\"\"\"\", null) and deviceAddress2 not in (\"\"\"\"\"\", null)\n| comp sum(total_event_count) as Total_Event_Count,\nvalues(DevicePair_Pri_Sec) as DevicePair_PriSec by _final_reporting_device_ip,\nSearch_Span_Diff,\n_product,\n_vendor\n| alter DevicePair_PriSec = arrayindex(DevicePair_PriSec, 0)\n| filter DevicePair_PriSec not in (\"\"\"\"\"\", null, NULL)\n| comp values(_product) as Product,\nvalues(_vendor) as Vendor,\nsum(Total_Event_Count) as final_event_count by DevicePair_PriSec\n| alter deviceAddress = arrayindex(split(DevicePair_PriSec, \"-\"), 1),\ndeviceAddress2 = arrayindex(split(DevicePair_PriSec, \"-\"), 3),\nProduct = arraystring(Product, \" \"),\nVendor = arraystring(Vendor, \" \")\n| filter final_event_count = 0"}
{"prompt": "I want to find out which departments or locations received at least 10 phishing emails from the same sender within a single day, where those emails made up 80% or more of all emails that department or location received from that sender during that day.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter eventType = \"Phishing\" and headerFrom != null and headerTo != null\n| alter headerTo_array = if(headerTo ~= \"\\\"\\\"\", recipients -> [], headerTo -> []),\nsender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0)\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\")\n| filter headerTo_string ~= \"<domain>\"\n| alter username = arrayindex(split(headerTo_string, \"@\"), 0),\nsender_domain = lowercase(arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0))\n| join type = left\n(preset = ad_users\n| fields sam_account_name, OU, department, location\n) as adusers adusers.sam_account_name = username\n| filter department != null and sam_account_name != null\n| comp count() as total_phish_events by sender_domain\n| join type = inner\n(dataset = trend_micro_email_security_raw\n| filter eventType = \"Phishing\" and headerFrom != null and headerTo != null\n| alter headerTo_array = if(headerTo ~= \"\\\"\\\"\", recipients -> [], headerTo -> [])\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\")\n| filter headerTo_string ~= \"<domain>\"\n| alter username = arrayindex(split(headerTo_string, \"@\"), 0),\nsender_domain = lowercase(arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0))\n| join type = left\n(preset = ad_users\n| fields sam_account_name, OU, department, location\n) as adusers adusers.sam_account_name = username\n| filter department != null and sam_account_name != null\n| comp count() as matched_events,\nvalues(headerFrom) as headerFrom,\nvalues(headerTo_string) as users by department,\nsender_domain\n) as tmevents tmevents.sender_domain = sender_domain\n| alter domain_obser_stats = ceil(multiply(divide(matched_events, total_phish_events), 100))\n| filter domain_obser_stats >= 80 and array_length(users) >= 10"}
{"prompt": "I want to find out how many unique combinations of  `agent_hostname`, `action_file_sha256`, `action_file_path`, `actor_process_image_sha256`, `actor_process_image_path`, `causality_actor_process_image_sha256`, and `causality_actor_process_image_path` exist in this dataset.", "response": "dataset = xdr_data\n| fields agent_hostname, action_file_sha256, action_file_path,\nactor_process_image_sha256, actor_process_image_path,\ncausality_actor_process_image_sha256, causality_actor_process_image_path\n| filter action_file_sha256 in (\"bf4f41403280c1b115650d470f9b260a5c9042c04d9bcc2a6ca504a66379b2d6\", \"58e9f72081efff9bdaabd82e3b3efe5b1b9f1666cefe28f429ad7176a6d770ae\", \"ed285ad5ac6a8cf13461d6c2874fdcd3bf67002844831f66e21c2d0adda43fa4\", \"dbf88c623cc2ad99d82fa4c575fb105e2083465a47b84d64e2e1a63e183c274e\", \"a38ddff1e797adb39a08876932bc2538d771ff7db23885fb883fec526aff4fc8\", \"7d86841489afd1097576a649094ae1efb79b3147cd162ba019861dfad4e9573b\", \"4bfb0d5022dc499908da4597f3e19f9f64d3cc98ce756a2249c72179d3d75c47\", \"473f15c04122dad810c919b2f3484d46560fd2dd4573f6695d387195816b02a6\", \"b3fae4f84d4303cdbad4696554b4e8d2381ad3faf6e0c3c8d2ce60a4388caa02\", \"dcde6033b205433d6e9855c93740f798951fa3a3f252035a768d9f356fde806d\", \"85338f694c844c8b66d8a1b981bcf38627f95579209b2662182a009d849e1a4c\", \"db3906edad6009d1886ec1e2a198249b6d99820a3575f8ec80c6ce57f08d521a\", \"ec411a34fee49692f196e4dc0a905b25d0667825904862fdba153df5e53183e0\", \"a00a54e3fb8cb83fab38f8714f240ecc13ab9c492584aa571aec5fc71b48732d\", \"c584d1000591efa391386264e0d43ec35f4dbb146cad9390f73358d9c84ee78d\", \"8bdb662843c1f4b120fb4c25a5636008085900cdf9947b1dadb9b672ea6134dc\", \"c830cde8f929c35dad42cbdb6b28447df69ceffe99937bf420d32424df4d076a\", \"6ae3b0cb657e051f97835a6432c2b0f50a651b36b6d4af395bbe9060bb4ef4b2\", \"535e19bf14d8c76ec00a7e8490287ca2e2597cae2de5b8f1f65eb81ef1c2a4c6\", \"42de36e61d454afff5e50e6930961c85b55d681e23931efd248fd9b9b9297239\", \"4f53e4d52efcccdc446017426c15001bb0fe444c7a6cdc9966f8741cf210d997\", \"df00277045338ceaa6f70a7b8eee178710b3ba51eac28c1142ec802157492de6\", \"28433734bd9e3121e0a0b78238d5131837b9dbe26f1a930bc872bad44e68e44e\", \"cf65f0d33640f2cd0a0b06dd86a5c6353938ccb25f4ffd14116b4884181e0392\", \"5bb84e110d5f18cee47021a024d358227612dd6dac7b97fa781f85c6ad3ccee4\", \"ccf02bb919e1a44b13b366ea1b203f98772650475f2a06e9fac4b3c957a7c3fa\", \"815a73e20e90a413662eefe8594414684df3d5723edcd76070e1a5aee864616e\", \"10ef331115cbbd18b5be3f3761e046523f9c95c103484082b18e67a7c36e570c\", \"dc815be299f81c180aa8d2924f1b015f2c46686e866bc410e72de75f7cd41aae\", \"9275f5d57709e2204900d3dae2727f5932f85d3813ad31c9d351def03dd3d03d\", \"f35ccc9978797a895e5bee58fa8c3b7ad6d5ee55386e9e532f141ee8ed2e937d\", \"5256517e6237b888c65c8691f29219b6658d800c23e81d5167c4a8bbd2a0daa3\", \"d4485176aea67cc85f5ccc45bb66166f8bfc715ae4a695f0d870a1f8d848cc3d\", \"3fcc4c1f2f806acfc395144c98b8ba2a80fe1bf5e3ad3397588bbd2610a37100\", \"057a48fe378586b6913d29b4b10162b4b5045277f1be66b7a01fb7e30bd05ef3\", \"5dbd6bb2381bf54563ea15bc9fbb6d7094eaf7184e6975c50f8996f77bfc3f2c\", \"c39b0ea14e7766440c59e5ae5f48adee038d9b1c7a1375b376e966ca12c22cd3\", \"6f38a25482d82cd118c4255f25b9d78d96821d22bab498cdce9cda7a563ca992\", \"54962835992e303928aa909730ce3a50e311068c0960c708e82ab76701db5e6b\", \"e5e9b0f8d72f4e7b9022b7a83c673334d7967981191d2d98f9c57dc97b4caae1\", \"68d793940c28ddff6670be703690dfdf9e77315970c42c4af40ca7261a8570fa\", \"9da0f5ca7c8eab693d090ae759275b9db4ca5acdbcfe4a63d3871e0b17367463\", \"006fc6623fbb961084243cfc327c885f3c57f2eba8ee05fbc4e93e5358778c85\")\n| dedup agent_hostname,\naction_file_sha256,\naction_file_path,\nactor_process_image_sha256,\nactor_process_image_path,\ncausality_actor_process_image_sha256,\ncausality_actor_process_image_path"}
{"prompt": "I want to find out which security software is running on my macOS endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path = \"/usr/bin/grep\" and ((action_process_image_command_line contains \"nessusd\" or action_process_image_command_line contains \"santad\" or action_process_image_command_line contains \"CbDefense\" or action_process_image_command_line contains \"falcond\" or action_process_image_command_line contains \"td-agent\" or action_process_image_command_line contains \"packetbeat\" or action_process_image_command_line contains \"filebeat\" or action_process_image_command_line contains \"auditbeat\" or action_process_image_command_line contains \"osqueryd\" or action_process_image_command_line contains \"BlockBlock\" or action_process_image_command_line contains \"LuLu\") or (action_process_image_command_line contains \"Little\" and action_process_image_command_line contains \"Snitch\"))\n\n\n\n"}
{"prompt": "I want to see details about Azure Route Table configuration changes made by specific users, including their usernames, target usernames, operation names, and timestamps.  Please filter the results based on a specific resource ID \"<id>\".", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.network/routetables/write\", \"microsoft.network/routetables/delete\", \"microsoft.network/routetables/routes/write\", \"microsoft.network/routetables/routes/delete\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"<id>\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see a list of access denied events for critical enterprise users, including details like username, error codes, and timestamps.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4625\", \"4825\")\n| alter logon_type = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Logon Type:\\t\\t\\t([^\\n]+)\"), 0))\n| alter status_code = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Status:\\t\\t\\t([^\\n]+)\"), 0))\n| filter ((xdm.event.id IN (\"4625\") and logon_type = \"10\" and status_code = \"0xc000015b\") or xdm.event.id IN (\"4825\"))\n| alter target_username = if(xdm.event.id IN (\"4825\"), arrayindex(regextract(xdm.event.description, \"User Name:\\t([^\\n]+)\"), 0), xdm.target.user.username)\n| alter target_username = if(target_username ~= \"@ad.infosys.com\", rtrim(target_username, \"@ad.infosys.com\"), if(target_username ~= \"@infosys.com\", rtrim(target_username, \"@infosys.com\"), if(target_username ~= \"itlinfosys\", ltrim(target_username, \"itlinfosys\\\\\"), target_username)))\n| join type = left\n(dataset = pan_dss_raw\n| filter security_groups ~= \"Tier0Users|Tier1Users\"\n) as tier_admin tier_admin.sam_account_name = target_username\n| filter sam_account_name != null\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| alter xdm.source.ipv4 = if(xdm.source.ipv4 = null, trim(arrayindex(regextract(xdm.event.description, \"Client Address:\\s([^\\n]+)\"), 0)), xdm.source.ipv4)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_username\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where PowerShell is used to decode gzip archives using the GZipStream and Decompress functions.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"GZipStream\" and action_process_image_command_line contains \"::Decompress\")\n\n\n\n"}
{"prompt": "I want to see events where Code Integrity blocked an image or driver load due to a policy violation.", "response": "datamodel\n| filter xdm.event.id = 3077\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that check for virtualization environments by looking for specific WMI calls related to system temperature and computer details.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Get-WmiObject\" or ScriptBlockText contains \"gwmi\") and (ScriptBlockText contains \"MSAcpi_ThermalZoneTemperature\" or ScriptBlockText contains \"Win32_ComputerSystem\"))\n\n\n\n"}
{"prompt": "I want to find potential RDP tunneling activity using Plink.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\plink\\.exe\" and action_process_image_command_line contains \":127.0.0.1:3389\") or ((action_process_image_path ~= \".*\\\\plink\\.exe\" and action_process_image_command_line contains \":3389\") and (action_process_image_command_line contains \" -P 443\" or action_process_image_command_line contains \" -P 22\"))\n\n\n\n"}
{"prompt": "I want to see activity related to the Elise Backdoor malware on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\Microsoft\\\\Network\\\\svchost\\.exe\" or (action_process_image_command_line contains \"\\\\Windows\\\\Caches\\\\NavShExt.dll\" and action_process_image_command_line contains \"/c del\")) or ((action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\MICROS\\~1\\\\Windows\\\\Caches\\\\NavShExt\\.dll\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Caches\\\\NavShExt\\.dll\") and action_process_image_command_line contains \",Setting\")\n\n\n\n"}
{"prompt": " I want to find instances where an adversary might be replacing desktop wallpapers on endpoints using PowerShell scripts. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Get-ItemProperty\" and ScriptBlockText contains \"Registry::\" and ScriptBlockText ~= \".*HKEY\\_CURRENT\\_USER\\\\Control\\ Panel\\\\Desktop\\\\.*\" and ScriptBlockText contains \"WallPaper\") or ScriptBlockText contains \"SystemParametersInfo(20,0,*,3)\")\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious processes that are recursively taking ownership of files using takeown.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\takeown\\.exe\" and (action_process_image_command_line contains \"/f \" and action_process_image_command_line contains \"/r\"))\n\n\n\n"}
{"prompt": "I want to find events where someone changed an AWS RDS master password and the new password contains asterisks.", "response": "dataset = amazon_aws_raw\n| alter responseElements_pendingModifiedValues_masterUserPassword = json_extract_scalar(responseElements , \"$.pendingModifiedValues.masterUserPassword\")\n| filter (eventSource = \"rds.amazonaws.com\" and responseElements.pendingModifiedValues.masterUserPassword contains \"*\" and eventName = \"ModifyDBInstance\")\n\n\n\n"}
{"prompt": "I want to detect new port forwarding rules added through Netsh.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and ((action_process_image_command_line contains \"interface\" and action_process_image_command_line contains \"portproxy\" and action_process_image_command_line contains \"add\" and action_process_image_command_line contains \"v4tov4\") or (action_process_image_command_line contains \"i \" and action_process_image_command_line contains \"p \" and action_process_image_command_line contains \"a \" and action_process_image_command_line contains \"v \") or (action_process_image_command_line contains \"connectp\" and action_process_image_command_line contains \"listena\" and action_process_image_command_line contains \"c=\"))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious DLLHOST.EXE executions that don't involve command line arguments.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\dllhost\\.exe\" and action_process_image_command_line in (\"dllhost.exe\", \"dllhost\")) and  not (action_process_image_command_line = \"None\")\n\n\n\n"}
{"prompt": "I want to find instances of potential Java payloads embedded in my access logs.", "response": "datamodel\n| filter ( contains \"%24%7B%28%23a%3D%40\" or  contains \"${(#a=@\" or  contains \"%24%7B%40java\" or  contains \"${@java\" or  contains \"u0022java\" or  contains \"%2F%24%7B%23\" or  contains \"/${#\" or  contains \"new+java.\" or  contains \"getRuntime().exec(\" or  contains \"getRuntime%28%29.exec%28\")\n\n\n\n"}
{"prompt": "I want to see alerts for users who have had three or more failed login attempts from \"Mobile VPN\" on  the IP address 10.68.106.172 within a 5 minute timeframe.", "response": "config case_sensitive = false\n| dataset = check_point_connectra_raw\n| bin _time span = 5m\n| filter act = \"Failed Log In\" and origin = \"10.68.106.172\" and requestClientApplication = \"Mobile VPN\" and (_final_reporting_device_ip = \"10.66.38.240\" or _final_reporting_device_ip != \"10.67.122.132\")\n| alter host_name = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = lowercase(replace(if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), if(array_length(regextract(duser, \"[a-zA-Z]+\\\\(.*)\")) > 0, arrayindex(regextract(duser, \"[a-zA-Z]+\\\\(.*)\"), 0), duser))), \"itlinfosys\", \"\"))\n| alter action = act,\nsource_port = spt,\ndest_port = dpt,\nsource_ip = src,\ndst_ip = host_ip,\nresult = outcome,\nuser_agent = requestClientApplication,\nos_edition = os_edition,\nproduct = _product\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestTime,\nvalues(source_ip) as src_ip,\nvalues(host_ip) as dst_ip,\nvalues(source_port) as src_port,\nvalues(dest_port) as dst_port,\nvalues(action) as action,\nvalues(hostname) as hostname,\nvalues(origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(product) as product,\ncount() as matched_events by _time,\nuser_dst\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to detect suspicious activity related to Csi.exe and rcsi.exe processes on my endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\csi\\.exe\" or action_process_image_path ~= \".*\\\\rcsi\\.exe\") or actor_process_file_original_name in (\"csi.exe\", \"rcsi.exe\")) and action_process_signature_vendor = \"Microsoft Corporation\")\n\n\n\n"}
{"prompt": "I want to see all instances of potential Broken Authentication and Session Management issues detected on IIS web servers over the last five minutes.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| bin _time span = 5m\n| join type = left\n(dataset = device_group_static_list\n| filter TYPE ~= \"microsoft iis\"\n| fields IP\n) as device_group device_group.IP = xdm.target.ipv4\n| filter IP != null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter ((xdm.target.url ~= \"SESSIONID=\" OR xdm.target.url ~= \"PHPSESSID=\") OR((xdm.target.url ~= \"Username=\" OR xdm.target.url ~= \"username\\%5D=\") AND(xdm.target.url ~= \"password=\" OR xdm.target.url ~= \"password\\%5D=\"))) AND(xdm.network.http.url !~= \"/RiskMgmt/\")\n| filter xdm.target.ipv4 not in (\"<ip>\")\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.target.ipv4,\n_time\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see alerts related to the Cisco ASA FTD Exploit CVE-2020-3452.", "response": "datamodel\n| filter (xdm.network.http.url contains \"+CSCOT+/translation-table\" or xdm.network.http.url contains \"+CSCOT+/oem-customization\") and (xdm.network.http.url contains \"&textdomain=/\" or xdm.network.http.url contains \"&textdomain=%\" or xdm.network.http.url contains \"&name=/\" or xdm.network.http.url contains \"&name=%\") and xdm.network.http.response_code = 200\n\n\n\n"}
{"prompt": "I want to find events related to potential DCOM Internet Explorer Application DLL hijacking using image load techniques.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\Internet\\ Explorer\\\\iexplore\\.exe\" and action_module_path ~= \".*\\\\Internet\\ Explorer\\\\iertutil\\.dll\")\n\n\n\n"}
{"prompt": "I want to see events where rundll32.exe is used with suspicious commands related to the printer spooler service and NTLM authentication.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and ((action_process_image_command_line contains \"C:\\\\windows\\\\system32\\\\davclnt.dll,DavSetCookie\" and action_process_image_command_line contains \"http\") and (action_process_image_command_line contains \"spoolss\" or action_process_image_command_line contains \"srvsvc\" or action_process_image_command_line contains \"/print/pipe/\")))\n\n\n\n"}
{"prompt": "I want to see alerts about potentially malicious PowerShell commands encoded as Base64 strings being executed on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"::FromBase64String(\"\n\n\n\n"}
{"prompt": "I want to see all privileged activity like adding or deleting users and groups on IS systems.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"IS_Intranet\", \"IS_Linux_Azure_Infosys-Cloud\", \"IS_unix\", \"IS_Linux_Intranet\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type in (\"useradd\", \"userdel\", \"usermod\", \"useradd\", \"groupmod\", \"gpasswd\", \"userdel\", \"groupdel\", \"groupadd\") and xdm.event.description ~= \"group\"\n| alter xdm.target.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"password\\s+changed\\s+for\\s+([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"changed\\s+password\\s+expiry\\s+for\\s+([\\w\\-\\.]+)\"), 0), if(xdm.event.type = \"useradd\", arrayindex(regextract(xdm.event.description, \"name=([^,]+)\"), 0)), arrayindex(regextract(xdm.event.description, \"[add|delete]+ \\'([^\\']+)\"), 0)),\nxdm.target.user.groups = coalesce(arrayindex(regextract(xdm.event.description, \"name=(\\w+)\"), 0), arrayindex(regextract(xdm.event.description, \"group \\'([^\\']+)\"), 0)),\nxdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), xdm.source.user.username),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.target.user.groups != null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, device_ip, _vendor, _product\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect suspicious calls made by rundll32 using ordinal values.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and (action_process_image_command_line contains \",#\" or action_process_image_command_line contains \", #\" or action_process_image_command_line contains \".dll #\" or action_process_image_command_line contains \".ocx #\")) and  not ((action_process_image_command_line contains \"EDGEHTML.dll\" and action_process_image_command_line contains \"#141\") or ((actor_process_image_path ~= \".*\\\\Msbuild\\\\Current\\\\Bin\\\\.*\" or actor_process_image_path ~= \".*\\\\VC\\\\Tools\\\\MSVC\\\\.*\" or actor_process_image_path contains \"\\\\Tracker.exe\") and (action_process_image_command_line contains \"\\\\FileTracker32.dll,#1\" or action_process_image_command_line contains \"\\\\FileTracker32.dll\\\",#1\" or action_process_image_command_line contains \"\\\\FileTracker64.dll,#1\" or action_process_image_command_line contains \"\\\\FileTracker64.dll\\\",#1\")))\n\n\n\n"}
{"prompt": "I want to find instances of potential Ke3chang/TidePool malware activity on endpoints based on specific command line arguments.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"-Property DWORD -name DisableFirstRunCustomize -value 2 -Force\" or action_process_image_command_line contains \"-Property String -name Check_Associations -value\" or action_process_image_command_line contains \"-Property DWORD -name IEHarden -value 0 -Force\")\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious operations on the \"servicesactive\" object in the SCM database, specifically those involving the \"SeTakeOwnershipPrivilege\".", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter PrivilegeList = regextract(to_json_string(action_evtlog_data_fields)->PrivilegeList{}, \"\\\"(.*)\\\"\")\n| alter SubjectLogonId = regextract(to_json_string(action_evtlog_data_fields)->SubjectLogonId{}, \"\\\"(.*)\\\"\")\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4674 and ObjectType = \"SC_MANAGER OBJECT\" and ObjectName = \"servicesactive\" and PrivilegeList = \"SeTakeOwnershipPrivilege\") and  not ((SubjectLogonId = \"0x3e4\" and ProcessName ~= \".*\\:\\\\Windows\\\\System32\\\\services\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see events related to the creation of the NTDS.DIT file on Windows systems.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*ntds\\.dit\"\n\n\n\n"}
{"prompt": "I want to see alerts about potential Command and Control activity using DNS, specifically those that target domains like addatamarket.net and others listed in the query.", "response": "datamodel\n| filter xdm.network.dns.dns_question.name in (\"addatamarket.net\", \"ans7tv.net\", \"anstv.net\", \"backuprabbit.com\", \"businessvideonews.com\", \"cloudsponcer.com\", \"datamarketplace.net\", \"growthtransport.com\", \"mobilegamerstats.com\", \"snoweeanalytics.com\", \"tagclick-cdn.com\", \"topographyupdates.com\", \"unlimitedteacup.com\", \"virtuallaughing.com\", \"web-trackers.com\")\n\n\n\n"}
{"prompt": "I want to see alerts related to potential exploitation attempts of CVE-2024-3400 in Palo Alto GlobalProtect.", "response": "datamodel\n| filter ( contains \"failed to unmarshal session(../\" or  contains \"failed to unmarshal session(./../\" or  contains \"failed to unmarshal session(/..\" or  contains \"failed to unmarshal session(%2E%2E%2F\" or  contains \"failed to unmarshal session(%2F%2E%2E\" or  contains \"failed to unmarshal session(%2E%2F%2E%2E%2F\" or  contains \"failed to unmarshal session(%252E%252E%252F\" or  contains \"failed to unmarshal session(%252F%252E%252E\" or  contains \"failed to unmarshal session(%252E%252F%252E%252E%252F\") or (( contains \"{IFS}\" or  contains \"base64\" or  contains \"bash\" or  contains \"curl\" or  contains \"http\") and _raw_log contains \"/opt/panlogs/tmp/device_telemetry/\")\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is using the MsXml2.XmlHttp COM object.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"New-Object\" and ScriptBlockText contains \"-ComObject\" and ScriptBlockText contains \"MsXml2.\" and ScriptBlockText contains \"XmlHttp\")\n\n\n\n"}
{"prompt": "I want to detect if any local users have been created on my Windows servers because that shouldn't happen in an Active Directory environment.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 4720\n\n\n\n"}
{"prompt": "I want to see events where Red Carpet users logged in from two different countries within a 4 hour period.", "response": "config case_sensitive = false\n| dataset = check_point_connectra_raw\n| filter act = \"Log In\" and duser != null and origin not in (\"10.156.246.75\", \"192.168.179.100\", \"10.85.3.210\", \"10.68.106.171\") and _final_reporting_device_ip != \"10.67.122.132\"\n| alter hostname = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = lowercase(replace(if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), if(array_length(regextract(duser, \"[a-zA-Z]+\\\\(.*)\")) > 0, arrayindex(regextract(duser, \"[a-zA-Z]+\\\\(.*)\"), 0), duser))), \"itlinfosys\", \"\"))\n| join type = left\n(dataset = redcarpet_users_list\n| fields username\n) as adminusers adminusers.username = user_dst\n| filter username != NULL\n| iploc src loc_country\n| alter action = act,\nsource_port = spt,\ndest_port = dpt,\nsource_ip = src,\ndst_ip = host_ip,\nresult = outcome,\nuser_agent = requestClientApplication,\nos_edition = os_edition,\nproduct = _product\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestTime,\nvalues(source_ip) as src_ip,\nvalues(host_ip) as dst_ip,\nvalues(source_port) as src_port,\nvalues(dest_port) as dst_port,\nvalues(action) as action,\nvalues(hostname) as hostname,\nvalues(origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(product) as product,\nvalues(loc_country) as country_src,\ncount() as matched_events by user_dst\n| filter array_length(country_src) > 1 and array_length(hostname) > 1\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances where an attacker is using rundll32 with shell32.dll and obfuscation techniques like value injections or invoking comspec/iex.", "response": "datamodel\n| filter ((xdm.target.process.executable.path contains \"&&\" and xdm.target.process.executable.path contains \"rundll32\" and xdm.target.process.executable.path contains \"shell32.dll\" and xdm.target.process.executable.path contains \"shellexec_rundll\") and (xdm.target.process.executable.path contains \"value\" or xdm.target.process.executable.path contains \"invoke\" or xdm.target.process.executable.path contains \"comspec\" or xdm.target.process.executable.path contains \"iex\"))\n\n\n\n"}
{"prompt": "I want to see a list of users who have had 10 or more failed su attempts within a 5-minute window on Linux systems, along with their device IP addresses and the timestamps of these events.", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| bin _time span = 5m\n| filter xdm.event.type in (\"sudo\", \"su\", \"sshd\", \"ssh\") and xdm.event.description ~= \"su failure|failed su to root by user\" and xdm.source.ipv4 not in (\"<ip>\")\n| alter xdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), arrayindex(regextract(xdm.event.description, \"\\) ([^\\s]+)\\son\"), 0)),\nxdm.target.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"password\\s+changed\\s+for\\s+([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"changed\\s+password\\s+expiry\\s+for\\s+([\\w\\-\\.]+)\"), 0), if(xdm.event.type = \"useradd\", arrayindex(regextract(xdm.event.description, \"name=([^,]+)\"), 0)), arrayindex(regextract(xdm.event.description, \"to([^\\)]+)\"), 0))\n| filter xdm.source.user.username not in (null, NULL, \"postgres\")\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _product, _vendor, device_ip\n| comp count() as matched_events,\nvalues(*) as * by xdm.source.user.username,\ndevice_ip,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to see alerts about denied certificate enrollment requests from Active Directory Certificate Services.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Microsoft-Windows-CertificationAuthority\" and action_evtlog_event_id = 53)\n\n\n\n"}
{"prompt": "I want to find events where someone is trying to disable Windows IIS HTTP logging using the `appcmd.exe` tool.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\appcmd\\.exe\" or actor_process_file_original_name = \"appcmd.exe\") and (action_process_image_command_line contains \"set\" and action_process_image_command_line contains \"config\" and action_process_image_command_line contains \"section:httplogging\" and action_process_image_command_line contains \"dontLog:true\"))\n\n\n\n"}
{"prompt": "I want to detect instances where Odbcconf.exe is used to install drivers or DLLs.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\odbcconf\\.exe\" or actor_process_file_original_name = \"odbcconf.exe\") and (action_process_image_command_line contains \"INSTALLDRIVER \" and action_process_image_command_line contains \".dll\"))\n\n\n\n"}
{"prompt": "I want to detect potentially malicious activity involving renamed Visual Studio Code tunnel executions on my endpoints.", "response": "preset = xdr_process\n| filter (((actor_process_file_original_name = \"None\" and action_process_image_command_line ~= \".*\\.exe\\ tunnel\") or (action_process_image_command_line contains \".exe tunnel\" and action_process_image_command_line contains \"--name \" and action_process_image_command_line contains \"--accept-server-license-terms\") or (action_process_image_command_line contains \"tunnel \" and action_process_image_command_line contains \"service\" and action_process_image_command_line contains \"internal-run\" and action_process_image_command_line contains \"tunnel-service.log\")) and  not ((action_process_image_path ~= \".*\\\\code\\-tunnel\\.exe\" or action_process_image_path ~= \".*\\\\code\\.exe\"))) or ((actor_process_image_command_line ~= \".*\\ tunnel\" and action_process_image_path ~= \".*\\\\cmd\\.exe\" and (action_process_image_command_line contains \"/d /c \" and action_process_image_command_line contains \"\\\\servers\\\\Stable-\" and action_process_image_command_line contains \"code-server.cmd\")) and  not ((actor_process_image_path ~= \".*\\\\code\\-tunnel\\.exe\" or actor_process_image_path ~= \".*\\\\code\\.exe\")))\n\n\n\n"}
{"prompt": "I want to see which users have had more than 5 authentication failures in CyberArk.", "response": "config case_sensitive = false\n| dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(arrayindex(regextract(_raw_log, \"MessageID=\\\"([0-9]+)\"), 0)),\nuser_dst = coalesce(arrayindex(regextract(_raw_log, \"Issuer=\\\"([^\\\"]+)\"), 0), arrayindex(regextract(_raw_log, \"TargetUser=\\\"([^\\\"]+)\"), 0)),\nuser_src = arrayindex(regextract(_raw_log, \"UserName=\\\"([^\\\"]+)\"), 0),\nreason = arrayindex(regextract(_raw_log, \"Reason=\\\"([^\\\"]+)\"), 0),\naction = arrayindex(regextract(_raw_log, \"Message=\\\"([^\\\"]+)\"), 0),\ncommand = arrayindex(regextract(_raw_log, \"Command=([^\\;]+)\"), 0),\nstation = replace(arrayindex(regextract(_raw_log, \"Station=([^\\;]+)\"), 0), \"\\\"\", \"\"),\ndirectory = replace(arrayindex(regextract(_raw_log, \"File=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nhost_dst = replace(arrayindex(regextract(_raw_log, \"Address=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nhost_src_name = replace(arrayindex(regextract(_raw_log, \"SrcHost=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nhost_dst_name = replace(arrayindex(regextract(_raw_log, \"DstHost=([^\\;]+)\"), 0), \"\\\"\", \"\")\n| alter filename = arrayindex(split(directory, \"\\\"), -1),\ntime = _time\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, _final_reporting_device_ip,\ntime, _raw_log\n| filter reference_id = 4\n| comp count() as match_events,\nvalues(action) as action by user_dst\n| filter match_events >= 5"}
{"prompt": "I want to see activity related to APT27 Emissary Panda, specifically focusing on suspicious process creations involving sllauncher.exe and svchost.exe.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\sllauncher\\.exe\" and action_process_image_path ~= \".*\\\\svchost\\.exe\") or (actor_process_image_path ~= \".*\\\\AppData\\\\Roaming\\\\.*\" and action_process_image_path ~= \".*\\\\svchost\\.exe\" and action_process_image_command_line contains \"-k\"))\n\n\n\n"}
{"prompt": "I want to find users who have accessed potentially unwanted software URLs multiple times based on Symantec WSS data within an hour.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and category ~= \"Potentially Unwanted Software\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to detect activity that suggests Pnscan is being used to send and receive binary data across the network.", "response": "preset = xdr_process\n| filter action_process_image_command_line ~= \"\\-(W|R)\\s?(\\s|\\\"|\\')([0-9a-fA-F]{2}\\s?){2,20}(\\s|\\\"|\\')\"\n\n\n\n"}
{"prompt": "I want to find potential signing bypass attempts that utilize Windows Developer Features via registry modifications.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\AppModelUnlock\" or action_registry_key_name ~= \".*\\\\Policies\\\\Microsoft\\\\Windows\\\\Appx\\\\.*\") and (action_registry_key_name ~= \".*\\\\AllowAllTrustedApps\" or action_registry_key_name ~= \".*\\\\AllowDevelopmentWithoutDevLicense\") and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to see all unauthorized users who have failed to authenticate as superuser on Unix servers multiple times within the last minute.", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| bin _time span = 1m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"edgeverve_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type in (\"su\", \"sudo\") and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.source.user.username not in (NULL, \"autoid\", \"migbrac\", \"crm_appscan\", \"finacle_appscan\", \"enterprisedb\", \"gs1adm\", \"ftadm\", \"qantasadm\", \"crmadmin\", \"jtrstadm\", \"bciadm\", \"feadm\", \"ING11ADM\", \"iobadm\", \"gstatsadm\", \"bmmig\", \"eqcuadm\", \"dopadm\", \"ebbpadm2\", \"ora12102\", \"ora12101\", \"fedadm\", \"INGADM\", \"medadm\", \"medadm1\", \"fnimsadm\", \"ora11g\", \"ubsadm\", \"quantasadm\", \"ingadmin\", \"devops\", \"jtbadm\", \"qntsadm\", \"fbmigadm\", \"fbmigadm\", \"eximadm\", \"kotadm\", \"dfsdev1\", \"sonaradm\", \"abreladm\", \"qudoseb\", \"wasadm\", \"ntbadm\", \"ubmigadm\", \"tstsp\", \"scmod03\", \"trgadm\", \"fecbdadm\", \"frel1adm\", \"_pamsdam\", \"_pamunix\", \"finadm\") and xdm.source.ipv4 not in (\"10.181.11.142\", \"10.156.118.117\", \"10.82.136.11\", \"10.10.100.68\", \"10.122.128.21\", \"10.152.163.42\", \"172.18.20.31\", \"172.18.38.149\", \"10.182.11.41\", \"172.18.1.25\", \"10.67.122.149\", \"10.219.7.67\", \"10.95.9.148\", \"10.118.132.98\", \"172.27.104.10\", \"10.122.128.20\", \"10.219.7.68\", \"10.139.38.106\", \"172.18.22.85\", \"10.67.122.151\", \"10.185.122.10\", \"10.76.63.68\", \"10.205.11.115\", \"10.67.122.150\", \"10.158.100.43\", \"10.82.136.10\", \"10.85.174.246\", \"10.78.172.244\", \"172.18.22.176\", \"10.204.11.97\", \"10.87.22.109\", \"10.67.122.148\", \"10.156.118.116\", \"172.18.43.37\", \"10.82.136.12\", \"10.139.38.107\") and xdm.target.host.hostname != \"bl4ul279\"\n| alter xdm.network.application_protocol = coalesce(arrayindex(regextract(xdm.event.description, \"from \\S+ port \\d+ (\\w+)\"), 0), arrayindex(regextract(xdm.event.description, \"pam_unix\\(([^\\)]+)\"), 0))\n| filter xdm.network.application_protocol != \"sudo:auth\"\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name, security_groups\n| filter security_groups contains \"UNIX_Group_R1\" or security_groups contains \"UNIX_Group_R2\"\n) as ad_users ad_users.sam_account_name = xdm.source.user.username\n| filter sam_account_name = null\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, device_ip\n| comp count() as matched_events,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to track when users are repeatedly added and removed from privileged groups like 'wheel' on Linux or 'Administrators' on Windows within a 24 hour period.", "response": "config case_sensitive = false\n| datamodel dataset in (unix_auditd_raw)\n| filter (xdm.event.type = \"\"\"USER_MGMT\"\"\") and xdm.event.description in (\"add-user-to-group\", \"delete-user-from-group\")\n| alter targetGroupName = arrayindex(regextract(unix_auditd_raw._raw_log, \"grp=\\\"(.*?)\\\"\\s\"), 0)\n| alter sourceUserName = xdm.source.user.username\n| alter targetUserName = \"\"\n| alter message = xdm.event.description\n| comp count_distinct(xdm.event.description) as dc,\nvalues(sourceUserName) as sourceUsers,\nmin(_time) as startTime,\nmax(_time) as endTime,\nvalues(message) by targetUserName,\ntargetGroupName\n| filter dc > 1 and timestamp_diff(startTime, endTime, \"HOUR\") <= 24\n| filter targetGroupName in (\"Wheel\")\n| union (dataset = microsoft_windows_raw\n| filter event_id in (4728, 4729)\n| alter sourceUserName = event_data -> SubjectUserName\n| alter targetUserName = event_data -> MemberName\n| alter targetGroupName = event_data -> TargetUserName\n| comp count_distinct(event_id) as dc,\nvalues(sourceUserName) as sourceUsers,\nmin(_time) as startTime,\nmax(_time) as endTime,\nvalues(message) by targetUserName,\ntargetGroupName\n| filter dc > 1 and timestamp_diff(startTime, endTime, \"HOUR\") <= 24\n| filter targetGroupName in (\"Administrator\")\n\n)"}
{"prompt": "I want to detect when a user is added to the admin group on MacOS systems.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/sysadminctl\" and (action_process_image_command_line contains \" -addUser \" and action_process_image_command_line contains \" -admin \")) or (action_process_image_path ~= \".*\\/dscl\" and (action_process_image_command_line contains \" -append \" and action_process_image_command_line contains \" /Groups/admin \" and action_process_image_command_line contains \" GroupMembership \")))\n\n\n\n"}
{"prompt": "I want to monitor for failed login attempts on the PAM platform and alert me when they occur.", "response": "config case_sensitive = false\n| dataset = hitachi_pam_raw\n| filter oper ~= \"WOPW\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nevent_desc = \"A password on a managed system is overridden using the PSW module.\",\ndevice_type = \"pam\""}
{"prompt": "I want to find Windows login failures due to password expiry, account disablement, or account expiry that have happened at least 10 times for the same user within a 3-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| bin _time span = 3m\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type)\n| filter (xdm.event.id in (\"4625\", \"4776\") and error_code in (\"0xC0000071\", \"0xC0000072\", \"0xC0000193\", \"C0000193\", \"C0000071\", \"C0000072\")) and xdm.event.outcome = \"failure\" and xdm.source.user.username !~= \"\\$$|sas|mpetl_pr\" and xdm.source.ipv4 != null and xdm.source.ipv4 not in (\"10.181.9.110\", \"10.182.11.41\", \"10.204.11.97\", \"10.205.11.115\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.target.user.username,\nxdm.source.ipv4,\n_time\n| filter matched_events = 10\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to find events where Reg.exe was used to delete services from the registry.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and action_process_image_command_line contains \" delete \" and action_process_image_command_line ~= \".*\\\\SYSTEM\\\\CurrentControlSet\\\\services\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find instances of PowerShell being used from unusual or unexpected locations on my endpoints.", "response": "preset = xdr_event_log\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter ContextInfo contains \"*\" and  not ((ContextInfo contains \"= powershell\" or ContextInfo contains \"= C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell\" or ContextInfo contains \"= C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell\" or ContextInfo contains \"= C:/Windows/System32/WindowsPowerShell/v1.0/powershell\" or ContextInfo contains \"= C:/Windows/SysWOW64/WindowsPowerShell/v1.0/powershell\") or ContextInfo contains \"= C:\\\\WINDOWS\\\\System32\\\\sdiagnhost.exe -Embedding\" or ContextInfo contains \"ConfigSyncRun.exe\" or ContextInfo contains \"C:\\\\Windows\\\\system32\\\\dsac.exe\" or ContextInfo contains \"C:\\\\Windows\\\\system32\\\\wsmprovhost.exe -Embedding\" or (Payload contains \"Update-Help\" or Payload contains \"Failed to update Help for the module\"))\n\n\n\n"}
{"prompt": "I want to detect malicious PowerShell scripts that create scheduled tasks on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"New-ScheduledTaskAction\" or ScriptBlockText contains \"New-ScheduledTaskTrigger\" or ScriptBlockText contains \"New-ScheduledTaskPrincipal\" or ScriptBlockText contains \"New-ScheduledTaskSettingsSet\" or ScriptBlockText contains \"New-ScheduledTask\" or ScriptBlockText contains \"Register-ScheduledTask\") or (ScriptBlockText contains \"Invoke-CimMethod\" and ScriptBlockText contains \"-ClassName\" and ScriptBlockText contains \"PS_ScheduledTask\" and ScriptBlockText contains \"-NameSpace\" and ScriptBlockText contains \"Root\\\\Microsoft\\\\Windows\\\\TaskScheduler\"))\n\n\n\n"}
{"prompt": "I want to detect instances where Squirrel.exe is used to download files from the internet.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\squirrel\\.exe\" or action_process_image_path ~= \".*\\\\update\\.exe\") and (action_process_image_command_line contains \" --download \" or action_process_image_command_line contains \" --update \" or action_process_image_command_line contains \" --updateRollback=\") and action_process_image_command_line contains \"http\")\n\n\n\n"}
{"prompt": "I want to see events where curl.exe downloads files from suspicious file-sharing domains.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\curl\\.exe\" or actor_process_file_original_name = \"curl.exe\") and (action_process_image_command_line contains \".githubusercontent.com\" or action_process_image_command_line contains \"anonfiles.com\" or action_process_image_command_line contains \"cdn.discordapp.com\" or action_process_image_command_line contains \"cdn.discordapp.com/attachments/\" or action_process_image_command_line contains \"ddns.net\" or action_process_image_command_line contains \"dl.dropboxusercontent.com\" or action_process_image_command_line contains \"ghostbin.co\" or action_process_image_command_line contains \"glitch.me\" or action_process_image_command_line contains \"gofile.io\" or action_process_image_command_line contains \"hastebin.com\" or action_process_image_command_line contains \"mediafire.com\" or action_process_image_command_line contains \"mega.nz\" or action_process_image_command_line contains \"onrender.com\" or action_process_image_command_line contains \"paste.ee\" or action_process_image_command_line contains \"pastebin.com\" or action_process_image_command_line contains \"pastebin.pl\" or action_process_image_command_line contains \"pastetext.net\" or action_process_image_command_line contains \"privatlab.com\" or action_process_image_command_line contains \"privatlab.net\" or action_process_image_command_line contains \"send.exploit.in\" or action_process_image_command_line contains \"sendspace.com\" or action_process_image_command_line contains \"storage.googleapis.com\" or action_process_image_command_line contains \"storjshare.io\" or action_process_image_command_line contains \"supabase.co\" or action_process_image_command_line contains \"temp.sh\" or action_process_image_command_line contains \"transfer.sh\" or action_process_image_command_line contains \"ufile.io\") and action_process_image_command_line contains \"http\" and (action_process_image_command_line contains \" -O\" or action_process_image_command_line contains \"--remote-name\" or action_process_image_command_line contains \"--output\") and (action_process_image_command_line ~= \".*\\.ps1\" or action_process_image_command_line ~= \".*\\.ps1\\'\" or action_process_image_command_line ~= \".*\\.ps1\\\"\" or action_process_image_command_line ~= \".*\\.dat\" or action_process_image_command_line ~= \".*\\.dat\\'\" or action_process_image_command_line ~= \".*\\.dat\\\"\" or action_process_image_command_line ~= \".*\\.msi\" or action_process_image_command_line ~= \".*\\.msi\\'\" or action_process_image_command_line ~= \".*\\.msi\\\"\" or action_process_image_command_line ~= \".*\\.bat\" or action_process_image_command_line ~= \".*\\.bat\\'\" or action_process_image_command_line ~= \".*\\.bat\\\"\" or action_process_image_command_line ~= \".*\\.exe\" or action_process_image_command_line ~= \".*\\.exe\\'\" or action_process_image_command_line ~= \".*\\.exe\\\"\" or action_process_image_command_line ~= \".*\\.vbs\" or action_process_image_command_line ~= \".*\\.vbs\\'\" or action_process_image_command_line ~= \".*\\.vbs\\\"\" or action_process_image_command_line ~= \".*\\.vbe\" or action_process_image_command_line ~= \".*\\.vbe\\'\" or action_process_image_command_line ~= \".*\\.vbe\\\"\" or action_process_image_command_line ~= \".*\\.hta\" or action_process_image_command_line ~= \".*\\.hta\\'\" or action_process_image_command_line ~= \".*\\.hta\\\"\" or action_process_image_command_line ~= \".*\\.dll\" or action_process_image_command_line ~= \".*\\.dll\\'\" or action_process_image_command_line ~= \".*\\.dll\\\"\" or action_process_image_command_line ~= \".*\\.psm1\" or action_process_image_command_line ~= \".*\\.psm1\\'\" or action_process_image_command_line ~= \".*\\.psm1\\\"\"))\n\n\n\n"}
{"prompt": " I want to detect potential AWS CloudTrail logging changes like disabling or deleting trails. ", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"cloudtrail.amazonaws.com\" and eventName in (\"StopLogging\", \"UpdateTrail\", \"DeleteTrail\"))\n\n\n\n"}
{"prompt": "I want to detect potential credential dumping attempts using PowerShell that target lsass.exe.", "response": "preset = xdr_event_log\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| filter ((SourceImage ~= \".*\\\\powershell\\.exe\" or SourceImage ~= \".*\\\\pwsh\\.exe\") and TargetImage ~= \".*\\\\lsass\\.exe\")\n\n\n\n"}
{"prompt": "I want to find potential persistence threats related to unusual locations for shim database files on Windows systems.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\AppCompatFlags\\\\InstalledSDB\\\\.*\" and action_registry_key_name contains \"\\\\DatabasePath\") and  not ((action_registry_value_name contains \":\\\\Windows\\\\AppPatch\\\\Custom\" or action_registry_data contains \":\\\\Windows\\\\AppPatch\\\\Custom\"))\n\n\n\n"}
{"prompt": "I want to see details about NSG rule changes monitored on Azure, specifically focusing on changes made within the specified tenant IDs and resources.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"<id>\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of the CVE-2019-1378 exploit using SetupComplete.cmd.", "response": "preset = xdr_process\n| filter ((actor_process_image_command_line contains \"\\\\cmd.exe\" and actor_process_image_command_line contains \"/c\" and actor_process_image_command_line ~= \".*C\\:\\\\Windows\\\\Setup\\\\Scripts\\\\.*\") and (actor_process_image_command_line ~= \".*SetupComplete\\.cmd\" or actor_process_image_command_line ~= \".*PartnerSetupComplete\\.cmd\")) and  not ((action_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\Setup\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see Symantec WSS events classified as \"Unwanted Software\" along with related proxy events from the Symantec EP data source.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Security\") and xdm.alert.name ~= \"^audit|^web attack|^malicious Site|^system infected|^os attack|^attack\"\n| alter server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer\\: ([^\\,]+)\"), 0)\n| alter category = xdm.alert.name,\nusername = xdm.source.user.username\n| alter event_desc = xdm.alert.description,\nevent_type = xdm.event.description,\ntarget_url = xdm.target.url,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nhostname = coalesce(xdm.target.host.hostname, xdm.source.host.hostname)\n| comp earliest(_time) as FirstAVEventTime,\nlatest(_time) as LatestAVEventTime,\nvalues(server_name) as server_name,\nvalues(category) as alert_category,\nvalues(event_desc) as event_desc,\nvalues(event_type) as event_type,\nvalues(src_ip) as src_ip,\nvalues(dst_ip) as dst_ip,\nvalues(target_url) as target_url by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nhostname\n| join type = left\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| alter user_dst = if(user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", \"\"\"non-interactive-user\"\"\", null, \"\"\"\"\"\"), if(user_dst ~= \"<user>\\n\", concat(\"n\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), if(user_dst ~= \"<user>\\r\", concat(\"r\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1))), user_dst)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by ip_src,\nuser_dst,\nalias_host\n) as proxyevents(proxyevents.ip_src = xdm.target.ipv4 or proxyevents.alias_host = hostname or proxyevents.user_dst = xdm.source.user.sam_account_name)\n| filter (ip_src != null or user_dst != null or alias_host != null) and category ~= \"unwanted software\""}
{"prompt": "I want to find PowerShell scripts that use Invoke-Obfuscation VAR++ LAUNCHER OBFUSCATION to execute commands and evade detection.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText ~= \"(?i)\\&\\&set.*(\\{\\d\\}){2,}\\\\\\\"\\s+?\\-f.*\\&\\&.*cmd.*\\/c\"\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to Mshta.EXE executions on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_file_original_name = \"MSHTA.EXE\") and ((actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") and (action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\Temp\\\\.*\"))) or ((action_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_file_original_name = \"MSHTA.EXE\") and  not (((action_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (action_process_image_command_line contains \".htm\" or action_process_image_command_line contains \".hta\") or (action_process_image_command_line ~= \".*mshta\\.exe\" or action_process_image_command_line ~= \".*mshta\"))))\n\n\n\n"}
{"prompt": "I want to find instances where the process \"IEInstal.exe\" is used to bypass User Account Control (UAC) by creating or accessing files in unexpected locations.", "response": "datamodel\n| filter ((xdm.target.process.name = \"C:\\\\Program Files\\\\Internet Explorer\\\\IEInstal.exe\" or xdm.source.process.name = \"C:\\\\Program Files\\\\Internet Explorer\\\\IEInstal.exe\") and xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and xdm.target.file.filename ~= \".*consent\\.exe\")\n\n\n\n"}
{"prompt": "I want to see Symantec WSS events that have no category assigned and include information about the event, like the process involved, file hash, IP addresses, and any related actions taken.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Risk\")\n| alter hostname = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| filter xdm.target.file.sha256 != null and hostname != null\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\ndownload_site = arrayindex(regextract(symantec_ep_raw._raw_log, \"Download site:\\s([^\\,]+)\"), 0),\ndownloaded_by = arrayindex(regextract(symantec_ep_raw._raw_log, \"Downloaded by:\\s([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlast(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(server_name) as server_name,\nvalues(xdm.source.user.username) as username,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ips,\nvalues(xdm.target.ipv4) as dst_ips,\nvalues(download_site) as download_site,\nvalues(downloaded_by) as downloaded_by,\nvalues(xdm.target.file.sha256) as file_hash by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nxdm.target.host.hostname\n| join type = left\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by ip_src,\nuser_dst,\nalias_host\n) as proxyevents(proxyevents.ip_src = xdm.target.ipv4 or proxyevents.user_dst = xdm.source.user.sam_account_name or proxyevents.alias_host = `xdm.target.host.hostname`)\n| filter (ip_src != null or user_dst != null or alias_host != null) and category ~= \"uncategorized\"\n| alter process = replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_address = replace(replace(replace(to_string(ip_address), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nrisk_name = replace(replace(replace(to_string(risk_name), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nfile_name = arrayindex(split(replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"), \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(process, file_name, \"\")"}
{"prompt": "I want to see information about Windows security password policy enumerations on endpoints, specifically looking for event ID 4661 where the AccessList contains \"%%5392\" and the ObjectServer is \"Security Account Manager.\"", "response": "preset = xdr_event_log\n| alter AccessList = regextract(to_json_string(action_evtlog_data_fields)->AccessList{}, \"\\\"(.*)\\\"\")\n| alter ObjectServer = regextract(to_json_string(action_evtlog_data_fields)->ObjectServer{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4661 and AccessList contains \"%%5392\" and ObjectServer = \"Security Account Manager\")\n\n\n\n"}
{"prompt": "I want to see alerts from FortiGate that indicate an external IP address triggering an IPS event, but exclude any alerts related to the Wind.River.VxWorks.WDB.Debug.Service.Version.Number.Scanner and where neither the source nor target IP is in our list of allowed external IPs.", "response": "config case_sensitive = false\n| datamodel dataset in (fortinet_fortigate1_raw, fortinet_fortigate_raw)\n| filter (xdm.source.ipv4 not in (\"<ip>\")) and xdm.observer.type = \"utm\" and xdm.event.operation_sub_type = \"ips\" and xdm.observer.action = \"detected\" and xdm.event.description not contains \"Wind.River.VxWorks.WDB.Debug.Service.Version.Number.Scanner\" and (xdm.source.is_internal_ip = false) and (incidr(xdm.target.ipv4, \"<ip>\") = false and incidr(xdm.source.ipv4, \"<ip>\") = false)\n| join type = left\n(dataset = wl_ip_cidrs\n| filter wl_logsrc = \"ext_pub_ip\" and wl_type = \"ipv4\"\n) as extips extips.wl_value = xdm.source.ipv4\n| filter wl_value = null"}
{"prompt": "I want to find out if any malicious DLL files, specifically \"iphlpapi.dll\", have been created in the OneDrive or Teams folder locations.", "response": "datamodel\n| filter (xdm.target.file.filename contains \"iphlpapi.dll\" and xdm.target.file.filename contains \"\\\\AppData\\\\Local\\\\Microsoft\")\n\n\n\n"}
{"prompt": "{I want to find indicators of malicious activity related to PrintBrm ZIP creation and extraction on my endpoints.} \n\n\nLet me know if you'd like me to generate prompts for other use cases or variations!", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\PrintBrm\\.exe\" and (action_process_image_command_line contains \" -f\" and action_process_image_command_line contains \".zip\"))\n\n\n\n"}
{"prompt": "I want to find instances of Chafer malware URLs that include \"/asp.asp?ui=\".", "response": "datamodel\n| filter xdm.network.http.url contains \"/asp.asp?ui=\"\n\n\n\n"}
{"prompt": "I want to see any activity where Netsh is used to retrieve firewall configuration information.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and ((action_process_image_command_line contains \"netsh \" and action_process_image_command_line contains \"show \" and action_process_image_command_line contains \"firewall \") and (action_process_image_command_line contains \"config \" or action_process_image_command_line contains \"state \" or action_process_image_command_line contains \"rule \" or action_process_image_command_line contains \"name=all\")))\n\n\n\n"}
{"prompt": "I want to see events related to the System.Drawing.ni.dll being loaded by images.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\System\\.Drawing\\.ni\\.dll\"\n\n\n\n"}
{"prompt": "{I want to find users who have simultaneously accessed both LAN and VPN connections, which suggests potential password compromise or sharing.} \n\n\nLet me know if you need any further assistance with this!", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| sort asc _time\n| bin _time span = 5m\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id = \"4624\" and xdm.source.user.username !~= \"\\$|ANONYMOUS LOGON\"\n| join\n(dataset = redcarpet_users_list\n| fields username\n) as corp_users corp_users.username = xdm.source.user.username\n| join type = left\n(dataset = enterprise_platform_static_list\n| fields ip_address, platform_type\n| filter platform_type in (\"ad_ip\", \"exchange_ip\")\n) as ent_platform ent_platform.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = enterprise_platform_static_list\n| filter platform_type in (\"is_ip\")\n| alter ip_range = split(ip_address, \"-\")\n| alter ip_range_start = ip_to_int(arrayindex(ip_range, 0)),\nip_range_end = ip_to_int(arrayindex(ip_range, 1))\n| fields ip_range_start, ip_range_end\n) as ent_platform_ip_range ip_to_int(xdm.source.ipv4) >= ent_platform_ip_range.ip_range_start and ip_to_int(xdm.source.ipv4) <= ent_platform_ip_range.ip_range_end\n| filter ip_range_start = null\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_ips incidr(xdm.source.ipv4, vpn_ips.cidr_range)\n| alter pattern = if(cidr_range != null, \"E1\", \"E2\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, pattern\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\nlist(pattern) as pattern_events,\ncount() as matched_events by xdm.target.user.username,\n_time\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events ~= \"E1,E2\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see failed login attempts, especially for domain admins, with at least 5 occurrences within a 5 minute window.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| bin _time span = 5m\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter target_user_username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| filter xdm.event.id = \"4625\" and target_user_username not in (\"_evcadmin\", \"sudheep_a\", \"anindya_bose02\", \"deepak_ammanath\")\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type = \"domain_admin_win_admin\" or security_groups contains \"Tier0Users\"\n| alter username = if(username ~= \"@ad.infosys.com\", rtrim(username, \"@ad.infosys.com\"), if(username ~= \"@infosys.com\", rtrim(username, \"@infosys.com\"), if(username ~= \"itlinfosys\", ltrim(username, \"itlinfosys\\\\\"), username)))\n) as ent_admin_dst ent_admin_dst.username = target_user_username or ent_admin_dst.sam_account_name = target_user_username\n| filter username != null or sam_account_name != null\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, admin_type, target_user_username,\nsam_account_name, username as enterprise_admin_username\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by _time,\ntarget_user_username\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ilsourceuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 1)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances of potentially malicious activity where processes are downloading files using obfuscated IP addresses.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Invoke-WebRequest\" or action_process_image_command_line contains \"iwr \" or action_process_image_command_line contains \"wget \" or action_process_image_command_line contains \"curl \" or action_process_image_command_line contains \"DownloadFile\" or action_process_image_command_line contains \"DownloadString\") and ((action_process_image_command_line contains \" 0x\" or action_process_image_command_line contains \"\n\n\n\n"}
{"prompt": "I want to see alerts about potential BlueMushroom activity where a DLL is loaded using Regsvr32.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"regsvr32\" and action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\.*\" and action_process_image_command_line contains \".dll\" and action_process_image_command_line contains \",DllEntry\")\n\n\n\n"}
{"prompt": "I want to find instances where environment variables for COR Profiler are being set in the Windows Registry.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\COR\\_ENABLE\\_PROFILING\" or action_registry_key_name ~= \".*\\\\COR\\_PROFILER\" or action_registry_key_name ~= \".*\\\\CORECLR\\_ENABLE\\_PROFILING\") or action_registry_key_name contains \"\\\\CORECLR_PROFILER_PATH\")\n\n\n\n"}
{"prompt": "I want to see alerts about activity related to Pypykatz credential dumping.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\pypykatz\\.exe\" or action_process_image_path ~= \".*\\\\python\\.exe\") and (action_process_image_command_line contains \"live\" and action_process_image_command_line contains \"registry\"))\n\n\n\n"}
{"prompt": "I want to find unusual TeamViewer activity that shows a spike in Symantec WSS events.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and (user_agent ~= \"dyngate\" or host_dst ~= \"teamviewer\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 10\n| alter category = \"Command and Control\",\nip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find processes that are requesting full access (\"PROCESS_ALL_ACCESS\") to uncommon target images.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| filter ((TargetImage ~= \".*\\\\calc\\.exe\" or TargetImage ~= \".*\\\\calculator\\.exe\" or TargetImage ~= \".*\\\\mspaint\\.exe\" or TargetImage ~= \".*\\\\notepad\\.exe\" or TargetImage ~= \".*\\\\ping\\.exe\" or TargetImage ~= \".*\\\\wordpad\\.exe\" or TargetImage ~= \".*\\\\write\\.exe\") and GrantedAccess = \"0x1FFFFF\")\n\n\n\n"}
{"prompt": " I want to see alerts about attempts to add SID History to accounts that failed, along with details like the affected user, computer, and error code. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4766\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see Duo successful logins from Morocco that include the user's email address, IP address, device information, and integration type.", "response": "dataset = duo_duo_raw\n| filter email not in (null, NULL, \"\"\"\"\"\") and result in (\"success\") and eventtype in (\"authentication\")\n| alter DuoUserName = user -> name,\nIPAddress = access_device -> ip,\nDeviceTrustLevel = adaptive_trust_assessments -> remember_me.trust_level,\nAccDevLocationCN = access_device -> location.country,\nAccDevLocationST = access_device -> location.state,\nAccDevLocationCY = access_device -> location.city,\nAccDevOS = access_device -> os,\nAccDevOSVer = access_device -> os_version,\nAccDevBrowser = access_device -> browser,\nAccDevBrowserVer = access_device -> browser_version,\nIntegration = application -> name,\nPhoneNumber = auth_device -> name\n| filter IPAddress not contains \"0.0.0.0\" and AccDevLocationCN in (\"Morocco\")\n| alter DuoUserName_Country = concat(DuoUserName, \"_\", AccDevLocationCN),\nCorrelationRuleName = \"CNX_EU_PROD DUO Successful User Login From Morocco RealTime\"\n| fields DuoUserName, reason, IPAddress, result, eventtype,\nemail, AccDevLocationCN, DuoUserName_Country, AccDevOS,\nAccDevOSVer, AccDevBrowser, AccDevBrowserVer, Integration,\n*"}
{"prompt": "I want to find instances where old TLS protocols like 1.0 and 1.1 are enabled on Windows systems.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\Control\\\\SecurityProviders\\\\SCHANNEL\\\\Protocols\\\\TLS\\ 1\\.0\\\\.*\" or action_registry_key_name ~= \".*\\\\Control\\\\SecurityProviders\\\\SCHANNEL\\\\Protocols\\\\TLS\\ 1\\.1\\\\.*\") and action_registry_key_name ~= \".*\\\\Enabled\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to detect if WinPwn is being used on my endpoints by looking for specific keywords in scriptblock text logs.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Offline_Winpwn\" or ScriptBlockText contains \"WinPwn \" or ScriptBlockText contains \"WinPwn.exe\" or ScriptBlockText contains \"WinPwn.ps1\")\n\n\n\n"}
{"prompt": "I want to find instances where the ESXCLI command is used to change the Syslog configuration on an ESXi host.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/esxcli\" and (action_process_image_command_line contains \"system\" and action_process_image_command_line contains \"syslog\" and action_process_image_command_line contains \"config\") and action_process_image_command_line contains \" set\")\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that are uploading files using Invoke-WebRequest or iwr with the -Method Put or Post.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Invoke-WebRequest\" or ScriptBlockText contains \"iwr \") and (ScriptBlockText contains \"-Method Put\" or ScriptBlockText contains \"-Method Post\"))\n\n\n\n"}
{"prompt": "I want to detect instances where \"Squirrel.exe\" is used to execute arbitrary processes, potentially indicating malicious activity.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\squirrel\\.exe\" or action_process_image_path ~= \".*\\\\update\\.exe\") and (action_process_image_command_line contains \"--processStart\" or action_process_image_command_line contains \"--processStartAndWait\" or action_process_image_command_line contains \"--createShortcut\")) and  not ((action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Discord\\\\Update.exe\" and action_process_image_command_line contains \" --processStart\" and action_process_image_command_line contains \"Discord.exe\") or ((action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\GitHubDesktop\\\\Update.exe\" and action_process_image_command_line contains \"GitHubDesktop.exe\") and (action_process_image_command_line contains \"--createShortcut\" or action_process_image_command_line contains \"--processStartAndWait\")) or ((action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\Update.exe\" and action_process_image_command_line contains \"Teams.exe\") and (action_process_image_command_line contains \"--processStart\" or action_process_image_command_line contains \"--createShortcut\")) or ((action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\yammerdesktop\\\\Update.exe\" and action_process_image_command_line contains \"Yammer.exe\") and (action_process_image_command_line contains \"--processStart\" or action_process_image_command_line contains \"--createShortcut\")))\n\n\n\n"}
{"prompt": "I want to see all events related to the file \"C:\\\\Windows\\\\System32\\\\Com\\\\Comadmin.dat\" because it might be associated with SNAKE Malware.", "response": "datamodel\n| filter xdm.target.file.filename = \"C:\\\\Windows\\\\System32\\\\Com\\\\Comadmin.dat\"\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is using unquoted paths when querying Win32_Service information.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Get-WmiObject \" or ScriptBlockText contains \"gwmi \") and (ScriptBlockText contains \" Win32_Service \" and ScriptBlockText contains \"Name\" and ScriptBlockText contains \"DisplayName\" and ScriptBlockText contains \"PathName\" and ScriptBlockText contains \"StartMode\"))\n\n\n\n"}
{"prompt": "I want to find the most observed server domains used in ransomware, advanced persistent threats, and malware emails from Trend Micro Email Security data, focusing on those with an observation rate of at least 40%.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter headerTo != null and headerFrom != null and eventType in (\"Ransomware\", \"Advanced Persistent Threat\", \"Malware\")\n| alter headerTo_array = headerTo -> []\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\")\n| filter messageID ~= \"smtp\"\n| alter sender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0)\n| comp count() as total_events,\nvalues(sender_domain) as sender_domain by eventType\n| arrayexpand sender_domain\n| join type = left\n(dataset = trend_micro_email_security_raw\n| filter headerTo != null and headerFrom != null and eventType in (\"Ransomware\", \"Advanced Persistent Threat\", \"Malware\")\n| alter headerTo_array = headerTo -> []\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\")\n| filter messageID ~= \"smtp\"\n| alter sender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0)\n| comp count() as matched_events,\nvalues(headerFrom) as headerFrom,\nvalues(headerTo_string) as headerTo_string by sender_domain,\neventType\n) as domainevents domainevents.sender_domain = sender_domain and domainevents.eventType = eventType\n| alter domain_obser_stats = round(multiply(divide(matched_events, total_events), 100))\n| filter domain_obser_stats >= 40"}
{"prompt": "I want to find suspicious instances of the \"Renamed CreateDump Utility Execution\" threat, which disguises itself by renaming the original executable or using specific command line arguments to create memory dumps.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name = \"FX_VER_INTERNALNAME_STR\" or ((action_process_image_command_line contains \" -u \" and action_process_image_command_line contains \" -f \" and action_process_image_command_line contains \".dmp\") or (action_process_image_command_line contains \" --full \" and action_process_image_command_line contains \" --name \" and action_process_image_command_line contains \".dmp\"))) and  not (action_process_image_path ~= \".*\\\\createdump\\.exe\")\n\n\n\n"}
{"prompt": "I want to find suspicious instances of Csc.EXE being used as a parent process along with other potentially malicious applications like PowerShell or Office programs.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\csc\\.exe\" or actor_process_file_original_name = \"csc.exe\") and ((actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\onenote\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") or ((actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\") and (actor_process_image_command_line contains \"-Encoded \" or actor_process_image_command_line contains \"FromBase64String\")) or (actor_process_image_command_line ~= \"([Pp]rogram[Dd]ata|\\%([Ll]ocal)?[Aa]pp[Dd]ata\\%|\\\\[Aa]pp[Dd]ata\\\\([Ll]ocal([Ll]ow)?|[Rr]oaming))\\\\[^\\\\]{1,256}$\" or (actor_process_image_command_line ~= \".*\\:\\\\PerfLogs\\\\.*\" or actor_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or actor_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or actor_process_image_command_line contains \"\\\\Temporary Internet\") or (actor_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_command_line ~= \".*\\\\Favorites\\\\.*\") or (actor_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_command_line ~= \".*\\\\Favourites\\\\.*\") or (actor_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_command_line ~= \".*\\\\Contacts\\\\.*\") or (actor_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_command_line ~= \".*\\\\Pictures\\\\.*\"))) and  not ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\.*\") or actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\sdiagnhost.exe\" or actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\inetsrv\\\\w3wp.exe\") and  not (actor_process_image_path = \"C:\\\\ProgramData\\\\chocolatey\\\\choco.exe\" or actor_process_image_command_line contains \"\\\\ProgramData\\\\Microsoft\\\\Windows Defender Advanced Threat Protection\" or (actor_process_image_command_line contains \"JwB7ACIAZgBhAGkAbABlAGQAIgA6AHQAcgB1AGUALAAiAG0AcwBnACIAOgAiAEEAbgBzAGkAYgBsAGUAIAByAGUAcQB1AGkAcgBlAHMAIABQAG8AdwBlAHIAUwBoAGUAbABsACAAdgAzAC4AMAAgAG8AcgAgAG4AZQB3AGUAcgAiAH0AJw\" or actor_process_image_command_line contains \"cAewAiAGYAYQBpAGwAZQBkACIAOgB0AHIAdQBlACwAIgBtAHMAZwAiADoAIgBBAG4AcwBpAGIAbABlACAAcgBlAHEAdQBpAHIAZQBzACAAUABvAHcAZQByAFMAaABlAGwAbAAgAHYAMwAuADAAIABvAHIAIABuAGUAdwBlAHIAIgB9ACcA\" or actor_process_image_command_line contains \"nAHsAIgBmAGEAaQBsAGUAZAAiADoAdAByAHUAZQAsACIAbQBzAGcAIgA6ACIAQQBuAHMAaQBiAGwAZQAgAHIAZQBxAHUAaQByAGUAcwAgAFAAbwB3AGUAcgBTAGgAZQBsAGwAIAB2ADMALgAwACAAbwByACAAbgBlAHcAZQByACIAfQAnA\"))\n\n\n\n"}
{"prompt": "I want to see CyberArk Vault logs where users are attempting to retrieve passwords and identify potential unauthorized activities.", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_src = xdm.target.user.username,\nuser_dst = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station != \"<ip>\" or device_ip not in (\"<ip>\")\n| filter action ~= \"retrieve password\" and user_dst not in (\"passwordmanager\", \"pvwaappuser\", \"pvwaappuser1\", \"pvwaappuser2\", \"Administrator\", \"administrator\", \"\") and user_dst != null and user_dst !~= \"^CPM_\" and user_src not in (\"skyboxlb\", \"psmadminconnect\", \"psmconnect\", \"\", null)\n| alter aggrega10ion_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to the LPE InstallerFileTakeOver PoC exploit (CVE-2021-41379) on my endpoints. Specifically, I'm looking for events in the Windows Event Log with an ID of 1033 from the \"MsiInstaller\" provider that mention \"test pkg\".", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 1033 and provider_name = \"MsiInstaller\" and Data contains \"test pkg\")\n\n\n\n"}
{"prompt": "I want to detect if malicious activity is trying to set up silent process exits on my Windows system.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"Microsoft\\\\Windows NT\\\\CurrentVersion\\\\SilentProcessExit\" and (action_registry_value_name contains \"MonitorProcess\" or action_registry_data contains \"MonitorProcess\"))\n\n\n\n"}
{"prompt": "I want to see if any possible shadow credentials have been added on my endpoints.", "response": "preset = xdr_event_log\n| alter AttributeLDAPDisplayName = regextract(to_json_string(action_evtlog_data_fields)->AttributeLDAPDisplayName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5136 and AttributeLDAPDisplayName = \"msDS-KeyCredentialLink\")\n\n\n\n"}
{"prompt": "I want to see instances where an uninstall.sh script was executed, excluding legitimate system processes.", "response": "dataset = xdr_data\n| filter action_file_path contains \"MalwareProtection/uninstall.sh\" or action_file_path contains \"ProRemSvc/uninstall.sh\" or action_file_path contains \"/Library/Application Support/PaloAltoNetworks/Traps/scripts/uninstall.sh\" and actor_process_image_path !~= \"Apple Corporate Insight and Detection.app\" and causality_actor_process_command_line !~= \"(jamf|JamfManagementService|package_script_service|InstallFireEye_on_IDLE.sh|mdworker)\"\n| fields agent_hostname as Hostname, action_file_path, actor_process_image_path as apip,\nactor_process_command_line as apcl, causality_actor_process_image_path as capip,\ncausality_actor_process_command_line as capcl, os_actor_process_image_path as osapip,\nos_actor_process_command_line as ospcl, _time as CXReportTime\n| dedup Hostname"}
{"prompt": "I want to detect instances where an attacker is enumerating Active Directory groups using PowerShell's Get-AdGroup command.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Get-AdGroup \" and ScriptBlockText contains \"-Filter\")\n\n\n\n"}
{"prompt": "I want to see detections of malicious activity related to the Program Compatibility Wizard being used for indirect command execution.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\pcwrun\\.exe\"\n\n\n\n"}
{"prompt": "I want to find events related to CoercedPotato named pipe creation on endpoints.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter PipeName ~= \".*\\\\coerced\\\\.*\"\n\n\n\n"}
{"prompt": "I want to see information about any files named \"Password_1234\" that were detected as suspicious by XDR, including details about processes and file actions.", "response": "config case_sensitive = false\n| preset = xdr_process\n| filter action_process_image_name = \"*Password_1234*\"\n| union (preset = xdr_file\n| filter (action_file_name = \"*Password_1234*\" and event_sub_type in (FILE_CREATE_NEW, FILE_RENAME)) or (action_file_previous_file_name = \"*Password_1234*\" and event_sub_type in (FILE_CREATE_NEW, FILE_RENAME)))"}
{"prompt": "I want to detect potential \"RULER\" hacktool activity on endpoints by looking for specific event logs related to system login and process creation.", "response": "preset = xdr_event_log\n| alter Workstation = regextract(to_json_string(action_evtlog_data_fields)->Workstation{}, \"\\\"(.*)\\\"\")\n| alter WorkstationName = regextract(to_json_string(action_evtlog_data_fields)->WorkstationName{}, \"\\\"(.*)\\\"\")\n| filter (((action_evtlog_event_id = 4776 and Workstation = \"RULER\") or (action_evtlog_event_id in (4624, 4625) and WorkstationName = \"RULER\")))\n\n\n\n"}
{"prompt": "I want to find instances where attackers might be creating new domain accounts using PowerShell.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"System.DirectoryServices.AccountManagement\"\n\n\n\n"}
{"prompt": " I want to find instances of malicious processes on endpoints that are using Invoke-Obfuscation Via Use Clip to hide their true purpose. ", "response": "preset = xdr_process\n| filter action_process_image_command_line ~= \"(?i)echo.*clip.*\\&\\&.*(Clipboard|i\\`?n\\`?v\\`?o\\`?k\\`?e\\`?)\"\n\n\n\n"}
{"prompt": "I want to see alerts about AddInUtil.EXE being executed from directories outside of its normal locations on Windows endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\addinutil\\.exe\" or actor_process_file_original_name = \"AddInUtil.exe\") and  not ((action_process_image_path ~= \".*\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework64\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\WinSxS\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find network connections initiated by binaries to \"api.mega.co.nz\" or \"mega.nz\", as these could indicate attackers uploading or downloading malicious files using file sharing services.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (Initiated = \"true\" and (action_external_hostname ~= \".*mega\\.co\\.nz\" or action_external_hostname ~= \".*mega\\.nz\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious changes to the registry keys related to ATBroker accessibility settings.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Accessibility\\\\ATs\" or action_registry_key_name contains \"Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Accessibility\\\\Configuration\") and  not ((actor_process_image_path = \"C:\\\\Windows\\\\system32\\\\atbroker.exe\" and action_registry_key_name contains \"\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Accessibility\\\\Configuration\" and (action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\")) or (actor_process_image_path ~= \"C\\:\\\\Windows\\\\Installer\\\\MSI.*\" and action_registry_key_name contains \"Software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Accessibility\\\\ATs\"))\n\n\n\n"}
{"prompt": "I want to see all instances where someone has attempted to back up the DPAPI Domain Master Key on endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 4692\n\n\n\n"}
{"prompt": "I want to find potential DC Shadow attacks based on events like Kerberos authentication failures and changes to service principal names.", "response": "preset = xdr_event_log\n| alter ServicePrincipalNames = regextract(to_json_string(action_evtlog_data_fields)->ServicePrincipalNames{}, \"\\\"(.*)\\\"\")\n| alter AttributeLDAPDisplayName = regextract(to_json_string(action_evtlog_data_fields)->AttributeLDAPDisplayName{}, \"\\\"(.*)\\\"\")\n| alter AttributeValue = regextract(to_json_string(action_evtlog_data_fields)->AttributeValue{}, \"\\\"(.*)\\\"\")\n| filter ((action_evtlog_event_id = 4742 and ServicePrincipalNames contains \"GC/\") or (action_evtlog_event_id = 5136 and AttributeLDAPDisplayName = \"servicePrincipalName\" and AttributeValue ~= \"GC\\/.*\"))\n\n\n\n"}
{"prompt": "I want to see details about recent changes made to Network Security Groups in Azure, including who made the changes, when they were made, and what specific actions were taken.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/WRITE\", \"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"9227fdca-483d-424c-bc56-9fd2b4030484\", \"3fd7f1e1-88df-41df-982e-90c0daa354b9\", \"f2a4f062-8a8b-444f-82b8-e668b51cf42e\", \"71cce8cd-49d7-4463-bf9f-20dd2a68c5eb\", \"416105b8-5451-4d32-8f96-fcb0deb64ae0\", \"799febb6-d243-48d7-86a3-e94c956f46ba\", \"7269cfc9-f839-4437-9ded-f6d4bdec41d2\", \"8de7d5e6-d76e-497e-97c2-557d13d801e8\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about domain policy modifications on computers like Domain Controllers or ADFS servers.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| filter message_id = \"Security_4739_Microsoft-Windows-Security-Auditing\"\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps(wingrps.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or wingrps.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE in (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see which users are accessing mailboxes they don't own in Office 365, excluding system accounts and internal users.", "response": "config case_sensitive = false\n| dataset = msft_o365_exchange_online_raw\n| filter MailboxOwnerUPN != null and Folder != null\n| alter folder_path = json_extract(Folder, \"$.Path\"),\nUserId = replace(UserId, \"@ad.\", \"@\")\n| filter UserId !~= \"^S\\-\\d+\\-\\d+\\-\\d+\" and folder_path ~= \"inbox\"\n| filter (UserId !~= \"<usernames>\")\n| join type = left\n(dataset = pan_dss_raw\n| fields company_name, sam_account_name, ou, email\n) as ad_users ad_users.email = MailboxOwnerUPN\n| filter company_name != null and company_name !~= \"^SPL\"\n| filter UserId != MailboxOwnerUPN\n| comp values(Operation) as action,\nvalues(folder_path) as folder_path,\nvalues(company_name) as company_name by UserId,\nMailboxOwnerUPN"}
{"prompt": "I want to see if there are any SQL injection attempts being made through web requests.", "response": "datamodel\n| filter xdm.network.http.method = \"GET\" and ( contains \"@@version\" or  contains \"%271%27%3D%271\" or  contains \"=select \" or  contains \"=select(\" or  contains \"=select%20\" or  contains \"concat_ws(\" or  contains \"CONCAT(0x\" or  contains \"from mysql.innodb_table_stats\" or  contains \"from%20mysql.innodb_table_stats\" or  contains \"group_concat(\" or  contains \"information_schema.tables\" or  contains \"json_arrayagg(\" or  contains \"or 1=1#\" or  contains \"or%201=1#\" or  contains \"order by \" or  contains \"order%20by%20\" or  contains \"select \\* \" or  contains \"select database()\" or  contains \"select version()\" or  contains \"select%20\\*%20\" or  contains \"select%20database()\" or  contains \"select%20version()\" or  contains \"select%28sleep%2810%29\" or  contains \"SELECTCHAR(\" or  contains \"table_schema\" or  contains \"UNION ALL SELECT\" or  contains \"UNION SELECT\" or  contains \"UNION%20ALL%20SELECT\" or  contains \"UNION%20SELECT\" or  contains \"'1'='1\") and  not (xdm.network.http.response_code = 404)\n\n\n\n"}
{"prompt": "I want to see a list of unusual ping events detected by Cisco Firepower, grouped by source IP address and showing the number of events exceeding 5 per time window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"PROTOCOL-ICMP PING|PROTOCOL-ICMP Unusual PING detected\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name !~= \"qualys\"\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.ipv4,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to detect suspicious PowerShell scripts that use SSL connections with specific functions.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"System.Net.Security.SslStream\" and ScriptBlockText contains \"Net.Security.RemoteCertificateValidationCallback\" and ScriptBlockText contains \".AuthenticateAsClient\")\n\n\n\n"}
{"prompt": "I want to find suspicious named pipes that match known malicious names.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter PipeName in (\"\\\\46a676ab7f179e511e30dd2dc41bd388\", \"\\\\583da945-62af-10e8-4902-a8f205c72b2e\", \"\\\\6e7645c4-32c5-4fe3-aabf-e94c2f4370e7\", \"\\\\9f81f59bc58452127884ce513865ed20\", \"\\\\adschemerpc\", \"\\\\ahexec\", \"\\\\AnonymousPipe\", \"\\\\bc31a7\", \"\\\\bc367\", \"\\\\bizkaz\", \"\\\\csexecsvc\", \"\\\\dce_3d\", \"\\\\e710f28d59aa529d6792ca6ff0ca1b34\", \"\\\\gruntsvc\", \"\\\\isapi_dg\", \"\\\\isapi_dg2\", \"\\\\isapi_http\", \"\\\\jaccdpqnvbrrxlaf\", \"\\\\lsassw\", \"\\\\NamePipe_MoreWindows\", \"\\\\pcheap_reuse\", \"\\\\Posh*\", \"\\\\rpchlp_3\", \"\\\\sdlrpc\", \"\\\\svcctl\", \"\\\\testPipe\", \"\\\\winsession\")\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious registry modifications that involve Regini.EXE.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regini\\.exe\" or actor_process_file_original_name = \"REGINI.EXE\") and action_process_image_command_line ~= \"\\:[^\\ \\\\]\")\n\n\n\n"}
{"prompt": "I want to find security incidents related to Citrix ADS exploitation using CVE-2020-8193 and CVE-2020-8195.", "response": "datamodel\n| filter (xdm.network.http.url contains \"/rapi/filedownload*filter=path:%2F\" or (xdm.network.http.url contains \"/pcidss/report\" and xdm.network.http.url contains \"type=all_signatures\" and xdm.network.http.url contains \"sig_name=_default_signature_\"))\n\n\n\n"}
{"prompt": "I want to see if there have been more than 500 user accounts disabled on any device in the last 5 minutes.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4725\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.source.user.username\n| filter matched_events >= 500\n| alter aggregation_criteria = \"ileventtype\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 500)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find suspicious activities related to Microsoft IIS Connection Strings Decryption that involve the aspnet_regiis.exe process and the \"connectionStrings\" parameter used with the \"-pdf\" flag.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\aspnet\\_regiis\\.exe\" or actor_process_file_original_name = \"aspnet_regiis.exe\") and (action_process_image_command_line contains \"connectionStrings\" and action_process_image_command_line contains \" -pdf\"))\n\n\n\n"}
{"prompt": "I want to see events related to system shutdown or reboot processes on macOS endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/shutdown\" or action_process_image_path ~= \".*\\/reboot\" or action_process_image_path ~= \".*\\/halt\")\n\n\n\n"}
{"prompt": "I want to find suspicious processes on endpoints that use curl to download files and then execute them.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" -c \" and (action_process_image_command_line contains \"curl \" and action_process_image_command_line contains \"http\" and action_process_image_command_line contains \"-o\" and action_process_image_command_line contains \"&\"))\n\n\n\n"}
{"prompt": "I want to see Cortex XDR alerts about WMI event consumer named pipes created by scrcons.exe.", "response": "preset = xdr_event_log\n| alter Image = regextract(to_json_string(action_evtlog_data_fields)->Image{}, \"\\\"(.*)\\\"\")\n| filter Image ~= \".*\\\\scrcons\\.exe\"\n\n\n\n"}
{"prompt": "I want to find potential keylogger activity on my endpoints based on suspicious PowerShell script block text.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"[Windows.Input.Keyboard]::IsKeyDown([System.Windows.Input.Key]::\"\n\n\n\n"}
{"prompt": "I want to find out when non-system processes create executable files within the WinSxS folder.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\" and xdm.target.file.filename ~= \".*\\.exe\") and  not (((xdm.target.process.name ~= \"C\\:\\\\Windows\\\\Systems32\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Windows\\\\Systems32\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see activity related to DataSvcUtil.exe being used for data exfiltration.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"/in:\" or action_process_image_command_line contains \"/out:\" or action_process_image_command_line contains \"/uri:\") and (action_process_image_path ~= \".*\\\\DataSvcUtil\\.exe\" or actor_process_file_original_name = \"DataSvcUtil.exe\"))\n\n\n\n"}
{"prompt": "I want to see a list of infected machines and the details about the AV actions taken against them, including the virus type, requested action, secondary action, file information, IP addresses, server name, username, and timestamp.", "response": "datamodel dataset = symantec_ep_raw\n| filter xdm.observer.action not in (\"Left alone\", \"All actions failed\", \"No repair available\", \"Bad\")\n| filter xdm.alert.category != null and xdm.alert.category = \"Virus\"\n| filter symantec_ep_raw._raw_log ~= \"Category set: Malware\" and symantec_ep_raw._raw_log ~= \"Category type: Virus\"\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\")\n| filter category = \"Malware\" and event_type = \"Virus\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(xdm.target.file.sha256) as file_hash,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(directory) as directory,\nvalues(file_name) as file_name,\nvalues(file_extension) as file_extension,\nvalues(server_name) as aliashost,\nvalues(xdm.source.user.username) as username,\nvalues(symantec_server_name) as symantec_server_name,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ip,\nvalues(xdm.target.ipv4) as dst_ip,\ncount() as matched_events by xdm.target.host.hostname\n| alter aggregation_criteria = \"ibpmhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find potential sideloading attempts using unsigned VMMap executables that load dbghelp.dll from the debuggers directory.", "response": "preset = xdr_image_load\n| filter (action_module_path contains \"C:\\\\Debuggers\\\\dbghelp.dll\" and (actor_process_image_path ~= \".*\\\\vmmap\\.exe\" or actor_process_image_path ~= \".*\\\\vmmap64\\.exe\")) and  not (actor_process_signature_status = \"true\")\n\n\n\n"}
{"prompt": "I want to find potential Devil Bait indicators based on processes like schtasks.exe, wscript.exe, and mshta.exe interacting with files in the AppData\\Roaming\\Microsoft directory that end in .txt or .xml.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\schtasks\\.exe\" or xdm.target.process.name ~= \".*\\\\wscript\\.exe\" or xdm.target.process.name ~= \".*\\\\mshta\\.exe\") or (xdm.source.process.name ~= \".*\\\\schtasks\\.exe\" or xdm.source.process.name ~= \".*\\\\wscript\\.exe\" or xdm.source.process.name ~= \".*\\\\mshta\\.exe\")) and xdm.target.file.filename ~= \".*\\\\AppData\\\\Roaming\\\\Microsoft\\\\.*\" and (xdm.target.file.filename ~= \".*\\.txt\" or xdm.target.file.filename ~= \".*\\.xml\"))\n\n\n\n"}
{"prompt": "I want to find instances where malicious processes are loading unusual WMI modules.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\fastprox\\.dll\" or action_module_path ~= \".*\\\\wbemcomn\\.dll\" or action_module_path ~= \".*\\\\wbemprox\\.dll\" or action_module_path ~= \".*\\\\wbemsvc\\.dll\" or action_module_path ~= \".*\\\\WmiApRpl\\.dll\" or action_module_path ~= \".*\\\\wmiclnt\\.dll\" or action_module_path ~= \".*\\\\WMINet\\_Utils\\.dll\" or action_module_path ~= \".*\\\\wmiprov\\.dll\" or action_module_path ~= \".*\\\\wmiutils\\.dll\") and  not ((actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\.*\" or actor_process_image_path contains \":\\\\Windows\\\\explorer.exe\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework64\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\")) and  not ((actor_process_image_path ~= \".*\\\\WindowsAzureGuestAgent\\.exe\" or actor_process_image_path ~= \".*\\\\WaAppAgent\\.exe\") or (actor_process_image_path ~= \".*\\\\thor\\.exe\" or actor_process_image_path ~= \".*\\\\thor64\\.exe\") or actor_process_image_path ~= \".*\\\\MsMpEng\\.exe\" or (actor_process_image_path contains \"\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe\" or actor_process_image_path contains \"\\\\Microsoft\\\\Teams\\\\Update.exe\") or (actor_process_image_path ~= \".*\\:\\\\Windows\\\\Sysmon\\.exe\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\Sysmon64\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances where malicious scripts are loading .NET DLL files on my Windows system.", "response": "preset = xdr_image_load\n| filter ((actor_process_image_path ~= \".*\\\\cmstp\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\msxsl\\.exe\" or actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_image_path ~= \".*\\\\wmic\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") and (action_module_path ~= \".*\\\\clr\\.dll\" or action_module_path ~= \".*\\\\mscoree\\.dll\" or action_module_path ~= \".*\\\\mscorlib\\.dll\"))\n\n\n\n"}
{"prompt": "I want to detect potential malicious activity related to cabinet file expansion on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\expand\\.exe\" and (action_process_image_command_line contains \"-F:\" or action_process_image_command_line contains \"/F:\")) and ((action_process_image_command_line ~= \".*\\:\\\\Perflogs\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line contains \"\\\\Temporary Internet\" or action_process_image_command_line contains \":\\\\ProgramData\" or action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\" or action_process_image_command_line contains \"\\\\AppData\\\\Roaming\\\\Temp\" or action_process_image_command_line contains \":\\\\Windows\\\\Temp\") or ((action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Favorites\\\\.*\") or (action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Favourites\\\\.*\") or (action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Contacts\\\\.*\"))) and  not ((actor_process_image_path = \"C:\\\\Program Files (x86)\\\\Dell\\\\UpdateService\\\\ServiceShell.exe\" and action_process_image_command_line ~= \".*C\\:\\\\ProgramData\\\\Dell\\\\UpdateService\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances of the Time Travel Debugging Utility being used based on image load events in Windows Event Logs.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\ttdrecord\\.dll\" or action_module_path ~= \".*\\\\ttdwriter\\.dll\" or action_module_path ~= \".*\\\\ttdloader\\.dll\")\n\n\n\n"}
{"prompt": "I want to find instances where an HTTP POST request is made to a F5 BIG-IP iControl Rest API endpoint that executes Bash commands.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and xdm.network.http.url ~= \".*\\/mgmt\\/tm\\/util\\/bash\")\n\n\n\n"}
{"prompt": "I want to detect potential exploitation of the CVE-2021-26858 vulnerability in Exchange Server by identifying unusual file creation patterns.", "response": "datamodel\n| filter (xdm.target.process.name ~= \".*UMWorkerProcess\\.exe\" or xdm.source.process.name ~= \".*UMWorkerProcess\\.exe\") and  not ((xdm.target.file.filename ~= \".*CacheCleanup\\.bin\" or xdm.target.file.filename ~= \".*\\.txt\" or xdm.target.file.filename ~= \".*\\.LOG\" or xdm.target.file.filename ~= \".*\\.cfg\" or xdm.target.file.filename ~= \".*cleanup\\.bin\"))\n\n\n\n"}
{"prompt": "I want to detect potentially malicious child processes spawned by Visual Studio Code.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\code\\.exe\" and ((action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") and (action_process_image_command_line contains \"Invoke-Expressions\" or action_process_image_command_line contains \"IEX\" or action_process_image_command_line contains \"Invoke-Command\" or action_process_image_command_line contains \"ICM\" or action_process_image_command_line contains \"DownloadString\" or action_process_image_command_line contains \"rundll32\" or action_process_image_command_line contains \"regsvr32\" or action_process_image_command_line contains \"wscript\" or action_process_image_command_line contains \"cscript\")) or (action_process_image_path ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": " I want to see alerts for hosts with over 300 account lockouts within a 15 minute period. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4740\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.source.host.hostname\n| filter matched_events >= 300\n| alter aggregation_criteria = \"ilhostsource\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 500)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see events related to Microsoft VBA For Outlook Addin being loaded through Outlook.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\outlook\\.exe\" and action_module_path ~= \".*\\\\outlvba\\.dll\")\n\n\n\n"}
{"prompt": "I want to detect if malicious processes are registering new DLLs with unusual names under the W32Time service in the Windows Registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Services\\\\W32Time\\\\TimeProviders\" and action_registry_key_name ~= \".*\\\\DllName\") and  not ((action_registry_value_name in (\"%SystemRoot%\\\\System32\\\\vmictimeprovider.dll\", \"%systemroot%\\\\system32\\\\w32time.dll\", \"C:\\\\Windows\\\\SYSTEM32\\\\w32time.DLL\") or action_registry_data in (\"%SystemRoot%\\\\System32\\\\vmictimeprovider.dll\", \"%systemroot%\\\\system32\\\\w32time.dll\", \"C:\\\\Windows\\\\SYSTEM32\\\\w32time.DLL\")))\n\n\n\n"}
{"prompt": "I want to see events where pnputil.exe is used to install a driver.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"-i\" or action_process_image_command_line contains \"/install\" or action_process_image_command_line contains \"-a\" or action_process_image_command_line contains \"/add-driver\" or action_process_image_command_line contains \".inf\") and action_process_image_path ~= \".*\\\\pnputil\\.exe\")\n\n\n\n"}
{"prompt": "I want to see Cisco Catalyst devices that have experienced at least five authentication manager failures within the last five minutes.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter msg_id in (\"AUTHMGR-5-FAIL\", \"AUTHMGR-5-SECURITY_VIOLATION\")\n| comp count() as matched_events,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by device_ip\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ibpmdeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", LatestEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to see network information gathered by the \"GatherNetworkInfo.VBS\" reconnaissance script on Windows systems.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\config.*\" and (xdm.target.file.filename ~= \".*\\\\Hotfixinfo\\.txt\" or xdm.target.file.filename ~= \".*\\\\netiostate\\.txt\" or xdm.target.file.filename ~= \".*\\\\sysportslog\\.txt\" or xdm.target.file.filename ~= \".*\\\\VmSwitchLog\\.evtx\"))\n\n\n\n"}
{"prompt": "I want to find Indicators of Compromise related to the OilRig APT group.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"SC Scheduled Scan\" and action_process_image_command_line contains \"\\\\microsoft\\\\Taskbar\\\\autoit3.exe\") or (action_process_image_path ~= \".*\\\\Windows\\\\Temp\\\\DB\\\\.*\" and action_process_image_path ~= \".*\\.exe\") or (action_process_image_path = \"C:\\\\Windows\\\\system32\\\\Service.exe\" and (action_process_image_command_line contains \"i\" or action_process_image_command_line contains \"u\")) or (actor_process_image_path ~= \".*\\\\local\\\\microsoft\\\\Taskbar\\\\autoit3\\.exe\" and (action_process_image_command_line contains \"nslookup.exe\" and action_process_image_command_line contains \"-q=TXT\")))\n\n\n\n"}
{"prompt": "I want to detect attempts to query event logs using command line utilities like wevtutil or wmic.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Select\" and action_process_image_command_line contains \"Win32_NTLogEvent\") or ((action_process_image_path ~= \".*\\\\wevtutil\\.exe\" or actor_process_file_original_name = \"wevtutil.exe\") and (action_process_image_command_line contains \" qe \" or action_process_image_command_line contains \" query-events \")) or ((action_process_image_path ~= \".*\\\\wmic\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and action_process_image_command_line contains \" ntevent\") or (action_process_image_command_line contains \"Get-WinEvent \" or action_process_image_command_line contains \"get-eventlog \")\n\n\n\n"}
{"prompt": "I want to find instances where Curl.EXE is being used with a custom User-Agent string.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\curl\\.exe\" or action_process_signature_product = \"The curl executable\") and (action_process_image_command_line contains \" -A \" or action_process_image_command_line contains \" --user-agent \"))\n\n\n\n"}
{"prompt": "I want to detect unauthorized modifications to the ScreenConnect user database file on my endpoints.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4663 and ObjectType = \"File\" and AccessMask = \"0x6\" and ObjectName ~= \".*\\.xml\" and (ObjectName contains \"Temp\" and ObjectName contains \"ScreenConnect\") and ProcessName contains \"ScreenConnect.Service.exe\")\n\n\n\n"}
{"prompt": "I want to see events where \"Net.exe\" or \"Net1.exe\" is used to create a DarkGate user account in Safe Mode.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") and (action_process_image_command_line contains \"user\" and action_process_image_command_line contains \"add\" and action_process_image_command_line contains \"DarkGate\" and action_process_image_command_line contains \"SafeMode\"))\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious AppX package installations happening through AppInstaller.EXE.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\WindowsApps\\\\Microsoft\\.DesktopAppInstaller\\_.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\WindowsApps\\\\Microsoft\\.DesktopAppInstaller\\_.*\") and (xdm.target.process.name ~= \".*\\\\AppInstaller\\.exe\" or xdm.source.process.name ~= \".*\\\\AppInstaller\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see details about CyberArk Safe Changes with reference IDs 142, 145, 148, 149, 150, 185, 183, and 181, excluding entries from \"<ip>\" and  with device IPs not in \"<ip>\".", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_src = xdm.target.user.username,\nuser_dst = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = xdm.target.resource.type,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station != \"<ip>\" and device_ip not in (\"<ip>\")\n| filter reference_id in (142, 145, 148, 149, 150, 185, 183, 181)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about potential privilege escalation vulnerabilities that involve modifying service keys through process creation.", "response": "preset = xdr_process\n| filter (action_process_integrity_level = \"Medium\" and (action_process_image_command_line contains \"ControlSet\" and action_process_image_command_line contains \"services\") and (action_process_image_command_line contains \"\\\\ImagePath\" or action_process_image_command_line contains \"\\\\FailureCommand\" or action_process_image_command_line contains \"\\\\ServiceDll\"))\n\n\n\n"}
{"prompt": "I want to see alerts about high privilege administrators clearing audit logs on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"1102\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect instances of attackers enumerating interesting system services using the \"sc.exe\" command.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sc\\.exe\" or actor_process_file_original_name = \"sc.exe\") and action_process_image_command_line contains \"query\" and action_process_image_command_line contains \"termservice\")\n\n\n\n"}
{"prompt": "I want to see alerts for HackTool - Htran/NATBypass Execution activity on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\htran\\.exe\" or action_process_image_path ~= \".*\\\\lcx\\.exe\") or (action_process_image_command_line contains \".exe -tran \" or action_process_image_command_line contains \".exe -slave \"))\n\n\n\n"}
{"prompt": " I want to find indicators of the BabyShark malware by looking for URLs that contain \"momyshark?key=\" ", "response": "datamodel\n| filter xdm.network.http.url contains \"momyshark?key=\"\n\n\n\n"}
{"prompt": "I want to find suspicious changes made to scheduled task cache entries by programs that aren't commonly associated with this activity.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\.*\" and  not ((action_registry_key_name contains \"Microsoft\\\\Windows\\\\UpdateOrchestrator\" or action_registry_key_name contains \"Microsoft\\\\Windows\\\\SoftwareProtectionPlatform\\\\SvcRestartTask\\\\Index\" or action_registry_key_name contains \"Microsoft\\\\Windows\\\\Flighting\\\\OneSettings\\\\RefreshCache\\\\Index\") or (actor_process_image_path ~= \"C\\:\\\\Windows\\\\.*\" and actor_process_image_path ~= \".*\\\\TiWorker\\.exe\") or actor_process_image_path = \"C:\\\\WINDOWS\\\\system32\\\\svchost.exe\" or (actor_process_image_path ~= \"C\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework.*\" and actor_process_image_path ~= \".*\\\\ngen\\.exe\" and (action_registry_key_name contains \"\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tasks\\\\{B66B135D-DA06-4FC4-95F8-7458E1D10129}\" or action_registry_key_name contains \"\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tree\\\\Microsoft\\\\Windows\\\\.NET Framework\\\\.NET Framework NGEN\")) or actor_process_image_path in (\"C:\\\\Program Files\\\\Microsoft Office\\\\root\\\\Integration\\\\Integrator.exe\", \"C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\Integration\\\\Integrator.exe\") or actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\msiexec.exe\" or actor_process_image_path in (\"C:\\\\Program Files (x86)\\\\Dropbox\\\\Update\\\\DropboxUpdate.exe\", \"C:\\\\Program Files\\\\Dropbox\\\\Update\\\\DropboxUpdate.exe\") or (actor_process_image_path = \"C:\\\\Windows\\\\explorer.exe\" and action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tree\\\\Microsoft\\\\Windows\\\\PLA\\\\Server\\ Manager\\ Performance\\ Monitor\\\\.*\") or actor_process_image_path = \"System\")\n\n\n\n"}
{"prompt": "I want to find out if any unauthorized users have rebooted servers on our Linux devices.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"edgeverve_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.description ~= \"shutdown|reboot|poweroff|telinit|init \\d+\" and xdm.event.type in (\"sudo\", \"su\")\n| alter xdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0))\n| filter xdm.source.user.username not in (NULL, null, \"root\", \"reboot\") and xdm.target.host.hostname != \"bl4ul279\"\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, device_ip\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where processes on endpoints are using OSAScript to access clipboard data.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"osascript\" and action_process_image_command_line contains \" -e \" and action_process_image_command_line contains \"clipboard\")\n\n\n\n"}
{"prompt": "I want to see all instances where users were denied access to critical platform services and identify which specific platforms were affected.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4625\")\n| alter logon_type = arrayindex(regextract(xdm.event.description, \"Logon Type:\\t\\t\\t([^\\n]+)\"), 0)\n| alter status_code = arrayindex(regextract(xdm.event.description, \"Status:\\t\\t\\t([^\\n]+)\"), 0)\n| filter logon_type = \"10\" and status_code = \"0xc000015b\"\n| join type = left\n(dataset = enterprise_platform_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.ip_address = xdm.source.ipv4)\n| filter platform_type IN (\"ad_aliashost\", \"exchange_aliashost\", \"is_aliashost\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see if any security software like Nessus, TD-Agent, Packetbeat, Filebeat, Auditbeat, Osqueryd, CBagentd, or Falcond is running on Linux endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/grep\" or action_process_image_path ~= \".*\\/egrep\") and (action_process_image_command_line contains \"nessusd\" or action_process_image_command_line contains \"td-agent\" or action_process_image_command_line contains \"packetbeat\" or action_process_image_command_line contains \"filebeat\" or action_process_image_command_line contains \"auditbeat\" or action_process_image_command_line contains \"osqueryd\" or action_process_image_command_line contains \"cbagentd\" or action_process_image_command_line contains \"falcond\"))\n\n\n\n"}
{"prompt": "I want to see if there are any suspicious instances of network connections from Windows machines attempting to look up external IP addresses.", "response": "#N/A"}
{"prompt": "I want to see which users accessed more than five files at the same time within an eleven-minute window from SharePoint Online.", "response": "dataset = msft_o365_sharepoint_online_raw\n| filter Operation in (\"FileDownloaded\")\n| filter UserAgent not in (\"OneDrive*\", \"Office*\", \"Teams*\")\n| comp max(_time) as maxtime,\nmin(_time) as mintime,\nvalues(UserId) as userslist by ObjectId\n| alter number_of_users = array_length(userslist)\n| filter timestamp_diff(current_time(), mintime, \"minute\") < 11 and maxtime = mintime\n| alter user_string = arraystring(userslist, \",\")\n| comp count_distinct(ObjectId) as file_count,\nvalues(ObjectId) as file_list by user_string\n| filter file_count > 5"}
{"prompt": "I want to find malicious PowerShell scripts that use FromBase64String and gzip archives on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"FromBase64String\" and ScriptBlockText contains \"MemoryStream\" and ScriptBlockText contains \"H4sI\")\n\n\n\n"}
{"prompt": "I want to find instances where Regsvr32.exe is used with HTTP or FTP commands in the process command line.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_file_original_name = \"REGSVR32.EXE\") and (action_process_image_command_line contains \" /i\" or action_process_image_command_line contains \" -i\") and (action_process_image_command_line contains \"ftp\" or action_process_image_command_line contains \"http\"))\n\n\n\n"}
{"prompt": "I want to see security events related to VSSAudit source registrations on endpoints.", "response": "preset = xdr_event_log\n| alter AuditSourceName = regextract(to_json_string(action_evtlog_data_fields)->AuditSourceName{}, \"\\\"(.*)\\\"\")\n| filter (AuditSourceName = \"VSSAudit\" and action_evtlog_event_id in (4904, 4905))\n\n\n\n"}
{"prompt": "I want to find potential Cobalt Strike activity using Malleable Profiles that might be disguised as legitimate web traffic.", "response": "datamodel\n| filter ((xdm.network.http.browser = \"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko\" and xdm.network.http.method = \"GET\" and xdm.network.http.url = \"/s/ref=nb_sb_noss_1/167-3294888-0262949/field-keywords=books\" and xdm.network.http.domain = \"www.amazon.com\" and xdm.network.http.http_header.value ~= \".*\\=csm\\-hit\\=s\\-24KU11BB82RZSYGJ3BDK\\|1419899012996\") or (xdm.network.http.browser = \"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko\" and xdm.network.http.method = \"POST\" and xdm.network.http.url = \"/N4215/adj/amzn.us.sr.aps\" and xdm.network.http.domain = \"www.amazon.com\") or xdm.network.http.browser in (\"Mozilla/4.0 (compatible; MSIE 6.0;Windows NT 5.1)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E )\", \"Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 5.2) Java/1.5.0_08\") or xdm.network.http.browser ~= \".*\\;\\ MANM\\;\\ MANM\\)\" or (xdm.network.http.url contains \"/oscp/\" and xdm.network.http.domain = \"ocsp.verisign.com\") or (xdm.network.http.method = \"GET\" and xdm.network.http.url ~= \".*\\?manifest\\=wac\" and xdm.network.http.domain = \"onedrive.live.com\")) and  not ((xdm.network.http.url ~= \"http.*\" and xdm.network.http.url contains \":\n\n\n\n"}
{"prompt": "I want to see security group creation and deletion activity performed by non-admin users across all Windows hosts.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4730\", \"4654\", \"4758\", \"4727\", \"4731\") and xdm.source.user.username not in (\"Vinod_Krishnan04\", \"Thanigaivel_G01\", \"Renju_nettady\", \"sathish_kumarkp\", \"jayagovind\", \"chandrasekhar_m05\", \"bhaskar\", \"Vishwanath_BN\", \"suresh_kumars\", \"shashanka_vemula\", \"Rupesh_Dalvi01\", \"ak_jain\", \"harisha_nk\", \"jsenthil_kumar\", \"SanjeevKumar_Shahi\", \"nataraj_sm\", \"Kushal_Raut\", \"mohit_sharma27\", \"Aravindh_VM\", \"Sakthivel_Muthu\", \"Swaroop_Bopaiah\", \"VikramSingh_Jadon\", \"bharat_pise\", \"ayesh_sanap\", \"pranav_thombre\", \"chandrahas_sharma\", \"prashant_nikam03\", \"mohit_tyagi02\", \"arvind_gidroniya\", \"nandakumar_nk01\", \"girish_pande01\", \"Phillipjay_Estudillo\", \"Alok_Chaudhary\", \"Jaroslaw_Karasinski\", \"jaroslaw_szelag\", \"dawid_piotrowski\", \"T_Ciemnoczulowski\", \"Leos_Koukal\", \"kukol_ivan\", \"juan_lopez\", \"Jason_k\", \"Mark_Lynn\", \"jack_taffar\", \"Mark_Kitchens\", \"carroll_garvin\", \"Simon_Strauss\", \"Winston_Parham\", \"Blue_Chu\", \"Tom_Ge\", \"Allen.Huang01\", \"siju_george\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential instances of CVE-2023-36874 exploitation by looking for fake \"wermgr.exe\" file creations that aren't located in expected system directories.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\wermgr\\.exe\" and  not ((xdm.target.file.filename ~= \".*\\:\\\\\\$WINDOWS\\.\\~BT\\\\NewOS\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\\\$WinREAgent\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\servicing\\\\LCU\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\WinSxS\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\WUDownloadCache\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see if any files are being used for persistence through Microsoft Office Add-ins.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*\\\\Microsoft\\\\Word\\\\Startup\\\\.*\" and xdm.target.file.filename ~= \".*\\.wll\") or (xdm.target.file.filename ~= \".*\\\\Microsoft\\\\Excel\\\\Startup\\\\.*\" and xdm.target.file.filename ~= \".*\\.xll\") or (xdm.target.file.filename ~= \".*Microsoft\\\\Excel\\\\XLSTART\\\\.*\" and xdm.target.file.filename ~= \".*\\.xlam\") or (xdm.target.file.filename ~= \".*\\\\Microsoft\\\\Addins\\\\.*\" and (xdm.target.file.filename ~= \".*\\.xlam\" or xdm.target.file.filename ~= \".*\\.xla\" or xdm.target.file.filename ~= \".*\\.ppam\")))\n\n\n\n"}
{"prompt": "I want to detect potential instances of Invoke-Obfuscation STDIN+ Launcher being used on my endpoints.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter ((action_evtlog_event_id = 4697 and (ServiceFileName contains \"cmd\" and ServiceFileName contains \"powershell\")) and (ServiceFileName contains \"${input}\" or ServiceFileName contains \"noexit\") and (ServiceFileName contains \" /c \" or ServiceFileName contains \" /r \"))\n\n\n\n"}
{"prompt": "I want to see alerts about when Mstsc.exe is executed from unusual parent processes like web browsers.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\brave\\.exe\" or actor_process_image_path ~= \".*\\\\CCleanerBrowser\\.exe\" or actor_process_image_path ~= \".*\\\\chrome\\.exe\" or actor_process_image_path ~= \".*\\\\chromium\\.exe\" or actor_process_image_path ~= \".*\\\\firefox\\.exe\" or actor_process_image_path ~= \".*\\\\iexplore\\.exe\" or actor_process_image_path ~= \".*\\\\microsoftedge\\.exe\" or actor_process_image_path ~= \".*\\\\msedge\\.exe\" or actor_process_image_path ~= \".*\\\\opera\\.exe\" or actor_process_image_path ~= \".*\\\\vivaldi\\.exe\" or actor_process_image_path ~= \".*\\\\whale\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\") and (action_process_image_path ~= \".*\\\\mstsc\\.exe\" or actor_process_file_original_name = \"mstsc.exe\"))\n\n\n\n"}
{"prompt": "I want to be alerted when an access point has multiple IP addresses detected on my Cisco Catalyst network.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 3m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter msg_id in (\"LWAPP-3-DUP_AP_IP\", \"LWAPP-3-DUP_IP\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\nxdm.source.ipv4,\neth_src,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildeviceip\",\naggregation_criteria1 = \"macaddress\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to see all high privilege admin activities on Windows systems, including any failures and their reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4897\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name,\ntarget_domain\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to find alerts about changes made to domain federation settings in Office 365. ", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Operation ~= \"set federation settings on domain\"\n| alter source_user = json_extract_scalar(`Target`, \"$[3].ID\")\n| fields UserId, source_user, ObjectId, ResultStatus, Operation,\n_time, CreationTime, `Target`\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to see instances where Regsvr32 is executed from potentially suspicious locations on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_file_original_name = \"REGSVR32.EXE\") and (action_process_image_command_line ~= \".*\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find events where new Outlook macros are created.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\outlook\\.exe\" or xdm.source.process.name ~= \".*\\\\outlook\\.exe\") and xdm.target.file.filename ~= \".*\\\\Microsoft\\\\Outlook\\\\VbaProject\\.OTM\")\n\n\n\n"}
{"prompt": "I want to see alerts from Cisco Firepower that indicate potential cryptocurrency connections, excluding specific IP addresses and ASNs.", "response": "/*config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"cryptocurrency\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\"\n| join type = left(dataset = iisvascan_ip_address_list| fields ip_address as ip) as iis_scan iis_scan.ip = xdm.source.ipv4| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip, policy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level, xdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4, xdm.source.port, xdm.event.description, xdm.alert.description, xdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol, xdm.event.operation, xdm.source.application.name, xdm.source.location.country, xdm.source.asn.as_name, xdm.target.asn.as_name, _time, _insert_time, device_ip, policy_name, _vendor, _product\n| alter aggregation_criteria = \"ibpmsourceip\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)*/\ndatamodel dataset = microsoft_windows_raw\n| alter device_ip = \"\",\npolicy_name = \"\",\naggregation_criteria = \"\",\nevent_time = \"\",\nduplicate_alert_count = \"\"\n| filter xdm.event.id = \"123\"\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, aggregation_criteria, event_time, duplicate_alert_count,\n_vendor, _product"}
{"prompt": "I want to find instances where \"sysctl\" is used to retrieve system information like hardware details, as this could indicate evasion tactics by malware.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/sysctl\" or action_process_image_command_line contains \"sysctl\") and (action_process_image_command_line contains \"hw.\" or action_process_image_command_line contains \"kern.\" or action_process_image_command_line contains \"machdep.\"))\n\n\n\n"}
{"prompt": "I want to find malicious activity involving obfuscation techniques using a VAR++ launcher.", "response": "datamodel\n| filter xdm.target.process.executable.path ~= \"(?i).*\\&\\&set.*(\\{\\d\\}){2,}\\\\\\\"\\s+?\\-f.*\\&\\&.*cmd.*\\/c\"\n\n\n\n"}
{"prompt": "I want to find security events related to WMI subscriptions on endpoints.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4662 and ObjectType = \"WMI Namespace\" and ObjectName contains \"subscription\")\n\n\n\n"}
{"prompt": "I want to detect unauthorized access attempts to my AMB DB server from any IP addresses except those listed as <ip>, <ip>, <ip>, and <ip>.  This should be based on data from the CheckPoint firewall.", "response": "config case_sensitive = false\n| datamodel dataset = check_point_vpn_1_firewall_1_raw\n| filter check_point_vpn_1_firewall_1_raw._final_reporting_device_ip = \"<ip>\" and xdm.observer.action ~= \"drop\" and xdm.source.ipv4 not in (\"<ip>\", \"<ip>\", \"<ip>\", \"<ip>\")\n| alter origin = check_point_vpn_1_firewall_1_raw.origin,\naggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect potential DLL sideloading attempts that use comctl32.dll.", "response": "preset = xdr_image_load\n| filter ((action_module_path ~= \"C\\:\\\\Windows\\\\System32\\\\logonUI\\.exe\\.local\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\System32\\\\werFault\\.exe\\.local\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\System32\\\\consent\\.exe\\.local\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\System32\\\\narrator\\.exe\\.local\\\\.*\" or action_module_path ~= \"C\\:\\\\windows\\\\system32\\\\wermgr\\.exe\\.local\\\\.*\") and action_module_path ~= \".*\\\\comctl32\\.dll\")\n\n\n\n"}
{"prompt": "I want to see events related to disabling the Windows Defender Event Log.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\Microsoft-Windows-Windows Defender/Operational\\\\Enabled\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to see alerts about processes that are using TTDInject.exe on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*ttdinject\\.exe\" or actor_process_file_original_name = \"TTDInject.EXE\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential tampering with ETW logging in .NET processes.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"COMPlus_ETWEnabled\" or action_process_image_command_line contains \"COMPlus_ETWFlags\")\n\n\n\n"}
{"prompt": "I want to find suspicious processes on endpoints that use FromBase64String with gzip archives.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"FromBase64String\" and action_process_image_command_line contains \"MemoryStream\" and action_process_image_command_line contains \"H4sI\")\n\n\n\n"}
{"prompt": "I want to detect instances where an attacker is using WSL to execute arbitrary commands on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wsl\\.exe\" or actor_process_file_original_name = \"wsl.exe\") and (action_process_image_command_line contains \" -e \" or action_process_image_command_line contains \" --exec\" or action_process_image_command_line contains \" --system\" or action_process_image_command_line contains \" --shell-type \" or action_process_image_command_line contains \" /mnt/c\" or action_process_image_command_line contains \" --user root\" or action_process_image_command_line contains \" -u root\" or action_process_image_command_line contains \"--debug-shell\")) and  not ((actor_process_image_path ~= \".*\\\\cmd\\.exe\" and (action_process_image_command_line contains \" -d \" and action_process_image_command_line contains \" -e kill \")))\n\n\n\n"}
{"prompt": "I want to see a list of all successful and failed logon events for users grouped by computer name, including details like the username, logon type, timestamp, and any error codes or failure reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4964\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious PowerShell commands that use encoded payloads and potentially indicate malicious activity.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and ((action_process_image_command_line contains \" -e\" and (action_process_image_command_line contains \" JAB\" or action_process_image_command_line contains \" SUVYI\" or action_process_image_command_line contains \" SQBFAFgA\" or action_process_image_command_line contains \" aQBlAHgA\" or action_process_image_command_line contains \" aWV4I\" or action_process_image_command_line contains \" IAA\" or action_process_image_command_line contains \" IAB\" or action_process_image_command_line contains \" UwB\" or action_process_image_command_line contains \" cwB\")) or (action_process_image_command_line contains \".exe -ENCOD \" or action_process_image_command_line contains \" BA^J e-\")) and  not (action_process_image_command_line contains \" -ExecutionPolicy remotesigned \")\n\n\n\n"}
{"prompt": "I want to find files that could be indicators of \"Small Sieve\" malware based on filename patterns like those mentioned in the description.", "response": "datamodel\n| filter (((xdm.target.file.filename ~= \".*\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\.*\") and (xdm.target.file.filename ~= \".*\\\\Roaming\\\\.*\" or xdm.target.file.filename ~= \".*\\\\Local\\\\.*\")) and xdm.target.file.filename contains \"Microsift\") or xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\MicrosoftWindowsOutlookDataPlus\\.txt\"\n\n\n\n"}
{"prompt": "I want to see all Finance users who logged in from two different countries within 4 hours, along with details about their logins like source and destination IP addresses, ports used, actions taken, hostnames, user agents, OS editions, products, and the countries they logged in from.", "response": "config case_sensitive = false\n| dataset = check_point_connectra_raw\n| filter act = \"Log In\" and duser != null and origin not in (\"10.156.246.75\", \"192.168.179.100\", \"10.85.3.210\", \"10.68.106.171\") and _final_reporting_device_ip != \"10.67.122.132\"\n| alter hostname = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = lowercase(replace(if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), if(array_length(regextract(duser, \"[a-zA-Z]+\\\\(.*)\")) > 0, arrayindex(regextract(duser, \"[a-zA-Z]+\\\\(.*)\"), 0), duser))), \"itlinfosys\", \"\"))\n| join type = left\n(dataset = finance_users_list\n| fields username\n) as adminusers adminusers.username = user_dst\n| filter username != null\n| iploc src loc_country\n| alter action = act,\nsource_port = spt,\ndest_port = dpt,\nsource_ip = src,\ndst_ip = host_ip,\nresult = outcome,\nuser_agent = requestClientApplication,\nos_edition = os_edition,\nproduct = _product\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestTime,\nvalues(source_ip) as src_ip,\nvalues(host_ip) as dst_ip,\nvalues(source_port) as src_port,\nvalues(dest_port) as dst_port,\nvalues(action) as action,\nvalues(hostname) as hostname,\nvalues(origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(product) as product,\nvalues(loc_country) as country_src,\ncount() as matched_events by user_dst\n| filter array_length(country_src) > 1 and array_length(hostname) > 1\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find potential indicators of persistence via COM search order hijacking.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\CLSID\\\\.*\" and action_registry_key_name ~= \".*\\\\InprocServer32\\\\\\(Default\\)\") and  not (((action_registry_value_name ~= \".*\\%\\%systemroot\\%\\%\\\\system32\\\\.*\" or action_registry_value_name ~= \".*\\%\\%systemroot\\%\\%\\\\SysWow64\\\\.*\") or (action_registry_data ~= \".*\\%\\%systemroot\\%\\%\\\\system32\\\\.*\" or action_registry_data ~= \".*\\%\\%systemroot\\%\\%\\\\SysWow64\\\\.*\")) or ((action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\.*\" or action_registry_value_name contains \"\\\\FileCoAuthLib64.dll\" or action_registry_value_name contains \"\\\\FileSyncShell64.dll\" or action_registry_value_name contains \"\\\\FileSyncApi64.dll\") or (action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\.*\" or action_registry_data contains \"\\\\FileCoAuthLib64.dll\" or action_registry_data contains \"\\\\FileSyncShell64.dll\" or action_registry_data contains \"\\\\FileSyncApi64.dll\")) or actor_process_image_path ~= \".*\\:\\\\WINDOWS\\\\system32\\\\SecurityHealthService\\.exe\" or ((action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\TeamsMeetingAddin\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\TeamsMeetingAddin\\\\.*\") and (action_registry_value_name contains \"\\\\Microsoft.Teams.AddinLoader.dll\" or action_registry_data contains \"\\\\Microsoft.Teams.AddinLoader.dll\")) or ((action_registry_value_name ~= \".*\\\\AppData\\\\Roaming\\\\Dropbox\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Roaming\\\\Dropbox\\\\.*\") and (action_registry_value_name contains \"\\\\DropboxExt64.*.dll\" or action_registry_data contains \"\\\\DropboxExt64.*.dll\")) or (action_registry_value_name ~= \".*TmopIEPlg\\.dll\" or action_registry_data ~= \".*TmopIEPlg\\.dll\") or (actor_process_image_path ~= \".*\\:\\\\WINDOWS\\\\system32\\\\wuauclt\\.exe\" or actor_process_image_path ~= \".*\\:\\\\WINDOWS\\\\system32\\\\svchost\\.exe\") or ((actor_process_image_path ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\Platform\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Windows\\ Defender\\\\.*\") and actor_process_image_path ~= \".*\\\\MsMpEng\\.exe\") or (action_registry_value_name contains \"\\\\FileRepository\\\\nvmdi.inf\" or action_registry_data contains \"\\\\FileRepository\\\\nvmdi.inf\") or actor_process_image_path ~= \".*\\\\MicrosoftEdgeUpdateComRegisterShell64\\.exe\" or actor_process_image_path ~= \".*\\:\\\\WINDOWS\\\\SYSTEM32\\\\dxdiag\\.exe\" or ((action_registry_value_name ~= \".*\\:\\\\Windows\\\\pyshellext\\.amd64\\.dll\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\pyshellext\\.dll\") or (action_registry_data ~= \".*\\:\\\\Windows\\\\pyshellext\\.amd64\\.dll\" or action_registry_data ~= \".*\\:\\\\Windows\\\\pyshellext\\.dll\")) or ((action_registry_value_name ~= \".*\\:\\\\Windows\\\\system32\\\\dnssdX\\.dll\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\dnssdX\\.dll\") or (action_registry_data ~= \".*\\:\\\\Windows\\\\system32\\\\dnssdX\\.dll\" or action_registry_data ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\dnssdX\\.dll\")) or (action_registry_value_name ~= \".*\\:\\\\Windows\\\\system32\\\\spool\\\\drivers\\\\x64\\\\3\\\\PrintConfig\\.dll\" or action_registry_data ~= \".*\\:\\\\Windows\\\\system32\\\\spool\\\\drivers\\\\x64\\\\3\\\\PrintConfig\\.dll\") or ((action_registry_value_name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\") or (action_registry_data ~= \".*\\:\\\\Program\\ Files\\\\.*\" or action_registry_data ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\")) or (action_registry_value_name ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\.*\" or action_registry_data ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\.*\") or (action_registry_value_name contains \":\\\\WINDOWS\\\\system32\\\\GamingServicesProxy.dll\" or action_registry_data contains \":\\\\WINDOWS\\\\system32\\\\GamingServicesProxy.dll\") or (actor_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\poqexec\\.exe\" and (action_registry_value_name contains \":\\\\Windows\\\\System32\\\\Autopilot.dll\" or action_registry_data contains \":\\\\Windows\\\\System32\\\\Autopilot.dll\")) or (actor_process_image_path ~= \".*\\:\\\\Windows\\\\system32\\\\SecurityHealthService\\.exe\" and (action_registry_value_name contains \":\\\\Windows\\\\System32\\\\SecurityHealth\" or action_registry_data contains \":\\\\Windows\\\\System32\\\\SecurityHealth\")) or ((actor_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\poqexec\\.exe\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\regsvr32\\.exe\") and action_registry_key_name ~= \".*\\\\InProcServer32\\\\\\(Default\\)\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential COLDSTEEL persistence by detecting new DLL files being created in specific locations on Windows systems.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\Roaming\\\\newdev\\.dll\")\n\n\n\n"}
{"prompt": "I want to see all successful interactive logins by service accounts on Windows, excluding specific users like genesys.global and MIISSvc.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type = \"XDR Collector\"\n| filter xdm.target.user.domain not contains \"webhelp\"\n| fields xdm.target.user.username, xdm.source.ipv4, xdm.source.host.hostname,\nxdm.logon.type, xdm.event.id, xdm.target.user.domain\n| filter xdm.event.id = \"4624\"\n| filter xdm.logon.type contains \"interactive\"\n| filter xdm.target.user.username not in (\"genesys.global\", \"MIISSvc\", \"svcSCCMReports\")\n| join\n(preset = ad_users\n| filter distinguished_name contains \"OU=Service Accounts\"\n| fields sam_account_name\n) as ad ad.sam_account_name = xdm.target.user.username"}
{"prompt": "{I want to find instances of SMB over QUIC being used via Net.exe or Net1.exe.} \n\n\nLet me know if you need any other prompts generated!", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and action_process_image_command_line contains \"/TRANSPORT:QUIC\")\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious system file executions that happen outside of expected locations.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\svchost\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\services\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\spoolsv\\.exe\" or action_process_image_path ~= \".*\\\\lsass\\.exe\" or action_process_image_path ~= \".*\\\\smss\\.exe\" or action_process_image_path ~= \".*\\\\csrss\\.exe\" or action_process_image_path ~= \".*\\\\conhost\\.exe\" or action_process_image_path ~= \".*\\\\wininit\\.exe\" or action_process_image_path ~= \".*\\\\lsm\\.exe\" or action_process_image_path ~= \".*\\\\winlogon\\.exe\" or action_process_image_path ~= \".*\\\\explorer\\.exe\" or action_process_image_path ~= \".*\\\\taskhost\\.exe\" or action_process_image_path ~= \".*\\\\Taskmgr\\.exe\" or action_process_image_path ~= \".*\\\\sihost\\.exe\" or action_process_image_path ~= \".*\\\\RuntimeBroker\\.exe\" or action_process_image_path ~= \".*\\\\smartscreen\\.exe\" or action_process_image_path ~= \".*\\\\dllhost\\.exe\" or action_process_image_path ~= \".*\\\\audiodg\\.exe\" or action_process_image_path ~= \".*\\\\wlanext\\.exe\" or action_process_image_path ~= \".*\\\\dashost\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\wsl\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\atbroker\\.exe\" or action_process_image_path ~= \".*\\\\bcdedit\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\certreq\\.exe\" or action_process_image_path ~= \".*\\\\cmstp\\.exe\" or action_process_image_path ~= \".*\\\\consent\\.exe\" or action_process_image_path ~= \".*\\\\defrag\\.exe\" or action_process_image_path ~= \".*\\\\dism\\.exe\" or action_process_image_path ~= \".*\\\\dllhst3g\\.exe\" or action_process_image_path ~= \".*\\\\eventvwr\\.exe\" or action_process_image_path ~= \".*\\\\msiexec\\.exe\" or action_process_image_path ~= \".*\\\\runonce\\.exe\" or action_process_image_path ~= \".*\\\\winver\\.exe\" or action_process_image_path ~= \".*\\\\logonui\\.exe\" or action_process_image_path ~= \".*\\\\userinit\\.exe\" or action_process_image_path ~= \".*\\\\dwm\\.exe\" or action_process_image_path ~= \".*\\\\LsaIso\\.exe\" or action_process_image_path ~= \".*\\\\ntoskrnl\\.exe\" or action_process_image_path ~= \".*\\\\wsmprovhost\\.exe\" or action_process_image_path ~= \".*\\\\dfrgui\\.exe\") and  not (((action_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\") or action_process_image_path ~= \".*\\\\SystemRoot\\\\System32\\\\.*\" or action_process_image_path in (\"C:\\\\Windows\\\\explorer.exe\", \"C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe\", \"C:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.exe\")) or (action_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\WindowsApps\\\\MicrosoftCorporationII\\.WindowsSubsystemForLinux.*\" and action_process_image_path ~= \".*\\\\wsl\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find potential brute force attacks on domain administrator accounts by analyzing Windows event logs for repeated login attempts with specific usernames.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4625) and _collector_type in (\"XDR Collector\")\n| alter bin_time = _time\n| bin bin_time span = 2M timeshift = 300\n| alter TargetUserName = event_data -> TargetUserName,\nSubjectDomainName = event_data -> SubjectDomainName\n| filter (TargetUserName in (\"adssp.service\", \"IST-ISAID\", \"jonesj\", \"jflores\", \"minerva.khuele\", \"singhals\", \"siamert\", \"vbanaag\", \"Patela.Dadmin\", \"vbanng\", \"brunonc.dadmin\", \"dudgeon.viona\", \"huelek\", \"saadmin\", \"jonesj\", \"kendricks.dadmin\", \"singhals\", \"stephenh.dadmin\", \"veermanp.dadmin\", \"ricardob\", \"cian.thunder\", \"patrick.murphy\", \"billy.kirkpatrick\", \"Russell.Jefferson\", \"Borislav.Nance\", \"EscobarLin\", \"banaagv\", \"Michael.Clarkson\", \"keifer.gimenez\", \"laong.laan\", \"tim.rivers\", \"Jarrett.jenkins\", \"alex.duke\", \"henry.reeves\", \"Jeff.mills\", \"saul.silvanus\", \"parker.vega\", \"pharrell.hill\", \"patela\", \"abhishek.ojha1\"))\n| comp min(_time) as First_EventTimestamp,\nmax(_time) as Latest_EventTimestamp,\nvalues(event_data) as EventData_List,\nvalues(message) as Message_Data_List,\ncount() as EventCount by TargetUserName,\nbin_time\n| alter Events_TimeDiff_in_Seconds = timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\"),\nAlert_Cat = \"Brute Force\"\n| filter EventCount >= 5\n"}
{"prompt": "I want to see alerts for when there are more than 10 remote login failures from the same IP address within a 5 minute window.", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| bin _time span = 5m\n| filter xdm.event.type in (\"sshd\", \"sudo\", \"su\") and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol != \"ssh2\" and xdm.event.description ~= \"authentication failure|authentication failure by illegal user|invalid username|Password failed|Failed password\" and xdm.source.ipv4 not in (NULL, null, \"<ip>\") and xdm.source.user.username != \"usdunipsc_srv2\" and xdm.target.user.username = null\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _product, _vendor, device_ip, _insert_time\n| comp count() as matched_events,\nvalues(*) as * by xdm.source.user.username,\nxdm.source.ipv4,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to see all VPN login events from Morocco, coming from either a Cisco ASA or Fortinet Fortigate device.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw, cisco_asa_raw)\n| filter (xdm.event.original_event_type in (\"722051\", \"39426\", \"39424\") and xdm.source.location.country in (\"Morocco\"))"}
{"prompt": "I want to see events related to restricted software access by Software Restriction Policies on endpoints.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Microsoft-Windows-SoftwareRestrictionPolicies\" and action_evtlog_event_id in (865, 866, 867, 868, 882))\n\n\n\n"}
{"prompt": "I want to find instances where TeamViewer log files were deleted and it wasn't done by svchost.exe.", "response": "datamodel\n| filter (xdm.target.file.filename contains \"\\\\TeamViewer_\" and xdm.target.file.filename ~= \".*\\.log\") and  not ((xdm.target.process.name = \"C:\\\\Windows\\\\system32\\\\svchost.exe\" or xdm.source.process.name = \"C:\\\\Windows\\\\system32\\\\svchost.exe\"))\n\n\n\n"}
{"prompt": "I want to find potential instances of DOSfuscation activity on endpoints by looking for suspicious patterns in process command lines.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"^^\" or action_process_image_command_line contains \"^|^\" or action_process_image_command_line contains \",;,\" or action_process_image_command_line contains \";;;;\" or action_process_image_command_line contains \";; ;;\" or action_process_image_command_line contains \"(,(,\" or action_process_image_command_line contains \"%COMSPEC:~\" or action_process_image_command_line contains \" c^m^d\" or action_process_image_command_line contains \"^c^m^d\" or action_process_image_command_line contains \" c^md\" or action_process_image_command_line contains \" cm^d\" or action_process_image_command_line contains \"^cm^d\" or action_process_image_command_line contains \" s^et \" or action_process_image_command_line contains \" s^e^t \" or action_process_image_command_line contains \" se^t \")\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious Guacamole sessions where two users are sharing the same session.", "response": "datamodel\n| filter _raw_log contains \"(2 users now present)\"\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple Zscaler Malicious category URLs based on behavioral analysis.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category ~= \"Malicious\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see all events related to changes in Account Policy or Account Lockout Policy on Windows machines.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4739\")\n| join type = left\n(dataset = device_group_static_list\n) as evhosts evhosts.HOSTNAME = xdm.source.host.hostname or evhosts.IP = microsoft_windows_raw._reporting_device_ip\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where Netsh.exe is used to modify firewall rules.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and (action_process_image_command_line contains \" firewall \" and action_process_image_command_line contains \" set \"))\n\n\n\n"}
{"prompt": "I want to find out when ESXi user accounts are created via ESXCLI on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/esxcli\" and (action_process_image_command_line contains \"system \" and action_process_image_command_line contains \"account \" and action_process_image_command_line contains \"add \"))\n\n\n\n"}
{"prompt": "I want to detect potential SystemNightmare exploitation attempts on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"printnightmare.gentilkiwi.com\" or action_process_image_command_line contains \" /user:gentilguest \" or action_process_image_command_line contains \"Kiwi Legit Printer\")\n\n\n\n"}
{"prompt": "I want to see alerts about AnyDesk being silently installed on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"--install\" and action_process_image_command_line contains \"--start-with-win\" and action_process_image_command_line contains \"--silent\")\n\n\n\n"}
{"prompt": "I want to find evidence of someone trying to exploit the CVE-2021-41773 vulnerability in Apache servers.", "response": "datamodel\n| filter ((xdm.network.http.url contains \"/cgi-bin/.%2e/\" or xdm.network.http.url contains \"/icons/.%2e/\" or xdm.network.http.url contains \"/cgi-bin/.%%32%65/\" or xdm.network.http.url contains \"/icons/.%%32%65/\" or xdm.network.http.url contains \"/cgi-bin/.%%%25%33\" or xdm.network.http.url contains \"/icons/.%%%25%33\") and xdm.network.http.response_code in (200, 301))\n\n\n\n"}
{"prompt": "I want to see alerts about when a user has been deleted on endpoints using the userdel command.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\/userdel\"\n\n\n\n"}
{"prompt": " I want to find processes that use Certutil.exe to download files directly from an IP address via URLs starting with \"://1\" through \"://9\". ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_file_original_name = \"CertUtil.exe\") and (action_process_image_command_line contains \"urlcache \" or action_process_image_command_line contains \"verifyctl \") and (action_process_image_command_line contains \":\n\n\n\n"}
{"prompt": "I want to see a list of bulk application access provisioning events that involve at least 15 distinct employees and have been provided by the same user across 15 or more instances within a 5-minute window.", "response": "config case_sensitive = false\n| dataset IN (cams_Camssiem_audit_raw, cams_Camssiem_raw)\n| filter txtProvActionStatus = \"Add\" and txtRemarks not contains \"sox audit\"\n| sort asc _time\n| bin _time span = 5m\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_dst, company_name as companyname1\n) as JT1 JT1.companyname1 = trim(EmpNo)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_src, company_name as companyname2\n) as JT2 JT2.companyname2 = trim(Access_Provided_By)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as fullname, company_name as companyname3\n) as JT3 JT3.companyname3 = trim(txtDelegatedEmpNo)\n| fields empno, user_dst, access_provided_by, user_src,\ntxtDelegatedEmpNo, fullname, _vendor, txtRemarks,\ncontext1, txtFileName, ContextValue1, intWorkFlowStage,\n_vendor, context6, intAppRoleId, flgSynchronized,\nrole, IntAppID, txtProvActionStatus\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by access_provided_by,\nIntAppID,\n_time\n| filter matched_events >= 15 and array_length(empno) >= 15\n| alter aggregation_criteria = \"ileventuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 15)), 1)"}
{"prompt": "I want to find users who have accessed multiple Symantec WSS Remote Access category URLs within an hour.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and category ~= \"Remote Access\" and host_dst not contains \".teamviewer.com\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "{I want to find out if multiple security signatures are being triggered from the same source IP address across different firewall logs.} \n\n\nLet me know if you would like help with any other aspects of this query!", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name !~= \"qualys\"\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| join type = left conflict_strategy = left\n(datamodel dataset = check_point_vpn_1_firewall_1_raw\n| alter origin = check_point_vpn_1_firewall_1_raw.origin\n| filter xdm.observer.action = \"accept\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name !~= \"qualys\"\n| fields xdm.observer.action, xdm.source.ipv4 as fw_src_ip,\nxdm.source.port, xdm.target.ipv4, xdm.target.is_internal_ip\n) as fw_events fw_events.fw_src_ip = xdm.source.ipv4\n| filter fw_src_ip != null\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address as ip_addr\n) as dmz_ips dmz_ips.ip_addr = xdm.target.ipv4\n| filter (xdm.target.is_internal_ip = true or ip_addr != null)\n| comp values(*) as *,\ncount() as matched_events by xdm.source.ipv4,\n_time\n| filter array_length(xdm.alert.description) >= 5\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious changes made to the \"Ports\" registry key that might indicate an attempt to exploit CVE-2020-1048, like adding printer ports with potentially malicious file paths or extensions.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Ports\" and ((action_registry_value_name contains \".bat\" or action_registry_value_name contains \".com\" or action_registry_value_name contains \".dll\" or action_registry_value_name contains \".exe\" or action_registry_value_name contains \".ps1\" or action_registry_value_name contains \".vbe\" or action_registry_value_name contains \".vbs\" or action_registry_value_name contains \"C:\") or (action_registry_data contains \".bat\" or action_registry_data contains \".com\" or action_registry_data contains \".dll\" or action_registry_data contains \".exe\" or action_registry_data contains \".ps1\" or action_registry_data contains \".vbe\" or action_registry_data contains \".vbs\" or action_registry_data contains \"C:\")))\n\n\n\n"}
{"prompt": " I want to detect suspicious workstation locking attempts using Rundll32.exe and cmd.exe. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and actor_process_image_path ~= \".*\\\\cmd\\.exe\" and action_process_image_command_line contains \"user32.dll,\" and action_process_image_command_line contains \"LockWorkStation\")\n\n\n\n"}
{"prompt": "I want to find out about network connections that might be related to cryptocurrency mining.", "response": "#N/A"}
{"prompt": "I want to see details about policy assignment creations in Azure, specifically focusing on those with the reference ID \"<id>\". I need information about the usernames involved, the operation name, and other relevant details like timestamps and IP addresses.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.AUTHORIZATION/POLICYASSIGNMENTS/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"<id>\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for suspicious child processes created by Microsoft Office applications on macOS that use common scripting and network tools.", "response": "preset = xdr_process\n| filter ((actor_process_image_path contains \"Microsoft Word\" or actor_process_image_path contains \"Microsoft Excel\" or actor_process_image_path contains \"Microsoft PowerPoint\" or actor_process_image_path contains \"Microsoft OneNote\") and (action_process_image_path ~= \".*\\/bash\" or action_process_image_path ~= \".*\\/curl\" or action_process_image_path ~= \".*\\/dash\" or action_process_image_path ~= \".*\\/fish\" or action_process_image_path ~= \".*\\/osacompile\" or action_process_image_path ~= \".*\\/osascript\" or action_process_image_path ~= \".*\\/sh\" or action_process_image_path ~= \".*\\/zsh\" or action_process_image_path ~= \".*\\/python\" or action_process_image_path ~= \".*\\/python3\" or action_process_image_path ~= \".*\\/wget\"))\n\n\n\n"}
{"prompt": "I want to find instances where a new user was created using Net.EXE with the \"never expire\" option.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and (action_process_image_command_line contains \"user\" and action_process_image_command_line contains \"add\" and action_process_image_command_line contains \"expires:never\"))\n\n\n\n"}
{"prompt": "I want to find users who have triggered Kerberos replay attacks by having more than 100 login attempts with identical information within a 5-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4649\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| sort asc _time\n| bin _time span = 5m\n| filter xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username != NULL\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.source.user.username,\n_time\n| filter matched_events >= 100\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 100)), 1)"}
{"prompt": "I want to see events related to Sysprep being run on the AppData folder.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\sysprep\\.exe\" and action_process_image_command_line ~= \".*\\\\AppData\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see events related to unauthorized password changes on Windows systems that are flagged as potential insider threats.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id = \"4723\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about password resets on managed service accounts by AD administrators, including the username, error code, hostname, outcome, and target domain.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4724\")\n| alter target_uname = if(xdm.target.user.username ~= \"\\@(?:ad.|)infosys.com\", arrayindex(regextract(xdm.target.user.username, \"^[^\\@]+\"), 0), if(xdm.target.user.username ~= \"^itlinfosys\", arrayindex(regextract(xdm.target.user.username, \"\\\\+(\\S+)$\"), 0), xdm.target.user.username))\n| join type = left\n(dataset = Epm_ServiceID_static_list\n| filter username !~= \"\\@(?:ad.|)infosys.com|^itlinfosys\"\n) as JT1 JT1.username = target_uname\n| filter username != null and username != \"\"\n| filter xdm.source.user.username NOT IN (\"_pamaccmgr\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_uname,\ntarget_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see Duo activity related to suspicious user behavior, specifically for devices named \"internal\u2019s MacBook Pro\",  and any other hosts I specify.", "response": "config case_sensitive = false\n| dataset = duo_duo_raw\n| alter Device_browser = json_extract_scalar(access_device, \"$.browser\"),\nDevice_browser_version = json_extract_scalar(access_device, \"$.browser_version\"),\nDevice_os = json_extract_scalar(access_device, \"$.os\"),\nDevice_os_version = json_extract_scalar(access_device, \"$.os_version\"),\nip = json_extract_scalar(access_device, \"$.ip\"),\ncity = json_extract_scalar(access_device, \"$.location.city\"),\nEncryption = json_extract_scalar(access_device, \"$.is_encryption_enabled\"),\nfirewall = json_extract_scalar(access_device, \"$.is_firewall_enabled\"),\nhostname = json_extract_scalar(access_device, \"$.hostname\"),\nPassword_Set = json_extract_scalar(access_device, \"$.is_password_set\")\n| filter hostname = \"internal\u2019s MacBook Pro\" or hostname = \"<host>\" or hostname = \"<host>\""}
{"prompt": "I want to see all DNS queries that target ufile.io.", "response": "datamodel\n| filter xdm.network.dns.dns_question.name contains \"ufile.io\"\n\n\n\n"}
{"prompt": "I want to see information about ESXi VSAN discovery events on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/esxcli\" and action_process_image_command_line contains \"vsan\") and (action_process_image_command_line contains \" get\" or action_process_image_command_line contains \" list\"))\n\n\n\n"}
{"prompt": "I want to find potential exploits related to the CVE-2021-40539 Zoho ManageEngine ADSelfService Plus vulnerability.", "response": "datamodel\n| filter (xdm.network.http.url contains \"/help/admin-guide/Reports/ReportGenerate.jsp\" or xdm.network.http.url contains \"/RestAPI/LogonCustomization\" or xdm.network.http.url contains \"/RestAPI/Connection\")\n\n\n\n"}
{"prompt": "I want to see alerts related to malicious attempts to modify service security descriptors using the sc.exe tool.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sc\\.exe\" or actor_process_file_original_name = \"sc.exe\") and action_process_image_command_line contains \"sdset\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to Extrac32.exe and .cab files being used to potentially execute code from Alternate Data Streams.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"extrac32.exe\" and action_process_image_command_line contains \".cab\") and action_process_image_command_line ~= \"\\:[^\\\\]\")\n\n\n\n"}
{"prompt": "I want to see events indicating suspicious remote logons that use explicit credentials on endpoints.", "response": "preset = xdr_event_log\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| alter TargetServerName = regextract(to_json_string(action_evtlog_data_fields)->TargetServerName{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| alter TargetUserName = regextract(to_json_string(action_evtlog_data_fields)->TargetUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4648 and (ProcessName ~= \".*\\\\cmd\\.exe\" or ProcessName ~= \".*\\\\powershell\\.exe\" or ProcessName ~= \".*\\\\pwsh\\.exe\" or ProcessName ~= \".*\\\\winrs\\.exe\" or ProcessName ~= \".*\\\\wmic\\.exe\" or ProcessName ~= \".*\\\\net\\.exe\" or ProcessName ~= \".*\\\\net1\\.exe\" or ProcessName ~= \".*\\\\reg\\.exe\")) and  not (TargetServerName = \"localhost\" or (SubjectUserName ~= \".*\\$\" and TargetUserName ~= \".*\\$\"))\n\n\n\n"}
{"prompt": "I want to find instances where a process is spawned from an elevated MSI installer that then executes either cmd.exe, powershell.exe, or pwsh.exe.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"Cmd.Exe\", \"PowerShell.EXE\", \"pwsh.dll\")) and ((actor_process_image_path ~= \".*\\\\Windows\\\\Installer\\\\.*\" and actor_process_image_path contains \"msi\") and actor_process_image_path ~= \".*tmp\"))\n\n\n\n"}
{"prompt": "I want to see all events where a user was removed from the Network Admin group, including details about the user who made the change and the affected user's domain.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (4729)\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = arrayindex(regextract(message, \"Account Name:\\t\\tCN\\=([^\\,]+)\\,\"), 0),\nTargetGroupName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| filter SubjectUserName not contains \"$\" and TargetUserName not contains \"$\" and TargetUserName not in (null, NULL, \"\"\"\"\"\")\n| fields SubjectUserName, SubjectDomainName, TargetUserName,\nTargetDomainName, event_id, event_result, event_action,\nevent_data, _collector_name, _collector_type, _collector_hostname,\n_collector_ip_address, _collector_id, *\n| filter (TargetGroupName contains \"CNX_Network\" or TargetGroupName contains \"CNX-Network\") and TargetGroupName not contains \"CNX_Network_RO\""}
{"prompt": "I want to find activity related to accessing Windows credentials using the VaultCmd tool on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\VaultCmd\\.exe\" or actor_process_file_original_name = \"VAULTCMD.EXE\") and action_process_image_command_line contains \"/listcreds:\")\n\n\n\n"}
{"prompt": "{I want to detect suspicious PowerShell invocations that use encoded commands and hidden windows.} \n\n\nLet me know if you'd like to refine this further! For example, we could make it more specific about the type of PowerShell module being used.", "response": "preset = xdr_event_log\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter ((ContextInfo contains \" -enc \" or ContextInfo contains \" -EncodedCommand \" or ContextInfo contains \" -ec \") and (ContextInfo contains \" -w hidden \" or ContextInfo contains \" -window hidden \" or ContextInfo contains \" -windowstyle hidden \" or ContextInfo contains \" -w 1 \") and (ContextInfo contains \" -noni \" or ContextInfo contains \" -noninteractive \"))\n\n\n\n"}
{"prompt": "I want to find out if any suspicious services have been installed on my endpoints.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \" -nop \" or actor_process_image_path contains \" -sta \" or actor_process_image_path contains \" -w hidden \" or actor_process_image_path ~= \".*\\:\\\\Temp\\\\.*\" or actor_process_image_path contains \".downloadfile(\" or actor_process_image_path contains \".downloadstring(\" or actor_process_image_path ~= \".*\\\\ADMIN\\$\\\\.*\" or actor_process_image_path ~= \".*\\\\Perflogs\\\\.*\" or actor_process_image_path contains \"&&\"))\n\n\n\n"}
{"prompt": "I want to detect instances of users enumerating security privileges using the `whoami.exe` command with the `/priv` or `-priv` flags.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\whoami\\.exe\" or actor_process_file_original_name = \"whoami.exe\") and (action_process_image_command_line contains \" /priv\" or action_process_image_command_line contains \" -priv\"))\n\n\n\n"}
{"prompt": "I want to detect potential Pikabot activity by identifying Rundll32 executions with unusual DLL extensions.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") and action_process_image_path ~= \".*\\\\rundll32\\.exe\" and (action_process_image_command_line ~= \".*\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Installer\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\")) and  not (((action_process_image_command_line contains \".cpl \" or action_process_image_command_line contains \".cpl,\" or action_process_image_command_line contains \".dll \" or action_process_image_command_line contains \".dll,\" or action_process_image_command_line contains \".inf \" or action_process_image_command_line contains \".inf,\") or (action_process_image_command_line ~= \".*\\.cpl\" or action_process_image_command_line ~= \".*\\.cpl\\\"\" or action_process_image_command_line ~= \".*\\.dll\" or action_process_image_command_line ~= \".*\\.dll\\\"\" or action_process_image_command_line ~= \".*\\.inf\" or action_process_image_command_line ~= \".*\\.inf\\\"\" or action_process_image_command_line ~= \".*\\.cpl\\'\" or action_process_image_command_line ~= \".*\\.dll\\'\" or action_process_image_command_line ~= \".*\\.inf\\'\")))\n\n\n\n"}
{"prompt": "I want to detect attempts to disable Microsoft Defender Firewall through registry modifications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Services\\\\SharedAccess\\\\Parameters\\\\FirewallPolicy\\\\.*\" and action_registry_key_name ~= \".*\\\\EnableFirewall\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to see which users have accessed more than five SymantecWSS Suspicious category URLs within an hour based on behavioral data.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and category ~= \"Suspicious\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find indicators of JNDI exploits across my data.", "response": "datamodel\n| filter ( contains \"/Basic/Command/Base64/\" or  contains \"/Basic/ReverseShell/\" or  contains \"/Basic/TomcatMemshell\" or  contains \"/Basic/JettyMemshell\" or  contains \"/Basic/WeblogicMemshell\" or  contains \"/Basic/JBossMemshell\" or  contains \"/Basic/WebsphereMemshell\" or  contains \"/Basic/SpringMemshell\" or  contains \"/Deserialization/URLDNS/\" or  contains \"/Deserialization/CommonsCollections1/Dnslog/\" or  contains \"/Deserialization/CommonsCollections2/Command/Base64/\" or  contains \"/Deserialization/CommonsBeanutils1/ReverseShell/\" or  contains \"/Deserialization/Jre8u20/TomcatMemshell\" or  contains \"/TomcatBypass/Dnslog/\" or  contains \"/TomcatBypass/Command/\" or  contains \"/TomcatBypass/ReverseShell/\" or  contains \"/TomcatBypass/TomcatMemshell\" or  contains \"/TomcatBypass/SpringMemshell\" or  contains \"/GroovyBypass/Command/\" or  contains \"/WebsphereBypass/Upload/\")\n\n\n\n"}
{"prompt": "I want to see if there are any admin users experiencing a high number of failed login attempts within a 5-minute window, and if so, get details about those events.", "response": "config case_sensitive = false\n| dataset in (check_point_smartconsole_raw, check_point_smartview_tracker_raw, check_point_query_database_raw, check_point_smartdashboard_raw, check_point_web_api_raw, check_point_web_ui_raw)\n| bin _time span = 5m\n| filter subject contains \"Administrator Login\" and additional_info contains \"Administrator failed to log in\" and administrator != NULL and _final_reporting_device_ip != \"<ip>\"\n| join\n(preset = ad_users\n| fields full_user_name, security_group_list, sam_account_name,\nmember_of\n) as cieusers administrator = cieusers.sam_account_name\n| filter security_group_list contains \"<group>\" or member_of contains \"<group>\"\n| alter user_agent = null,\nos_edition = null,\nsrc_port = null,\ndst_port = null,\nhostname = arrayindex(regextract(originsicname, \"o\\=([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(src_port) as src_port,\nvalues(dst_port) as dst_port,\nvalues(subject) as action,\nvalues(origin) as origin,\nvalues(hostname) as hostname,\nvalues(additional_info) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\ncount() as matched_events by _time,\nadministrator\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find indicators of exploitation for CVE-2015-1641 on my endpoints by looking for specific processes involved.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\WINWORD\\.EXE\" and action_process_image_path ~= \".*\\\\MicroScMgmt\\.exe\")\n\n\n\n"}
{"prompt": "I want to find instances of the CVE-2021-33766 Exchange ProxyToken Exploitation attack.", "response": "datamodel\n| filter ((xdm.network.http.method = \"POST\" and (xdm.network.http.url contains \"/ecp/\" and xdm.network.http.url contains \"/RulesEditor/InboxRules.svc/NewObject\") and xdm.network.http.response_code = 500) or ((xdm.network.http.url contains \"SecurityToken=\" and xdm.network.http.url contains \"/ecp/\") and xdm.network.http.response_code = 500))\n\n\n\n"}
{"prompt": "I want to see all instances where security configuration parameters were approved in Swift applications.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"security configuration parameter approve\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find macOS processes that use OpenSSL to decode and decrypt files from volumes, specifically looking for commands containing \"/Volumes/\", \"enc\", \"-base64\", and \" -d\".", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/openssl\" and (action_process_image_command_line contains \"/Volumes/\" and action_process_image_command_line contains \"enc\" and action_process_image_command_line contains \"-base64\" and action_process_image_command_line contains \" -d \"))\n\n\n\n"}
{"prompt": "I want to detect potential Powerview abuse related to DCSync by looking for specific AD object modifications.", "response": "preset = xdr_event_log\n| alter AttributeLDAPDisplayName = regextract(to_json_string(action_evtlog_data_fields)->AttributeLDAPDisplayName{}, \"\\\"(.*)\\\"\")\n| alter AttributeValue = regextract(to_json_string(action_evtlog_data_fields)->AttributeValue{}, \"\\\"(.*)\\\"\")\n| alter ObjectClass = regextract(to_json_string(action_evtlog_data_fields)->ObjectClass{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5136 and AttributeLDAPDisplayName = \"ntSecurityDescriptor\" and (AttributeValue contains \"1131f6ad-9c07-11d1-f79f-00c04fc2dcd2\" or AttributeValue contains \"1131f6aa-9c07-11d1-f79f-00c04fc2dcd2\" or AttributeValue contains \"89e95b76-444d-4c62-991a-0facbeda640c\")) and  not (ObjectClass in (\"dnsNode\", \"dnsZoneScope\", \"dnsZone\"))\n\n\n\n"}
{"prompt": " I want to detect suspicious activity related to clearing or modifying event logs on endpoints. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Clear-EventLog \" or ScriptBlockText contains \"Remove-EventLog \" or ScriptBlockText contains \"Limit-EventLog \" or ScriptBlockText contains \"Clear-WinEvent \")\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that use Invoke-Obfuscation CLIP+ Launcher and might be trying to evade detection.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText ~= \"cmd.{0,5}(?\\:\\/c|\\/r).+clip(?\\:\\.exe)?.{0,4}\\&\\&.+clipboard]\\:\\:\\(\\s\\\\\\\"\\{\\d\\}.+\\-f.+\\\"\"\n\n\n\n"}
{"prompt": "I want to see details about password changes detected on Linux systems, including who changed the password and when.", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| filter xdm.event.type = \"passwd\" and xdm.event.description ~= \"password changed\"\n| alter xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS,\nxdm.target.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"password\\s+changed\\s+for\\s+([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"changed\\s+password\\s+expiry\\s+for\\s+([\\w\\-\\.]+)\"), 0), if(xdm.event.type = \"useradd\", arrayindex(regextract(xdm.event.description, \"name=([^,]+)\"), 0))),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.target.user.username != null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, device_ip, _insert_time, _product, _vendor\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\naggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about processes using GfxDownloadWrapper.EXE that download arbitrary files from the internet, excluding downloads from intel.com.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\GfxDownloadWrapper\\.exe\" and (action_process_image_command_line contains \"http:\n\n\n\n"}
{"prompt": "I want to see all events where Sdclt.exe is running with High integrity level.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*sdclt\\.exe\" and action_process_integrity_level = \"High\")\n\n\n\n"}
{"prompt": "I want to detect when an attacker uses shutdown.exe with /r or /s parameters on Windows endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\shutdown\\.exe\" and (action_process_image_command_line contains \"/r \" or action_process_image_command_line contains \"/s \"))\n\n\n\n"}
{"prompt": "I want to find scheduled tasks that have had their index value modified in the registry, which could be a sign of an attacker trying to hide them.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tree\\\\.*\" and action_registry_key_name contains \"Index\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to see alerts for Grafana Path Traversal Exploitation CVE-2021-43798.", "response": "datamodel\n| filter ((xdm.network.http.url contains \"/../../../../../../../\" and xdm.network.http.response_code = 200) and (xdm.network.http.url contains \"/public/plugins/live\" or xdm.network.http.url contains \"/public/plugins/icon\" or xdm.network.http.url contains \"/public/plugins/loki\" or xdm.network.http.url contains \"/public/plugins/text\" or xdm.network.http.url contains \"/public/plugins/logs\" or xdm.network.http.url contains \"/public/plugins/news\" or xdm.network.http.url contains \"/public/plugins/stat\" or xdm.network.http.url contains \"/public/plugins/mssql\" or xdm.network.http.url contains \"/public/plugins/mixed\" or xdm.network.http.url contains \"/public/plugins/mysql\" or xdm.network.http.url contains \"/public/plugins/tempo\" or xdm.network.http.url contains \"/public/plugins/graph\" or xdm.network.http.url contains \"/public/plugins/gauge\" or xdm.network.http.url contains \"/public/plugins/table\" or xdm.network.http.url contains \"/public/plugins/debug\" or xdm.network.http.url contains \"/public/plugins/zipkin\" or xdm.network.http.url contains \"/public/plugins/jaeger\" or xdm.network.http.url contains \"/public/plugins/geomap\" or xdm.network.http.url contains \"/public/plugins/canvas\" or xdm.network.http.url contains \"/public/plugins/grafana\" or xdm.network.http.url contains \"/public/plugins/welcome\" or xdm.network.http.url contains \"/public/plugins/xychart\" or xdm.network.http.url contains \"/public/plugins/heatmap\" or xdm.network.http.url contains \"/public/plugins/postgres\" or xdm.network.http.url contains \"/public/plugins/testdata\" or xdm.network.http.url contains \"/public/plugins/opentsdb\" or xdm.network.http.url contains \"/public/plugins/influxdb\" or xdm.network.http.url contains \"/public/plugins/barchart\" or xdm.network.http.url contains \"/public/plugins/annolist\" or xdm.network.http.url contains \"/public/plugins/bargauge\" or xdm.network.http.url contains \"/public/plugins/graphite\" or xdm.network.http.url contains \"/public/plugins/dashlist\" or xdm.network.http.url contains \"/public/plugins/piechart\" or xdm.network.http.url contains \"/public/plugins/dashboard\" or xdm.network.http.url contains \"/public/plugins/nodeGraph\" or xdm.network.http.url contains \"/public/plugins/alertlist\" or xdm.network.http.url contains \"/public/plugins/histogram\" or xdm.network.http.url contains \"/public/plugins/table-old\" or xdm.network.http.url contains \"/public/plugins/pluginlist\" or xdm.network.http.url contains \"/public/plugins/timeseries\" or xdm.network.http.url contains \"/public/plugins/cloudwatch\" or xdm.network.http.url contains \"/public/plugins/prometheus\" or xdm.network.http.url contains \"/public/plugins/stackdriver\" or xdm.network.http.url contains \"/public/plugins/alertGroups\" or xdm.network.http.url contains \"/public/plugins/alertmanager\" or xdm.network.http.url contains \"/public/plugins/elasticsearch\" or xdm.network.http.url contains \"/public/plugins/gettingstarted\" or xdm.network.http.url contains \"/public/plugins/state-timeline\" or xdm.network.http.url contains \"/public/plugins/status-history\" or xdm.network.http.url contains \"/public/plugins/grafana-clock-panel\" or xdm.network.http.url contains \"/public/plugins/grafana-simple-json-datasource\" or xdm.network.http.url contains \"/public/plugins/grafana-azure-monitor-datasource\"))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that compress folders and files into potentially suspicious locations using the \"Compress-Archive\" cmdlet.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Compress-Archive -Path*-DestinationPath $env:TEMP\" or action_process_image_command_line ~= \".*Compress\\-Archive\\ \\-Path.*\\-DestinationPath.*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*Compress\\-Archive\\ \\-Path.*\\-DestinationPath.*\\:\\\\Windows\\\\Temp\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect instances where an attacker might be dumping sensitive files like NTDS.DIT or SECURITY using the wbadmin utility.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wbadmin\\.exe\" or actor_process_file_original_name = \"WBADMIN.EXE\") and (action_process_image_command_line contains \"start\" or action_process_image_command_line contains \"backup\") and (action_process_image_command_line contains \"\\\\config\\\\SAM\" or action_process_image_command_line contains \"\\\\config\\\\SECURITY\" or action_process_image_command_line contains \"\\\\config\\\\SYSTEM\" or action_process_image_command_line contains \"\\\\Windows\\\\NTDS\\\\NTDS.dit\"))\n\n\n\n"}
{"prompt": "I want to see information about Windows binaries that are executed from WSL.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \"[a-zA-Z]\\:\\\\\" and action_process_cwd contains \"\\\\\\\\wsl.localhost\")\n\n\n\n"}
{"prompt": "I want to find emails that contain brand new malware samples that we haven't seen before. I need to know the sender, recipient and the specific malware file SHA256.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter headerTo != null and headerFrom != null and eventType in (\"Ransomware\", \"Malware\")\n| alter headerTo_array = headerTo -> []\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\")\n| alter file_details = json_extract(details, \"$.fileInfo\") -> []\n| arrayexpand file_details\n| alter file_sha256 = file_details -> fileSha256,\nthreat = file_details -> threatName\n| join type = left\n(dataset = email_threats_detected_list\n) as threats_signatures threats_signatures.file_sha256_sig = file_sha256 or threats_signatures.threat_name = threat\n| filter (file_sha256_sig = null or threat_name = null)\n| comp values(headerFrom) as sender,\nvalues(headerTo_array) as receiver by threat,\nfile_sha256"}
{"prompt": "I want to find Microsoft application traffic that is significantly higher than average today compared to the last 7 days.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and user_agent ~= \"^Microsoft\" and action ~= \"Blocked\" and host_dst !~= \"^autodiscover\" and user_agent !~= \"Microsoft%20BITS/7.8\" and host_dst !~= \"ctldl.windowsupdate.com|msftconnecttest\"\n| comp count() as current_day_traffic,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and user_agent ~= \"^Microsoft\" and action ~= \"Blocked\" and host_dst !~= \"^autodiscover\"\n| comp count() as 7_days_traffic,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_traffic) as 7_days_traffic_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_traffic > multiply(7_days_traffic_avg, 1.35)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see if anyone has been looking for credentials in the Windows Registry using reg.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\reg\\.exe\" and (action_process_image_command_line contains \" query \" and action_process_image_command_line contains \"/t \" and action_process_image_command_line contains \"REG_SZ\" and action_process_image_command_line contains \"/s\")) and ((action_process_image_command_line contains \"/f \" and action_process_image_command_line contains \"HKLM\") or (action_process_image_command_line contains \"/f \" and action_process_image_command_line contains \"HKCU\") or action_process_image_command_line contains \"HKCU\\\\Software\\\\SimonTatham\\\\PuTTY\\\\Sessions\")\n\n\n\n"}
{"prompt": "I want to see a list of users who created and deleted their accounts within an hour of each other.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id in (\"4720\", \"4726\") and xdm.source.user.username != null and xdm.target.user.username != null\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| sort asc _time\n\n| alter pattern = if(xdm.event.id = \"4720\", \"E1\", \"E2\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, pattern, target_domain\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by xdm.target.user.username\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events contains \"E1,E2\"\n\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to detect if PDQDeploy has been used to install a service on a target system.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (actor_process_image_path contains \"PDQDeployRunner-\" or ServiceName ~= \"PDQDeployRunner\\-.*\"))\n\n\n\n"}
{"prompt": "I want to find instances of the HackTool - DInjector PowerShell Cradle Execution on my endpoints where the command line includes both \"/am51\" and \"/password\".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" /am51\" and action_process_image_command_line contains \" /password\")\n\n\n\n"}
{"prompt": "I want to see all instances where GatherNetworkInfo.vbs is executed without using cscript or wscript.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"gatherNetworkInfo.vbs\" and  not ((action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\"))\n\n\n\n"}
{"prompt": " I want to see events related to Microsoft Excel add-ins being loaded. ", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\excel\\.exe\" and action_module_path ~= \".*\\.xll\")\n\n\n\n"}
{"prompt": "I want to see if there have been multiple failed login attempts by the same user on iRemote within the last 5 minutes. I need details like the username, IP address, server, and number of failed attempts.", "response": "dataset = msft_azure_ad_raw\n| bin _time span = 5m\n| alter result_code = to_integer(status -> errorCode),\nresult_desc = status -> failureReason,\nuser_dst = userPrincipalName\n| filter result_code != 0 and appDisplayName ~= \"iremote\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(userDisplayName) as username,\nvalues(ipAddress) as ipAddress,\nvalues(appDisplayName) as server,\nvalues(result_code) as result_code,\nvalues(result_desc) as result_desc,\nvalues(userAgent) as user_agent,\ncount() as matched_events by _time,\nuser_dst\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see events where processes on endpoints use \"echo\" and \"%userdomain%\" in their command lines, potentially indicating user domain variable enumeration.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"echo \" and action_process_image_command_line contains \"%userdomain%\")\n\n\n\n"}
{"prompt": "I want to see files that match known indicators associated with the Lace Tempest malware.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*\\:\\\\Program\\ Files\\\\SysAidServer\\\\tomcat\\\\webapps\\\\usersfiles\\\\user\\.exe\" or xdm.target.file.filename ~= \".*\\:\\\\Program\\ Files\\\\SysAidServer\\\\tomcat\\\\webapps\\\\usersfiles\\.war\" or xdm.target.file.filename ~= \".*\\:\\\\Program\\ Files\\\\SysAidServer\\\\tomcat\\\\webapps\\\\leave\") or xdm.target.file.filename contains \":\\\\Program Files\\\\SysAidServer\\\\tomcat\\\\webapps\\\\user.\")\n\n\n\n"}
{"prompt": "I want to detect if someone is changing the \"NoLMHash\" registry value to allow LM Hash storage.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*System\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\NoLMHash\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to find instances where the \"windir\" environment variable is set to something other than its default value.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\Environment\\\\windir\" and  not ((action_registry_value_name = \"%SystemRoot%\" or action_registry_data = \"%SystemRoot%\"))\n\n\n\n"}
{"prompt": "I want to find suspicious activity attempts targeting users from my decoy list.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter xdm.source.user.username = if(xdm.source.user.username ~= \"@ad.infosys.com\", rtrim(xdm.source.user.username, \"@ad.infosys.com\"), if(xdm.source.user.username ~= \"@infosys.com\", rtrim(xdm.source.user.username, \"@infosys.com\"), if(xdm.source.user.username ~= \"itlinfosys\", ltrim(xdm.source.user.username, \"itlinfosys\\\\\"), xdm.source.user.username)))\n| filter xdm.source.user.username != \"_EMSGMIMADMA\"\n| join type = left\n(dataset = decoy_users_list\n) as decoy_user decoy_user.user_name = xdm.target.user.username\n| filter user_name != null\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, user_name\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find users who have suddenly increased their activity on proxy resources compared to their typical behavior over the past week.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\"\n| comp count() as current_day_count,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\"\n| comp count() as 7_days_count,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_count) as 7_days_count_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_count > multiply(7_days_count_avg, 1.5)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find Office 365 logins that were successful from countries outside of normal business operations.", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Workload = \"AzureActiveDirectory\" and (Operation in (\"UserLoggedIn\") and ResultStatus = \"Success\") and UserId != NULL and incidr(ActorIpAddress, \"<ips>\")\n| iploc ActorIpAddress loc_country as IPtoCountry,\nloc_city as IPtoCity,\nloc_asn as IPtoASN,\nloc_continent as IPtoContinent\n| union (dataset = wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value))\n| filter ActorIpAddress != wl_ipv4 and incidr(ActorIpAddress, wl_cidr) = false and (IPtoCountry not in (null, NULL, \"\"\"\"\"\")) and if(IPtoCountry in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\")) = false"}
{"prompt": "I want to find suspicious child processes created by WSL, especially those using potentially malicious tools or accessing sensitive system directories.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\wsl\\.exe\" or actor_process_image_path ~= \".*\\\\wslhost\\.exe\") and ((action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or (action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_path ~= \".*C\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*C\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_path ~= \".*C\\:\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\\\Downloads\\\\.*\" or action_process_image_path ~= \".*\\\\Desktop\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find suspicious PFX file creations that aren't part of expected templates or CMake files.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\.pfx\" and  not ((xdm.target.file.filename contains \"\\\\Templates\\\\Windows\\\\Windows_TemporaryKey.pfx\" and xdm.target.file.filename ~= \".*\\\\CMake\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect instances of Apt GTFOBin abuse on Linux endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/apt\" or action_process_image_path ~= \".*\\/apt\\-get\") and action_process_image_command_line contains \"APT::Update::Pre-Invoke::=\")\n\n\n\n"}
{"prompt": "I want to find instances of malware that use Invoke-Obfuscation CLIP+ Launcher to evade detection.", "response": "datamodel\n| filter xdm.target.process.executable.path ~= \".*cmd.{0,5}(?\\:\\/c|\\/r).+clip(?\\:\\.exe)?.{0,4}\\&\\&.+clipboard]\\:\\:\\(\\s\\\\\\\"\\{\\d\\}.+\\-f.+\\\"\"\n\n\n\n"}
{"prompt": "I want to see all events related to Microsoft Office macro files being created on my systems.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\.docm\" or xdm.target.file.filename ~= \".*\\.dotm\" or xdm.target.file.filename ~= \".*\\.xlsm\" or xdm.target.file.filename ~= \".*\\.xltm\" or xdm.target.file.filename ~= \".*\\.potm\" or xdm.target.file.filename ~= \".*\\.pptm\")\n\n\n\n"}
{"prompt": " I want to find events where a Prefetch file has been deleted and it wasn't handled by svchost.exe processes running as AUTHORI or AUTORI users.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\Prefetch\\\\.*\" and xdm.target.file.filename ~= \".*\\.pf\") and  not (((xdm.target.process.name ~= \".*\\:\\\\windows\\\\system32\\\\svchost\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\windows\\\\system32\\\\svchost\\.exe\") and (xdm.source.user.username contains \"AUTHORI\" or xdm.source.user.username contains \"AUTORI\")))\n\n\n\n"}
{"prompt": "I want to find instances of msiexec being used with quiet installation options.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\msiexec\\.exe\" or actor_process_file_original_name = \"msiexec.exe\") and ((action_process_image_command_line contains \"-i\" or action_process_image_command_line contains \"/i\") or (action_process_image_command_line contains \"-package\" or action_process_image_command_line contains \"/package\") or (action_process_image_command_line contains \"-a\" or action_process_image_command_line contains \"/a\") or (action_process_image_command_line contains \"-j\" or action_process_image_command_line contains \"/j\")) and (action_process_image_command_line contains \"-q\" or action_process_image_command_line contains \"/q\")) and  not ((actor_process_image_path ~= \"C\\:\\\\Users\\\\.*\" and actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") or actor_process_image_path ~= \"C\\:\\\\Windows\\\\Temp\\\\.*\" or (actor_process_image_path = \"C:\\\\Windows\\\\CCM\\\\Ccm32BitLauncher.exe\" and action_process_integrity_level = \"System\"))\n\n\n\n"}
{"prompt": "I want to see potential instances of SMB relay attacks using tools like PetitPotam and RottenPotato.", "response": "preset = xdr_process\n| filter ((action_process_image_path contains \"PetitPotam\" or action_process_image_path contains \"RottenPotato\" or action_process_image_path contains \"HotPotato\" or action_process_image_path contains \"JuicyPotato\" or action_process_image_path contains \"\\\\just_dce_\" or action_process_image_path contains \"Juicy Potato\" or action_process_image_path contains \"\\\\temp\\\\rot.exe\" or action_process_image_path contains \"\\\\Potato.exe\" or action_process_image_path contains \"\\\\SpoolSample.exe\" or action_process_image_path contains \"\\\\Responder.exe\" or action_process_image_path contains \"\\\\smbrelayx\" or action_process_image_path contains \"\\\\ntlmrelayx\" or action_process_image_path contains \"\\\\LocalPotato\") or (action_process_image_command_line contains \"Invoke-Tater\" or action_process_image_command_line contains \" smbrelay\" or action_process_image_command_line contains \" ntlmrelay\" or action_process_image_command_line contains \"cme smb \" or action_process_image_command_line contains \" /ntlm:NTLMhash \" or action_process_image_command_line contains \"Invoke-PetitPotam\" or action_process_image_command_line contains \".exe -t * -p \") or (action_process_image_command_line contains \".exe -c \\\"{\" and action_process_image_command_line ~= \".*\\}\\\"\\ \\-z\")) and  not ((action_process_image_path contains \"HotPotatoes6\" or action_process_image_path contains \"HotPotatoes7\" or action_process_image_path contains \"HotPotatoes \"))\n\n\n\n"}
{"prompt": "I want to find events on endpoints where SyncAppvPublishingServer.exe is used to potentially bypass PowerShell restrictions.", "response": "preset = xdr_event_log\n| filter _raw_log contains \"SyncAppvPublishingServer.exe\"\n\n\n\n"}
{"prompt": "I want to detect if someone is accessing dark web sites through our Zscaler gateway.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter host_dst ~= \"[a-zA-Z\\d]+(.onion)$\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for processes that download Cobalt Strike using the Lace Tempest technique.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"-nop -w hidden -c IEX ((new-object net.webclient).downloadstring(\" and action_process_image_command_line contains \"/a')\")\n\n\n\n"}
{"prompt": "{I want to see alerts for users who have deleted over 500 AD objects within a 5 minute period.}  \n\n\nLet me know if you need help with any other parts of this!", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"5141\") and xdm.source.user.username != \"system\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.source.user.username\n| filter matched_events >= 500\n| alter aggregation_criteria = \"ilsourceuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 500)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find scheduled cron jobs on macOS endpoints that use /tmp in their command lines.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/crontab\" and action_process_image_command_line contains \"/tmp/\")\n\n\n\n"}
{"prompt": "I want to find suspicious processes that are child processes of common Microsoft Office applications.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\EQNEDT32\\.EXE\" or actor_process_image_path ~= \".*\\\\EXCEL\\.EXE\" or actor_process_image_path ~= \".*\\\\MSACCESS\\.EXE\" or actor_process_image_path ~= \".*\\\\MSPUB\\.exe\" or actor_process_image_path ~= \".*\\\\ONENOTE\\.EXE\" or actor_process_image_path ~= \".*\\\\POWERPNT\\.exe\" or actor_process_image_path ~= \".*\\\\VISIO\\.exe\" or actor_process_image_path ~= \".*\\\\WINWORD\\.EXE\" or actor_process_image_path ~= \".*\\\\wordpad\\.exe\" or actor_process_image_path ~= \".*\\\\wordview\\.exe\") and ((actor_process_file_original_name in (\"bitsadmin.exe\", \"CertOC.exe\", \"CertUtil.exe\", \"Cmd.Exe\", \"CMSTP.EXE\", \"cscript.exe\", \"curl.exe\", \"HH.exe\", \"IEExec.exe\", \"InstallUtil.exe\", \"javaw.exe\", \"Microsoft.Workflow.Compiler.exe\", \"msdt.exe\", \"MSHTA.EXE\", \"msiexec.exe\", \"Msxsl.exe\", \"odbcconf.exe\", \"pcalua.exe\", \"PowerShell.EXE\", \"RegAsm.exe\", \"RegSvcs.exe\", \"REGSVR32.exe\", \"RUNDLL32.exe\", \"schtasks.exe\", \"ScriptRunner.exe\", \"wmic.exe\", \"WorkFolders.exe\", \"wscript.exe\") or (action_process_image_path ~= \".*\\\\AppVLP\\.exe\" or action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\certoc\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cmstp\\.exe\" or action_process_image_path ~= \".*\\\\control\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\curl\\.exe\" or action_process_image_path ~= \".*\\\\forfiles\\.exe\" or action_process_image_path ~= \".*\\\\hh\\.exe\" or action_process_image_path ~= \".*\\\\ieexec\\.exe\" or action_process_image_path ~= \".*\\\\installutil\\.exe\" or action_process_image_path ~= \".*\\\\javaw\\.exe\" or action_process_image_path ~= \".*\\\\mftrace\\.exe\" or action_process_image_path ~= \".*\\\\Microsoft\\.Workflow\\.Compiler\\.exe\" or action_process_image_path ~= \".*\\\\msbuild\\.exe\" or action_process_image_path ~= \".*\\\\msdt\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\msidb\\.exe\" or action_process_image_path ~= \".*\\\\msiexec\\.exe\" or action_process_image_path ~= \".*\\\\msxsl\\.exe\" or action_process_image_path ~= \".*\\\\odbcconf\\.exe\" or action_process_image_path ~= \".*\\\\pcalua\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regasm\\.exe\" or action_process_image_path ~= \".*\\\\regsvcs\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\scrcons\\.exe\" or action_process_image_path ~= \".*\\\\scriptrunner\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\svchost\\.exe\" or action_process_image_path ~= \".*\\\\verclsid\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\workfolders\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\")) or (action_process_image_path ~= \".*\\\\AppData\\\\.*\" or action_process_image_path ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\\\ProgramData\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\System32\\\\Tasks\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect instances where someone is using the \">\" character to redirect command line output in cmd.exe.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"Cmd.Exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") and action_process_image_command_line contains \">\") and  not ((action_process_image_command_line contains \"C:\\\\Program Files (x86)\\\\Internet Download Manager\\\\IDMMsgHost.exe\" or action_process_image_command_line contains \"chrome-extension:\n\n\n\n"}
{"prompt": "I want to see terminated user activity related to CheckPoint, especially those activities involving administrators from the SEPX OU.", "response": "config case_sensitive = false\n| dataset in (check_point_smartconsole_raw)\n| filter administrator != null\n| alter user_name = administrator\n| join type = left\n(preset = ad_users\n| fields sam_account_name, OU, security_group_list,\nmember_of\n) as adusers adusers.sam_account_name = user_name\n| filter sam_account_name != null and OU contains \"SEPX\"\n| alter action = coalesce(Operation, act, Subject)\n| comp values(action) as action,\nvalues(to_string(OU)) as org_unit by user_name,\n_product,\n_vendor"}
{"prompt": "I want to find potential persistence threats that use modifications to Event Viewer settings through ASP files.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Event Viewer\\\\MicrosoftRedirectionProgram\" or action_registry_key_name contains \"\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Event Viewer\\\\MicrosoftRedirectionURL\") and  not ((actor_process_image_path ~= \".*C\\:\\\\WINDOWS\\\\system32\\\\svchost\\.exe\" and action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Event\\ Viewer\\\\MicrosoftRedirectionProgram\" and (action_registry_value_name = \"%%SystemRoot%%\\\\PCHealth\\\\HelpCtr\\\\Binaries\\\\HelpCtr.exe\" or action_registry_data = \"%%SystemRoot%%\\\\PCHealth\\\\HelpCtr\\\\Binaries\\\\HelpCtr.exe\")) or (actor_process_image_path ~= \".*C\\:\\\\WINDOWS\\\\system32\\\\svchost\\.exe\" and action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Event\\ Viewer\\\\MicrosoftRedirectionProgramCommandLineParameters\" and (action_registry_value_name = \"-url hcp:\n\n\n\n"}
{"prompt": "I want to see all AWS IAM policy changes detected by this rule.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n\n| filter eventName IN (\"DeleteGroupPolicy\", \"DeleteRolePolicy\", \"DeleteUserPolicy\", \"PutGroupPolicy\", \"PutRolePolicy\", \"PutUserPolicy\", \"CreatePolicy\", \"DeletePolicy\", \"CreatePolicyVersion\", \"DeletePolicyVersion\", \"AttachRolePolicy\", \"DetachRolePolicy\", \"AttachUserPolicy\", \"DetachUserPolicy\", \"AttachGroupPolicy\", \"DetachGroupPolicy\")\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroup_name = json_extract_scalar(requestParameters, \"$.groupName\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter target_username !~= \"AWS-QuickSetup-\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where someone is using WinRAR to compress files with a password and specifying a compression level.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \" -hp\" and (action_process_image_command_line contains \" -m\" or action_process_image_command_line contains \" a \")\n\n\n\n"}
{"prompt": "I want to see all instances of object modification where non-admin users were involved, pulling data from Check Point.", "response": "config case_sensitive = false\n| dataset = check_point_smartconsole_raw\n| filter operation = \"Modify Object\" and lowercase(administrator) Not in (\"<users>\")\n| alter user_agent = null,\nos_edition = null,\nsrc_port = null,\ndst_port = null,\nhostname = arrayindex(regextract(originsicname, \"o\\=([^\\,]+)\"), 0),\nFirstEventTime = _time,\nLatestEventTime = _time,\nsource_ip = src,\ndst_ip = origin,\naction = operation,\norigin = origin,\nresult = subject,\nproduct = _product\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect if \"OfflineScannerShell.exe\" is being used for potential DLL sideloading attacks by loading malicious \"mpclient.dll\" files.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\OfflineScannerShell\\.exe\" or actor_process_file_original_name = \"OfflineScannerShell.exe\") and  not (action_process_cwd = \"C:\\\\Program Files\\\\Windows Defender\\\\Offline\\\\\" or action_process_cwd = \"\" or action_process_cwd = \"None\")\n\n\n\n"}
{"prompt": "I want to find suspicious PowerShell scripts that create mailbox SMTP forwarding rules.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Set-Mailbox \" and ScriptBlockText contains \" -DeliverToMailboxAndForward \" and ScriptBlockText contains \" -ForwardingSmtpAddress \")\n\n\n\n"}
{"prompt": "I want to see all login events from network devices using the default \"admin\" username across Cisco ASA, Fortinet Fortigate, and Cisco Catalyst devices.", "response": "datamodel dataset in (fortinet_fortigate_raw, cisco_asa_raw, cisco_catalyst_raw)\n| alter NetworkAdmin = coalesce(xdm.target.user.username, xdm.source.user.username)\n| filter (xdm.event.original_event_type in (\"611101\", \"113004\", \"113012\", \"0100032001\") or xdm.event.type = \"LOGIN_SUCCESS\") and (NetworkAdmin in (\"admin\"))\n| alter Product_BVM_Hostname = coalesce(cisco_catalyst_raw._broker_device_name, fortinet_fortigate_raw._broker_device_name, cisco_catalyst_raw._broker_device_name),\nProduct_BVM_IPAddress = coalesce(cisco_catalyst_raw._broker_ip_address, fortinet_fortigate_raw._broker_ip_address, cisco_catalyst_raw._broker_ip_address),\nProduct_Reporting_DeviceIP = coalesce(cisco_catalyst_raw._final_reporting_device_ip, fortinet_fortigate_raw._final_reporting_device_ip, cisco_asa_raw._final_reporting_device_ip)\n| alter Desc_String = if(Product_BVM_Hostname contains \"NEWAVLON\", \"New Avalon\", \".\")\n| join conflict_strategy = left type = left\n(dataset = BB_Network_Local_admin_Emails\n) as nwadm nwadm.BVM_IP = Product_BVM_IPAddress\n| filter Product_BVM_Hostname not in (\"\"\"\"\"\", NULL, null)\n| fields xdm.event.original_event_type, xdm.event.type, xdm.observer.product,\nxdm.event.description, xdm.event.outcome_reason,\nxdm.observer.name, NetworkAdmin, xdm.source.ipv4,\nxdm.target.ipv4, _vendor, _product, Product_BVM_Hostname,\nProduct_BVM_IPAddress, Product_Reporting_DeviceIP,\n*"}
{"prompt": "I want to see alerts about potentially malicious ASP.NET compilation activities using the AspNetCompiler executable.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*C\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework\\\\.*\" or action_process_image_path ~= \".*C\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework64\\\\.*\") and action_process_image_path ~= \".*\\\\aspnet\\_compiler\\.exe\" and (action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Roaming\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\"))\n\n\n\n"}
{"prompt": " I want to find out if anyone has deleted security solutions in Azure and who made those deletions.  Please focus on instances where the reference ID is \"<id>\" or \"<IDs>\".", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.SECURITY/SECURITYSOLUTIONS/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"<id>\", \"<IDs>\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find PowerShell scripts using obfuscation techniques that involve invoking the clipboard.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter Payload ~= \"(?i)echo.*clip.*\\&\\&.*(Clipboard|i\\`?n\\`?v\\`?o\\`?k\\`?e\\`?)\"\n\n\n\n"}
{"prompt": "I want to see Windows events where the audit log has been cleared.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| alter ActivityID = event_data -> param1,\nClientIPAddress = event_data -> param2,\nRequestedURI = event_data -> param3,\nAdditionalEventDetails = event_data -> param4,\nUserDomain = user -> domain,\nUserIdentifier = user -> identifier,\nUserName = user -> name,\nUserType = user -> type\n| filter event_id in (1102) and _collector_type in (\"XDR Collector\")\n\n| alter Desc_String = if(incidr(_collector_internal_ip_address, \"<IP>\"), \"New Avalon\", if(incidr(_collector_internal_ip_address, \"<IP>\"), \"New Avalon\", \".\"))"}
{"prompt": "I want to detect if Time Machine backups have been disabled on macOS systems using the \"tmutil\" command.", "response": "#N/A"}
{"prompt": "I want to detect when hidden local users are created on endpoints.", "response": "preset = xdr_event_log\n| alter TargetUserName = regextract(to_json_string(action_evtlog_data_fields)->TargetUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4720 and TargetUserName ~= \".*\\$\") and  not (TargetUserName = \"HomeGroupUser$\")\n\n\n\n"}
{"prompt": "I want to see alerts triggered by auditable event patterns on Windows systems configured for Common Criteria Security Audit Analysis requirements.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4618\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect processes running dnx.exe on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\dnx\\.exe\"\n\n\n\n"}
{"prompt": "I want to see events related to potentially compromised 3CXDesktopApp update activities on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\3CXDesktopApp\\\\app\\\\update\\.exe\" and (action_process_image_command_line contains \"--update\" and action_process_image_command_line contains \"http\" and action_process_image_command_line contains \"/electron/update/win32/18.12\"))\n\n\n\n"}
{"prompt": "I want to find instances of AWS STS AssumeRole misuse in Amazon AWS logs.", "response": "dataset = amazon_aws_raw\n| alter userIdentity_type = json_extract_scalar(userIdentity , \"$.type\")\n| alter userIdentity_sessionContext_sessionIssuer_type = json_extract_scalar(userIdentity , \"$.sessionContext.sessionIssuer.type\")\n| filter (userIdentity.type = \"AssumedRole\" and userIdentity.sessionContext.sessionIssuer.type = \"Role\")\n\n\n\n"}
{"prompt": "I want to see alerts about unusual network connections initiated by Cmstp.exe because that process rarely makes outbound requests. I want to investigate these connections to see if they are malicious.", "response": "#N/A"}
{"prompt": "I want to create an alert that triggers when DUO service accounts fail to log in due to bad passwords. This alert should be based on Windows Event Log entries with a specific failure reason and include details like the target username, source domain name, IP address, and workstation name.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| alter SourceDomainName = json_extract_scalar(event_data, \"$.SubjectDomainName\"),\nTargetUserName = json_extract_scalar(event_data, \"$.TargetUserName\"),\nreason = json_extract_scalar(event_data, \"$.FailureReason\"),\nSourceIPAddress = json_extract_scalar(event_data, \"$.IpAddress\"),\nWorkstationName = json_extract_scalar(event_data, \"$.WorkstationName\")\n| filter event_id in (4625)\n| filter reason = \"%%2313\"\n| filter TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\""}
{"prompt": "I want to find any instances where the MySQL daemon creates files with scripting or executable extensions. This could be a sign of malicious activity like using User Defined Functions (UDFs) to download malware.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\mysqld\\.exe\" or xdm.target.process.name ~= \".*\\\\mysqld\\-nt\\.exe\") or (xdm.source.process.name ~= \".*\\\\mysqld\\.exe\" or xdm.source.process.name ~= \".*\\\\mysqld\\-nt\\.exe\")) and (xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.dat\" or xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\" or xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.psm1\" or xdm.target.file.filename ~= \".*\\.vbe\" or xdm.target.file.filename ~= \".*\\.vbs\"))\n\n\n\n"}
{"prompt": "I want to see events where any of the common Chromium browsers are launched with a custom extension.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\brave\\.exe\" or action_process_image_path ~= \".*\\\\chrome\\.exe\" or action_process_image_path ~= \".*\\\\msedge\\.exe\" or action_process_image_path ~= \".*\\\\opera\\.exe\" or action_process_image_path ~= \".*\\\\vivaldi\\.exe\") and action_process_image_command_line contains \"--load-extension=\")\n\n\n\n"}
{"prompt": "I want to find events where a new account was added to the sysadmin role in MSSQL Server.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"MSSQLSERVER\" and action_evtlog_event_id = 33205 and (Data contains \"object_name:sysadmin\" and Data contains \"statement:alter server role [sysadmin] add member \"))\n\n\n\n"}
{"prompt": "I want to see information about users granting permissions to the \"app.read.ai\" app in O365.", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter ObjectId contains \"app.read.ai\"\n| filter Operation in (\"Add app role assignment grant to user.\", \"Consent to application.\")"}
{"prompt": "I want to detect if someone has changed the \"MaxMpxCt\" registry value on my Windows system, as this could be a sign of ransomware activity.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\Services\\\\LanmanServer\\\\Parameters\\\\MaxMpxCt\"\n\n\n\n"}
{"prompt": " I want to see alerts about suspicious child processes created by Outlook that are running remotely. ", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\outlook\\.exe\" and action_process_image_path ~= \"\\\\\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find instances of suspicious Diantz alternate data stream execution on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"diantz.exe\" and action_process_image_command_line contains \".cab\") and action_process_image_command_line ~= \"\\:[^\\\\]\")\n\n\n\n"}
{"prompt": "I want to find potential malware activity related to the 3CXDesktopApp process that involves suspicious child processes like cmd.exe, cscript.exe, or powershell.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\3CXDesktopApp\\.exe\" and (action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find security events related to potential Spring Expression Language (SpEL) injection vulnerabilities.", "response": "datamodel\n| filter _raw_log contains \"org.springframework.expression.ExpressionException\"\n\n\n\n"}
{"prompt": "I want to see events where processes on endpoints use the \"Get-Clipboard\" command in their command line arguments.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"Get-Clipboard\"\n\n\n\n"}
{"prompt": " I want to detect processes that have Base64 encoded MZ headers embedded in their command lines. ", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"TVqQAAMAAAAEAAAA\" or action_process_image_command_line contains \"TVpQAAIAAAAEAA8A\" or action_process_image_command_line contains \"TVqAAAEAAAAEABAA\" or action_process_image_command_line contains \"TVoAAAAAAAAAAAAA\" or action_process_image_command_line contains \"TVpTAQEAAAAEAAAA\")\n\n\n\n"}
{"prompt": "I want to find potential brute force attacks against Cisco ASA devices by analyzing Windows and Cisco ASA logs. I'm looking for instances where there are many login attempts within a short period, especially if the number of attempts exceeds the threshold defined in the 'bruteforce' dataset.", "response": "datamodel dataset in (cisco_asa_raw, microsoft_windows_raw)\n| alter outcome = regextract(xdm.event.description, \"AAA user authorization\\s(.*?)\\s\")\n| alter xdm.observer.product = if(xdm.observer.product = \"Windows\", xdm.observer.product, cisco_asa_raw._product),\nxdm.observer.vendor = if(xdm.observer.vendor = \"Microsoft\", xdm.observer.vendor, cisco_asa_raw._vendor)\n| filter (xdm.event.operation = \"AAA*authorization*\" and outcome != \"Successful\" and xdm.observer.product = \"ASA\") or (xdm.observer.action in (\"Logon\", \"Credential Validation\", \"Special Logon\") and xdm.event.outcome != \"success\" and xdm.observer.product = \"windows\")\n| comp count() as cnt,\nvalues(xdm.source.ipv4) as sourcesIp4,\nmin(_time) as mintime,\nmax(_time) as maxtime by xdm.source.user.username,\nxdm.observer.product,\nxdm.observer.vendor\n| join type = inner\n(dataset = bruteforce\n| fields slow, fast, product, vendor\n) as bf bf.vendor = xdm.observer.vendor and bf.product = xdm.observer.product\n| fields - vendor, product\n| alter diff_time = timestamp_diff(maxtime, mintime, \"MINUTE\")\n| filter (diff_time < 10 and cnt > to_float(fast)) or (diff_time > 10 and cnt > to_float(slow)) or diff_time > 7200"}
{"prompt": " I want to find events related to the \"Powerup Write Hijack DLL\" threat, specifically focusing on instances where PowerShell or pwsh is involved and a .bat file is created. ", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\\\pwsh\\.exe\") or (xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\")) and xdm.target.file.filename ~= \".*\\.bat\")\n\n\n\n"}
{"prompt": "I want to find instances of CVE-2020-0688 exploitation via web logs, specifically looking for GET requests with URLs containing \"/ecp/\", \"/owa/\", and \"__VIEWSTATE=\". ", "response": "datamodel\n| filter ((xdm.network.http.method = \"GET\" and (xdm.network.http.url contains \"/ecp/\" or xdm.network.http.url contains \"/owa/\")) and xdm.network.http.url contains \"__VIEWSTATE=\")\n\n\n\n"}
{"prompt": "I want to find indicators of potential malicious activity related to uncommon Microsoft Office trusted locations being added.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"Security\\\\Trusted Locations\\\\Location\" and action_registry_key_name ~= \".*\\\\Path\") and  not ((actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\.*\" and actor_process_image_path ~= \".*\\\\OfficeClickToRun\\.exe\") or (actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Office\\\\.*\")) and  not (((action_registry_value_name contains \"%APPDATA%\\\\Microsoft\\\\Templates\" or action_registry_value_name contains \"%%APPDATA%%\\\\Microsoft\\\\Templates\" or action_registry_value_name contains \"%APPDATA%\\\\Microsoft\\\\Word\\\\Startup\" or action_registry_value_name contains \"%%APPDATA%%\\\\Microsoft\\\\Word\\\\Startup\" or action_registry_value_name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Office\\\\root\\\\Templates\\\\.*\" or action_registry_value_name contains \":\\\\Program Files\\\\Microsoft Office (x86)\\\\Templates\" or action_registry_value_name ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\root\\\\Templates\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\Templates\\\\.*\") or (action_registry_data contains \"%APPDATA%\\\\Microsoft\\\\Templates\" or action_registry_data contains \"%%APPDATA%%\\\\Microsoft\\\\Templates\" or action_registry_data contains \"%APPDATA%\\\\Microsoft\\\\Word\\\\Startup\" or action_registry_data contains \"%%APPDATA%%\\\\Microsoft\\\\Word\\\\Startup\" or action_registry_data ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Office\\\\root\\\\Templates\\\\.*\" or action_registry_data contains \":\\\\Program Files\\\\Microsoft Office (x86)\\\\Templates\" or action_registry_data ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\root\\\\Templates\\\\.*\" or action_registry_data ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\Templates\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see when someone accessed the AWS console using the root username.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name != \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username1 = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username2 = json_extract_scalar(userIdentity, \"$.userName\"),\ntarget_username3 = trim(json_extract(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"\\\"\")\n| filter account_id NOT IN (\"<account id>\") and target_username1 = \"root\" or target_username2 = \"root\" or target_username3 = \"root\" or source_username = \"root\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"illogonsessionid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see AWS Network ACL changes detected by the Cortex XQL rule \"Network ACL Changes\".", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name = \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"CreateNetworkAcl\", \"CreateNetworkAclEntry\", \"DeleteNetworkAcl\", \"DeleteNetworkAclEntry\", \"ReplaceNetworkAclEntry\", \"ReplaceNetworkAclAssociation\")\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find examples of OilRig APT using scheduled tasks for persistence on endpoints.", "response": "preset = xdr_event_log\n| alter TaskName = regextract(to_json_string(action_evtlog_data_fields)->TaskName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4698 and TaskName in (\"SC Scheduled Scan\", \"UpdatMachine\"))\n\n\n\n"}
{"prompt": " I want to see alerts about processes that were renamed from \"ftp.exe\" but are not currently running under that name.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"ftp.exe\" and  not (action_process_image_path ~= \".*\\\\ftp\\.exe\")\n\n\n\n"}
{"prompt": "I want to see all events related to process access using known malicious tools or techniques.", "response": "preset = xdr_event_log\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| filter ((SourceImage ~= \".*\\\\Akagi\\.exe\" or SourceImage ~= \".*\\\\Akagi64\\.exe\" or SourceImage ~= \".*\\\\atexec\\_windows\\.exe\" or SourceImage ~= \".*\\\\Certify\\.exe\" or SourceImage ~= \".*\\\\Certipy\\.exe\" or SourceImage ~= \".*\\\\CoercedPotato\\.exe\" or SourceImage ~= \".*\\\\crackmapexec\\.exe\" or SourceImage ~= \".*\\\\CreateMiniDump\\.exe\" or SourceImage ~= \".*\\\\dcomexec\\_windows\\.exe\" or SourceImage ~= \".*\\\\dpapi\\_windows\\.exe\" or SourceImage ~= \".*\\\\findDelegation\\_windows\\.exe\" or SourceImage ~= \".*\\\\GetADUsers\\_windows\\.exe\" or SourceImage ~= \".*\\\\GetNPUsers\\_windows\\.exe\" or SourceImage ~= \".*\\\\getPac\\_windows\\.exe\" or SourceImage ~= \".*\\\\getST\\_windows\\.exe\" or SourceImage ~= \".*\\\\getTGT\\_windows\\.exe\" or SourceImage ~= \".*\\\\GetUserSPNs\\_windows\\.exe\" or SourceImage ~= \".*\\\\gmer\\.exe\" or SourceImage ~= \".*\\\\hashcat\\.exe\" or SourceImage ~= \".*\\\\htran\\.exe\" or SourceImage ~= \".*\\\\ifmap\\_windows\\.exe\" or SourceImage ~= \".*\\\\impersonate\\.exe\" or SourceImage ~= \".*\\\\Inveigh\\.exe\" or SourceImage ~= \".*\\\\LocalPotato\\.exe\" or SourceImage ~= \".*\\\\mimikatz\\_windows\\.exe\" or SourceImage ~= \".*\\\\mimikatz\\.exe\" or SourceImage ~= \".*\\\\netview\\_windows\\.exe\" or SourceImage ~= \".*\\\\nmapAnswerMachine\\_windows\\.exe\" or SourceImage ~= \".*\\\\opdump\\_windows\\.exe\" or SourceImage ~= \".*\\\\PasswordDump\\.exe\" or SourceImage ~= \".*\\\\Potato\\.exe\" or SourceImage ~= \".*\\\\PowerTool\\.exe\" or SourceImage ~= \".*\\\\PowerTool64\\.exe\" or SourceImage ~= \".*\\\\psexec\\_windows\\.exe\" or SourceImage ~= \".*\\\\PurpleSharp\\.exe\" or SourceImage ~= \".*\\\\pypykatz\\.exe\" or SourceImage ~= \".*\\\\QuarksPwDump\\.exe\" or SourceImage ~= \".*\\\\rdp\\_check\\_windows\\.exe\" or SourceImage ~= \".*\\\\Rubeus\\.exe\" or SourceImage ~= \".*\\\\SafetyKatz\\.exe\" or SourceImage ~= \".*\\\\sambaPipe\\_windows\\.exe\" or SourceImage ~= \".*\\\\SelectMyParent\\.exe\" or SourceImage ~= \".*\\\\SharpChisel\\.exe\" or SourceImage ~= \".*\\\\SharPersist\\.exe\" or SourceImage ~= \".*\\\\SharpEvtMute\\.exe\" or SourceImage ~= \".*\\\\SharpImpersonation\\.exe\" or SourceImage ~= \".*\\\\SharpLDAPmonitor\\.exe\" or SourceImage ~= \".*\\\\SharpLdapWhoami\\.exe\" or SourceImage ~= \".*\\\\SharpUp\\.exe\" or SourceImage ~= \".*\\\\SharpView\\.exe\" or SourceImage ~= \".*\\\\smbclient\\_windows\\.exe\" or SourceImage ~= \".*\\\\smbserver\\_windows\\.exe\" or SourceImage ~= \".*\\\\sniff\\_windows\\.exe\" or SourceImage ~= \".*\\\\sniffer\\_windows\\.exe\" or SourceImage ~= \".*\\\\split\\_windows\\.exe\" or SourceImage ~= \".*\\\\SpoolSample\\.exe\" or SourceImage ~= \".*\\\\Stracciatella\\.exe\" or SourceImage ~= \".*\\\\SysmonEOP\\.exe\" or SourceImage ~= \".*\\\\temp\\\\rot\\.exe\" or SourceImage ~= \".*\\\\ticketer\\_windows\\.exe\" or SourceImage ~= \".*\\\\TruffleSnout\\.exe\" or SourceImage ~= \".*\\\\winPEASany\\_ofs\\.exe\" or SourceImage ~= \".*\\\\winPEASany\\.exe\" or SourceImage ~= \".*\\\\winPEASx64\\_ofs\\.exe\" or SourceImage ~= \".*\\\\winPEASx64\\.exe\" or SourceImage ~= \".*\\\\winPEASx86\\_ofs\\.exe\" or SourceImage ~= \".*\\\\winPEASx86\\.exe\" or SourceImage ~= \".*\\\\xordump\\.exe\") or (SourceImage contains \"\\\\goldenPac\" or SourceImage contains \"\\\\just_dce_\" or SourceImage contains \"\\\\karmaSMB\" or SourceImage contains \"\\\\kintercept\" or SourceImage contains \"\\\\LocalPotato\" or SourceImage contains \"\\\\ntlmrelayx\" or SourceImage contains \"\\\\rpcdump\" or SourceImage contains \"\\\\samrdump\" or SourceImage contains \"\\\\secretsdump\" or SourceImage contains \"\\\\smbexec\" or SourceImage contains \"\\\\smbrelayx\" or SourceImage contains \"\\\\wmiexec\" or SourceImage contains \"\\\\wmipersist\" or SourceImage contains \"HotPotato\" or SourceImage contains \"Juicy Potato\" or SourceImage contains \"JuicyPotato\" or SourceImage contains \"PetitPotam\" or SourceImage contains \"RottenPotato\"))\n\n\n\n"}
{"prompt": "I want to see all outbound Firewall traffic from internal IPs on TCP port 12344 from Cisco ASA and Fortinet Fortigate devices.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw, cisco_asa_raw)\n| filter (xdm.source.is_internal_ip = true and xdm.target.is_internal_ip = false) and xdm.target.port in (12344) and xdm.network.application_protocol in (\"tcp/12344\")\n| fields xdm.source.ipv4, xdm.source.port, xdm.target.ipv4,\nxdm.target.port, xdm.network.application_protocol,\nxdm.network.protocol_layers, xdm.network.ip_protocol,\nxdm.observer.unique_identifier, xdm.observer.name,\nxdm.observer.action, *"}
{"prompt": "I want to find suspicious reverse shell commands in my system logs.", "response": "datamodel\n| filter ( contains \"BEGIN {s = \\\"/inet/tcp/0/\" or  contains \"bash -i >& /dev/tcp/\" or  contains \"bash -i >& /dev/udp/\" or  contains \"sh -i >$ /dev/udp/\" or  contains \"sh -i >$ /dev/tcp/\" or  contains \"&& while read line 0<&5; do\" or  contains \"/bin/bash -c exec 5<>/dev/tcp/\" or  contains \"/bin/bash -c exec 5<>/dev/udp/\" or  contains \"nc -e /bin/sh \" or  contains \"/bin/sh | nc\" or  contains \"rm -f backpipe; mknod /tmp/backpipe p && nc \" or  contains \";socket(S,PF_INET,SOCK_STREAM,getprotobyname(\\\"tcp\\\"));if(connect(S,sockaddr_in($p,inet_aton($i))))\" or  contains \";STDIN->fdopen($c,r);$~->fdopen($c,w);system$_ while<>;\" or  contains \"/bin/sh -i <&3 >&3 2>&3\" or  contains \"uname -a; w; id; /bin/bash -i\" or  contains \"$sendbyte = ([text.encoding]::ASCII).GetBytes($sendback2); $stream.Write($sendbyte,0,$sendbyte.Length); $stream.Flush()};\" or  contains \";os.dup2(s.fileno(),0);os.dup2(s.fileno(),1);os.dup2(s.fileno(),2);os.putenv('HISTFILE','/dev/null');\" or  contains \".to_i;exec sprintf(\\\"/bin/sh -i <&%d >&%d 2>&%d\\\",f,f,f)\" or  contains \";while(cmd=c.gets);IO.popen(cmd,\\\"r\\\"){|io|c.print\" or  contains \"socat exec:'bash -li',pty,stderr,setsid,sigint,sane tcp:\" or  contains \"rm -f /tmp/p; mknod /tmp/p p &&\" or  contains \" | /bin/bash | telnet \" or  contains \",echo=0,raw tcp-listen:\" or  contains \"nc -lvvp \" or  contains \"xterm -display 1\")\n\n\n\n"}
{"prompt": "{I want to find traffic originating from specific suspicious IPs detected by my Check Point firewall. } \n\n\nLet me know if you have any other XQL queries you need help with!", "response": "config case_sensitive = false\n| datamodel dataset = check_point_vpn_1_firewall_1_raw\n| filter xdm.observer.action ~= \"monitor|accept|alert\" and check_point_vpn_1_firewall_1_raw._final_reporting_device_ip != \"<ip>\"\n| filter xdm.source.ipv4 in (\"<ip>\")\n| alter aggregate_criteria = \"ilsourceip\",\norigin = check_point_vpn_1_firewall_1_raw.origin,\nresult = null,\nuser_agent = null,\nos_edition = null,\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts from Symantec EP that indicate a system infection.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.alert.name ~= \"^System Infected\"\n| filter symantec_ep_raw._raw_log contains \",CIDS Signature string: System Infected:\"\n| alter host_name = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0)),\ncategory = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\"),\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\ntime = _time\n| alter aggregation_criteria = \"ilbpmhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see registry key activity related to Leviathan, specifically looking for entries under \\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ntkd.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\ntkd\"\n\n\n\n"}
{"prompt": "I want to see alerts about Azure Kubernetes RoleBinding and ClusterRoleBinding modifications and deletions.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLEBINDINGS/WRITE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/CLUSTERROLEBINDINGS/DELETE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLEBINDINGS/WRITE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/RBAC.AUTHORIZATION.K8S.IO/ROLEBINDINGS/DELETE\")\n\n\n\n"}
{"prompt": "I want to detect PowerShell scripts that use Invoke-Obfuscation and obfuscate code by interacting with the clipboard.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText ~= \"(?i)echo.*clip.*\\&\\&.*(Clipboard|i\\`?n\\`?v\\`?o\\`?k\\`?e\\`?)\"\n\n\n\n"}
{"prompt": "I want to find any instances where traffic might be related to cryptocurrency connections on my Cisco Firepower devices.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"cryptocurrency\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\"\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect if suspicious services like NalDrv or PROCEXP152 are installed in non-system32 folders through registry changes.", "response": "preset = xdr_registry\n| filter action_registry_key_name in (\"HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\NalDrv\\\\ImagePath\", \"HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\PROCEXP152\\\\ImagePath\") and  not (((actor_process_image_path ~= \".*\\\\procexp64\\.exe\" or actor_process_image_path ~= \".*\\\\procexp\\.exe\" or actor_process_image_path ~= \".*\\\\procmon64\\.exe\" or actor_process_image_path ~= \".*\\\\procmon\\.exe\" or actor_process_image_path ~= \".*\\\\handle\\.exe\" or actor_process_image_path ~= \".*\\\\handle64\\.exe\") and (action_registry_value_name contains \"\\\\WINDOWS\\\\system32\\\\Drivers\\\\PROCEXP152.SYS\" or action_registry_data contains \"\\\\WINDOWS\\\\system32\\\\Drivers\\\\PROCEXP152.SYS\")))\n\n\n\n"}
{"prompt": "I want to see files related to BloodHound collections, excluding those associated with svchost.exe and Windows Apps folders.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*BloodHound\\.zip\" or xdm.target.file.filename ~= \".*\\_computers\\.json\" or xdm.target.file.filename ~= \".*\\_containers\\.json\" or xdm.target.file.filename ~= \".*\\_domains\\.json\" or xdm.target.file.filename ~= \".*\\_gpos\\.json\" or xdm.target.file.filename ~= \".*\\_groups\\.json\" or xdm.target.file.filename ~= \".*\\_ous\\.json\" or xdm.target.file.filename ~= \".*\\_users\\.json\") and  not (((xdm.target.process.name ~= \".*\\\\svchost\\.exe\" or xdm.source.process.name ~= \".*\\\\svchost\\.exe\") and xdm.target.file.filename ~= \"C\\:\\\\Program\\ Files\\\\WindowsApps\\\\Microsoft\\..*\" and xdm.target.file.filename ~= \".*\\\\pocket\\_containers\\.json\"))\n\n\n\n"}
{"prompt": "I want to monitor changes made to \"IS High Privileged Security Groups\" and get alerts if anyone is added or removed from these groups.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id NOT IN (\"4799\")\n| arrayexpand xdm.target.user.groups\n| join type = left\n(dataset = corporate_groups_static_list\n) as JT1 JT1.GROUP_NAME = xdm.target.user.groups\n| filter FEED_NAME IN (\"IS_Intranet_Groups\")\n| filter xdm.source.user.username not in (\"ISCPSBTCPRD\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1),\nxdm.target.user.username = arrayindex(regextract(xdm.event.description, \"Account Name:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_domain\n\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where PowerShell is used to execute ADRecon commands or functions.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Function Get-ADRExcelComOb\" or ScriptBlockText contains \"Get-ADRGPO\" or ScriptBlockText contains \"Get-ADRDomainController\" or ScriptBlockText contains \"ADRecon-Report.xlsx\")\n\n\n\n"}
{"prompt": "I want to see instances where DriverQuery.EXE is being used on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*driverquery\\.exe\" or actor_process_file_original_name = \"drvqry.exe\") and  not (((actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") or (actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\.*\" or actor_process_image_path ~= \".*\\\\Users\\\\Public\\\\.*\" or actor_process_image_path ~= \".*\\\\Windows\\\\Temp\\\\.*\")))\n\n\n\n"}
{"prompt": " I want to see if there's any outbound traffic from PowerShell users that is significantly higher than the average over the last 7 days. ", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and user_agent ~= \"powershell\"\n| comp count() as current_day_traffic,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and user_agent ~= \"powershell\"\n| comp count() as 7_days_traffic,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_traffic) as 7_days_traffic_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_traffic > multiply(7_days_traffic_avg, 1.35)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find instances of malicious processes pretending to be legitimate Windows binaries like msdtc.exe or gpsvc.exe on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\msdtc\\.exe\" or action_process_image_path ~= \".*\\\\gpsvc\\.exe\") and  not ((action_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find suspicious child processes spawned by Veeam SQL Server that might indicate malicious activity.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\sqlservr\\.exe\" and actor_process_image_command_line contains \"VEEAMSQL\") and (((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wsl\\.exe\" or action_process_image_path ~= \".*\\\\wt\\.exe\") and (action_process_image_command_line contains \"-ex \" or action_process_image_command_line contains \"bypass\" or action_process_image_command_line contains \"cscript\" or action_process_image_command_line contains \"DownloadString\" or action_process_image_command_line contains \"http:\n\n\n\n"}
{"prompt": "I want to find potential Petit Potam exploitation attempts by looking for specific network logon events and corresponding system error messages.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4624)\n| alter LogonType = to_integer(event_data -> LogonType),\nSubjectUserName1 = event_data -> SubjectUserName,\nTargetUserName1 = event_data -> TargetUserName,\nLogonProcessName = event_data -> LogonProcessName,\nIpAddress = event_data -> IpAddress,\nWorkstationName = event_data -> WorkstationName\n| filter LogonType in (3)\nand LogonProcessName contains \"lsarpc\" and event_result in (\"success\") and event_action in (\"Logon\") and (SubjectUserName1 contains \"ANONYMOUS LOGON\" and TargetUserName1 contains \"ANONYMOUS LOGON\")\n| join conflict_strategy = both type = inner\n(config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (5145)\n| fields message as message2, event_data as event_data2,\nevent_id as event_id2\n) as step2(step2.message2 ~= SubjectUserName1 or step2.message2 ~= TargetUserName1 or step2.message2 ~= IpAddress)\n| fields *\n| view column order = populated"}
{"prompt": "I want to see a list of failed login attempts to CyberArk PAS Vault servers from AWS hosts along with details like username, error code, and timestamps.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4625\", \"4825\") and (xdm.source.host.hostname ~= \"AWSGPCAVTEIMG01\" or xdm.source.host.hostname ~= \"AWUSECAVTEIMG01\")\n| alter logon_type = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Logon Type:\\t\\t\\t([^\\n]+)\"), 0))\n| alter status_code = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Status:\\t\\t\\t([^\\n]+)\"), 0))\n| alter target_username = if(xdm.event.id IN (\"4825\"), arrayindex(regextract(xdm.event.description, \"User Name:\\t([^\\n]+)\"), 0), xdm.target.user.username)\n| filter ((xdm.event.id IN (\"4625\") and logon_type = \"10\" and status_code = \"0xc000015b\") or xdm.event.id IN (\"4825\"))\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| alter xdm.source.ipv4 = if(xdm.source.ipv4 = null, trim(arrayindex(regextract(xdm.event.description, \"Client Address:\\s([^\\n]+)\"), 0)), xdm.source.ipv4)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, status_code, logon_type, target_username\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to potentially obfuscated ordinal calls made through Rundll32 on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\" or action_process_image_command_line contains \"rundll32\") and (action_process_image_command_line contains \"#+\" or action_process_image_command_line contains \"#-\"))\n\n\n\n"}
{"prompt": "I want to detect if someone is tampering with boot configuration settings using bcdedit.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\bcdedit\\.exe\" or actor_process_file_original_name = \"bcdedit.exe\") and action_process_image_command_line contains \"set\" and ((action_process_image_command_line contains \"bootstatuspolicy\" and action_process_image_command_line contains \"ignoreallfailures\") or (action_process_image_command_line contains \"recoveryenabled\" and action_process_image_command_line contains \"no\")))\n\n\n\n"}
{"prompt": "I want to find URLs that might be used by the Ursnif malware. They often contain \"_2f\" or \"_2b\", and usually include \".avi\" and \"/images/.\"", "response": "datamodel\n| filter (xdm.network.http.url contains \"_2f\" or xdm.network.http.url contains \"_2b\") and (xdm.network.http.url contains \".avi\" and xdm.network.http.url contains \"/images/\")\n\n\n\n"}
{"prompt": "I want to find instances where msdeploy.exe is being used with specific command line arguments that suggest an attempt to evade detection.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"verb:sync\" and action_process_image_command_line contains \"-source:RunCommand\" and action_process_image_command_line contains \"-dest:runCommand\") and action_process_image_path ~= \".*\\\\msdeploy\\.exe\")\n\n\n\n"}
{"prompt": "I want to see events related to login profiles being created or retrieved for the S3 Browser on AWS IAM.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"iam.amazonaws.com\" and eventName in (\"GetLoginProfile\", \"CreateLoginProfile\") and userAgent contains \"S3 Browser\")\n\n\n\n"}
{"prompt": "I want to see how many times users have tried to access LZX files through suspicious User Agents on IIS, along with details about those events like the time, IP address, and username.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.network.http.url ~= \"\\.lzx\" and xdm.network.http.response_code = XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED and xdm.source.user_agent !~= \"microsoft|macoutlook\" and xdm.source.user_agent != \"-\"\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.ipv4\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find suspicious activities related to services that are located in uncommon folders like AppData.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \"HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\.*\" and action_registry_key_name ~= \".*\\\\Start\" and (actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\.*\" or actor_process_image_path ~= \".*\\\\AppData\\\\Roaming\\\\.*\") and (action_registry_value_name in (\"DWORD (0x00000000)\", \"DWORD (0x00000001)\", \"DWORD (0x00000002)\") or action_registry_data in (\"DWORD (0x00000000)\", \"DWORD (0x00000001)\", \"DWORD (0x00000002)\"))) or (action_registry_key_name ~= \"HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\.*\" and action_registry_key_name ~= \".*\\\\ImagePath\" and ((action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_registry_value_name ~= \".*\\\\AppData\\\\Roaming\\\\.*\") or (action_registry_data ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Roaming\\\\.*\")))) and  not (((actor_process_image_path contains \"\\\\AppData\\\\Roaming\\\\Zoom\" or actor_process_image_path contains \"\\\\AppData\\\\Local\\\\Zoom\") or ((action_registry_value_name contains \"\\\\AppData\\\\Roaming\\\\Zoom\" or action_registry_value_name contains \"\\\\AppData\\\\Local\\\\Zoom\") or (action_registry_data contains \"\\\\AppData\\\\Roaming\\\\Zoom\" or action_registry_data contains \"\\\\AppData\\\\Local\\\\Zoom\"))))\n\n\n\n"}
{"prompt": "I want to find events where PowerShell is used to delete volume shadow copies using WMI.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Get-WmiObject\" or ScriptBlockText contains \"gwmi\" or ScriptBlockText contains \"Get-CimInstance\" or ScriptBlockText contains \"gcim\") and ScriptBlockText contains \"Win32_ShadowCopy\" and (ScriptBlockText contains \".Delete()\" or ScriptBlockText contains \"Remove-WmiObject\" or ScriptBlockText contains \"rwmi\" or ScriptBlockText contains \"Remove-CimInstance\" or ScriptBlockText contains \"rcim\"))\n\n\n\n"}
{"prompt": "I want to detect potential password dumping activity targeting the LSASS process on endpoints.", "response": "preset = xdr_event_log\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4656 and ProcessName ~= \".*\\\\lsass\\.exe\" and AccessMask = \"0x705\" and ObjectType = \"SAM_DOMAIN\")\n\n\n\n"}
{"prompt": "I want to see details about changes made to route tables in Azure, including who made the changes, when they happened, and what type of change was performed.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.network/routetables/write\", \"microsoft.network/routetables/delete\", \"microsoft.network/routetables/routes/write\", \"microsoft.network/routetables/routes/delete\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to potential HiveNightmare activity involving SAM file exports.", "response": "datamodel\n| filter ((xdm.target.file.filename contains \"\\\\hive_sam_\" or xdm.target.file.filename contains \"\\\\SAM-2021-\" or xdm.target.file.filename contains \"\\\\SAM-2022-\" or xdm.target.file.filename contains \"\\\\SAM-2023-\" or xdm.target.file.filename contains \"\\\\SAM-haxx\" or xdm.target.file.filename contains \"\\\\Sam.save\") or xdm.target.file.filename = \"C:\\\\windows\\\\temp\\\\sam\")\n\n\n\n"}
{"prompt": "I want to find instances where ldifde.exe is used to export Active Directory data.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\ldifde\\.exe\" or actor_process_file_original_name = \"ldifde.exe\") and action_process_image_command_line contains \"-f\") and  not (action_process_image_command_line contains \" -i\")\n\n\n\n"}
{"prompt": " I want to see suspicious failed logon reasons from Windows security logs on my endpoints. ", "response": "preset = xdr_event_log\n| alter Status = regextract(to_json_string(action_evtlog_data_fields)->Status{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserSid = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserSid{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4625, 4776) and Status in (\"0xC0000072\", \"0xC000006F\", \"0xC0000070\", \"0xC0000413\", \"0xC000018C\", \"0xC000015B\")) and  not (SubjectUserSid = \"S-1-0-0\")\n\n\n\n"}
{"prompt": "I want to find instances of the Exchange Exploitation CVE-2021-28480 exploit.", "response": "datamodel\n| filter (xdm.network.http.url contains \"/owa/calendar/a\" and xdm.network.http.method = \"POST\") and  not (xdm.network.http.response_code = 503)\n\n\n\n"}
{"prompt": "I want to see alerts for potential ACTINIUM persistence activity on endpoints, specifically processes that use \"schtasks\" to create scheduled tasks with VBScript.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"schtasks\" and action_process_image_command_line contains \"create\" and action_process_image_command_line contains \"wscript\" and action_process_image_command_line contains \" /e:vbscript\")\n\n\n\n"}
{"prompt": "{I want to see if the HybridConnectionManager Service is running on my system.} \n\n\nThis prompt directly reflects the query's purpose and uses language a user would naturally employ.", "response": "datamodel\n| filter xdm.event.id in (40300, 40301, 40302) and ( contains \"HybridConnection\" or  contains \"sb:\n\n\n\n"}
{"prompt": "I want to find any LSASS process dumps located in the CrashDumps folder.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\config\\\\systemprofile\\\\AppData\\\\Local\\\\CrashDumps\\\\.*\" and xdm.target.file.filename contains \"lsass.exe.\" and xdm.target.file.filename ~= \".*\\.dmp\")\n\n\n\n"}
{"prompt": "I want to find instances where a user logged in after more than 7 days have passed since their last successful Kerberos TGT grant.", "response": "dataset = microsoft_windows_raw\n| filter event_id = 4768 and event_result = \"success\"\n| alter TargetUserName = json_extract_scalar(event_data, \"$.TargetUserName\")\n| comp max(_time) as last_tgt_time by TargetUserName,\nevent_id,\nevent_result\n| join\n(dataset = microsoft_windows_raw\n| filter event_id = 4624 and event_result = \"success\"\n| alter TargetUserName = json_extract_scalar(event_data, \"$.TargetUserName\"),\nWorkstationName = json_extract_scalar(event_data, \"$.WorkstationName\"),\nLogonType = json_extract_scalar(event_data, \"$.LogonType\"),\nIpAddress = json_extract_scalar(event_data, \"$.IpAddress\")\n| filter TargetUserName !~= \".*\\$\" and timestamp_diff(current_time(), _time, \"minute\") < 10\n| comp min(_time) as authentication_time,\nvalues(WorkstationName) as LoginWorkstationName,\nvalues(LogonType) as LogonType,\nvalues(IpAddress) as LoginIpAddress by TargetUserName,\nevent_id,\nevent_result\n) as login login.TargetUserName = TargetUserName\n| filter timestamp_diff(authentication_time, last_tgt_time, \"DAY\") > 6"}
{"prompt": "I want to see all Swift messages where the outcome reason is \"Automatic Session Not Started\" and format the event time as YYYY-MM-DD HH:MM:SS.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"Automatic Session Not Started\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find detections related to Microsoft Office Protected View being disabled.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Office\\\\.*\" and action_registry_key_name ~= \".*\\\\Security\\\\ProtectedView\\\\.*\") and (((action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\") and (action_registry_key_name ~= \".*\\\\DisableAttachementsInPV\" or action_registry_key_name ~= \".*\\\\DisableInternetFilesInPV\" or action_registry_key_name ~= \".*\\\\DisableIntranetCheck\" or action_registry_key_name ~= \".*\\\\DisableUnsafeLocationsInPV\")) or ((action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\") and (action_registry_key_name ~= \".*\\\\enabledatabasefileprotectedview\" or action_registry_key_name ~= \".*\\\\enableforeigntextfileprotectedview\")))\n\n\n\n"}
{"prompt": "I want to detect suspicious LOLBIN execution from drives other than C:\\.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cmstp\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\installutil\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or actor_process_file_original_name in (\"CALC.EXE\", \"CertUtil.exe\", \"CMSTP.EXE\", \"cscript.exe\", \"installutil.exe\", \"MSHTA.EXE\", \"REGSVR32.EXE\", \"RUNDLL32.EXE\", \"wscript.exe\")) and  not (action_process_cwd ~= \".*C\\:\\\\.*\" or action_process_cwd = \"\" or action_process_cwd = \"None\")\n\n\n\n"}
{"prompt": "I want to find events related to UNC4841 activity, specifically processes that download tar files from untrusted direct IP addresses using wget and disable certificate checks.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/wget\" and action_process_image_command_line ~= \"https\\:\\/\\/[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\" and action_process_image_command_line contains \"--no-check-certificate\" and action_process_image_command_line ~= \".*\\.tar\") and  not ((action_process_image_command_line contains \"https:\n\n\n\n"}
{"prompt": "I want to see alerts about when Azure Application Gateways are modified or deleted.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.NETWORK/APPLICATIONGATEWAYS/WRITE\", \"MICROSOFT.NETWORK/APPLICATIONGATEWAYS/DELETE\")\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that enumerate hotfixes on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Win32_QuickFixEngineering\" and ScriptBlockText contains \"HotFixID\")\n\n\n\n"}
{"prompt": "I want to see if non-admin users are creating or deleting security groups on my Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4730\", \"4734\", \"4654\", \"4758\", \"4727\", \"4731\") and microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, xdm.event.description,\nevent_type, xdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, _insert_time,\ndevice_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"PAM_windows\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see information about outbound ICMP flood attacks detected by Cisco ASA, Fortinet Fortigate, and SonicWall NS devices.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter (xdm.source.is_internal_ip = true and xdm.target.is_internal_ip = false) and xdm.network.ip_protocol = \"\"\"ICMP\"\"\" and xdm.source.sent_packets >= 60000 and xdm.event.duration >= 60000000000\n| fields *"}
{"prompt": "I want to see activity that looks like Cobalt Strike is using Amazon browsing traffic for evasion.", "response": "datamodel\n| filter ((xdm.network.http.browser = \"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko\" and xdm.network.http.method = \"GET\" and xdm.network.http.url = \"/s/ref=nb_sb_noss_1/167-3294888-0262949/field-keywords=books\" and xdm.network.http.domain = \"www.amazon.com\" and xdm.network.http.http_header.value ~= \".*\\=csm\\-hit\\=s\\-24KU11BB82RZSYGJ3BDK\\|1419899012996\") or (xdm.network.http.browser = \"Mozilla/5.0 (Windows NT 6.1; WOW64; Trident/7.0; rv:11.0) like Gecko\" and xdm.network.http.method = \"POST\" and xdm.network.http.url = \"/N4215/adj/amzn.us.sr.aps\" and xdm.network.http.domain = \"www.amazon.com\"))\n\n\n\n"}
{"prompt": " I want to see CyberArk privileged activities where the target user is \"Administrator\" or \"administrator\", and the source user is not \"skyboxlb\", null, or empty string. Also, exclude events from station \"10.64.103.83\" and device IP \"10.64.103.83\". ", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_src = xdm.target.user.username,\nuser_dst = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station != \"10.64.103.83\" and device_ip != \"10.64.103.83\"\n| filter user_dst in (\"Administrator\", \"administrator\") and user_src not in (\"skyboxlb\", null, \"\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for when someone attaches a malicious Lambda layer to an existing function on AWS.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"lambda.amazonaws.com\" and eventName ~= \"UpdateFunctionConfiguration.*\")\n\n\n\n"}
{"prompt": "I want to see details about multiple failed remote login attempts on isg unix servers within the last minute.", "response": "datamodel dataset = linux_linux_raw\n| bin _time span = 1m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE contains \"isg_server\" and TYPE not in (\"isg_server_qualys_src\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type in (\"login\", \"SSH\", \"sshd\", \"sssh\", \"User\", \"groupdel\", \"audit\", \"Successfully\", \"auditd\", \"input_userauth_request\", \"Accepted\", \"sudo\", \"userdel\", \"root\", \"Failed\", \"usermod\", \"su\", \"LOGIN\", \"passwd\", \"pam_authenticate\", \"unix_chkpwd\") and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol = \"ssh2\" and xdm.source.user.username not in (null, NULL) and xdm.source.ipv4 not in (\"10.181.11.142\", \"10.156.118.117\", \"10.82.136.11\", \"10.10.100.68\", \"10.122.128.21\", \"10.152.163.42\", \"172.18.20.31\", \"172.18.38.149\", \"10.182.11.41\", \"172.18.1.25\", \"10.67.122.149\", \"10.219.7.67\", \"10.95.9.148\", \"10.118.132.98\", \"172.27.104.10\", \"10.122.128.20\", \"10.219.7.68\", \"10.139.38.106\", \"172.18.22.85\", \"10.67.122.151\", \"10.185.122.10\", \"10.76.63.68\", \"10.205.11.115\", \"10.67.122.150\", \"10.158.100.43\", \"10.82.136.10\", \"10.85.174.246\", \"10.78.172.244\", \"172.18.22.176\", \"10.204.11.97\", \"10.87.22.109\", \"10.67.122.148\", \"10.156.118.116\", \"172.18.43.37\", \"10.82.136.12\", \"10.139.38.107\")\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, linux_linux_raw._final_reporting_device_ip,\n_vendor, _product\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to create a rule called \"Example Rule Name for Team\" that only triggers if the dataset is named \"notreal\".  ", "response": "dataset = notreal"}
{"prompt": "I want to see alerts about processes trying to execute DumpMinitool on endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\DumpMinitool\\.exe\" or action_process_image_path ~= \".*\\\\DumpMinitool\\.x86\\.exe\" or action_process_image_path ~= \".*\\\\DumpMinitool\\.arm64\\.exe\") or actor_process_file_original_name in (\"DumpMinitool.exe\", \"DumpMinitool.x86.exe\", \"DumpMinitool.arm64.exe\")) and (action_process_image_command_line contains \" Full\" or action_process_image_command_line contains \" Mini\" or action_process_image_command_line contains \" WithHeap\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to Windows Defender being disabled on my endpoints.", "response": "datamodel\n| filter xdm.event.id in (5001, 5010, 5012, 5101)\n\n\n\n"}
{"prompt": "I want to see a list of all operations grouped by username.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.network/routetables/write\", \"microsoft.network/routetables/delete\", \"microsoft.network/routetables/routes/write\", \"microsoft.network/routetables/routes/delete\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where cmd.exe is being used with a suspicious URL and AppData strings in the command line.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\cmd\\.exe\" and (action_process_image_command_line contains \"http\" and action_process_image_command_line contains \":\n\n\n\n"}
{"prompt": "I want to find detections of crypto miners using XMRig or ccminer in the Datamodel.", "response": "datamodel\n| filter (xdm.network.http.browser ~= \"XMRig\\ .*\" or xdm.network.http.browser ~= \"ccminer.*\")\n\n\n\n"}
{"prompt": "I want to see alerts for lockouts happening on the same workstation or system where multiple login failures occur within a 45-minute period.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| bin _time span = 15m\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| alter hostname = json_extract_scalar(microsoft_windows_raw.event_data, \"$.TargetDomainName\")\n| filter xdm.event.id in (\"4740\") and hostname != null and hostname !~= \"(none)\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, hostname, _time\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by hostname,\n_time\n| alter usercounts = array_length(xdm.target.user.username)\n| filter usercounts >= 5\n| alter aggregation_criteria = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where an application was terminated using wmic.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\WMIC\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and (action_process_image_command_line contains \"call\" and action_process_image_command_line contains \"terminate\"))\n\n\n\n"}
{"prompt": "I want to see terminated user activity related to any Symantec Antivirus events for users in the SEPX OU.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.source.user.sam_account_name != null and xdm.source.user.sam_account_name !~= \"system|none\"\n| alter host_name = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| join type = left\n(preset = ad_users\n| fields sam_account_name, OU, security_group_list,\nmember_of\n) as adusers adusers.sam_account_name = xdm.source.user.sam_account_name\n| filter sam_account_name != null and OU contains \"SEPX\"\n| comp values(xdm.event.type) as event_type,\nvalues(xdm.observer.action) as action,\nvalues(host_name) as host_name,\nvalues(to_string(OU)) as org_unit by xdm.source.user.sam_account_name"}
{"prompt": "I want to see all instances where macOS uses the \"screencapture\" command.", "response": "preset = xdr_process\n| filter action_process_image_path = \"/usr/sbin/screencapture\"\n\n\n\n"}
{"prompt": "I want to see when any user is added to the built-in administrators group on Windows Server.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4732) and os_subtype ~= \"Windows Server\"\n| alter SourceUserName = event_data -> SubjectUserName,\nSourceDomainName = event_data -> SubjectDomainName,\nTargetUserName = arrayindex(regextract(message, \"Account Name:\\t\\tCN=(.*?)\\,\"), 0),\nTargetDomainName = event_data -> TargetDomainName,\nTargetGroupName = arrayindex(regextract(message, \"Group Name:\\t\\t(.*?)\\r\\n\\tGroup Domain\"), 0)\n| filter SourceUserName not contains \"$\" and SourceUserName != NULL and TargetDomainName ~= \"Builtin\" and TargetGroupName ~= \"Administrators\" and TargetUserName not contains \"$\" and TargetUserName != NULL"}
{"prompt": "I want to see all DNS queries that interact with domains potentially used for malicious purposes like .interact.sh or known C2 infrastructure.", "response": "datamodel\n| filter (xdm.network.dns.dns_question.name contains \".interact.sh\" or xdm.network.dns.dns_question.name contains \".oast.pro\" or xdm.network.dns.dns_question.name contains \".oast.live\" or xdm.network.dns.dns_question.name contains \".oast.site\" or xdm.network.dns.dns_question.name contains \".oast.online\" or xdm.network.dns.dns_question.name contains \".oast.fun\" or xdm.network.dns.dns_question.name contains \".oast.me\" or xdm.network.dns.dns_question.name contains \".burpcollaborator.net\" or xdm.network.dns.dns_question.name contains \".oastify.com\" or xdm.network.dns.dns_question.name contains \".canarytokens.com\" or xdm.network.dns.dns_question.name contains \".requestbin.net\" or xdm.network.dns.dns_question.name contains \".dnslog.cn\")\n\n\n\n"}
{"prompt": "I want to see events related to suspicious anonymous logons of local accounts on endpoints.", "response": "preset = xdr_event_log\n| alter SamAccountName = regextract(to_json_string(action_evtlog_data_fields)->SamAccountName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4720 and (SamAccountName contains \"ANONYMOUS\" and SamAccountName contains \"LOGON\"))\n\n\n\n"}
{"prompt": "I want to see events where someone used SVCCTL with write access to remote services over a named pipe.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| alter Accesses = regextract(to_json_string(action_evtlog_data_fields)->Accesses{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName = \"\\\\\\\\\\*\\\\IPC$\" and RelativeTargetName = \"svcctl\" and Accesses contains \"WriteData\")\n\n\n\n"}
{"prompt": "I want to see Windows Defender exclusions that were added through the registry.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\Microsoft\\\\Windows Defender\\\\Exclusions\"\n\n\n\n"}
{"prompt": "I want to detect suspicious connections made through named pipes to the AD FS configuration database using uncommon tools.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| alter Image = regextract(to_json_string(action_evtlog_data_fields)->Image{}, \"\\\"(.*)\\\"\")\n| filter PipeName = \"\\\\MICROSOFT##WID\\\\tsql\\\\query\" and  not ((Image ~= \".*\\:\\\\Windows\\\\System32\\\\mmc\\.exe\" or Image ~= \".*\\:\\\\Windows\\\\system32\\\\svchost\\.exe\" or Image ~= \".*\\:\\\\Windows\\\\System32\\\\wsmprovhost\\.exe\" or Image ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\mmc\\.exe\" or Image ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\wsmprovhost\\.exe\" or Image ~= \".*\\:\\\\Windows\\\\WID\\\\Binn\\\\sqlwriter\\.exe\" or Image ~= \".*\\\\AzureADConnect\\.exe\" or Image ~= \".*\\\\Microsoft\\.Identity\\.Health\\.Adfs\\.PshSurrogate\\.exe\" or Image ~= \".*\\\\Microsoft\\.IdentityServer\\.ServiceHost\\.exe\" or Image ~= \".*\\\\Microsoft\\.Tri\\.Sensor\\.exe\" or Image ~= \".*\\\\sqlservr\\.exe\" or Image ~= \".*\\\\tssdis\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see events related to PowerShell processes running from unusual locations.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| alter Image = regextract(to_json_string(action_evtlog_data_fields)->Image{}, \"\\\"(.*)\\\"\")\n| filter PipeName ~= \"\\\\PSHost.*\" and  not ((Image contains \":\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.exe\" or Image contains \":\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe\" or Image contains \":\\\\Windows\\\\system32\\\\dsac.exe\" or Image contains \":\\\\Windows\\\\system32\\\\inetsrv\\\\w3wp.exe\" or Image contains \":\\\\Windows\\\\System32\\\\sdiagnhost.exe\" or Image contains \":\\\\Windows\\\\system32\\\\ServerManager.exe\" or Image contains \":\\\\Windows\\\\system32\\\\wbem\\\\wmiprvse.exe\" or Image contains \":\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe\" or Image contains \":\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\" or Image contains \":\\\\Windows\\\\System32\\\\wsmprovhost.exe\" or Image contains \":\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell_ise.exe\" or Image contains \":\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\") or ((Image contains \":\\\\Program Files\" and Image ~= \".*\\\\Microsoft\\ SQL\\ Server\\\\.*\") and Image ~= \".*\\\\Tools\\\\Binn\\\\SQLPS\\.exe\") or Image = \"None\") and  not (Image ~= \".*\\:\\\\Program\\ Files\\\\Citrix\\\\.*\" or Image ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\\\Exchange\\ Server\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find potential brute force attacks targeting domain admin accounts where multiple failed login attempts occur within a short timeframe.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (4625) and _collector_type in (\"XDR Collector\")\n| alter TargetUserName = event_data -> TargetUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nSubjectUserSid = event_data -> SubjectUserSid,\nTargetDomainName = event_data -> TargetDomainName,\nStatus = event_data -> Status,\nProcessId = event_data -> ProcessId,\nSubjectUserName = event_data -> SubjectUserName,\nSubjectLogonId = event_data -> SubjectLogonId,\nTargetUserSid = event_data -> TargetUserSid,\nFailureReason = event_data -> FailureReason,\nSubStatus = event_data -> SubStatus,\nSubStatusDescription = \"Account is currently disabled\",\nLogonType = event_data -> LogonType,\nLogonProcessName = event_data -> LogonProcessName,\nAuthenticationPackageName = event_data -> AuthenticationPackageName,\nWorkstationName = event_data -> WorkstationName,\nTransmittedServices = event_data -> TransmittedServices,\nLmPackageName = event_data -> LmPackageName,\nKeyLength = event_data -> KeyLength,\nProcessName = event_data -> ProcessName,\nIpAddress = event_data -> IpAddress,\nIpPort = event_data -> IpPort\n| filter (TargetUserName in (\"adssp.service\", \"IST-ISAID\", \"jonesj\", \"jflores\", \"minerva.khuele\", \"singhals\", \"siamert\", \"vbanaag\", \"Patela.Dadmin\", \"vbanng\", \"brunonc.dadmin\", \"dudgeon.viona\", \"huelek\", \"saadmin\", \"jonesj\", \"kendricks.dadmin\", \"singhals\", \"stephenh.dadmin\", \"veermanp.dadmin\", \"ricardob\", \"cian.thunder\", \"patrick.murphy\", \"billy.kirkpatrick\", \"Russell.Jefferson\", \"Borislav.Nance\", \"EscobarLin\", \"banaagv\", \"Michael.Clarkson\", \"keifer.gimenez\", \"laong.laan\", \"tim.rivers\", \"Jarrett.jenkins\", \"alex.duke\", \"henry.reeves\", \"Jeff.mills\", \"saul.silvanus\", \"parker.vega\", \"pharrell.hill\", \"patela\"))\n| comp min(_time) as First_EventTimestamp,\nmax(_time) as Latest_EventTimestamp,\nvalues(event_data) as EventData_List,\nvalues(message) as Message_Data_List,\ncount() as EventCount by TargetUserName,\nevent_id,\nevent_action,\nevent_result,\n_time,\n_collector_hostname,\n_collector_type\n| alter Events_TimeDiff_in_Seconds = timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\"),\nAlert_Cat = \"Brute Force\"\n| filter EventCount >= 5 and timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\") <= 60"}
{"prompt": "I want to see when audit logs were cleared from Windows Server devices and who performed the action.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (1102) and os_subtype contains \"Windows Server\"\n| alter UserName = arrayindex(regextract(message, \"Account Name:\\t(.*?)\\r\\n\\t\"), 0)\n| filter UserName not contains \"$\" and UserName not in (null, NULL, \"\"\"\"\"\")"}
{"prompt": "I want to see connections that might indicate lateral movement using TCP on port 135, excluding connections from known system processes.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (action_network_protocol = \"tcp\" and Initiated = \"true\" and (action_local_port = 135 or action_remote_port = 135)) and  not ((actor_process_image_path ~= \"C\\:\\\\Windows\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\ProgramData\\\\Amazon\\\\SSM\\\\Update\\\\amazon\\-ssm\\-agent\\-updater.*\") or actor_process_image_path = \"None\" or actor_process_image_path = \"\" or actor_process_image_path = \"<unknown process>\")\n\n\n\n"}
{"prompt": "I want to find suspicious events related to camera and microphone access on Windows systems.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\CapabilityAccessManager\\\\ConsentStore\\\\.*\" and action_registry_key_name contains \"\\\\NonPackaged\") and (action_registry_key_name contains \"microphone\" or action_registry_key_name contains \"webcam\") and (action_registry_key_name contains \":#Windows#Temp#\" or action_registry_key_name contains \":#$Recycle.bin#\" or action_registry_key_name contains \":#Temp#\" or action_registry_key_name contains \":#Users#Public#\" or action_registry_key_name contains \":#Users#Default#\" or action_registry_key_name contains \":#Users#Desktop#\"))\n\n\n\n"}
{"prompt": "I want to find instances where processes are using the Windows Registry TypedPaths location in their command lines as a potential persistence method.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\TypedPaths\"\n\n\n\n"}
{"prompt": "I want to find events where Bitsadmin is used to download files to suspicious folders on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or actor_process_file_original_name = \"bitsadmin.exe\") and (action_process_image_command_line contains \" /transfer \" or action_process_image_command_line contains \" /create \" or action_process_image_command_line contains \" /addfile \") and (action_process_image_command_line contains \":\\\\Perflogs\" or action_process_image_command_line ~= \".*\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\" or action_process_image_command_line contains \"%ProgramData%\" or action_process_image_command_line contains \"%public%\"))\n\n\n\n"}
{"prompt": "I want to see alerts for processes that exhibit suspicious VBScript behavior similar to UN2452, including actions like executing code, creating objects, reading registry keys, and closing windows.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Execute\" and action_process_image_command_line contains \"CreateObject\" and action_process_image_command_line contains \"RegRead\" and action_process_image_command_line contains \"window.close\" and action_process_image_command_line contains \"\\\\Microsoft\\\\Windows\\\\CurrentVersion\") and  not (action_process_image_command_line contains \"\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\")\n\n\n\n"}
{"prompt": "I want to detect activities associated with the Lazarus Group using process creation events on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"reg.exe save hklm\\\\sam %temp%\\\\~reg_sam.save\" or action_process_image_command_line contains \"1q2w3e4r@#$@#$@#$\" or action_process_image_command_line contains \" -hp1q2w3e4 \" or action_process_image_command_line contains \".dat data03 10000 -p \") or (action_process_image_command_line contains \"netstat -aon | find \" and action_process_image_command_line contains \"ESTA\" and action_process_image_command_line contains \" > %temp%\\\\~\") or (action_process_image_command_line ~= \".*\\.255\\ 10\\ C\\:\\\\ProgramData\\\\IBM\\\\.*\" and action_process_image_command_line contains \".DAT\") or ((action_process_image_command_line contains \" /c \" and action_process_image_command_line contains \" -p 0x\") and (action_process_image_command_line ~= \".*C\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\RECYCLER\\\\.*\")) or ((action_process_image_command_line contains \"rundll32 \" and action_process_image_command_line ~= \".*C\\:\\\\ProgramData\\\\.*\") and (action_process_image_command_line contains \".bin,\" or action_process_image_command_line contains \".tmp,\" or action_process_image_command_line contains \".dat,\" or action_process_image_command_line contains \".io,\" or action_process_image_command_line contains \".ini,\" or action_process_image_command_line contains \".db,\")))\n\n\n\n"}
{"prompt": " I want to find instances of Regsvr32 being used with uncommon file extensions. ", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_file_original_name = \"REGSVR32.EXE\") and  not ((action_process_image_command_line contains \".ax\" or action_process_image_command_line contains \".cpl\" or action_process_image_command_line contains \".dll\" or action_process_image_command_line contains \".ocx\") or action_process_image_command_line = \"None\" or action_process_image_command_line = \"\") and  not (action_process_image_command_line contains \".ppl\" or action_process_image_command_line contains \".bav\")\n\n\n\n"}
{"prompt": "I want to see a list of all user account enable/disable events on my Windows devices, excluding specific users and those from certain sources.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type)\n| filter xdm.event.id in (\"4277\", \"4725\") and xdm.target.user.username not in (\"CCD\") and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.target.user.username not in (\"Vinod_Krishnan04\", \"Thanigaivel_G01\", \"Renju_nettady\", \"sathish_kumarkp\", \"jayagovind\", \"chandrasekhar_m05\", \"bhaskar\", \"Vishwanath_BN\", \"suresh_kumars\", \"shashanka_vemula\", \"Rupesh_Dalvi01\", \"ak_jain\", \"harisha_nk\", \"jsenthil_kumar\", \"SanjeevKumar_Shahi\", \"nataraj_sm\", \"Kushal_Raut\", \"mohit_sharma27\", \"Aravindh_VM\", \"Sakthivel_Muthu\", \"Swaroop_Bopaiah\", \"VikramSingh_Jadon\", \"bharat_pise\", \"ayesh_sanap\", \"pranav_thombre\", \"chandrahas_sharma\", \"prashant_nikam03\", \"mohit_tyagi02\", \"arvind_gidroniya\", \"nandakumar_nk01\", \"girish_pande01\", \"Phillipjay_Estudillo\", \"Alok_Chaudhary\", \"Jaroslaw_Karasinski\", \"jaroslaw_szelag\", \"dawid_piotrowski\", \"T_Ciemnoczulowski\", \"Blue_Chu\", \"Leos_Koukal\", \"kukol_ivan\", \"juan_lopez\", \"Jason_k\", \"Mark_Lynn\", \"jack_taffar\", \"Mark_Kitchens\", \"carroll_garvin\", \"Simon_Strauss\", \"Winston_Parham\", \"Tom_Ge\", \"Allen.Huang01\", \"siju_george\", \"Blue_Chu\", null, \"\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find network connections made by executables to known ngrok tunneling domains like tunnel.us.ngrok.com.", "response": "preset = network_story\n| filter (action_external_hostname contains \"tunnel.us.ngrok.com\" or action_external_hostname contains \"tunnel.eu.ngrok.com\" or action_external_hostname contains \"tunnel.ap.ngrok.com\" or action_external_hostname contains \"tunnel.au.ngrok.com\" or action_external_hostname contains \"tunnel.sa.ngrok.com\" or action_external_hostname contains \"tunnel.jp.ngrok.com\" or action_external_hostname contains \"tunnel.in.ngrok.com\")\n\n\n\n"}
{"prompt": "I want to find potential Mimikatz activity on my endpoints using PowerShell scripts.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"DumpCreds\" and ScriptBlockText contains \"DumpCerts\") or ScriptBlockText contains \"sekurlsa::logonpasswords\" or (ScriptBlockText contains \"crypto::certificates\" and ScriptBlockText contains \"CERT_SYSTEM_STORE_LOCAL_MACHINE\"))\n\n\n\n"}
{"prompt": "I want to see events about successful EC2 instance exports from AWS.", "response": "dataset = amazon_aws_raw\n| filter (eventName = \"CreateInstanceExportTask\" and eventSource = \"ec2.amazonaws.com\") and  not (errorMessage contains \"*\" or errorCode contains \"*\" or responseElements contains \"Failure\")\n\n\n\n"}
{"prompt": "I want to see events where PowerShell is using classes from the System.Security.Cryptography namespace.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and action_process_image_command_line contains \"System.Security.Cryptography.\" and (action_process_image_command_line contains \".AesCryptoServiceProvider\" or action_process_image_command_line contains \".DESCryptoServiceProvider\" or action_process_image_command_line contains \".DSACryptoServiceProvider\" or action_process_image_command_line contains \".RC2CryptoServiceProvider\" or action_process_image_command_line contains \".Rijndael\" or action_process_image_command_line contains \".RSACryptoServiceProvider\" or action_process_image_command_line contains \".TripleDESCryptoServiceProvider\"))\n\n\n\n"}
{"prompt": "I want to find instances where processes might be attempting to dump LSASS credentials based on keywords in their command lines.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"lsass.dmp\" or action_process_image_command_line contains \"lsass.zip\" or action_process_image_command_line contains \"lsass.rar\" or action_process_image_command_line contains \"Andrew.dmp\" or action_process_image_command_line contains \"Coredump.dmp\" or action_process_image_command_line contains \"NotLSASS.zip\" or action_process_image_command_line contains \"lsass_2\" or action_process_image_command_line contains \"lsassdump\" or action_process_image_command_line contains \"lsassdmp\") or (action_process_image_command_line contains \"lsass\" and action_process_image_command_line contains \".dmp\") or (action_process_image_command_line contains \"SQLDmpr\" and action_process_image_command_line contains \".mdmp\") or (action_process_image_command_line contains \"nanodump\" and action_process_image_command_line contains \".dmp\"))\n\n\n\n"}
{"prompt": "I want to detect attacks where Excel uses wmic to execute regsvr32 with malicious payloads by looking for suspicious command-line arguments and parent-child process relationships.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wbem\\\\WMIC\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and ((action_process_image_command_line contains \"regsvr32\" or action_process_image_command_line contains \"rundll32\" or action_process_image_command_line contains \"msiexec\" or action_process_image_command_line contains \"mshta\" or action_process_image_command_line contains \"verclsid\") and (actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\") and (action_process_image_command_line contains \"process\" and action_process_image_command_line contains \"create\" and action_process_image_command_line contains \"call\")))\n\n\n\n"}
{"prompt": "I want to see all WMI Event Subscriptions with IDs 19, 20, and 21.", "response": "datamodel\n| filter xdm.event.id in (19, 20, 21)\n\n\n\n"}
{"prompt": "I want to find suspicious instances of PowerShell executing Invoke-WebRequest commands that download files to common temporary or user directories.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"curl \" or action_process_image_command_line contains \"Invoke-WebRequest\" or action_process_image_command_line contains \"iwr \" or action_process_image_command_line contains \"wget \") and (action_process_image_command_line contains \" -ur\" or action_process_image_command_line contains \" -o\") and (action_process_image_command_line ~= \".*\\\\AppData\\\\.*\" or action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\" or action_process_image_command_line ~= \".*\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line contains \"%AppData%\" or action_process_image_command_line contains \"%Public%\" or action_process_image_command_line contains \"%Temp%\" or action_process_image_command_line contains \"%tmp%\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts for potential buffer overflow attacks targeting IIS web servers.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| join type = left\n(dataset = device_group_static_list\n| filter TYPE ~= \"microsoft iis\"\n| fields IP\n) as device_group device_group.IP = xdm.target.ipv4\n| filter IP != null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.network.http.url ~= \"(A){10,100}\" or xdm.network.http.url ~= \"(<){10,100}\" or xdm.target.url ~= \"(../){10,100}\"\n| filter xdm.target.ipv4 not in (\"<ip>\") and xdm.source.ipv4 not in (\"<ip>\")\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events where Netsh.exe is used to whitelist programs in the firewall, especially if it's running from suspicious locations.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and ((action_process_image_command_line contains \"firewall\" and action_process_image_command_line contains \"add\" and action_process_image_command_line contains \"allowedprogram\") or (action_process_image_command_line contains \"advfirewall\" and action_process_image_command_line contains \"firewall\" and action_process_image_command_line contains \"add\" and action_process_image_command_line contains \"rule\" and action_process_image_command_line contains \"action=allow\" and action_process_image_command_line contains \"program=\")) and (action_process_image_command_line ~= \".*\\:\\\\\\$Recycle\\.bin\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\RECYCLER\\.BIN\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\RECYCLERS\\.BIN\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\SystemVolumeInformation\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Default\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Desktop\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\addins\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\cursors\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\debug\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\drivers\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\fonts\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\help\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\system32\\\\tasks\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Downloads\\\\.*\" or action_process_image_command_line ~= \".*\\\\Local\\ Settings\\\\Temporary\\ Internet\\ Files\\\\.*\" or action_process_image_command_line ~= \".*\\\\Temporary\\ Internet\\ Files\\\\Content\\.Outlook\\\\.*\" or action_process_image_command_line ~= \".*\\%Public\\%\\\\.*\" or action_process_image_command_line contains \"%TEMP%\" or action_process_image_command_line contains \"%TMP%\"))\n\n\n\n"}
{"prompt": "I want to see alerts about processes created by SYSTEM users that might be suspicious, like those using unusual usernames or executing specific commands.", "response": "preset = xdr_process\n| filter ((action_process_integrity_level = \"System\" and (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\")) and ((action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\hh\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\forfiles\\.exe\" or action_process_image_path ~= \".*\\\\ping\\.exe\") or (action_process_image_command_line contains \" -NoP \" or action_process_image_command_line contains \" -W Hidden \" or action_process_image_command_line contains \" -decode \" or action_process_image_command_line contains \" /decode \" or action_process_image_command_line contains \" /urlcache \" or action_process_image_command_line contains \" -urlcache \" or action_process_image_command_line contains \" -e* JAB\" or action_process_image_command_line contains \" -e* SUVYI\" or action_process_image_command_line contains \" -e* SQBFAFgA\" or action_process_image_command_line contains \" -e* aWV4I\" or action_process_image_command_line contains \" -e* IAB\" or action_process_image_command_line contains \" -e* PAA\" or action_process_image_command_line contains \" -e* aQBlAHgA\" or action_process_image_command_line contains \"vssadmin delete shadows\" or action_process_image_command_line contains \"reg SAVE HKLM\" or action_process_image_command_line contains \" -ma \" or action_process_image_command_line contains \"Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\" or action_process_image_command_line contains \".downloadstring(\" or action_process_image_command_line contains \".downloadfile(\" or action_process_image_command_line contains \" /ticket:\" or action_process_image_command_line contains \"dpapi::\" or action_process_image_command_line contains \"event::clear\" or action_process_image_command_line contains \"event::drop\" or action_process_image_command_line contains \"id::modify\" or action_process_image_command_line contains \"kerberos::\" or action_process_image_command_line contains \"lsadump::\" or action_process_image_command_line contains \"misc::\" or action_process_image_command_line contains \"privilege::\" or action_process_image_command_line contains \"rpc::\" or action_process_image_command_line contains \"sekurlsa::\" or action_process_image_command_line contains \"sid::\" or action_process_image_command_line contains \"token::\" or action_process_image_command_line contains \"vault::cred\" or action_process_image_command_line contains \"vault::list\" or action_process_image_command_line contains \" p::d \" or action_process_image_command_line contains \";iex(\" or action_process_image_command_line contains \"MiniDump\" or action_process_image_command_line contains \"net user \"))) and  not (action_process_image_command_line = \"ping 127.0.0.1 -n 5\" or (action_process_image_path ~= \".*\\\\PING\\.EXE\" and actor_process_image_command_line contains \"\\\\DismFoDInstall.cmd\") or actor_process_image_path ~= \".*\\:\\\\Packages\\\\Plugins\\\\Microsoft\\.GuestConfiguration\\.ConfigurationforWindows\\\\.*\" or ((actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Java\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Java\\\\.*\") and actor_process_image_path ~= \".*\\\\bin\\\\javaws\\.exe\" and (action_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Java\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Java\\\\.*\") and action_process_image_path ~= \".*\\\\bin\\\\jp2launcher\\.exe\" and action_process_image_command_line contains \" -ma \"))\n\n\n\n"}
{"prompt": "I want to find potential attempts to uninstall or tamper with security products using WMIC commands on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"wmic\" and action_process_image_command_line contains \"product where \" and action_process_image_command_line contains \"call\" and action_process_image_command_line contains \"uninstall\" and action_process_image_command_line contains \"/nointeractive\") or ((action_process_image_command_line contains \"wmic\" and action_process_image_command_line contains \"caption like \") and (action_process_image_command_line contains \"call delete\" or action_process_image_command_line contains \"call terminate\")) or (action_process_image_command_line contains \"process \" and action_process_image_command_line contains \"where \" and action_process_image_command_line contains \"delete\")) and (action_process_image_command_line contains \"%carbon%\" or action_process_image_command_line contains \"%cylance%\" or action_process_image_command_line contains \"%endpoint%\" or action_process_image_command_line contains \"%eset%\" or action_process_image_command_line contains \"%malware%\" or action_process_image_command_line contains \"%Sophos%\" or action_process_image_command_line contains \"%symantec%\" or action_process_image_command_line contains \"Antivirus\" or action_process_image_command_line contains \"AVG \" or action_process_image_command_line contains \"Carbon Black\" or action_process_image_command_line contains \"CarbonBlack\" or action_process_image_command_line contains \"Cb Defense Sensor 64-bit\" or action_process_image_command_line contains \"Crowdstrike Sensor\" or action_process_image_command_line contains \"Cylance \" or action_process_image_command_line contains \"Dell Threat Defense\" or action_process_image_command_line contains \"DLP Endpoint\" or action_process_image_command_line contains \"Endpoint Detection\" or action_process_image_command_line contains \"Endpoint Protection\" or action_process_image_command_line contains \"Endpoint Security\" or action_process_image_command_line contains \"Endpoint Sensor\" or action_process_image_command_line contains \"ESET File Security\" or action_process_image_command_line contains \"LogRhythm System Monitor Service\" or action_process_image_command_line contains \"Malwarebytes\" or action_process_image_command_line contains \"McAfee Agent\" or action_process_image_command_line contains \"Microsoft Security Client\" or action_process_image_command_line contains \"Sophos Anti-Virus\" or action_process_image_command_line contains \"Sophos AutoUpdate\" or action_process_image_command_line contains \"Sophos Credential Store\" or action_process_image_command_line contains \"Sophos Management Console\" or action_process_image_command_line contains \"Sophos Management Database\" or action_process_image_command_line contains \"Sophos Management Server\" or action_process_image_command_line contains \"Sophos Remote Management System\" or action_process_image_command_line contains \"Sophos Update Manager\" or action_process_image_command_line contains \"Threat Protection\" or action_process_image_command_line contains \"VirusScan\" or action_process_image_command_line contains \"Webroot SecureAnywhere\" or action_process_image_command_line contains \"Windows Defender\")\n\n\n\n"}
{"prompt": "I want to find instances where fake files might be used to store credentials on endpoints.", "response": "preset = xdr_event_log\n| alter AccessList = regextract(to_json_string(action_evtlog_data_fields)->AccessList{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4663 and AccessList contains \"%%4416\" and (ObjectName ~= \".*\\\\\\%POLICY\\_ID\\%\\\\Machine\\\\Preferences\\\\Groups\\\\Groups\\.xml\" or ObjectName ~= \".*\\\\\\%FOLDER\\_NAME\\%\\\\Unattend\\.xml\"))\n\n\n\n"}
{"prompt": "I want to see alerts about high privilege registry value modifications on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4657\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find Windows domain accounts that were both created and deleted within a 24 hour period.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4720, 4726) and _collector_type in (\"XDR Collector\")\n| alter event_id_description = if(event_id = 4720, \"A user account was CREATED\", if(event_id = 4726, \"A user account was DELETED\")),\nSubjectUserName = event_data -> SubjectUserName,\nTargetUserName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| alter Local = if(TargetDomainName = _collector_hostname, \"yes\", \"no\")\n| filter Local = \"no\"\n| filter SubjectUserName not contains \"$\" and (SubjectUserName not in (\"\"\"\"\"\", null, NULL) and TargetUserName not in (\"\"\"\"\"\", null, NULL))\n| comp values(event_id_description) as Multiple_Events,\nvalues(event_id) as Multiple_EventIDs,\nvalues(event_data) as Activity_Data,\nvalues(message) as Message_Data by SubjectUserName,\nTargetUserName,\n_collector_type\n| filter array_length(Multiple_EventIDs) > 1"}
{"prompt": "I want to see events where an Office application loads a Kerberos DLL.", "response": "preset = xdr_image_load\n| filter ((actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\mspub\\.exe\" or actor_process_image_path ~= \".*\\\\onenote\\.exe\" or actor_process_image_path ~= \".*\\\\onenoteim\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\winword\\.exe\") and action_module_path ~= \".*\\\\kerberos\\.dll\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential AMSI bypass attempts using .NET reflection.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"System.Management.Automation.AmsiUtils\" or action_process_image_command_line contains \"amsiInitFailed\") or (action_process_image_command_line contains \"[Ref].Assembly.GetType\" and action_process_image_command_line contains \"SetValue($null,$true)\" and action_process_image_command_line contains \"NonPublic,Static\"))\n\n\n\n"}
{"prompt": "I want to detect when new firewall rules are added via Netsh.exe, excluding specific rules related to Dropbox.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and (action_process_image_command_line contains \" firewall \" and action_process_image_command_line contains \" add \")) and  not ((action_process_image_command_line contains \"advfirewall firewall add rule name=Dropbox dir=in action=allow \\\"program=*:\\\\Program Files (x86)\\\\Dropbox\\\\Client\\\\Dropbox.exe\\\" enable=yes profile=Any\" or action_process_image_command_line contains \"advfirewall firewall add rule name=Dropbox dir=in action=allow \\\"program=*:\\\\Program Files\\\\Dropbox\\\\Client\\\\Dropbox.exe\\\" enable=yes profile=Any\"))\n\n\n\n"}
{"prompt": "I want to find out more about malicious PowerShell commandlets and how they might be used.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter (Payload contains \"Add-Exfiltration\" or Payload contains \"Add-Persistence\" or Payload contains \"Add-RegBackdoor\" or Payload contains \"Add-RemoteRegBackdoor\" or Payload contains \"Add-ScrnSaveBackdoor\" or Payload contains \"Check-VM\" or Payload contains \"ConvertTo-Rc4ByteStream\" or Payload contains \"Decrypt-Hash\" or Payload contains \"Disable-ADIDNSNode\" or Payload contains \"Disable-MachineAccount\" or Payload contains \"Do-Exfiltration\" or Payload contains \"Enable-ADIDNSNode\" or Payload contains \"Enable-MachineAccount\" or Payload contains \"Enabled-DuplicateToken\" or Payload contains \"Exploit-Jboss\" or Payload contains \"Export-ADR\" or Payload contains \"Export-ADRCSV\" or Payload contains \"Export-ADRExcel\" or Payload contains \"Export-ADRHTML\" or Payload contains \"Export-ADRJSON\" or Payload contains \"Export-ADRXML\" or Payload contains \"Find-Fruit\" or Payload contains \"Find-GPOLocation\" or Payload contains \"Find-TrustedDocuments\" or Payload contains \"Get-ADIDNS\" or Payload contains \"Get-ApplicationHost\" or Payload contains \"Get-ChromeDump\" or Payload contains \"Get-ClipboardContents\" or Payload contains \"Get-FoxDump\" or Payload contains \"Get-GPPPassword\" or Payload contains \"Get-IndexedItem\" or Payload contains \"Get-KerberosAESKey\" or Payload contains \"Get-Keystrokes\" or Payload contains \"Get-LSASecret\" or Payload contains \"Get-MachineAccountAttribute\" or Payload contains \"Get-MachineAccountCreator\" or Payload contains \"Get-PassHashes\" or Payload contains \"Get-RegAlwaysInstallElevated\" or Payload contains \"Get-RegAutoLogon\" or Payload contains \"Get-RemoteBootKey\" or Payload contains \"Get-RemoteCachedCredential\" or Payload contains \"Get-RemoteLocalAccountHash\" or Payload contains \"Get-RemoteLSAKey\" or Payload contains \"Get-RemoteMachineAccountHash\" or Payload contains \"Get-RemoteNLKMKey\" or Payload contains \"Get-RickAstley\" or Payload contains \"Get-Screenshot\" or Payload contains \"Get-SecurityPackages\" or Payload contains \"Get-ServiceFilePermission\" or Payload contains \"Get-ServicePermission\" or Payload contains \"Get-ServiceUnquoted\" or Payload contains \"Get-SiteListPassword\" or Payload contains \"Get-System\" or Payload contains \"Get-TimedScreenshot\" or Payload contains \"Get-UnattendedInstallFile\" or Payload contains \"Get-Unconstrained\" or Payload contains \"Get-USBKeystrokes\" or Payload contains \"Get-VaultCredential\" or Payload contains \"Get-VulnAutoRun\" or Payload contains \"Get-VulnSchTask\" or Payload contains \"Grant-ADIDNSPermission\" or Payload contains \"Gupt-Backdoor\" or Payload contains \"HTTP-Login\" or Payload contains \"Install-ServiceBinary\" or Payload contains \"Install-SSP\" or Payload contains \"Invoke-ACLScanner\" or Payload contains \"Invoke-ADRecon\" or Payload contains \"Invoke-ADSBackdoor\" or Payload contains \"Invoke-AgentSmith\" or Payload contains \"Invoke-AllChecks\" or Payload contains \"Invoke-ARPScan\" or Payload contains \"Invoke-AzureHound\" or Payload contains \"Invoke-BackdoorLNK\" or Payload contains \"Invoke-BadPotato\" or Payload contains \"Invoke-BetterSafetyKatz\" or Payload contains \"Invoke-BypassUAC\" or Payload contains \"Invoke-Carbuncle\" or Payload contains \"Invoke-Certify\" or Payload contains \"Invoke-ConPtyShell\" or Payload contains \"Invoke-CredentialInjection\" or Payload contains \"Invoke-DAFT\" or Payload contains \"Invoke-DCSync\" or Payload contains \"Invoke-DinvokeKatz\" or Payload contains \"Invoke-DllInjection\" or Payload contains \"Invoke-DNSUpdate\" or Payload contains \"Invoke-DomainPasswordSpray\" or Payload contains \"Invoke-DowngradeAccount\" or Payload contains \"Invoke-EgressCheck\" or Payload contains \"Invoke-Eyewitness\" or Payload contains \"Invoke-FakeLogonScreen\" or Payload contains \"Invoke-Farmer\" or Payload contains \"Invoke-Get-RBCD-Threaded\" or Payload contains \"Invoke-Gopher\" or Payload contains \"Invoke-Grouper\" or Payload contains \"Invoke-HandleKatz\" or Payload contains \"Invoke-ImpersonatedProcess\" or Payload contains \"Invoke-ImpersonateSystem\" or Payload contains \"Invoke-InteractiveSystemPowerShell\" or Payload contains \"Invoke-Internalmonologue\" or Payload contains \"Invoke-Inveigh\" or Payload contains \"Invoke-InveighRelay\" or Payload contains \"Invoke-KrbRelay\" or Payload contains \"Invoke-LdapSignCheck\" or Payload contains \"Invoke-Lockless\" or Payload contains \"Invoke-MalSCCM\" or Payload contains \"Invoke-Mimikatz\" or Payload contains \"Invoke-Mimikittenz\" or Payload contains \"Invoke-MITM6\" or Payload contains \"Invoke-NanoDump\" or Payload contains \"Invoke-NetRipper\" or Payload contains \"Invoke-Nightmare\" or Payload contains \"Invoke-NinjaCopy\" or Payload contains \"Invoke-OfficeScrape\" or Payload contains \"Invoke-OxidResolver\" or Payload contains \"Invoke-P0wnedshell\" or Payload contains \"Invoke-Paranoia\" or Payload contains \"Invoke-PortScan\" or Payload contains \"Invoke-PoshRatHttp\" or Payload contains \"Invoke-PostExfil\" or Payload contains \"Invoke-PowerDump\" or Payload contains \"Invoke-PowerShellTCP\" or Payload contains \"Invoke-PowerShellWMI\" or Payload contains \"Invoke-PPLDump\" or Payload contains \"Invoke-PsExec\" or Payload contains \"Invoke-PSInject\" or Payload contains \"Invoke-PsUaCme\" or Payload contains \"Invoke-ReflectivePEInjection\" or Payload contains \"Invoke-ReverseDNSLookup\" or Payload contains \"Invoke-Rubeus\" or Payload contains \"Invoke-RunAs\" or Payload contains \"Invoke-SafetyKatz\" or Payload contains \"Invoke-SauronEye\" or Payload contains \"Invoke-SCShell\" or Payload contains \"Invoke-Seatbelt\" or Payload contains \"Invoke-ServiceAbuse\" or Payload contains \"Invoke-ShadowSpray\" or Payload contains \"Invoke-Sharp\" or Payload contains \"Invoke-Shellcode\" or Payload contains \"Invoke-SMBScanner\" or Payload contains \"Invoke-Snaffler\" or Payload contains \"Invoke-Spoolsample\" or Payload contains \"Invoke-SpraySinglePassword\" or Payload contains \"Invoke-SSHCommand\" or Payload contains \"Invoke-StandIn\" or Payload contains \"Invoke-StickyNotesExtract\" or Payload contains \"Invoke-SystemCommand\" or Payload contains \"Invoke-Tasksbackdoor\" or Payload contains \"Invoke-Tater\" or Payload contains \"Invoke-Thunderfox\" or Payload contains \"Invoke-ThunderStruck\" or Payload contains \"Invoke-TokenManipulation\" or Payload contains \"Invoke-Tokenvator\" or Payload contains \"Invoke-TotalExec\" or Payload contains \"Invoke-UrbanBishop\" or Payload contains \"Invoke-UserHunter\" or Payload contains \"Invoke-VoiceTroll\" or Payload contains \"Invoke-Whisker\" or Payload contains \"Invoke-WinEnum\" or Payload contains \"Invoke-winPEAS\" or Payload contains \"Invoke-WireTap\" or Payload contains \"Invoke-WmiCommand\" or Payload contains \"Invoke-WMIExec\" or Payload contains \"Invoke-WScriptBypassUAC\" or Payload contains \"Invoke-Zerologon\" or Payload contains \"MailRaider\" or Payload contains \"New-ADIDNSNode\" or Payload contains \"New-DNSRecordArray\" or Payload contains \"New-HoneyHash\" or Payload contains \"New-InMemoryModule\" or Payload contains \"New-MachineAccount\" or Payload contains \"New-SOASerialNumberArray\" or Payload contains \"Out-Minidump\" or Payload contains \"Port-Scan\" or Payload contains \"PowerBreach\" or Payload contains \"powercat \" or Payload contains \"PowerUp\" or Payload contains \"PowerView\" or Payload contains \"Remove-ADIDNSNode\" or Payload contains \"Remove-MachineAccount\" or Payload contains \"Remove-Update\" or Payload contains \"Rename-ADIDNSNode\" or Payload contains \"Revoke-ADIDNSPermission\" or Payload contains \"Set-ADIDNSNode\" or Payload contains \"Set-MacAttribute\" or Payload contains \"Set-MachineAccountAttribute\" or Payload contains \"Set-Wallpaper\" or Payload contains \"Show-TargetScreen\" or Payload contains \"Start-CaptureServer\" or Payload contains \"Start-Dnscat2\" or Payload contains \"Start-WebcamRecorder\" or Payload contains \"VolumeShadowCopyTools\")\n\n\n\n"}
{"prompt": "I want to detect potential data stealing attempts using Chromium headless debugging on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"--remote-debugging-\" and action_process_image_command_line contains \"--user-data-dir\" and action_process_image_command_line contains \"--headless\")\n\n\n\n"}
{"prompt": " I want to find instances where users are accessing known phishing URLs from Fortinet Fortigate, Cisco ASA, or Netskope logs. ", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw, Netskope_Netskope_raw)\n| union (dataset = ua_phishing_urls)\n| filter (xdm.network.http.url ~= ioc_value or (xdm.target.domain ~= ioc_value or xdm.target.url ~= ioc_value))"}
{"prompt": "I want to see all events where a user was added to the Domain Admins group.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| alter TargetUserName = arrayindex(regextract(message, \"Account Name:\\t\\tCN\\=([^\\,]+)\\,\"), 0),\nSourceDomainName = event_data -> SubjectDomainName,\nSubjectUserSid = event_data -> SubjectUserSid,\nTargetDomainName = event_data -> TargetDomainName,\nStatus = event_data -> Status,\nGroupName = event_data -> TargetUserName,\nProcessId = event_data -> ProcessId,\nSourceUserName = event_data -> SubjectUserName,\nSourceLogonId = event_data -> SubjectLogonId,\nTargetUserSid = event_data -> TargetUserSid,\nFailureReason = event_data -> FailureReason,\nSubStatus = event_data -> SubStatus,\nLogonType = event_data -> LogonType,\nLogonProcessName = event_data -> LogonProcessName,\nAuthenticationPackageName = event_data -> AuthenticationPackageName,\nWorkstationName = event_data -> WorkstationName,\nTransmittedServices = event_data -> TransmittedServices,\nLmPackageName = event_data -> LmPackageName,\nKeyLength = event_data -> KeyLength,\nProcessName = event_data -> ProcessName,\nIpAddress = event_data -> IpAddress,\nIpPort = event_data -> IpPort\n| filter event_id in (4728) and _collector_type in (\"XDR Collector\") and TargetUserName not in (\"None\", null, NULL, \"\"\"\"\"\") and SourceUserName not contains \"$\" and GroupName in (\"Domain Admins\")"}
{"prompt": "I want to find instances of malware that use compression to obfuscate their code on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"new-object\" and action_process_image_command_line contains \"text.encoding]::ascii\") and (action_process_image_command_line contains \"system.io.compression.deflatestream\" or action_process_image_command_line contains \"system.io.streamreader\" or action_process_image_command_line contains \"readtoend(\"))\n\n\n\n"}
{"prompt": "I want to find instances where an actor is using Invoke-Obfuscation CLIP+ Launcher - System on endpoints by looking for system calls related to the Service Control Manager and specific process paths.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \"cmd\" and actor_process_image_path contains \"&&\" and actor_process_image_path contains \"clipboard]::\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious activity related to malware changing the desktop background using reg.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and action_process_image_command_line contains \"add\") and (action_process_image_command_line contains \"Control Panel\\\\Desktop\" or action_process_image_command_line contains \"CurrentVersion\\\\Policies\\\\ActiveDesktop\" or action_process_image_command_line contains \"CurrentVersion\\\\Policies\\\\System\") and ((action_process_image_command_line contains \"/v NoChangingWallpaper\" and action_process_image_command_line contains \"/d 1\") or (action_process_image_command_line contains \"/v Wallpaper\" and action_process_image_command_line contains \"/t REG_SZ\") or (action_process_image_command_line contains \"/v WallpaperStyle\" and action_process_image_command_line contains \"/d 2\"))\n\n\n\n"}
{"prompt": "I want to detect potential tampering with AutoLogger sessions on Windows systems through registry modifications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\System\\\\CurrentControlSet\\\\Control\\\\WMI\\\\Autologger\\\\.*\" and ((action_registry_key_name contains \"\\\\EventLog-\" or action_registry_key_name contains \"\\\\Defender\") and (action_registry_key_name ~= \".*\\\\Enable\" or action_registry_key_name ~= \".*\\\\Start\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))) and  not (actor_process_image_path = \"C:\\\\Windows\\\\system32\\\\wevtutil.exe\")\n\n\n\n"}
{"prompt": "I want to detect potential obfuscation attempts using Invoke-Obfuscation via stdin on endpoints by analyzing event logs for specific strings and patterns.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName contains \"set\" and ServiceFileName contains \"&&\") and (ServiceFileName contains \"environment\" or ServiceFileName contains \"invoke\" or ServiceFileName contains \"${input)\"))\n\n\n\n"}
{"prompt": "I want to detect if EDRSilencer is being used to block EDR agent traffic on my endpoints.", "response": "preset = xdr_event_log\n| alter FilterName = regextract(to_json_string(action_evtlog_data_fields)->FilterName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (5441, 5447) and FilterName contains \"Custom Outbound Filter\")\n\n\n\n"}
{"prompt": "I want to see details about NSG Rule Deletions in Azure that happened recently, focusing on specific tenant IDs and resources.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"9227fdca-483d-424c-bc56-9fd2b4030484\", \"3fd7f1e1-88df-41df-982e-90c0daa354b9\", \"f2a4f062-8a8b-444f-82b8-e668b51cf42e\", \"71cce8cd-49d7-4463-bf9f-20dd2a68c5eb\", \"416105b8-5451-4d32-8f96-fcb0deb64ae0\", \"799febb6-d243-48d7-86a3-e94c956f46ba\", \"7269cfc9-f839-4437-9ded-f6d4bdec41d2\", \"8de7d5e6-d76e-497e-97c2-557d13d801e8\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see details about recent changes made to Log Analytics workspaces in Azure.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/WRITE\", \"MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"9227fdca-483d-424c-bc56-9fd2b4030484\", \"3fd7f1e1-88df-41df-982e-90c0daa354b9\", \"f2a4f062-8a8b-444f-82b8-e668b51cf42e\", \"71cce8cd-49d7-4463-bf9f-20dd2a68c5eb\", \"416105b8-5451-4d32-8f96-fcb0deb64ae0\", \"799febb6-d243-48d7-86a3-e94c956f46ba\", \"7269cfc9-f839-4437-9ded-f6d4bdec41d2\", \"8de7d5e6-d76e-497e-97c2-557d13d801e8\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all instances where NirCmd.exe was renamed and executed on endpoints.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"NirCmd.exe\" and  not ((action_process_image_path ~= \".*\\\\nircmd\\.exe\" or action_process_image_path ~= \".*\\\\nircmdc\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts for potential exploitation attempts of CVE-2023-46214 in Splunk.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and (xdm.network.http.url contains \"NO_BINARY_CHECK=1\" and xdm.network.http.url contains \"input.path\") and xdm.network.http.url ~= \".*\\.xsl\" and xdm.network.http.response_code in (200, 302))\n\n\n\n"}
{"prompt": "I want to see alerts for multiple account lockouts on enterprise domain admins, especially if it looks like a brute force attack.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter xdm.target.user.username = if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<user>\", ltrim(xdm.target.user.username, \"<user>\\\\\"), xdm.target.user.username)))\n| filter xdm.event.id = \"4740\" and xdm.target.user.username not in (\"<user>\")\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type = \"domain_admin_win_admin\" or security_groups contains \"Tier0Users\"\n| alter username = if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<user>\", ltrim(username, \"<user>\\\\\"), username)))\n) as ent_admin_dst ent_admin_dst.username = xdm.target.user.username or ent_admin_dst.sam_account_name = xdm.target.user.username\n| filter username != null or sam_account_name != null\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect malicious installations of the PAExec service on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (ServiceName ~= \"PAExec\\-.*\" or actor_process_image_path ~= \"C\\:\\\\WINDOWS\\\\PAExec\\-.*\"))\n\n\n\n"}
{"prompt": "I want to see events where SDelete is used without specific flags like -h, -c, -z, or /?, as this could indicate a potential file overwrite.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"sdelete.exe\" and  not ((action_process_image_command_line contains \" -h\" or action_process_image_command_line contains \" -c\" or action_process_image_command_line contains \" -z\" or action_process_image_command_line contains \" /?\"))\n\n\n\n"}
{"prompt": "I want to see all detections related to the SharpChisel malware on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\SharpChisel\\.exe\" or action_process_signature_product = \"SharpChisel\")\n\n\n\n"}
{"prompt": "I want to find events related to members being removed from security-enabled global groups on my endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id in (633, 4729)\n\n\n\n"}
{"prompt": "I want to see alerts for privileged password reset activity, specifically domain admin accounts.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter target_user_username = if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<domain>\", ltrim(xdm.target.user.username, \"<domain>\\\\\"), xdm.target.user.username)))\n| filter target_user_username not in (\"<user>\") and xdm.source.user.username not in (\"_PamAccmgr\") and xdm.event.id in (\"4724\")\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type = \"domain_admin_win_admin\" or security_groups contains \"Tier0Users\"\n| alter username = if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<domain>\", ltrim(username, \"<domain>\\\\\"), username)))\n) as ent_admin_dst ent_admin_dst.username = target_user_username or ent_admin_dst.sam_account_name = target_user_username\n| filter username != null or sam_account_name != null\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_user_username\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events where PowerShell command history is disabled using the \"Remove-Module\" and \"psreadline\" commands.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Remove-Module\" and ScriptBlockText contains \"psreadline\")\n\n\n\n"}
{"prompt": "I want to find instances where Curl.exe is used to download files directly from an IP address specified in the command line.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\curl\\.exe\" or actor_process_file_original_name = \"curl.exe\") and action_process_image_command_line ~= \"\\:\\/\\/[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\" and action_process_image_command_line contains \"http\" and (action_process_image_command_line contains \" -O\" or action_process_image_command_line contains \"--remote-name\" or action_process_image_command_line contains \"--output\")) and  not ((action_process_image_command_line ~= \".*\\.bat\" or action_process_image_command_line ~= \".*\\.bat\\\"\" or action_process_image_command_line ~= \".*\\.dat\" or action_process_image_command_line ~= \".*\\.dat\\\"\" or action_process_image_command_line ~= \".*\\.dll\" or action_process_image_command_line ~= \".*\\.dll\\\"\" or action_process_image_command_line ~= \".*\\.exe\" or action_process_image_command_line ~= \".*\\.exe\\\"\" or action_process_image_command_line ~= \".*\\.gif\" or action_process_image_command_line ~= \".*\\.gif\\\"\" or action_process_image_command_line ~= \".*\\.hta\" or action_process_image_command_line ~= \".*\\.hta\\\"\" or action_process_image_command_line ~= \".*\\.jpeg\" or action_process_image_command_line ~= \".*\\.jpeg\\\"\" or action_process_image_command_line ~= \".*\\.log\" or action_process_image_command_line ~= \".*\\.log\\\"\" or action_process_image_command_line ~= \".*\\.msi\" or action_process_image_command_line ~= \".*\\.msi\\\"\" or action_process_image_command_line ~= \".*\\.png\" or action_process_image_command_line ~= \".*\\.png\\\"\" or action_process_image_command_line ~= \".*\\.ps1\" or action_process_image_command_line ~= \".*\\.ps1\\\"\" or action_process_image_command_line ~= \".*\\.psm1\" or action_process_image_command_line ~= \".*\\.psm1\\\"\" or action_process_image_command_line ~= \".*\\.vbe\" or action_process_image_command_line ~= \".*\\.vbe\\\"\" or action_process_image_command_line ~= \".*\\.vbs\" or action_process_image_command_line ~= \".*\\.vbs\\\"\" or action_process_image_command_line ~= \".*\\.bat\\'\" or action_process_image_command_line ~= \".*\\.dat\\'\" or action_process_image_command_line ~= \".*\\.dll\\'\" or action_process_image_command_line ~= \".*\\.exe\\'\" or action_process_image_command_line ~= \".*\\.gif\\'\" or action_process_image_command_line ~= \".*\\.hta\\'\" or action_process_image_command_line ~= \".*\\.jpeg\\'\" or action_process_image_command_line ~= \".*\\.log\\'\" or action_process_image_command_line ~= \".*\\.msi\\'\" or action_process_image_command_line ~= \".*\\.png\\'\" or action_process_image_command_line ~= \".*\\.ps1\\'\" or action_process_image_command_line ~= \".*\\.psm1\\'\" or action_process_image_command_line ~= \".*\\.vbe\\'\" or action_process_image_command_line ~= \".*\\.vbs\\'\"))\n\n\n\n"}
{"prompt": "I want to find processes that might indicate a Chopper Webshell is active on my endpoints. These processes often use commands like \"ipconfig\", \"quser\", and others to gather information.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\w3wp\\.exe\" or actor_process_image_path ~= \".*\\\\w3wp\\.exe\") and (action_process_image_command_line contains \"&ipconfig&echo\" or action_process_image_command_line contains \"&quser&echo\" or action_process_image_command_line contains \"&whoami&echo\" or action_process_image_command_line contains \"&c:&echo\" or action_process_image_command_line contains \"&cd&echo\" or action_process_image_command_line contains \"&dir&echo\" or action_process_image_command_line contains \"&echo [E]\" or action_process_image_command_line contains \"&echo [S]\"))\n\n\n\n"}
{"prompt": "I want to detect processes that use known password dumping tools like Mimikatz or PWS.", "response": "datamodel\n| filter (xdm.source.process.executable.signer ~= \"PWS.*\" or (xdm.source.process.executable.signer contains \"DumpCreds\" or xdm.source.process.executable.signer contains \"Mimikatz\" or xdm.source.process.executable.signer contains \"PWCrack\" or xdm.source.process.executable.signer contains \"HTool/WCE\" or xdm.source.process.executable.signer contains \"PSWTool\" or xdm.source.process.executable.signer contains \"PWDump\" or xdm.source.process.executable.signer contains \"SecurityTool\" or xdm.source.process.executable.signer contains \"PShlSpy\" or xdm.source.process.executable.signer contains \"Rubeus\" or xdm.source.process.executable.signer contains \"Kekeo\" or xdm.source.process.executable.signer contains \"LsassDump\" or xdm.source.process.executable.signer contains \"Outflank\" or xdm.source.process.executable.signer contains \"DumpLsass\" or xdm.source.process.executable.signer contains \"SharpDump\" or xdm.source.process.executable.signer contains \"PWSX\" or xdm.source.process.executable.signer contains \"PWS.\"))\n\n\n\n"}
{"prompt": "I want to see all events related to the \"CreateMiniDump Hacktool\" that involve lsass.dmp files being created.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\lsass\\.dmp\"\n\n\n\n"}
{"prompt": "I want to find suspicious modifications to Windows Terminal profile settings by uncommon processes.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\cmd\\.exe\" or xdm.target.process.name ~= \".*\\\\cscript\\.exe\" or xdm.target.process.name ~= \".*\\\\mshta\\.exe\" or xdm.target.process.name ~= \".*\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\\\pwsh\\.exe\" or xdm.target.process.name ~= \".*\\\\wscript\\.exe\") or (xdm.source.process.name ~= \".*\\\\cmd\\.exe\" or xdm.source.process.name ~= \".*\\\\cscript\\.exe\" or xdm.source.process.name ~= \".*\\\\mshta\\.exe\" or xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\" or xdm.source.process.name ~= \".*\\\\wscript\\.exe\")) and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Packages\\\\Microsoft\\.WindowsTerminal\\_8wekyb3d8bbwe\\\\LocalState\\\\settings\\.json\")\n\n\n\n"}
{"prompt": "I want to see alerts for when there are over 1000 dropped outbound connections from our CheckPoint firewall within a 5 second timeframe.", "response": "config case_sensitive = false\n| datamodel dataset in (check_point_vpn_1_firewall_1_raw, check_point_smartdefense_raw)\n| alter origin = coalesce(check_point_vpn_1_firewall_1_raw.origin, check_point_smartdefense_raw.origin),\nreporting_device_ip = coalesce(check_point_vpn_1_firewall_1_raw._final_reporting_device_ip, check_point_smartdefense_raw._final_reporting_device_ip)\n| bin _time span = 5s\n| filter reporting_device_ip in (\"<ip>\") and xdm.observer.action = \"drop\" and (incidr(xdm.target.ipv4, \"<ip>\") = false and xdm.target.is_internal_ip = false) and xdm.target.ipv4 not in (\"<ip>\")\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmzips dmzips.ip_address = xdm.source.ipv4\n| filter (ip_address != NULL or xdm.source.is_internal_ip = true)\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as vascanips\n) as iisavips iisavips.vascanips = xdm.source.ipv4\n| filter vascanips in (null, NULL)\n| filter xdm.target.asn.as_name !~= \"LEVEL3|google|amazon.com|lumen|cisco webex llc|microsoft azure|akamai technologies|microsoft corporation|at&t services|level 3 communications|verizon communications\"\n| alter result = null,\nuser_agent = null,\nos_edition = null\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.target.ipv4) as dst_ip,\nvalues(xdm.source.port) as src_port,\nvalues(xdm.target.port) as dst_port,\nvalues(xdm.observer.action) as action,\nvalues(xdm.target.user.username) as username,\nvalues(origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\nvalues(xdm.target.asn.as_name) as dst_org,\nvalues(xdm.source.host.hostname) as hostname,\nvalues(xdm.target.asn.as_name) as asn,\ncount() as matched_events,\ncount() as aggregation_criteria by _time,\nxdm.source.ipv4\n| filter matched_events >= 1000\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to detect when a local user account is created on macOS endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/dscl\" and action_process_image_command_line contains \"create\") or (action_process_image_path ~= \".*\\/sysadminctl\" and action_process_image_command_line contains \"addUser\"))\n\n\n\n"}
{"prompt": "I want to see if there have been any instances where the file \"MoriyaStreamWatchmen.sys\" was created in the Windows System32 drivers folder.", "response": "datamodel\n| filter xdm.target.file.filename = \"C:\\\\Windows\\\\System32\\\\drivers\\\\MoriyaStreamWatchmen.sys\"\n\n\n\n"}
{"prompt": "I want to detect any instances of the Msxsl utility being executed on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\msxsl\\.exe\"\n\n\n\n"}
{"prompt": "I want to detect potential Monero crypto mining activity on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" --cpu-priority=\" or action_process_image_command_line contains \"--donate-level=0\" or action_process_image_command_line contains \" -o pool.\" or action_process_image_command_line contains \" --nicehash\" or action_process_image_command_line contains \" --algo=rx/0 \" or action_process_image_command_line contains \"stratum+tcp:\n\n\n\n"}
{"prompt": "I want to find all network communications involving IP addresses known to be associated with the Maze ransomware attacks on my Fortinet Fortigate devices.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter xdm.observer.action in (\"accept\", \"ip-conn\") and xdm.observer.action != NULL\n| join\n(dataset = cv_fb_mz_iocs\n| filter ioc_description in (\"Maze Ransomware IPAddress\") and ioc_type in (\"ipv4\")\n) as ioclookup ioclookup.ioc_value = xdm.source.ipv4\n| filter ioc_value = xdm.target.ipv4 or ioc_value = xdm.source.ipv4"}
{"prompt": "I want to see alerts for when the \"ksetup.exe\" process is used to change a computer password.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\ksetup\\.exe\" or actor_process_file_original_name = \"ksetup.exe\") and action_process_image_command_line contains \" /setcomputerpassword \")\n\n\n\n"}
{"prompt": "I want to see alerts about new DNS ServerLevelPluginDLLs being installed via dnscmd.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\dnscmd\\.exe\" and (action_process_image_command_line contains \"/config\" and action_process_image_command_line contains \"/serverlevelplugindll\"))\n\n\n\n"}
{"prompt": "I want to find potential PSFactoryBuffer COM Hijacking attempts detected by Windows Event Logs.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\CLSID\\\\\\{c90250f3\\-4d7d\\-4991\\-9b69\\-a5c5bc1c2ae6\\}\\\\InProcServer32\\\\\\(Default\\)\" and  not ((action_registry_value_name in (\"%windir%\\\\System32\\\\ActXPrxy.dll\", \"C:\\\\Windows\\\\System32\\\\ActXPrxy.dll\") or action_registry_data in (\"%windir%\\\\System32\\\\ActXPrxy.dll\", \"C:\\\\Windows\\\\System32\\\\ActXPrxy.dll\")))\n\n\n\n"}
{"prompt": "I want to detect when malicious tools are used to dump credentials on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName contains \"cachedump\" or ServiceFileName contains \"dumpsvc\" or ServiceFileName contains \"fgexec\" or ServiceFileName contains \"gsecdump\" or ServiceFileName contains \"mimidrv\" or ServiceFileName contains \"pwdump\" or ServiceFileName contains \"servpw\"))\n\n\n\n"}
{"prompt": "I want to see Azure subscription activities that are considered rare or unusual, like accessing keys for DocumentDB, Maps, Media Services, Cognitive Services, Storage Accounts, writing to snapshots, or modifying network security groups.", "response": "dataset = msft_azure_raw\n| filter ( contains \"Microsoft.DocumentDB/databaseAccounts/listKeys/action\" or  contains \"Microsoft.Maps/accounts/listKeys/action\" or  contains \"Microsoft.Media/mediaservices/listKeys/action\" or  contains \"Microsoft.CognitiveServices/accounts/listKeys/action\" or  contains \"Microsoft.Storage/storageAccounts/listKeys/action\" or  contains \"Microsoft.Compute/snapshots/write\" or  contains \"Microsoft.Network/networkSecurityGroups/write\")\n\n\n\n"}
{"prompt": "I want to see which URLs and IP addresses are associated with malicious User Agents like those listed in this query.", "response": "datamodel\n| filter xdm.network.http.browser in (\"Mozilla/5.0 (Windows NT 6.1; WOW64; rv:53.0) Gecko/20100101 Chrome /53.0\", \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Trident/4.0)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.0; .NET CLR  1.1.4322)\", \"HttpBrowser/1.0\", \"*<|>*\", \"nsis_inetc (mozilla)\", \"Wget/1.9+cvs-stable (Red Hat modified)\", \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; .NET CLR 1.1.4322)\", \"*zeroup*\", \"Mozilla/5.0 (Windows NT 5.1 ; v.*\", \"* adlib/*\", \"* tiny\", \"* BGroom *\", \"* changhuatong\", \"* CholTBAgent\", \"Mozilla/5.0 WinInet\", \"RookIE/1.0\", \"M\", \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/4.0)\", \"Mozilla/4.0 (compatible;MSIE 7.0;Windows NT 6.0)\", \"backdoorbot\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30731)\", \"Opera/8.81 (Windows NT 6.0; U; en)\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.3) Gecko/20100401 Firefox/3.6.1 (.NET CLR 3.5.30729)\", \"Opera\", \"Mozilla/4.0 (compatible; MSIE 5.0; Windows 98)\", \"Mozilla/4.0 (compatible; MSIE 5.01; Windows NT 5.0)\", \"MSIE\", \"*(Charon; Inferno)\", \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 5.1; Trident/5.0)\", \"Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)\", \"Mozilla/4.0(compatible; MSIE 6.0; Windows NT 5.1)\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64)\", \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 10.0; Win64; x64)\", \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Win64; x64)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.2; WOW64; Trident/7.0; .NET4.0C; .NET4.0E; InfoPath.3)\", \"Mozilla/5.0 (Windows NT 6.1)\", \"AppleWebkit/587.38 (KHTML, like Gecko)\", \"Chrome/91.0.4472.77\", \"Safari/537.36\", \"Edge/91.0.864.37\", \"Firefox/89.0\", \"Gecko/20100101\", \"* pxyscand*\", \"* asd\", \"* mdms\", \"sample\", \"nocase\", \"Moxilla\", \"Win32 *\", \"*Microsoft Internet Explorer*\", \"agent *\", \"AutoIt\", \"IczelionDownLoad\", \"Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 10.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)\", \"record\", \"mozzzzzzzzzzz\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:76.0) Gecko/20100101 Firefox/76.0\", \"Havana/0.1\", \"antSword/v2.1\", \"rqwrwqrqwrqw\", \"qwrqrwrqwrqwr\", \"rc2.0/client\", \"TakeMyPainBack\", \"xxx\", 20112211, 23591, 901785252112, 1235125521512, 125122112551, \"B1D3N_RIM_MY_ASS\", \"AYAYAYAY1337\", \"iMightJustPayMySelfForAFeature\", \"ForAFeature\", \"Ares_ldr_v_*\", \"Microsoft Internet Explorer\", \"CLCTR\", \"uploader\", \"agent\", \"License\", \"vb wininet\", \"Client\", \"Lilith-Bot/3.0\", \"svc/1.0\", \"WSHRAT\", \"ZeroStresser Botnet/1.5\", \"OK\", \"Project1sqlite\", \"Project1\", \"DuckTales\", \"Zadanie\", \"GunnaWunnaBlueTips\", \"Xlmst\", \"GeekingToTheMoon\", \"SunShineMoonLight\", \"BunnyRequester\", \"BunnyTasks\", \"BunnyStealer\", \"BunnyLoader_Dropper\", \"BunnyLoader\", \"BunnyShell\", \"SPARK-COMMIT\", \"4B4DB4B3\", \"SouthSide\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 5.1; Tob 1.1)\")\n\n\n\n"}
{"prompt": "I want to find out when someone changes the startup shell script for an EC2 instance.", "response": "dataset = amazon_aws_raw\n| alter requestParameters_attribute = json_extract_scalar(requestParameters , \"$.attribute\")\n| filter (eventSource = \"ec2.amazonaws.com\" and requestParameters.attribute = \"userData\" and eventName = \"ModifyInstanceAttribute\")\n\n\n\n"}
{"prompt": "I want to find suspicious PowerShell processes that directly connect to websites using Invoke-WebRequest.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"curl \" or action_process_image_command_line contains \"Invoke-WebRequest\" or action_process_image_command_line contains \"iwr \" or action_process_image_command_line contains \"wget \") and (action_process_image_command_line contains \":\n\n\n\n"}
{"prompt": "I want to see any instances of an Outbound UDP Flood attack detected by my Cisco ASA, Fortinet Fortigate, or SonicWall NS devices.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter xdm.source.port not in (80, 443) and xdm.target.port not in (5060)\n| filter (xdm.source.is_internal_ip = true and xdm.target.is_internal_ip = false) and xdm.network.ip_protocol = \"\"\"UDP\"\"\" and xdm.source.sent_packets >= 60000 and xdm.event.duration >= 60000000000\n| fields *"}
{"prompt": "I want to see alerts about potentially malicious activities related to Nmap or Zenmap being executed on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\nmap\\.exe\" or action_process_image_path ~= \".*\\\\zennmap\\.exe\") or actor_process_file_original_name in (\"nmap.exe\", \"zennmap.exe\"))\n\n\n\n"}
{"prompt": "I want to see activity related to using the \"net\" command on endpoints to discover network connections.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and ((action_process_image_command_line ~= \".*\\ use\" or action_process_image_command_line ~= \".*\\ sessions\") or (action_process_image_command_line contains \" use \" or action_process_image_command_line contains \" sessions \")))\n\n\n\n"}
{"prompt": "I want to see events related to the creation or update of security solutions in Azure with a specific reference ID (<id>).  I need information about the usernames involved, the operation name, tenant ID, and other relevant details like the alias host and protocol.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.SECURITY/SECURITYSOLUTIONS/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"<id>\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "{ I want to see events related to the \"Pandemic Registry Key\"  malware, which modifies the Windows registry.} \n\n\nThis prompt captures the user's intent: to view events connected to a specific malware threat (\"Pandemic Registry Key\") that targets the Windows registry. It uses natural language and avoids technical jargon, making it easy for anyone to understand.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\SYSTEM\\\\CurrentControlSet\\\\services\\\\null\\\\Instance\"\n\n\n\n"}
{"prompt": "I want to find potential instances of CVE-2023-36884 exploitation attempts that involve using a URL marker like \"/MSHTML_C7/\".", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and xdm.network.http.url contains \"/MSHTML_C7/\")\n\n\n\n"}
{"prompt": "I want to see events where an SCM database handle failure occurred, specifically for the \"ServicesActive\" object with access mask 0xf003f, excluding instances where SubjectLogonId is 0x3e4.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter SubjectLogonId = regextract(to_json_string(action_evtlog_data_fields)->SubjectLogonId{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4656 and ObjectType = \"SC_MANAGER OBJECT\" and ObjectName = \"ServicesActive\" and AccessMask = \"0xf003f\") and  not (SubjectLogonId = \"0x3e4\")\n\n\n\n"}
{"prompt": "I want to find events where an adversary is potentially hijacking program execution flow using the COR_PROFILER environment variable.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"$env:COR_ENABLE_PROFILING\" and ScriptBlockText contains \"$env:COR_PROFILER\" and ScriptBlockText contains \"$env:COR_PROFILER_PATH\")\n\n\n\n"}
{"prompt": "I want to see a list of monitored security events that occurred on Windows systems, along with details like event type, outcome, user information, and potential failure reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4618\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name,\ntarget_domain\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find all instances of PowerShell being used to list LSASS processes on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Get-Process lsas\" or action_process_image_command_line contains \"ps lsas\" or action_process_image_command_line contains \"gps lsas\")\n\n\n\n"}
{"prompt": "I want to detect if a Security Support Provider (SSP) has been added to the LSA configuration on Windows systems.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Control\\\\Lsa\\\\Security\\ Packages\" or action_registry_key_name ~= \".*\\\\Control\\\\Lsa\\\\OSConfig\\\\Security\\ Packages\") and  not (actor_process_image_path in (\"C:\\\\Windows\\\\system32\\\\msiexec.exe\", \"C:\\\\Windows\\\\syswow64\\\\MsiExec.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious DLL files loaded by system processes from locations like \"C:\\Users\\Public\" or \"C:\\PerfLogs\".", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \"C\\:\\\\Windows\\\\.*\" and (action_module_path ~= \"C\\:\\\\Users\\\\Public\\\\.*\" or action_module_path ~= \"C\\:\\\\PerfLogs\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect instances of DCOM InternetExplorer.Application Iertutil DLL hijacking using Sysmon events.", "response": "preset = xdr_event_log\n| alter Image = regextract(to_json_string(action_evtlog_data_fields)->Image{}, \"\\\"(.*)\\\"\")\n| alter TargetFilename = regextract(to_json_string(action_evtlog_data_fields)->TargetFilename{}, \"\\\"(.*)\\\"\")\n| alter ImageLoaded = regextract(to_json_string(action_evtlog_data_fields)->ImageLoaded{}, \"\\\"(.*)\\\"\")\n| filter ((action_evtlog_event_id = 11 and Image = \"System\" and TargetFilename ~= \".*\\\\Internet\\ Explorer\\\\iertutil\\.dll\") or (action_evtlog_event_id = 7 and Image ~= \".*\\\\Internet\\ Explorer\\\\iexplore\\.exe\" and ImageLoaded ~= \".*\\\\Internet\\ Explorer\\\\iertutil\\.dll\"))\n\n\n\n"}
{"prompt": "I want to see events related to potential remote credential dumping, particularly those involving svchost.exe and temporary files in System32.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\svchost\\.exe\" or xdm.source.process.name ~= \".*\\\\svchost\\.exe\") and xdm.target.file.filename ~= \"\\\\Windows\\\\System32\\\\[a-zA-Z0-9]{8}\\.tmp$\")\n\n\n\n"}
{"prompt": "I want to find users who have had at least 10 TeamViewer sessions with unusual network activity in the last day.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter (user_agent ~= \"dyngate\" or host_dst ~= \"teamviewer\") and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 10\n| alter category = \"Command and Control\""}
{"prompt": "I want to find potential exploitation attempts from Office applications that use directory traversal techniques like \"../../../\" or \"..\\\\..\\\\..\\\\..\" in their command lines.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\msaccess\\.exe\" or actor_process_image_path ~= \".*\\\\mspub\\.exe\" or actor_process_image_path ~= \".*\\\\eqnedt32\\.exe\" or actor_process_image_path ~= \".*\\\\visio\\.exe\") and (action_process_image_command_line contains \"../../../..\" or action_process_image_command_line contains \"..\\\\..\\\\..\\\\..\" or action_process_image_command_line contains \"..\n\n\n\n"}
{"prompt": "I want to find processes spawned by Java that use potentially suspicious tools.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\java\\.exe\" and (action_process_image_path ~= \".*\\\\AppVLP\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\curl\\.exe\" or action_process_image_path ~= \".*\\\\forfiles\\.exe\" or action_process_image_path ~= \".*\\\\hh\\.exe\" or action_process_image_path ~= \".*\\\\mftrace\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\" or action_process_image_path ~= \".*\\\\query\\.exe\" or action_process_image_path ~= \".*\\\\reg\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\scrcons\\.exe\" or action_process_image_path ~= \".*\\\\scriptrunner\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\systeminfo\\.exe\" or action_process_image_path ~= \".*\\\\whoami\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts about Platform admin users logging in from multiple countries within a 4-hour period.", "response": "config case_sensitive = false\n| dataset = check_point_connectra_raw\n| filter act != \"Log In\" and duser != null and _final_reporting_device_ip != \"10.67.122.132\"\n| alter hostname = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), duser))\n| alter user_dst = if(user_dst ~= \"ITLINFOSYS\\n\", concat(\"n\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), if(user_dst ~= \"ITLINFOSYS\\r\", concat(\"r\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)))\n| join type = left\n(dataset = enterprise_admin_list\n| fields username, admin_type\n) as adminusers adminusers.username = user_dst\n| join type = left\n(preset = ad_users\n| fields full_user_name, security_group_list, sam_account_name,\nmember_of\n) as cieusers cieusers.sam_account_name = user_dst\n| filter admin_type not in (\"ilms_admin\", \"av_admin\", \"azure_cloud_admin\", \"bluecoat_admin\", \"byod_admin\", \"dmz_owner\", \"firewall_admin\", \"ilms_admin\", \"is_fusion_admin\", \"isg_qualys_admin\", \"nas_l1_admin\", \"nas_l1_l2_admin\", \"nas_l1_l2_l3_admin\", \"nas_l1_l3_admin\", \"nas_l2_admin\", \"nas_l2_l3_admin\", \"nas_l3_admin\", \"netscaler_admin\", \"network_admin\", \"network_ipt_admin\", \"nips_admin\", \"sccm_admin\", \"securid_admin\", \"sharepoint_admin\", \"unixr1_admin\", \"unixr2_admin\", \"win_accop\", \"win_admin\", \"win_admin_accop\", \"unix_admin\") or (to_string(security_group_list) contains \"Tier1Users\" or to_string(security_group_list) contains \"UNIX_Group_R1\" or to_string(security_group_list) contains \"UNIX_Group_R2\" or to_string(member_of) contains \"Tier1Users\" or to_string(member_of) contains \"UNIX_Group_R1\" or to_string(member_of) contains \"UNIX_Group_R2\")\n| iploc src loc_country\n| alter action = act,\nsource_port = spt,\ndest_port = dpt,\nsource_ip = src,\ndst_ip = host_ip,\nresult = outcome,\nuser_agent = requestClientApplication,\nos_edition = os_edition,\nproduct = _product\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestTime,\nvalues(source_ip) as src_ip,\nvalues(host_ip) as dst_ip,\nvalues(source_port) as src_port,\nvalues(dest_port) as dst_port,\nvalues(action) as action,\nvalues(hostname) as hostname,\nvalues(origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(product) as product,\nvalues(loc_country) as country_src,\ncount() as aggregation_criteria by user_dst\n| filter array_length(country_src) > 1 and array_length(hostname) > 1\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": " I want to see all events related to changes in group memberships for high-privileged AD groups like \"rmssuperusers\", \"rtcdomainserveradmins\", etc., including additions and removals, along with details about the user involved.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.target.user.groups in (\"rmssuperusers\", \"rtcdomainserveradmins\", \"rtcdomainuseradmins\", \"rtcuniversalserveradmins\", \"rtcuniversaluseradmins\", \"infyrms_superusers\", \"we2k3admins\", \"infypasswordoperators\", \"we2k3\", \"we2k3accountoperators\", \"infyaccountoperators\", \"besadminsgroup\", \"accman_access\", \"acl_joincomputer\", \"evcesuperadmins\", \"accmanusers\", \"extended_evcmeladmins\", \"ccd_india_support\", \"we2k3accountoperators\", \"intadmins\", \"account operators\", \"ccd isc\", \"unlockusers\", \"event log readers\", \"emsg.mimsyncadmins\", \"dnsadmins\", \"schema admins\") and xdm.event.id != \"4799\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter xdm.target.user.username = trim(arrayindex(regextract(xdm.event.description, \"Account Name:\\t\\tCN=([^,]+)\"), 0))\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about Security-Enabled Global Groups that were deleted on my endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id in (4730, 634)\n\n\n\n"}
{"prompt": "I want to see events where CodeIntegrity blocked an image load due to a revoked certificate.", "response": "datamodel\n| filter xdm.event.id = 3036\n\n\n\n"}
{"prompt": "I want to find suspicious PowerShell processes that are using Base64 encoded reflective assembly loads.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA\" or action_process_image_command_line contains \"sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA\" or action_process_image_command_line contains \"bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA\" or action_process_image_command_line contains \"AFsAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiAC\" or action_process_image_command_line contains \"BbAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgAp\" or action_process_image_command_line contains \"AWwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAK\" or action_process_image_command_line contains \"WwBSAGUAZgBsAGUAYwB0AGkAbwBuAC4AQQBzAHMAZQBtAGIAbAB5AF0AOgA6ACgAIgBMAG8AYQBkACIAKQ\" or action_process_image_command_line contains \"sAUgBlAGYAbABlAGMAdABpAG8AbgAuAEEAcwBzAGUAbQBiAGwAeQBdADoAOgAoACIATABvAGEAZAAiACkA\" or action_process_image_command_line contains \"bAFIAZQBmAGwAZQBjAHQAaQBvAG4ALgBBAHMAcwBlAG0AYgBsAHkAXQA6ADoAKAAiAEwAbwBhAGQAIgApA\" or action_process_image_command_line contains \"WwByAGUAZgBsAGUAYwB0AGkAbwBuAC4AYQBzAHMAZQBtAGIAbAB5AF0AOgA6AEwAbwBhAGQAKA\" or action_process_image_command_line contains \"sAcgBlAGYAbABlAGMAdABpAG8AbgAuAGEAcwBzAGUAbQBiAGwAeQBdADoAOgBMAG8AYQBkACgA\" or action_process_image_command_line contains \"bAHIAZQBmAGwAZQBjAHQAaQBvAG4ALgBhAHMAcwBlAG0AYgBsAHkAXQA6ADoATABvAGEAZAAoA\")\n\n\n\n"}
{"prompt": "I want to find instances of the \"mofcomp\" utility being used in a suspicious way.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\mofcomp\\.exe\" or actor_process_file_original_name = \"mofcomp.exe\") and ((actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_image_path ~= \".*\\\\wsl\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\") or (action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\WINDOWS\\\\Temp\\\\.*\" or action_process_image_command_line contains \"%temp%\" or action_process_image_command_line contains \"%tmp%\" or action_process_image_command_line contains \"%appdata%\"))) and  not ((actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe\" and action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\TEMP\\\\.*\" and action_process_image_command_line ~= \".*\\.mof\")) and  not ((action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\TEMP\\\\.*\" and action_process_image_command_line ~= \".*\\.mof\"))\n\n\n\n"}
{"prompt": "I want to find instances where Winget adds a new download source from an unusual URL.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\winget\\.exe\" or actor_process_file_original_name = \"winget.exe\") and (action_process_image_command_line contains \"source \" and action_process_image_command_line contains \"add \") and action_process_image_command_line ~= \"\\:\\/\\/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\")\n\n\n\n"}
{"prompt": "I want to detect scheduled tasks created by \"schtasks.exe\" that appear to be running from potentially suspicious locations on my endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\:\\\\Temp\\\\.*\" or actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\.*\" or actor_process_image_path ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or actor_process_image_path contains \"\\\\Temporary Internet\" or actor_process_image_path ~= \".*\\\\Users\\\\Public\\\\.*\" or actor_process_image_path ~= \".*\\\\Windows\\\\Temp\\\\.*\") and action_process_image_path ~= \".*\\\\schtasks\\.exe\" and action_process_image_command_line contains \"/Create \") and  not ((action_process_image_command_line contains \"update_task.xml\" or action_process_image_command_line contains \"unattended.ini\"))\n\n\n\n"}
{"prompt": "I want to find instances where processes are copying passwd or shadow files from temporary paths on Linux endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/cp\" and action_process_image_command_line contains \"/tmp/\" and (action_process_image_command_line contains \"passwd\" or action_process_image_command_line contains \"shadow\"))\n\n\n\n"}
{"prompt": "I want to see events related to exploitation of the CVE-2024-1708 ScreenConnect Path Traversal vulnerability.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4663 and ObjectType = \"File\" and ProcessName contains \"ScreenConnect.Service.exe\" and AccessMask = \"0x6\" and (ObjectName ~= \".*ScreenConnect\\\\App\\_Extensions\\\\.*\\.ashx\" or ObjectName ~= \".*ScreenConnect\\\\App\\_Extensions\\\\.*\\.aspx\")) and  not (ObjectName ~= \".*ScreenConnect\\\\App\\_Extensions\\\\.*\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect potential password spraying attempts using the dsacls.exe command.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\dsacls\\.exe\" or actor_process_file_original_name = \"DSACLS.EXE\") and (action_process_image_command_line contains \"/user:\" and action_process_image_command_line contains \"/passwd:\"))\n\n\n\n"}
{"prompt": " I want to see alerts about suspicious use of the \"schtasks\" command with SYSTEM privileges. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \" /change \" or action_process_image_command_line contains \" /create \")) and action_process_image_command_line contains \"/ru \" and (action_process_image_command_line contains \"NT AUT\" or action_process_image_command_line contains \" SYSTEM \")) and  not ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \"/TN TVInstallRestore\" and action_process_image_command_line contains \"\\\\TeamViewer_.exe\")) or (action_process_image_command_line contains \"/Create /F /RU System /SC WEEKLY /TN AviraSystemSpeedupVerify /TR \" or action_process_image_command_line contains \":\\\\Program Files (x86)\\\\Avira\\\\System Speedup\\\\setup\\\\avira_speedup_setup.exe\" or action_process_image_command_line contains \"/VERIFY /VERYSILENT /NOSTART /NODOTNET /NORESTART\\\" /RL HIGHEST\"))\n\n\n\n"}
{"prompt": "I want to see activity related to malicious use of Replace.exe on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\replace\\.exe\" and (action_process_image_command_line contains \"-a\" or action_process_image_command_line contains \"/a\")\n\n\n\n"}
{"prompt": "I want to find suspicious instances of MSHTA.exe being used with common file extensions that could indicate malicious activity.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\mshta\\.exe\" and (action_process_image_command_line contains \"vbscript\" or action_process_image_command_line contains \".jpg\" or action_process_image_command_line contains \".png\" or action_process_image_command_line contains \".lnk\" or action_process_image_command_line contains \".xls\" or action_process_image_command_line contains \".doc\" or action_process_image_command_line contains \".zip\" or action_process_image_command_line contains \".dll\"))\n\n\n\n"}
{"prompt": "I want to find files related to GoToAssist temporary installations.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\LogMeInInc\\\\GoToAssist\\ Remote\\ Support\\ Expert\\\\.*\"\n\n\n\n"}
{"prompt": "I want to see alerts about changes made to device registration policies in Microsoft Azure.", "response": "dataset = msft_azure_raw\n| alter properties_category = json_extract_scalar(properties , \"$.category\")\n| alter properties_activityDisplayName = json_extract_scalar(properties , \"$.activityDisplayName\")\n| filter (properties.category = \"Policy\" and properties.activityDisplayName = \"Set device registration policies\")\n\n\n\n"}
{"prompt": "I want to find alerts about privileged password changes for enterprise O365 admins in Microsoft Azure.", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Operation ~= \"Change user password\" and UserId not contains \"<user>\"\n| alter source_user = json_extract_scalar(`Target`, \"$[3].ID\")\n| fields UserId, source_user, ObjectId, ResultStatus, Operation,\n_time, CreationTime, `Target`\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to see events where an obfuscated process is created using Rundll32 and potentially executing shell commands.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"&&\" and action_process_image_command_line contains \"rundll32\" and action_process_image_command_line contains \"shell32.dll\" and action_process_image_command_line contains \"shellexec_rundll\") and (action_process_image_command_line contains \"value\" or action_process_image_command_line contains \"invoke\" or action_process_image_command_line contains \"comspec\" or action_process_image_command_line contains \"iex\"))\n\n\n\n"}
{"prompt": "I want to see processes created by common office applications that use potentially malicious executables like regsvr32, rundll32, etc.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\msiexec\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\verclsid\\.exe\" or action_process_image_path ~= \".*\\\\msdt\\.exe\" or action_process_image_path ~= \".*\\\\control\\.exe\" or action_process_image_path ~= \".*\\\\msidb\\.exe\") and (actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\msaccess\\.exe\" or actor_process_image_path ~= \".*\\\\mspub\\.exe\" or actor_process_image_path ~= \".*\\\\eqnedt32\\.exe\" or actor_process_image_path ~= \".*\\\\visio\\.exe\" or actor_process_image_path ~= \".*\\\\wordpad\\.exe\" or actor_process_image_path ~= \".*\\\\wordview\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see events where the \"whoami\" utility was executed on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\whoami\\.exe\" or actor_process_file_original_name = \"whoami.exe\")\n\n\n\n"}
{"prompt": "I want to see events where Clip.exe is used to copy data to the clipboard.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\clip\\.exe\" or actor_process_file_original_name = \"clip.exe\")\n\n\n\n"}
{"prompt": "I want to see activity related to potential reconnaissance attempts on Windows endpoints, specifically focusing on access to SAM user and group objects.", "response": "preset = xdr_event_log\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4661 and AccessMask = \"0x2d\" and ObjectType in (\"SAM_USER\", \"SAM_GROUP\") and ObjectName ~= \"S\\-1\\-5\\-21\\-.*\" and (ObjectName ~= \".*\\-500\" or ObjectName ~= \".*\\-512\"))\n\n\n\n"}
{"prompt": "I want to find events where reg.exe is used to disable security services like Windows Defender or AppIDSvc by modifying registry values.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"reg\" and action_process_image_command_line contains \"add\") and ((action_process_image_command_line contains \"d 4\" and action_process_image_command_line contains \"v Start\") and (action_process_image_command_line contains \"\\\\AppIDSvc\" or action_process_image_command_line contains \"\\\\MsMpSvc\" or action_process_image_command_line contains \"\\\\NisSrv\" or action_process_image_command_line contains \"\\\\SecurityHealthService\" or action_process_image_command_line contains \"\\\\Sense\" or action_process_image_command_line contains \"\\\\UsoSvc\" or action_process_image_command_line contains \"\\\\WdBoot\" or action_process_image_command_line contains \"\\\\WdFilter\" or action_process_image_command_line contains \"\\\\WdNisDrv\" or action_process_image_command_line contains \"\\\\WdNisSvc\" or action_process_image_command_line contains \"\\\\WinDefend\" or action_process_image_command_line contains \"\\\\wscsvc\" or action_process_image_command_line contains \"\\\\wuauserv\")))\n\n\n\n"}
{"prompt": "I want to detect if someone is deleting keys from the SafeBoot registry using reg.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and (action_process_image_command_line contains \" delete \" and action_process_image_command_line contains \"\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\SafeBoot\"))\n\n\n\n"}
{"prompt": "I want to find unusual upload activity where users are uploading data at more than 3.5 times their average daily upload over the past week.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|comcast-pde.cloud.databricks.com|sygdc.exconnect.hsbc.co.uk\"\n| comp sum(rbytes) as current_day_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|comcast-pde.cloud.databricks.com|sygdc.exconnect.hsbc.co.uk\"\n| comp sum(rbytes) as 7_days_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_upload) as 7_days_upload_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_upload > multiply(7_days_upload_avg, 3.5)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": " I want to see alerts about potential sideloading of AVKkid.dll. ", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\AVKkid\\.dll\" and  not (((actor_process_image_path ~= \".*C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\G\\ DATA\\\\.*\" or actor_process_image_path ~= \".*C\\:\\\\Program\\ Files\\\\G\\ DATA\\\\.*\") and actor_process_image_path ~= \".*\\\\AVKKid\\.exe\" and (action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\G\\ DATA\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\G\\ DATA\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find potential attempts to exploit the CVE-2023-23752 vulnerability in Joomla websites.", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and (xdm.network.http.url contains \"/api/index.php/v1/\" and xdm.network.http.url contains \"public=true\"))\n\n\n\n"}
{"prompt": "I want to see detections related to scheduled tasks being created in the Windows registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tasks\\\\.*\" or action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tree\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find instances where the auditpol binary is used to disable, clear, remove, or restore audit policies.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\auditpol\\.exe\" or actor_process_file_original_name = \"AUDITPOL.EXE\") and (action_process_image_command_line contains \"disable\" or action_process_image_command_line contains \"clear\" or action_process_image_command_line contains \"remove\" or action_process_image_command_line contains \"restore\"))\n\n\n\n"}
{"prompt": "I want to see network connections that are using Ngrok tunneling services on Linux systems.", "response": "preset = network_story\n| filter (action_external_hostname contains \"tunnel.us.ngrok.com\" or action_external_hostname contains \"tunnel.eu.ngrok.com\" or action_external_hostname contains \"tunnel.ap.ngrok.com\" or action_external_hostname contains \"tunnel.au.ngrok.com\" or action_external_hostname contains \"tunnel.sa.ngrok.com\" or action_external_hostname contains \"tunnel.jp.ngrok.com\" or action_external_hostname contains \"tunnel.in.ngrok.com\")\n\n\n\n"}
{"prompt": "I want to detect potential misuse of the \"getcap\" command on Linux endpoints to uncover capabilities being explored.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/getcap\" and action_process_image_command_line contains \" -r \")\n\n\n\n"}
{"prompt": "I want to see events related to changes in system audit policy on Windows machines.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4719\")\n| alter username = regextract(xdm.event.description, \"Account Name:\\t([^\\n]+)\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, username\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find indicators of potential Metasploit or Impacket service installations on Windows systems via SMB PsExec.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| alter StartType = regextract(to_json_string(action_evtlog_data_fields)->StartType{}, \"\\\"(.*)\\\"\")\n| alter ServiceType = regextract(to_json_string(action_evtlog_data_fields)->ServiceType{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (actor_process_image_path ~= \"^\\%systemroot\\%\\\\[a-zA-Z]{8}\\.exe$\" and ServiceName ~= \"(^[a-zA-Z]{4}$)|(^[a-zA-Z]{8}$)|(^[a-zA-Z]{16}$)\" and StartType = 3 and ServiceType = \"0x10\") and  not (ServiceName = \"PSEXESVC\")\n\n\n\n"}
{"prompt": "I want to see events related to Sysinternals PsSuspend Execution on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name = \"pssuspend.exe\" or (action_process_image_path ~= \".*\\\\pssuspend\\.exe\" or action_process_image_path ~= \".*\\\\pssuspend64\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find potential persistence threats that involve modifying the \"MyComputer\" registry keys on Windows systems.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\MyComputer\" and action_registry_key_name ~= \".*\\(Default\\)\")\n\n\n\n"}
{"prompt": "I want to detect processes that use `reg.exe` and modify suspicious registry paths related to Windows settings and security.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and (action_process_image_command_line ~= \".*\\\\AppDataLow\\\\Software\\\\Microsoft\\\\.*\" or action_process_image_command_line contains \"\\\\Policies\\\\Microsoft\\\\Windows\\\\OOBE\" or action_process_image_command_line contains \"\\\\Policies\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\" or action_process_image_command_line contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\Currentversion\\\\Winlogon\" or action_process_image_command_line contains \"\\\\CurrentControlSet\\\\Control\\\\SecurityProviders\\\\WDigest\" or action_process_image_command_line ~= \".*\\\\Microsoft\\\\Windows\\ Defender\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that use Invoke-Obfuscation with variable substitution and launch commands through obfuscated strings.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText ~= \"cmd.{0,5}(?\\:\\/c|\\/r)(?\\:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?\\:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?\\:.*\\)){1,}.*\\\"\"\n\n\n\n"}
{"prompt": "I want to see events related to InfDefaultInstall.exe executing .inf files on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"InfDefaultInstall.exe \" and action_process_image_command_line contains \".inf\")\n\n\n\n"}
{"prompt": "I want to be alerted when there are changes made to firewall configurations on client devices from Fortigate firewalls.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter xdm.event.original_event_type in (\"0100032102\", \"0100032104\")\n| fields xdm.event.original_event_type, xdm.observer.name,\nxdm.alert.subcategory, xdm.event.description, xdm.source.process.name,\nxdm.source.user.domain, xdm.target.user.username,\n*"}
{"prompt": "I want to see if there have been any attempts to delete Time Machine backups on macOS systems using the `tmutil` command.", "response": "#N/A"}
{"prompt": "I want to see instances where \"root\" is used as a username when accessing the AWS console.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroup_name = json_extract_scalar(requestParameters, \"$.groupName\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username1 = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username2 = json_extract_scalar(userIdentity, \"$.userName\"),\ntarget_username3 = trim(json_extract(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"\\\"\")\n| filter target_username1 = \"root\" or target_username2 = \"root\" or target_username3 = \"root\" or source_username = \"root\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find processes that are exporting critical registry keys to a file using regedit.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regedit\\.exe\" or actor_process_file_original_name = \"REGEDIT.EXE\") and action_process_image_command_line contains \" -E \" and (action_process_image_command_line contains \"hklm\" or action_process_image_command_line contains \"hkey_local_machine\") and (action_process_image_command_line ~= \".*\\\\system\" or action_process_image_command_line ~= \".*\\\\sam\" or action_process_image_command_line ~= \".*\\\\security\"))\n\n\n\n"}
{"prompt": "I want to find alerts about suspicious RDP redirects using TSCON on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \" /dest:rdp-tcp#\"\n\n\n\n"}
{"prompt": "I want to see alerts for code execution using Pcwutl.dll through rundll32.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and (action_process_image_command_line contains \"pcwutl\" and action_process_image_command_line contains \"LaunchApplication\"))\n\n\n\n"}
{"prompt": "I want to see details about Windows Disabled Account Failed Login events, including the workstation name, IP address, usernames, and failure reasons.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| join type = inner\n(config case_sensitive = false\n| dataset = bb_xdrc_id_hn_ip_grpnm\n) as xdrci xdrci.XDR_Collector_ID = _collector_id\n| alter TargetUserName = event_data -> TargetUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nSubjectUserSid = event_data -> SubjectUserSid,\nTargetDomainName = event_data -> TargetDomainName,\nStatus = event_data -> Status,\nStatusDescription = \"Indicates referenced user name and authentication information are valid, but some user account restriction has prevent successful authentication.\",\nProcessId = event_data -> ProcessId,\nSubjectUserName = event_data -> SubjectUserName,\nSubjectLogonId = event_data -> SubjectLogonId,\nTargetUserSid = event_data -> TargetUserSid,\nFailureReason = event_data -> FailureReason,\nSubStatus = event_data -> SubStatus,\nSubStatusDescription = \"Account is currently disabled\",\nLogonType = event_data -> LogonType,\nLogonTypeDescription = \"A user or computer logged on to this computer from the network.\",\nLogonProcessName = event_data -> LogonProcessName,\nAuthenticationPackageName = event_data -> AuthenticationPackageName,\nWorkstationName = event_data -> WorkstationName,\nTransmittedServices = event_data -> TransmittedServices,\nLmPackageName = event_data -> LmPackageName,\nKeyLength = event_data -> KeyLength,\nProcessName = event_data -> ProcessName,\nIpAddress = event_data -> IpAddress,\nIpPort = event_data -> IpPort\n| filter event_id in (4625) and SubStatus in (\"0xC0000072\")\n| fields XDR_Collector_GroupName, WorkstationName, host_name,\nIpAddress, SubjectUserName, SubjectDomainName, SubjectLogonId,\nTargetUserName, TargetDomainName, FailureReason,\nSubStatus, SubStatusDescription, LogonType, LogonTypeDescription,\n*"}
{"prompt": "I want to see all activity related to the SharpLDAPmonitor hacking tool on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\SharpLDAPmonitor\\.exe\" or actor_process_file_original_name = \"SharpLDAPmonitor.exe\") or (action_process_image_command_line contains \"/user:\" and action_process_image_command_line contains \"/pass:\" and action_process_image_command_line contains \"/dcip:\"))\n\n\n\n"}
{"prompt": "I want to find instances of UAC bypass attacks that utilize the WOW64 Logger DLL hijack technique.", "response": "preset = xdr_event_log\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| filter (SourceImage ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\" and GrantedAccess = \"0x1fffff\" and CallTrace ~= \"UNKNOWN\\(0000000000000000\\)\\|UNKNOWN\\(0000000000000000\\)\\|.*\")\n\n\n\n"}
{"prompt": " I want to find successful remote login attempts from public IP addresses on Unix servers that are not in our DMZ, VPN, or IIS scan lists. ", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"Tools_Platform_Server\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"sshd\" and xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS and xdm.source.ipv4 != null and xdm.source.is_internal_ip = false and incidr(xdm.source.ipv4, \"169.254.0.0/16\") = false\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address as ip\n) as dmz_ips dmz_ips.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_ips incidr(xdm.source.ipv4, vpn_ips.cidr_range) = true\n| filter cidr_range = null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, linux_linux_raw._final_reporting_device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\naggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\ndevice_ip = linux_linux_raw._final_reporting_device_ip"}
{"prompt": "I want to find malicious domains that are listed as IOCs from Intel Source and have been seen on Cisco ASA, Fortinet Fortigate, or Netskope.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw, Netskope_Netskope_raw)\n| filter (xdm.network.http.url ~= \"account.drive-google-com.tk|sinbad.io|login.drive-google-com.tk|coolpelear.com|ggspace.space|hauynescherben.net|grenzezank.com|customautobodyaz.com|spiegel.ltd|leparisien.pm|unian.pm|electionwatch.live|en-gb-wordpress.org|lepoint.foo|rbk.media|govreadyq.com|fox-news.in|warfareinsider.us|mypride.press|wpgate.zip|obozrevatel.ltd|besuchszweck.org|setup.sh|apunkagames.com|watchlinksinfo.com|crackingcity.com|pogothere.xyz|popcorneyes.xyz|trk.playstretch.host|e3iaibr.icu|cjjmobbbshhhu.shop|ncdanmark.org|infinite-7.com|ofupakoshi.com|autrevalevale.click|ldhqi4.fun|austintrafficlawyer.com|julieannmirabel.online|1214888.com\") or (xdm.target.domain ~= \"account.drive-google-com.tk|sinbad.io|login.drive-google-com.tk|coolpelear.com|ggspace.space|hauynescherben.net|grenzezank.com|customautobodyaz.com|spiegel.ltd|leparisien.pm|unian.pm|electionwatch.live|en-gb-wordpress.org|lepoint.foo|rbk.media|govreadyq.com|fox-news.in|warfareinsider.us|mypride.press|wpgate.zip|obozrevatel.ltd|besuchszweck.org|setup.sh|apunkagames.com|watchlinksinfo.com|crackingcity.com|pogothere.xyz|popcorneyes.xyz|trk.playstretch.host|e3iaibr.icu|cjjmobbbshhhu.shop|ncdanmark.org|infinite-7.com|ofupakoshi.com|autrevalevale.click|ldhqi4.fun|austintrafficlawyer.com|julieannmirabel.online|1214888.com\" or xdm.target.url ~= \"account.drive-google-com.tk|sinbad.io|login.drive-google-com.tk|coolpelear.com|ggspace.space|hauynescherben.net|grenzezank.com|customautobodyaz.com|spiegel.ltd|leparisien.pm|unian.pm|electionwatch.live|en-gb-wordpress.org|lepoint.foo|rbk.media|govreadyq.com|fox-news.in|warfareinsider.us|mypride.press|wpgate.zip|obozrevatel.ltd|besuchszweck.org|setup.sh|apunkagames.com|watchlinksinfo.com|crackingcity.com|pogothere.xyz|popcorneyes.xyz|trk.playstretch.hos|e3iaibr.icu|cjjmobbbshhhu.shop|ncdanmark.org|infinite-7.com|ofupakoshi.com|autrevalevale.click|ldhqi4.fun|austintrafficlawyer.com|julieannmirabel.online|1214888.com|symantke.com\")\n| alter domain = coalesce(xdm.network.http.url, xdm.target.domain, xdm.target.url)"}
{"prompt": "I want to find suspicious child processes that are launched by the ManageEngine ServiceDesk process and use potentially malicious tools.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\ManageEngine\\\\ServiceDesk\\\\.*\" and actor_process_image_path contains \"\\\\java.exe\") and (action_process_image_path ~= \".*\\\\AppVLP\\.exe\" or action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\curl\\.exe\" or action_process_image_path ~= \".*\\\\forfiles\\.exe\" or action_process_image_path ~= \".*\\\\mftrace\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\" or action_process_image_path ~= \".*\\\\notepad\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\query\\.exe\" or action_process_image_path ~= \".*\\\\reg\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\scrcons\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\systeminfo\\.exe\" or action_process_image_path ~= \".*\\\\whoami\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\")) and  not (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") and action_process_image_command_line contains \" stop\"))\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is being used to hide services by manipulating their security descriptors using Set-Service.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_file_original_name = \"pwsh.dll\") and (action_process_image_command_line contains \"Set-Service \" and action_process_image_command_line contains \"DCLCWPDTSD\") and (action_process_image_command_line contains \"-SecurityDescriptorSddl \" or action_process_image_command_line contains \"-sd \"))\n\n\n\n"}
{"prompt": "{I want to find events related to the Octopus Scanner Malware, specifically those involving files named \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Cache134\\.dat\" or \".*\\\\AppData\\\\Local\\\\Microsoft\\\\ExplorerSync\\.db\".} \n\n\nLet me know if you'd like me to refine this further!", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Cache134\\.dat\" or xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\ExplorerSync\\.db\")\n\n\n\n"}
{"prompt": " I want to see alerts for suspicious PowerShell downloads that use the .DownloadFile() or .DownloadString() methods and mention System.Net.WebClient within their context information. ", "response": "preset = xdr_event_log\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter (ContextInfo contains \"System.Net.WebClient\" and (ContextInfo contains \".DownloadFile(\" or ContextInfo contains \".DownloadString(\"))\n\n\n\n"}
{"prompt": " I want to detect suspicious changes made by administrators to MFA phone numbers for many users. ", "response": "config case_sensitive = false\n| datamodel dataset = mfa_mfa2_raw\n| filter xdm.event.operation in (\"changed user\") and xdm.event.operation in (\"phoneNumber\") and xdm.source.user.username !~= \"multifactorauthadsync|mfausersrv\"\n| fields xdm.event.type, xdm.event.description, xdm.event.operation,\nxdm.event.outcome, xdm.source.user.username, xdm.target.user.username,\nxdm.observer.action, xdm.source.host.hostname, xdm.event.original_event_type,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.source.ipv4, _time\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.user.username\n| filter array_length(xdm.target.user.username) >= 10\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to find potential command line path traversal evasion attempts on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\Windows\\\\.*\" and (action_process_image_command_line ~= \".*\\\\\\.\\.\\\\Windows\\\\.*\" or action_process_image_command_line ~= \".*\\\\\\.\\.\\\\System32\\\\.*\" or action_process_image_command_line ~= \".*\\\\\\.\\.\\\\\\.\\.\\\\.*\")) or action_process_image_command_line ~= \".*\\.exe\\\\\\.\\.\\\\.*\") and  not (action_process_image_command_line ~= \".*\\\\Google\\\\Drive\\\\googledrivesync\\.exe\\\\\\.\\.\\\\.*\" or action_process_image_command_line ~= \".*\\\\Citrix\\\\Virtual\\ Smart\\ Card\\\\Citrix\\.Authentication\\.VirtualSmartcard\\.Launcher\\.exe\\\\\\.\\.\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find suspicious PowerShell scripts that download files using WebClient.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"System.Net.WebClient\" and (ScriptBlockText contains \".DownloadFile(\" or ScriptBlockText contains \".DownloadFileAsync(\" or ScriptBlockText contains \".DownloadString(\" or ScriptBlockText contains \".DownloadStringAsync(\")\n\n\n\n"}
{"prompt": "I want to see events related to suspicious package installations on Linux endpoints that also involve tools like nmap, nc, netcat, wireshark, tshark, openconnect, or proxychains.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\/apt\" or action_process_image_path ~= \".*\\/apt\\-get\") and action_process_image_command_line contains \"install\") or (action_process_image_path ~= \".*\\/yum\" and (action_process_image_command_line contains \"localinstall\" or action_process_image_command_line contains \"install\")) or (action_process_image_path ~= \".*\\/rpm\" and action_process_image_command_line contains \"-i\") or (action_process_image_path ~= \".*\\/dpkg\" and (action_process_image_command_line contains \"--install\" or action_process_image_command_line contains \"-i\"))) and (action_process_image_command_line contains \"nmap\" or action_process_image_command_line contains \" nc\" or action_process_image_command_line contains \"netcat\" or action_process_image_command_line contains \"wireshark\" or action_process_image_command_line contains \"tshark\" or action_process_image_command_line contains \"openconnect\" or action_process_image_command_line contains \"proxychains\")\n\n\n\n"}
{"prompt": "I want to see alerts about unauthorized password changes on Windows systems, including details like the username involved, the outcome of the attempt, and any error codes.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4723\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE in (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| filter xdm.source.user.username not contains \"ANONYMOUS LOGON\" and xdm.source.user.username != xdm.target.user.username\n| filter xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where Msdt.exe creates files in suspicious directories like the Desktop, Startup folder, or system folders like ProgramData and PerfLogs.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\msdt\\.exe\" or xdm.source.process.name ~= \".*\\\\msdt\\.exe\") and (xdm.target.file.filename ~= \".*\\\\Desktop\\\\.*\" or xdm.target.file.filename ~= \".*\\\\Start\\ Menu\\\\Programs\\\\Startup\\\\.*\" or xdm.target.file.filename ~= \".*C\\:\\\\PerfLogs\\\\.*\" or xdm.target.file.filename ~= \".*C\\:\\\\ProgramData\\\\.*\" or xdm.target.file.filename ~= \".*C\\:\\\\Users\\\\Public\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect malicious PowerShell commands that might be trying to exploit systems.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Add-Exfiltration\" or ScriptBlockText contains \"Add-Persistence\" or ScriptBlockText contains \"Add-RegBackdoor\" or ScriptBlockText contains \"Add-RemoteRegBackdoor\" or ScriptBlockText contains \"Add-ScrnSaveBackdoor\" or ScriptBlockText contains \"ConvertTo-Rc4ByteStream\" or ScriptBlockText contains \"Decrypt-Hash\" or ScriptBlockText contains \"Disable-ADIDNSNode\" or ScriptBlockText contains \"Do-Exfiltration\" or ScriptBlockText contains \"Enable-ADIDNSNode\" or ScriptBlockText contains \"Enabled-DuplicateToken\" or ScriptBlockText contains \"Exploit-Jboss\" or ScriptBlockText contains \"Export-ADRCSV\" or ScriptBlockText contains \"Export-ADRExcel\" or ScriptBlockText contains \"Export-ADRHTML\" or ScriptBlockText contains \"Export-ADRJSON\" or ScriptBlockText contains \"Export-ADRXML\" or ScriptBlockText contains \"Find-Fruit\" or ScriptBlockText contains \"Find-GPOLocation\" or ScriptBlockText contains \"Find-TrustedDocuments\" or ScriptBlockText contains \"Get-ADIDNSNodeAttribute\" or ScriptBlockText contains \"Get-ADIDNSNodeOwner\" or ScriptBlockText contains \"Get-ADIDNSNodeTombstoned\" or ScriptBlockText contains \"Get-ADIDNSPermission\" or ScriptBlockText contains \"Get-ADIDNSZone\" or ScriptBlockText contains \"Get-ChromeDump\" or ScriptBlockText contains \"Get-ClipboardContents\" or ScriptBlockText contains \"Get-FoxDump\" or ScriptBlockText contains \"Get-GPPPassword\" or ScriptBlockText contains \"Get-IndexedItem\" or ScriptBlockText contains \"Get-KerberosAESKey\" or ScriptBlockText contains \"Get-Keystrokes\" or ScriptBlockText contains \"Get-LSASecret\" or ScriptBlockText contains \"Get-PassHashes\" or ScriptBlockText contains \"Get-RegAlwaysInstallElevated\" or ScriptBlockText contains \"Get-RegAutoLogon\" or ScriptBlockText contains \"Get-RemoteBootKey\" or ScriptBlockText contains \"Get-RemoteCachedCredential\" or ScriptBlockText contains \"Get-RemoteLocalAccountHash\" or ScriptBlockText contains \"Get-RemoteLSAKey\" or ScriptBlockText contains \"Get-RemoteMachineAccountHash\" or ScriptBlockText contains \"Get-RemoteNLKMKey\" or ScriptBlockText contains \"Get-RickAstley\" or ScriptBlockText contains \"Get-SecurityPackages\" or ScriptBlockText contains \"Get-ServiceFilePermission\" or ScriptBlockText contains \"Get-ServicePermission\" or ScriptBlockText contains \"Get-ServiceUnquoted\" or ScriptBlockText contains \"Get-SiteListPassword\" or ScriptBlockText contains \"Get-System\" or ScriptBlockText contains \"Get-TimedScreenshot\" or ScriptBlockText contains \"Get-UnattendedInstallFile\" or ScriptBlockText contains \"Get-Unconstrained\" or ScriptBlockText contains \"Get-USBKeystrokes\" or ScriptBlockText contains \"Get-VaultCredential\" or ScriptBlockText contains \"Get-VulnAutoRun\" or ScriptBlockText contains \"Get-VulnSchTask\" or ScriptBlockText contains \"Grant-ADIDNSPermission\" or ScriptBlockText contains \"Gupt-Backdoor\" or ScriptBlockText contains \"Invoke-ACLScanner\" or ScriptBlockText contains \"Invoke-ADRecon\" or ScriptBlockText contains \"Invoke-ADSBackdoor\" or ScriptBlockText contains \"Invoke-AgentSmith\" or ScriptBlockText contains \"Invoke-AllChecks\" or ScriptBlockText contains \"Invoke-ARPScan\" or ScriptBlockText contains \"Invoke-AzureHound\" or ScriptBlockText contains \"Invoke-BackdoorLNK\" or ScriptBlockText contains \"Invoke-BadPotato\" or ScriptBlockText contains \"Invoke-BetterSafetyKatz\" or ScriptBlockText contains \"Invoke-BypassUAC\" or ScriptBlockText contains \"Invoke-Carbuncle\" or ScriptBlockText contains \"Invoke-Certify\" or ScriptBlockText contains \"Invoke-ConPtyShell\" or ScriptBlockText contains \"Invoke-CredentialInjection\" or ScriptBlockText contains \"Invoke-DAFT\" or ScriptBlockText contains \"Invoke-DCSync\" or ScriptBlockText contains \"Invoke-DinvokeKatz\" or ScriptBlockText contains \"Invoke-DllInjection\" or ScriptBlockText contains \"Invoke-DNSUpdate\" or ScriptBlockText contains \"Invoke-DomainPasswordSpray\" or ScriptBlockText contains \"Invoke-DowngradeAccount\" or ScriptBlockText contains \"Invoke-EgressCheck\" or ScriptBlockText contains \"Invoke-Eyewitness\" or ScriptBlockText contains \"Invoke-FakeLogonScreen\" or ScriptBlockText contains \"Invoke-Farmer\" or ScriptBlockText contains \"Invoke-Get-RBCD-Threaded\" or ScriptBlockText contains \"Invoke-Gopher\" or ScriptBlockText contains \"Invoke-Grouper\" or ScriptBlockText contains \"Invoke-HandleKatz\" or ScriptBlockText contains \"Invoke-ImpersonatedProcess\" or ScriptBlockText contains \"Invoke-ImpersonateSystem\" or ScriptBlockText contains \"Invoke-InteractiveSystemPowerShell\" or ScriptBlockText contains \"Invoke-Internalmonologue\" or ScriptBlockText contains \"Invoke-Inveigh\" or ScriptBlockText contains \"Invoke-InveighRelay\" or ScriptBlockText contains \"Invoke-KrbRelay\" or ScriptBlockText contains \"Invoke-LdapSignCheck\" or ScriptBlockText contains \"Invoke-Lockless\" or ScriptBlockText contains \"Invoke-MalSCCM\" or ScriptBlockText contains \"Invoke-Mimikatz\" or ScriptBlockText contains \"Invoke-Mimikittenz\" or ScriptBlockText contains \"Invoke-MITM6\" or ScriptBlockText contains \"Invoke-NanoDump\" or ScriptBlockText contains \"Invoke-NetRipper\" or ScriptBlockText contains \"Invoke-Nightmare\" or ScriptBlockText contains \"Invoke-NinjaCopy\" or ScriptBlockText contains \"Invoke-OfficeScrape\" or ScriptBlockText contains \"Invoke-OxidResolver\" or ScriptBlockText contains \"Invoke-P0wnedshell\" or ScriptBlockText contains \"Invoke-Paranoia\" or ScriptBlockText contains \"Invoke-PortScan\" or ScriptBlockText contains \"Invoke-PoshRatHttp\" or ScriptBlockText contains \"Invoke-PostExfil\" or ScriptBlockText contains \"Invoke-PowerDump\" or ScriptBlockText contains \"Invoke-PowerShellTCP\" or ScriptBlockText contains \"Invoke-PowerShellWMI\" or ScriptBlockText contains \"Invoke-PPLDump\" or ScriptBlockText contains \"Invoke-PsExec\" or ScriptBlockText contains \"Invoke-PSInject\" or ScriptBlockText contains \"Invoke-PsUaCme\" or ScriptBlockText contains \"Invoke-ReflectivePEInjection\" or ScriptBlockText contains \"Invoke-ReverseDNSLookup\" or ScriptBlockText contains \"Invoke-Rubeus\" or ScriptBlockText contains \"Invoke-RunAs\" or ScriptBlockText contains \"Invoke-SafetyKatz\" or ScriptBlockText contains \"Invoke-SauronEye\" or ScriptBlockText contains \"Invoke-SCShell\" or ScriptBlockText contains \"Invoke-Seatbelt\" or ScriptBlockText contains \"Invoke-ServiceAbuse\" or ScriptBlockText contains \"Invoke-ShadowSpray\" or ScriptBlockText contains \"Invoke-Sharp\" or ScriptBlockText contains \"Invoke-Shellcode\" or ScriptBlockText contains \"Invoke-SMBScanner\" or ScriptBlockText contains \"Invoke-Snaffler\" or ScriptBlockText contains \"Invoke-Spoolsample\" or ScriptBlockText contains \"Invoke-SpraySinglePassword\" or ScriptBlockText contains \"Invoke-SSHCommand\" or ScriptBlockText contains \"Invoke-StandIn\" or ScriptBlockText contains \"Invoke-StickyNotesExtract\" or ScriptBlockText contains \"Invoke-SystemCommand\" or ScriptBlockText contains \"Invoke-Tasksbackdoor\" or ScriptBlockText contains \"Invoke-Tater\" or ScriptBlockText contains \"Invoke-Thunderfox\" or ScriptBlockText contains \"Invoke-ThunderStruck\" or ScriptBlockText contains \"Invoke-TokenManipulation\" or ScriptBlockText contains \"Invoke-Tokenvator\" or ScriptBlockText contains \"Invoke-TotalExec\" or ScriptBlockText contains \"Invoke-UrbanBishop\" or ScriptBlockText contains \"Invoke-UserHunter\" or ScriptBlockText contains \"Invoke-VoiceTroll\" or ScriptBlockText contains \"Invoke-Whisker\" or ScriptBlockText contains \"Invoke-WinEnum\" or ScriptBlockText contains \"Invoke-winPEAS\" or ScriptBlockText contains \"Invoke-WireTap\" or ScriptBlockText contains \"Invoke-WmiCommand\" or ScriptBlockText contains \"Invoke-WMIExec\" or ScriptBlockText contains \"Invoke-WScriptBypassUAC\" or ScriptBlockText contains \"Invoke-Zerologon\" or ScriptBlockText contains \"MailRaider\" or ScriptBlockText contains \"New-ADIDNSNode\" or ScriptBlockText contains \"New-HoneyHash\" or ScriptBlockText contains \"New-InMemoryModule\" or ScriptBlockText contains \"New-SOASerialNumberArray\" or ScriptBlockText contains \"Out-Minidump\" or ScriptBlockText contains \"PowerBreach\" or ScriptBlockText contains \"powercat \" or ScriptBlockText contains \"PowerUp\" or ScriptBlockText contains \"PowerView\" or ScriptBlockText contains \"Remove-ADIDNSNode\" or ScriptBlockText contains \"Remove-Update\" or ScriptBlockText contains \"Rename-ADIDNSNode\" or ScriptBlockText contains \"Revoke-ADIDNSPermission\" or ScriptBlockText contains \"Set-ADIDNSNode\" or ScriptBlockText contains \"Show-TargetScreen\" or ScriptBlockText contains \"Start-CaptureServer\" or ScriptBlockText contains \"Start-Dnscat2\" or ScriptBlockText contains \"Start-WebcamRecorder\" or ScriptBlockText contains \"VolumeShadowCopyTools\") and  not ((ScriptBlockText contains \"Get-SystemDriveInfo\" or ScriptBlockText ~= \".*C\\:\\\\ProgramData\\\\Amazon\\\\EC2\\-Windows\\\\Launch\\\\Module\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find events related to scheduled task creations on endpoints that contain specific strings associated with the Diamond Sleet APT group exploiting the TeamCity vulnerability CVE-2023-42793.", "response": "preset = xdr_event_log\n| alter TaskName = regextract(to_json_string(action_evtlog_data_fields)->TaskName{}, \"\\\"(.*)\\\"\")\n| alter TaskContent = regextract(to_json_string(action_evtlog_data_fields)->TaskContent{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4698 and TaskName = \"\\\\Windows TeamCity Settings User Interface\" and TaskContent contains \"uTYNkfKxHiZrx3KJ\")\n\n\n\n"}
{"prompt": "I want to see devices that have had three or more unauthorized access attempts via Telnet or SNMP within a two minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 2m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| filter msg_id ~= \"^IP-4-PERMITFAIL\"\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ibpmdeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to see events where a System Control Panel item was loaded from an unexpected location.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\hdwwiz\\.cpl\" or action_module_path ~= \".*\\\\appwiz\\.cpl\") and  not ((action_module_path ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or action_module_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_module_path ~= \".*\\:\\\\Windows\\\\WinSxS\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find indicators of malicious activity where attackers are using WMIC to load JavaScript or VBScript libraries.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\wmic\\.exe\" and (action_module_path ~= \".*\\\\jscript\\.dll\" or action_module_path ~= \".*\\\\vbscript\\.dll\"))\n\n\n\n"}
{"prompt": "I want to see all instances where Whoami.exe was used with the \"-all\" flag to retrieve information.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\whoami\\.exe\" or actor_process_file_original_name = \"whoami.exe\") and action_process_image_command_line contains \" -all\")\n\n\n\n"}
{"prompt": "I want to find instances where an uncommon application deleted the \"Zone.Identifier\" file.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\:Zone\\.Identifier\" and  not ((xdm.target.process.name in (\"C:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.exe\", \"C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe\", \"C:\\\\Windows\\\\explorer.exe\", \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\", \"C:\\\\Windows\\\\SysWOW64\\\\explorer.exe\", \"C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\") or xdm.source.process.name in (\"C:\\\\Program Files\\\\PowerShell\\\\7-preview\\\\pwsh.exe\", \"C:\\\\Program Files\\\\PowerShell\\\\7\\\\pwsh.exe\", \"C:\\\\Windows\\\\explorer.exe\", \"C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\", \"C:\\\\Windows\\\\SysWOW64\\\\explorer.exe\", \"C:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe\"))) and  not ((xdm.target.process.name in (\"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\", \"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\") or xdm.source.process.name in (\"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\", \"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\")) or (xdm.target.process.name in (\"C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe\", \"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\") or xdm.source.process.name in (\"C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe\", \"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\")))\n\n\n\n"}
{"prompt": "I want to detect files created with an \".LNK\" extension as a second part of their filename, especially if they have common file extensions like .doc, .docx, .jpg, etc. I'm suspicious of this because it might be malware trying to hide.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\.lnk\" and (xdm.target.file.filename contains \".doc.\" or xdm.target.file.filename contains \".docx.\" or xdm.target.file.filename contains \".jpg.\" or xdm.target.file.filename contains \".pdf.\" or xdm.target.file.filename contains \".ppt.\" or xdm.target.file.filename contains \".pptx.\" or xdm.target.file.filename contains \".xls.\" or xdm.target.file.filename contains \".xlsx.\")) and  not (xdm.target.file.filename ~= \".*\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\Recent\\\\.*\") and  not ((((xdm.target.process.name ~= \".*\\\\excel\\.exe\" or xdm.target.process.name ~= \".*\\\\powerpnt\\.exe\" or xdm.target.process.name ~= \".*\\\\winword\\.exe\") or (xdm.source.process.name ~= \".*\\\\excel\\.exe\" or xdm.source.process.name ~= \".*\\\\powerpnt\\.exe\" or xdm.source.process.name ~= \".*\\\\winword\\.exe\")) and xdm.target.file.filename ~= \".*\\\\AppData\\\\Roaming\\\\Microsoft\\\\Office\\\\Recent\\\\.*\") or ((xdm.target.process.name ~= \".*\\\\excel\\.exe\" or xdm.source.process.name ~= \".*\\\\excel\\.exe\") and xdm.target.file.filename contains \"\\\\AppData\\\\Roaming\\\\Microsoft\\\\Excel\") or ((xdm.target.process.name ~= \".*\\\\powerpnt\\.exe\" or xdm.source.process.name ~= \".*\\\\powerpnt\\.exe\") and xdm.target.file.filename contains \"\\\\AppData\\\\Roaming\\\\Microsoft\\\\PowerPoint\") or ((xdm.target.process.name ~= \".*\\\\winword\\.exe\" or xdm.source.process.name ~= \".*\\\\winword\\.exe\") and xdm.target.file.filename contains \"\\\\AppData\\\\Roaming\\\\Microsoft\\\\Word\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential ransomware or unauthorized MBR tampering detected through suspicious activity using bcdedit.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\bcdedit\\.exe\" or actor_process_file_original_name = \"bcdedit.exe\") and (action_process_image_command_line contains \"delete\" or action_process_image_command_line contains \"deletevalue\" or action_process_image_command_line contains \"import\" or action_process_image_command_line contains \"safeboot\" or action_process_image_command_line contains \"network\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious executions of msiexec.exe that might be used by adversaries to run malicious payloads.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\msiexec\\.exe\" and action_process_image_command_line contains \" -y\") and  not ((action_process_image_command_line contains \"\\\\MsiExec.exe\\\" /Y \\\"C:\\\\Program Files\\\\Bonjour\\\\mdnsNSP.dll\" or action_process_image_command_line contains \"\\\\MsiExec.exe\\\" /Y \\\"C:\\\\Program Files (x86)\\\\Bonjour\\\\mdnsNSP.dll\" or action_process_image_command_line contains \"\\\\MsiExec.exe\\\" /Y \\\"C:\\\\Program Files (x86)\\\\Apple Software Update\\\\ScriptingObjectModel.dll\" or action_process_image_command_line contains \"\\\\MsiExec.exe\\\" /Y \\\"C:\\\\Program Files (x86)\\\\Apple Software Update\\\\SoftwareUpdateAdmin.dll\" or action_process_image_command_line ~= \".*\\\\MsiExec\\.exe\\\"\\ \\/Y\\ \\\"C\\:\\\\Windows\\\\CCM\\\\.*\" or action_process_image_command_line ~= \".*\\\\MsiExec\\.exe\\\"\\ \\/Y\\ C\\:\\\\Windows\\\\CCM\\\\.*\" or action_process_image_command_line contains \"\\\\MsiExec.exe\\\" -Y \\\"C:\\\\Program Files\\\\Bonjour\\\\mdnsNSP.dll\" or action_process_image_command_line contains \"\\\\MsiExec.exe\\\" -Y \\\"C:\\\\Program Files (x86)\\\\Bonjour\\\\mdnsNSP.dll\" or action_process_image_command_line contains \"\\\\MsiExec.exe\\\" -Y \\\"C:\\\\Program Files (x86)\\\\Apple Software Update\\\\ScriptingObjectModel.dll\" or action_process_image_command_line contains \"\\\\MsiExec.exe\\\" -Y \\\"C:\\\\Program Files (x86)\\\\Apple Software Update\\\\SoftwareUpdateAdmin.dll\" or action_process_image_command_line ~= \".*\\\\MsiExec\\.exe\\\"\\ \\-Y\\ \\\"C\\:\\\\Windows\\\\CCM\\\\.*\" or action_process_image_command_line ~= \".*\\\\MsiExec\\.exe\\\"\\ \\-Y\\ C\\:\\\\Windows\\\\CCM\\\\.*\"))\n\n\n\n"}
{"prompt": "{I want to see all failed login attempts on the PAM platform that are flagged as critical events.} \n\n\nThis prompt captures the essence of the query description while using natural language.  It focuses on \"failed login attempts\" and emphasizes the \"critical event\" aspect.", "response": "config case_sensitive = false\n| dataset = hitachi_pam_raw\n| filter oper ~= \"PWAR\"\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nevent_desc = \"Access is revoked to a password on a managed system in Privileged Access Manager.\",\ndevice_type = \"pam\""}
{"prompt": "I want to find activity related to APT40 using a Dropbox tool with a specific user agent.", "response": "datamodel\n| filter (xdm.network.http.browser = \"Mozilla/5.0 (Windows NT 6.1; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/36.0.1985.143 Safari/537.36\" and xdm.network.http.domain = \"api.dropbox.com\")\n\n\n\n"}
{"prompt": "I want to see alerts related to rare instances of remote thread creation using uncommon source images like bash.exe, cscript.exe, and others listed.", "response": "datamodel\n| filter (xdm.source.process.name ~= \".*\\\\bash\\.exe\" or xdm.source.process.name ~= \".*\\\\cscript\\.exe\" or xdm.source.process.name ~= \".*\\\\cvtres\\.exe\" or xdm.source.process.name ~= \".*\\\\defrag\\.exe\" or xdm.source.process.name ~= \".*\\\\dnx\\.exe\" or xdm.source.process.name ~= \".*\\\\esentutl\\.exe\" or xdm.source.process.name ~= \".*\\\\excel\\.exe\" or xdm.source.process.name ~= \".*\\\\expand\\.exe\" or xdm.source.process.name ~= \".*\\\\find\\.exe\" or xdm.source.process.name ~= \".*\\\\findstr\\.exe\" or xdm.source.process.name ~= \".*\\\\forfiles\\.exe\" or xdm.source.process.name ~= \".*\\\\gpupdate\\.exe\" or xdm.source.process.name ~= \".*\\\\hh\\.exe\" or xdm.source.process.name ~= \".*\\\\installutil\\.exe\" or xdm.source.process.name ~= \".*\\\\lync\\.exe\" or xdm.source.process.name ~= \".*\\\\makecab\\.exe\" or xdm.source.process.name ~= \".*\\\\mDNSResponder\\.exe\" or xdm.source.process.name ~= \".*\\\\monitoringhost\\.exe\" or xdm.source.process.name ~= \".*\\\\msbuild\\.exe\" or xdm.source.process.name ~= \".*\\\\mshta\\.exe\" or xdm.source.process.name ~= \".*\\\\mspaint\\.exe\" or xdm.source.process.name ~= \".*\\\\outlook\\.exe\" or xdm.source.process.name ~= \".*\\\\ping\\.exe\" or xdm.source.process.name ~= \".*\\\\provtool\\.exe\" or xdm.source.process.name ~= \".*\\\\python\\.exe\" or xdm.source.process.name ~= \".*\\\\regsvr32\\.exe\" or xdm.source.process.name ~= \".*\\\\robocopy\\.exe\" or xdm.source.process.name ~= \".*\\\\runonce\\.exe\" or xdm.source.process.name ~= \".*\\\\sapcimc\\.exe\" or xdm.source.process.name ~= \".*\\\\smartscreen\\.exe\" or xdm.source.process.name ~= \".*\\\\spoolsv\\.exe\" or xdm.source.process.name ~= \".*\\\\tstheme\\.exe\" or xdm.source.process.name ~= \".*\\\\userinit\\.exe\" or xdm.source.process.name ~= \".*\\\\vssadmin\\.exe\" or xdm.source.process.name ~= \".*\\\\vssvc\\.exe\" or xdm.source.process.name ~= \".*\\\\w3wp\\.exe\" or xdm.source.process.name ~= \".*\\\\winscp\\.exe\" or xdm.source.process.name ~= \".*\\\\winword\\.exe\" or xdm.source.process.name ~= \".*\\\\wmic\\.exe\" or xdm.source.process.name ~= \".*\\\\wscript\\.exe\")\n\n\n\n"}
{"prompt": "I want to find users who are logging on at unusual times outside of their normal schedule.", "response": "datamodel dataset in (microsoft_windows_raw, unix_auditd_raw)\n| filter (xdm.observer.action in (\"Logon\", \"Credential Validation\", \"Special Logon\") or xdm.event.type = \"USER_LOGIN\") and xdm.event.outcome = \"success\" and (xdm.source.user.username != null and xdm.source.user.username != \"*$\")\n| alter day = extract_time(_time, \"day\")\n| alter v = coalesce(microsoft_windows_raw._vendor, unix_auditd_raw._vendor)\n| comp count() as cnt,\nmin(_time) as mintime,\nmax(_time) as maxtime by xdm.source.user.username,\nday,\nv\n| comp values(maxtime) as max_vals,\nvalues(mintime) as min_vals,\navg(extract_time(maxtime, \"hour\")) as avg_latest,\navg(extract_time(mintime, \"hour\")) as avg_eraliest,\nmax(maxtime) as current_login by xdm.source.user.username,\nv\n| filter array_length(max_vals) > 5\n| filter extract_time(current_login, \"day\") = extract_time(current_time(), \"day\")\n\n| filter extract_time(current_login, \"hour\") > add(round(avg_latest), 1) or extract_time(current_login, \"hour\") < subtract(round(avg_eraliest), 1)"}
{"prompt": "I want to find potential persistence techniques that involve attackers modifying the \"Extensions\" value in the LSA Extension Config registry key.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\LsaExtensionConfig\\\\LsaSrv\\\\Extensions\"\n\n\n\n"}
{"prompt": "I want to find alerts about corrupted packets encountered by Microsoft Message Queue (MSMQ).", "response": "preset = xdr_event_log\n| alter Level = regextract(to_json_string(action_evtlog_data_fields)->Level{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"MSMQ\" and action_evtlog_event_id = 2027 and Level = 2)\n\n\n\n"}
{"prompt": "I want to find processes on Linux endpoints that are performing remote system discovery, specifically those using tools like arp and ping.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/arp\" and action_process_image_command_line contains \"-a\") or (action_process_image_path ~= \".*\\/ping\" and (action_process_image_command_line contains \" 10.\" or action_process_image_command_line contains \" 192.168.\" or action_process_image_command_line contains \" 172.16.\" or action_process_image_command_line contains \" 172.17.\" or action_process_image_command_line contains \" 172.18.\" or action_process_image_command_line contains \" 172.19.\" or action_process_image_command_line contains \" 172.20.\" or action_process_image_command_line contains \" 172.21.\" or action_process_image_command_line contains \" 172.22.\" or action_process_image_command_line contains \" 172.23.\" or action_process_image_command_line contains \" 172.24.\" or action_process_image_command_line contains \" 172.25.\" or action_process_image_command_line contains \" 172.26.\" or action_process_image_command_line contains \" 172.27.\" or action_process_image_command_line contains \" 172.28.\" or action_process_image_command_line contains \" 172.29.\" or action_process_image_command_line contains \" 172.30.\" or action_process_image_command_line contains \" 172.31.\" or action_process_image_command_line contains \" 127.\" or action_process_image_command_line contains \" 169.254.\")))\n\n\n\n"}
{"prompt": " I want to detect potential information disclosure attempts based on firewall logs and identify suspicious sources connecting to internal IPs. ", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"disclosure attempt\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name ~= \"qualys\"\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| join conflict_strategy = left type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.target.ipv4\n| filter (xdm.target.is_internal_ip = true or ip_address != null)\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| join type = left\n(datamodel dataset = check_point_vpn_1_firewall_1_raw\n| alter origin = check_point_vpn_1_firewall_1_raw.origin\n| filter xdm.observer.action = \"accept\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name ~= \"qualys\"\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.target.ipv4\n| filter (xdm.target.is_internal_ip = true or ip_address != null)\n| fields xdm.observer.action, xdm.source.ipv4 as fw_src_ip,\nxdm.source.port, xdm.event.description, xdm.target.ipv4,\nxdm.target.is_internal_ip\n) as fw_events fw_events.fw_src_ip = xdm.source.ipv4\n| filter fw_src_ip != null\n| comp values(*) as * by xdm.source.ipv4,\n_time\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events where a service was installed with a suspicious file path pattern, like those found in ProgramData folders or directly under C:.", "response": "preset = xdr_event_log\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (actor_process_image_path ~= \"^[Cc]\\:\\\\[Pp]rogram[Dd]ata\\\\.{1,9}\\.exe\" or actor_process_image_path ~= \"^[Cc]\\:\\\\.{1,9}\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect attempts to disable ETW tracing using PowerShell.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Remove-EtwTraceProvider \" or (ScriptBlockText contains \"Set-EtwTraceProvider \" and ScriptBlockText contains \"0x11\"))\n\n\n\n"}
{"prompt": " I want to see a report of users who have failed login attempts multiple times on Unix servers, specifically those that are part of the \"isg_server_qualys_src\" device group and also aren't listed in the IIS scan list or the AD security groups containing \"UNIX_Group_R1\" or \"UNIX_Group_R2\".", "response": "datamodel dataset = linux_linux_raw\n| bin _time span = 1m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE = \"edgeverve_unix\"\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.event.type in (\"login\", \"SSH\", \"sshd\", \"sssh\", \"User\", \"groupdel\", \"audit\", \"Successfully\", \"auditd\", \"input_userauth_request\", \"Accepted\", \"sudo\", \"userdel\", \"root\", \"Failed\", \"usermod\", \"su\", \"LOGIN\", \"passwd\", \"pam_authenticate\", \"unix_chkpwd\") and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol != \"ssh2\" and xdm.source.user.username not in (null, NULL, \"UNKNOWN_USER\", \"autoid\", \"migbrac\", \"crm_appscan\", \"finacle_appscan\", \"enterprisedb\", \"gs1adm\", \"ftadm\", \"qantasadm\", \"crmadmin\", \"jtrstadm\", \"bciadm\", \"feadm\", \"ING11ADM\", \"iobadm\", \"gstatsadm\", \"bmmig\", \"eqcuadm\", \"dopadm\", \"ebbpadm2\", \"ora12102\", \"ora12101\", \"fedadm\", \"INGADM\", \"medadm\", \"medadm1\", \"fnimsadm\", \"ora11g\", \"ubsadm\", \"quantasadm\", \"ingadmin\", \"devops\", \"jtbadm\", \"qntsadm\", \"fbmigadm\", \"fbmigadm\", \"eximadm\", \"kotadm\", \"dfsdev1\", \"sonaradm\", \"abreladm\", \"qudoseb\", \"wasadm\", \"ntbadm\", \"ubmigadm\", \"tstsp\", \"scmod03\", \"trgadm\", \"fecbdadm\", \"frel1adm\", \"_pamunix\", \"_pamsdam\", \"finadm\", \"git\") and xdm.source.ipv4 not in (\"10.181.11.142\", \"10.156.118.117\", \"10.82.136.11\", \"10.10.100.68\", \"10.122.128.21\", \"10.152.163.42\", \"172.18.20.31\", \"172.18.38.149\", \"10.182.11.41\", \"172.18.1.25\", \"10.67.122.149\", \"10.219.7.67\", \"10.95.9.148\", \"10.118.132.98\", \"172.27.104.10\", \"10.122.128.20\", \"10.219.7.68\", \"10.139.38.106\", \"172.18.22.85\", \"10.67.122.151\", \"10.185.122.10\", \"10.76.63.68\", \"10.205.11.115\", \"10.67.122.150\", \"10.158.100.43\", \"10.82.136.10\", \"10.85.174.246\", \"10.78.172.244\", \"172.18.22.176\", \"10.204.11.97\", \"10.87.22.109\", \"10.67.122.148\", \"10.156.118.116\", \"172.18.43.37\", \"10.82.136.12\", \"10.139.38.107\") and xdm.target.host.hostname not in (\"bl4ul279\", \"evosfncll055\") and device_ip not in (\"10.73.122.222\", \"10.73.122.39\", \"10.73.122.201\", \"10.73.122.233\", \"10.73.14.195\", \"10.73.90.39\", \"10.73.84.23\")\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"isg_server_qualys_src\")\n) as device_grps device_grps.IP = xdm.source.ipv4\n| filter IP = null\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name, security_groups\n| filter security_groups contains \"UNIX_Group_R1\" or security_groups contains \"UNIX_Group_R2\"\n) as ad_users ad_users.sam_account_name = xdm.source.user.username\n| filter sam_account_name = null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, device_ip, _vendor, _product\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 7\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 7)), 1)"}
{"prompt": " I want to find instances where potentially suspicious child processes are launched from ClickOnce applications on my endpoints. ", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Apps\\\\2\\.0\\\\.*\" and (action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\explorer\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\" or action_process_image_path ~= \".*\\\\nltest\\.exe\" or action_process_image_path ~= \".*\\\\notepad\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\reg\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\werfault\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see all instances where Dfsvc.exe creates child processes within the AppData\\Local\\Apps\\2.0 folder.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\dfsvc\\.exe\" and action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Apps\\\\2\\.0\\\\\")\n\n\n\n"}
{"prompt": "I want to find potential tampering with SentinelOne's Shell Context Menu Scan command.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\shell\\\\SentinelOneScan\\\\command\\\\.*\" and  not ((((action_registry_value_name ~= \"C\\:\\\\Program\\ Files\\\\SentinelOne\\\\Sentinel\\ Agent.*\" or action_registry_value_name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\SentinelOne\\\\Sentinel\\ Agent.*\") or (action_registry_data ~= \"C\\:\\\\Program\\ Files\\\\SentinelOne\\\\Sentinel\\ Agent.*\" or action_registry_data ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\SentinelOne\\\\Sentinel\\ Agent.*\")) and (action_registry_value_name contains \"\\\\SentinelScanFromContextMenu.exe\" or action_registry_data contains \"\\\\SentinelScanFromContextMenu.exe\")) or (actor_process_image_path ~= \".*C\\:\\\\Program\\ Files\\\\SentinelOne\\\\\" or actor_process_image_path ~= \".*C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\SentinelOne\\\\\"))\n\n\n\n"}
{"prompt": "I want to detect potential Meterpreter or Cobalt Strike activity where an attacker installs a service with suspicious command lines.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter action_evtlog_event_id = 4697 and (((ServiceFileName contains \"/c\" and ServiceFileName contains \"echo\" and ServiceFileName ~= \".*\\\\pipe\\\\.*\") and (ServiceFileName contains \"cmd\" or ServiceFileName contains \"%COMSPEC%\")) or (ServiceFileName contains \"rundll32\" and ServiceFileName contains \".dll,a\" and ServiceFileName contains \"/p:\") or ServiceFileName ~= \"\\\\\\\\127\\.0\\.0\\.1\\\\ADMIN\\$\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find instances of potential malicious use of Manage-bde.wsf for proxy execution, specifically looking for wscript.exe or cscript.exe processes with related command lines.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wscript\\.exe\" or actor_process_file_original_name = \"wscript.exe\") and action_process_image_command_line contains \"manage-bde.wsf\") or (((actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") and actor_process_image_command_line contains \"manage-bde.wsf\") and  not (action_process_image_path ~= \".*\\\\cmd\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find potential encrypted registry blobs related to SNAKE malware using Windows Event Log data.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Classes\\\\\\.wav\\\\OpenWithProgIds\\\\.*\" and  not ((action_registry_key_name ~= \".*\\.AssocFile\\.WAV\" or action_registry_key_name contains \".wav.\"))\n\n\n\n"}
{"prompt": "I want to see alerts about someone removing full mailbox permissions for users other than the owner in Office365.", "response": "config case_sensitive = false\n| datamodel dataset = msft_admin_audit_raw\n| filter xdm.observer.action in (\"Remove-MailboxPermission\", \"Remove-ADPermission\", \"Remove-MailboxFolderPermission\", \"Remove-RecipientPermission\")\n| alter parameter_length = array_length(split(xdm.event.description, \" \")),\nparameter_values = split(xdm.event.operation, \" \")\n| alter mailbox = arrayindex(split(xdm.target.user.username, \"/\"), -1),\nMailboxAccessGivenTo = if(parameter_length = 3, arrayindex(parameter_values, 1), arrayindex(parameter_values, 3)),\naccessrights = if(parameter_length = 3, arrayindex(parameter_values, 2), arrayindex(parameter_values, 1)),\nlog_src_name = \"AdminAudit\",\nserver_name = msft_admin_audit_raw._collector_hostname\n| filter accessrights ~= \"fullaccess\" or xdm.event.operation ~= \"fullaccess\"\n| fields xdm.target.user.username, xdm.source.user.username,\nxdm.observer.action, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.event.id, xdm.event.description, xdm.event.operation,\nxdm.event.operation_sub_type, xdm.observer.type,\nxdm.event.is_completed, xdm.logon.is_elevated, MailboxAccessGivenTo,\nmailbox, accessrights, _time, _insert_time, log_src_name,\nserver_name, msft_admin_audit_raw.rundate\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where a service is installed by a process with a ClientProcessId or ParentProcessId of 0, indicating potentially unusual client activity.", "response": "preset = xdr_event_log\n| alter ClientProcessId = regextract(to_json_string(action_evtlog_data_fields)->ClientProcessId{}, \"\\\"(.*)\\\"\")\n| alter ParentProcessId = regextract(to_json_string(action_evtlog_data_fields)->ParentProcessId{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ClientProcessId = 0 or ParentProcessId = 0))\n\n\n\n"}
{"prompt": "I want to find events related to disabling privacy settings through registry changes on Windows.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\OOBE\\\\DisablePrivacyExperience\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to see how many times SNMP authentication has failed on Cisco Catalyst devices over the last few hours and identify the specific devices experiencing the most failures.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"SNMP-3-AUTHFAIL\")\n| comp count() as matched_events,\nlatest(_time) as event_time,\nvalues(*) as * by device_ip,\nxdm.source.ipv4\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ibpmdeviceip\",\naggregation_criteria1 = \"ibpmsourceip\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", event_time)"}
{"prompt": "I want to see which RedCarpet users have accessed websites categorized as malicious or suspicious according to Symantec BlueCoat.", "response": "config case_sensitive = false\n| dataset = symantec_bluecoatwss_raw\n| Bin _time span = 5m\n| alter user_agent = replace(arrayindex(regextract(_raw_json, \"cs\\(User\\-Agent\\)\\\"\\: ([^\\,]+)\"), 0), \"\\\"\", \"\"),\nalias_host = json_extract_scalar(_raw_json, \"$.x-client-device-name\"),\nresult = json_extract_scalar(_raw_json, \"$.cs-method\"),\nrbytes = json_extract_scalar(_raw_json, \"$.cs-bytes\"),\ngroups = json_extract_scalar(_raw_json, \"$.cs-auth-groups\"),\nbytes_src = json_extract_scalar(_raw_json, \"$.sc-bytes\")\n| fields `cs - host`, `sc - filter - result`, `s - ip` as ipaddr,\n`x - bluecoat - appliance - name`, `cs - categories`,\n`cs - userdn`, `s - action`, `c - ip` as src_ip,\n`r - ip` as dst_ip, `cs - uri - path`, `cs - uri - query`,\n`cs - uri - extension`, user_agent, alias_host,\nresult, rbytes, groups, bytes_src\n| filter `cs - categories` contains \"Spam\" or `cs - categories` contains \"Suspicious\" or `cs - categories` contains \"Compromised\" or `cs - categories` contains \"Malicious\" or `cs - categories` contains \"Scam\" or `cs - categories` contains \"Malnets\" or `cs - categories` contains \"Dating\" or `cs - categories` contains \"Phishing\" or `cs - categories` contains \"Adult\" or `cs - categories` contains \"Games\" or `cs - categories` contains \"Pornography\" or `cs - categories` contains \"Gambling\" or `cs - categories` contains \"Downloads\" or `cs - categories` contains \"Cryptocurrency\" or `cs - categories` contains \"Alcohol\" or `cs - categories` contains \"Uncategorized\"\n| join\n(dataset = redcarpet_users_list\n| fields username\n) as redcarpusers redcarpusers.username = `cs - userdn`\n| comp values(`cs - categories`) as sym_category,\nvalues(`cs - host`) as sym_url,\nvalues(`ipaddr`) as sym_ip_addr,\nvalues(`cs - userdn`) as sym_user,\nvalues(`sc - filter - result`) as sym_filter_result,\nvalues(`s - action`) as sym_action,\nvalues(src_ip) as sym_src_ip,\nvalues(dst_ip) as sym_dst_ip,\nvalues(user_agent) as sym_user_agent,\nvalues(`x - bluecoat - appliance - name`) as sym_app_name,\nvalues(`cs - uri - path`) as sym_uri_path,\nvalues(`cs - uri - query`) as sym_uri_query,\nvalues(`cs - uri - extension`) as sym_uri_extension,\nvalues(alias_host) as sym_alias_host,\nvalues(rbytes) as sym_rbytes,\nvalues(groups) as sym_groups,\nvalues(bytes_src) as sym_bytes_src,\ncount() as matched_events by `cs - userdn`,\nipaddr"}
{"prompt": "I want to see all successful login events for users in the COLP group on our Fortinet Fortigate VPN.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter xdm.event.original_event_type in (\"0101039424\") and (xdm.source.user.groups contains \"COLP\" or xdm.target.user.groups contains \"COLP\")\n\n| view column order = populated\n"}
{"prompt": "I want to see events related to credential dumping tools being executed on my endpoints.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \"cachedump\" or actor_process_image_path contains \"dumpsvc\" or actor_process_image_path contains \"fgexec\" or actor_process_image_path contains \"gsecdump\" or actor_process_image_path contains \"mimidrv\" or actor_process_image_path contains \"pwdump\" or actor_process_image_path contains \"servpw\"))\n\n\n\n"}
{"prompt": "I want to find events related to changes in the screensaver binary path on Windows systems, excluding modifications made by standard system processes like rundll32 and explorer.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\Control\\ Panel\\\\Desktop\\\\SCRNSAVE\\.EXE\" and  not ((actor_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_image_path ~= \".*\\\\explorer\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see when users created accounts with \"Password Never Expire\" enabled.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4738\")\n| alter action = arrayindex(regextract(microsoft_windows_raw.message, \"User Account Control:\\t\\n\\t\\t'Password Not Required' - Disabled\\n\\t\\t'Don't Expire Password' - (.*)\\n\\t\"), 0)\n| filter action contains \"enabled\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, action\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see failed login attempts over the last 5 minutes that might indicate a brute force attack.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| bin _time span = 5m\n| filter xdm.event.id in (\"4625\") and xdm.logon.type In(XDM_CONST.LOGON_TYPE_INTERACTIVE, XDM_CONST.LOGON_TYPE_REMOTE_INTERACTIVE)\n| filter xdm.source.user.username not contains \"$\"\n\n| join type = left\n(dataset = device_group_static_list\n) as evhosts evhosts.HOSTNAME = xdm.source.host.hostname or evhosts.IP = microsoft_windows_raw._reporting_device_ip\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp count() as matched_events,\nvalues(*) as * by _time,\nxdm.source.user.username\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where a process on Linux endpoints uses base64 encoding followed by piping to bash or sh.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"base64 \" and ((action_process_image_command_line contains \"| bash \" or action_process_image_command_line contains \"| sh \" or action_process_image_command_line contains \"|bash \" or action_process_image_command_line contains \"|sh \") or (action_process_image_command_line ~= \".*\\ \\|sh\" or action_process_image_command_line ~= \".*\\|\\ bash\" or action_process_image_command_line ~= \".*\\|\\ sh\" or action_process_image_command_line ~= \".*\\|bash\")))\n\n\n\n"}
{"prompt": "I want to see alerts about potential sideloading of RjvPlatform.dll from locations other than its default directory on Windows systems.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\RjvPlatform\\.dll\" and actor_process_image_path = \"\\\\SystemResetPlatform.exe\") and  not (actor_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\SystemResetPlatform\\\\.*\")\n\n\n\n"}
{"prompt": " I want to see events where ConDrv is accessed on the Security ObjectServer for potential lateral movement. ", "response": "preset = xdr_event_log\n| alter ObjectServer = regextract(to_json_string(action_evtlog_data_fields)->ObjectServer{}, \"\\\"(.*)\\\"\")\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4674 and ObjectServer = \"Security\" and ObjectType = \"File\" and ObjectName = \"\\\\Device\\\\ConDrv\")\n\n\n\n"}
{"prompt": "I want to find Windows events with ID 521 that have an error track count of 10 or higher.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (521)\n| alter Username = user -> name,\nUsertype = user -> type,\nUserdomain = user -> domain,\nUseridentifier = user -> identifier,\nErrorStatusCode = event_data -> param1,\nErrorcode = event_data -> param2,\nErrortrackcount = to_integer(event_data -> param3)\n| filter Errortrackcount >= 10\n| fields message, keywords, event_action, event_result,\n_collector_hostname as LogSourceHostname, _collector_ip_address as LogSourceIPAddress,\n_product, _vendor, host_name, Username, Userdomain,\nUsertype, Useridentifier, ErrorStatusCode, Errorcode,\nErrortrackcount, event_id"}
{"prompt": "I want to find PowerShell code artifacts that contain specific strings commonly found in poorly obfuscated attack payloads like Cobalt Strike and PoshC2.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter (Payload contains \"$DoIt\" or Payload contains \"harmj0y\" or Payload contains \"mattifestation\" or Payload contains \"_RastaMouse\" or Payload contains \"tifkin_\" or Payload contains \"0xdeadbeef\")\n\n\n\n"}
{"prompt": "I want to find out if there have been any configuration changes made on our routers and switches that weren't performed by the predefined administrator accounts.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0),\nxdm.source.user.username = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"by\\s([^\\s]+)\"), 0),\nxdm.source.ipv4 = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter ((msg_id in (\"LINK-3-UPDOWN\") and xdm.event.description contains \"Link state change\") or (xdm.event.description ~= \"Configure by user on terminal|Configured from file by console\") or (xdm.event.description ~= \"configured from console\") or (msg_id in (\"ETHPORT-5-IF_DOWN_CFG_CHANGE\", \"ETHPORT-5-IF_DOWN_LINK_FAILURE\") and xdm.event.description contains \"interface down\") or (msg_id in (\"VSHD-5-VSHD_SYSLOG_CONFIG_I\") and xdm.event.description contains \"Configured from terminal by user\") or (msg_id in (\"ETHPORT-5-IF_RX_FLOW_CONTROL\") and xdm.event.description contains \"operational Receive Flow Control state changed to off\")) and xdm.source.user.username not in (\"INDPRIADM\", \"USAPRIADM\", \"AUSPRIADM\", \"EURPRIADM\", null, \"\")\n| alter aggregation_criteria = \"ildeviceip\",\naggregation_criteria1 = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious processes that use AccCheckConsole.exe and run DLLs within a window.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\AccCheckConsole\\.exe\" or actor_process_file_original_name = \"AccCheckConsole.exe\") and (action_process_image_command_line contains \" -window \" and action_process_image_command_line contains \".dll\"))\n\n\n\n"}
{"prompt": "I want to find instances where \"forfiles\" is used from an unexpected location to potentially launch a disguised \"cmd.exe\" process.", "response": "preset = xdr_process\n| filter ((actor_process_image_command_line ~= \".*\\.exe\" or actor_process_image_command_line ~= \".*\\.exe\\\"\") and action_process_image_path ~= \".*\\\\cmd\\.exe\" and action_process_image_command_line ~= \"\\/c\\ echo\\ \\\".*\") and  not (((actor_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") and actor_process_image_path ~= \".*\\\\forfiles\\.exe\" and (action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") and action_process_image_path ~= \".*\\\\cmd\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when CertOC.exe downloads files from an IP address via a URL using -GetCACAPS.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certoc\\.exe\" or actor_process_file_original_name = \"CertOC.exe\") and action_process_image_command_line ~= \"\\:\\/\\/[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\" and action_process_image_command_line contains \"-GetCACAPS\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to attackers using `findstr` with the \"-s\" and \"-i\" flags to search for files on my system.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"findstr\" or action_process_image_path ~= \".*findstr\\.exe\" or actor_process_file_original_name = \"FINDSTR.EXE\") and (action_process_image_command_line contains \" -s \" and action_process_image_command_line contains \" -i \")\n\n\n\n"}
{"prompt": "I want to find instances of malicious VBScript payloads stored in the Windows registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\" and ((action_registry_value_name contains \"vbscript:\" or action_registry_value_name contains \"jscript:\" or action_registry_value_name contains \"mshtml,\" or action_registry_value_name contains \"RunHTMLApplication\" or action_registry_value_name contains \"Execute(\" or action_registry_value_name contains \"CreateObject\" or action_registry_value_name contains \"window.close\") or (action_registry_data contains \"vbscript:\" or action_registry_data contains \"jscript:\" or action_registry_data contains \"mshtml,\" or action_registry_data contains \"RunHTMLApplication\" or action_registry_data contains \"Execute(\" or action_registry_data contains \"CreateObject\" or action_registry_data contains \"window.close\"))) and  not (action_registry_key_name contains \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\" or (actor_process_image_path ~= \".*\\\\msiexec\\.exe\" and action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Installer\\\\UserData\\\\.*\" and ((action_registry_value_name contains \"\\\\Microsoft.NET\\\\Primary Interop Assemblies\\\\Microsoft.mshtml.dll\" or action_registry_value_name contains \"<\\\\Microsoft.mshtml,fileVersion=\" or action_registry_value_name contains \"_mshtml_dll_\" or action_registry_value_name contains \"<\\\\Microsoft.mshtml,culture=\") or (action_registry_data contains \"\\\\Microsoft.NET\\\\Primary Interop Assemblies\\\\Microsoft.mshtml.dll\" or action_registry_data contains \"<\\\\Microsoft.mshtml,fileVersion=\" or action_registry_data contains \"_mshtml_dll_\" or action_registry_data contains \"<\\\\Microsoft.mshtml,culture=\"))))\n\n\n\n"}
{"prompt": "I want to detect impossible travel circumstances using Zscaler and Cisco ASA logs.", "response": "datamodel dataset in (zscaler_privateaccesslog_raw, cisco_asa_raw)\n\n\n\n| filter xdm.source.location.country != null\n| comp values(xdm.source.location.country) as locations,\ncount_distinct(xdm.source.location.country) as count,\nvalues(xdm.source.ipv4) as ip_list,\nvalues(xdm.observer.action) as action,\nvalues(xdm.event.outcome) as outcome by xdm.source.user.username\n| filter count > 1"}
{"prompt": "I want to find instances where default EBS encryption has been disabled on Amazon EC2.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"ec2.amazonaws.com\" and eventName = \"DisableEbsEncryptionByDefault\")\n\n\n\n"}
{"prompt": "I want to detect potential shellcode injection attempts on my endpoints.", "response": "preset = xdr_event_log\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| filter (GrantedAccess in (\"0x147a\", \"0x1f3fff\") and CallTrace contains \"UNKNOWN\") and  not (((SourceImage ~= \".*\\:\\\\Program\\ Files\\\\Dell\\\\.*\" or SourceImage ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Dell\\\\.*\") and (TargetImage ~= \".*\\:\\\\Program\\ Files\\\\Dell\\\\.*\" or TargetImage ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Dell\\\\.*\") and GrantedAccess = \"0x1F3FFF\" and CallTrace ~= \".*\\:\\\\Windows\\\\System32\\\\ntdll\\.dll.*\") or (SourceImage ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Dell\\\\UpdateService\\\\ServiceShell\\.exe\" and TargetImage ~= \".*\\:\\\\Windows\\\\Explorer\\.EXE\" and GrantedAccess = \"0x1F3FFF\" and CallTrace ~= \".*\\:\\\\Windows\\\\System32\\\\ntdll\\.dll.*\") or ((SourceImage ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Visual\\ Studio\\\\2022\\\\Community\\\\Common7\\\\IDE\\\\PerfWatson2\\.exe\" or SourceImage ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Visual\\ Studio\\\\2019\\\\Community\\\\Common7\\\\IDE\\\\PerfWatson2\\.exe\") and (TargetImage ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Visual\\ Studio\\\\2022\\\\Community\\\\Common7\\\\IDE\\\\devenv\\.exe\" or TargetImage ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Visual\\ Studio\\\\2019\\\\Community\\\\Common7\\\\IDE\\\\devenv\\.exe\") and CallTrace ~= \".*\\:\\\\Windows\\\\System32\\\\ntdll\\.dll.*\") or (SourceImage ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Visual\\ Studio\\\\.*\" and SourceImage ~= \".*\\\\MSBuild\\\\Current\\\\Bin\\\\MSBuild\\.exe\" and TargetImage ~= \".*\\:\\\\Program\\ Files\\\\Dell\\\\DellDataVault\\\\DDVDataCollector\\.exe\") or (SourceImage ~= \".*\\:\\\\Windows\\\\System32\\\\Wbem\\\\Wmiprvse\\.exe\" and TargetImage ~= \".*\\:\\\\Windows\\\\system32\\\\lsass\\.exe\" and CallTrace ~= \".*\\:\\\\Windows\\\\SYSTEM32\\\\ntdll\\.dll.*\"))\n\n\n\n"}
{"prompt": "I want to detect potential reconnaissance activity using GatherNetworkInfo.VBS scripts running on endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or actor_process_file_original_name in (\"cscript.exe\", \"wscript.exe\")) and action_process_image_command_line contains \"gatherNetworkInfo.vbs\")\n\n\n\n"}
{"prompt": "I want to find instances where a process is using Wscript.Shell.Run in its command line.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Wscript.\" and action_process_image_command_line contains \".Shell\" and action_process_image_command_line contains \".Run\")\n\n\n\n"}
{"prompt": "I want to find instances where BrowserCore.exe was renamed and executed.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"BrowserCore.exe\" and  not (action_process_image_path ~= \".*\\\\BrowserCore\\.exe\")\n\n\n\n"}
{"prompt": "I want to find events related to disabling Exploit Guard Network Protection on Windows Defender through the registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender Security Center\\\\App and Browser protection\\\\DisallowExploitProtectionOverride\" and (action_registry_value_name = \"DWORD (00000001)\" or action_registry_data = \"DWORD (00000001)\"))\n\n\n\n"}
{"prompt": "I want to see a list of all login events grouped by username with their target usernames, operation names, and timestamps.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for potential sideloading of Mfdetours.dll based on Windows Event Log data.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\mfdetours\\.dll\" and  not (action_module_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Windows\\ Kits\\\\10\\\\bin\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find events related to access or modification of Kubernetes secrets and config maps in Azure.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/CONFIGMAPS/WRITE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/CONFIGMAPS/DELETE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SECRETS/WRITE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SECRETS/DELETE\")\n\n\n\n"}
{"prompt": "I want to find potential persistence threats related to COM hijacking from suspicious locations in the Windows Event Log.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\CLSID\\\\.*\" and (action_registry_key_name ~= \".*\\\\InprocServer32\\\\\\(Default\\)\" or action_registry_key_name ~= \".*\\\\LocalServer32\\\\\\(Default\\)\") and ((action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\\\Desktop\\\\.*\" or action_registry_value_name ~= \".*\\\\Downloads\\\\.*\" or action_registry_value_name ~= \".*\\\\Microsoft\\\\Windows\\\\Start\\ Menu\\\\Programs\\\\Startup\\\\.*\" or action_registry_value_name ~= \".*\\\\System32\\\\spool\\\\drivers\\\\color\\\\.*\" or action_registry_value_name ~= \".*\\\\Users\\\\Public\\\\.*\" or action_registry_value_name ~= \".*\\\\Windows\\\\Temp\\\\.*\" or action_registry_value_name contains \"%appdata%\" or action_registry_value_name contains \"%temp%\" or action_registry_value_name contains \"%tmp%\") or (action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\\\Desktop\\\\.*\" or action_registry_data ~= \".*\\\\Downloads\\\\.*\" or action_registry_data ~= \".*\\\\Microsoft\\\\Windows\\\\Start\\ Menu\\\\Programs\\\\Startup\\\\.*\" or action_registry_data ~= \".*\\\\System32\\\\spool\\\\drivers\\\\color\\\\.*\" or action_registry_data ~= \".*\\\\Users\\\\Public\\\\.*\" or action_registry_data ~= \".*\\\\Windows\\\\Temp\\\\.*\" or action_registry_data contains \"%appdata%\" or action_registry_data contains \"%temp%\" or action_registry_data contains \"%tmp%\")))\n\n\n\n"}
{"prompt": "I want to find out when admission controllers are executed in Azure Kubernetes.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter ((properties.operationName ~= \"MICROSOFT\\.KUBERNETES\\/CONNECTEDCLUSTERS\\/ADMISSIONREGISTRATION\\.K8S\\.IO.*\" or properties.operationName ~= \"MICROSOFT\\.CONTAINERSERVICE\\/MANAGEDCLUSTERS\\/ADMISSIONREGISTRATION\\.K8S\\.IO.*\") and (properties.operationName ~= \".*\\/MUTATINGWEBHOOKCONFIGURATIONS\\/WRITE\" or properties.operationName ~= \".*\\/VALIDATINGWEBHOOKCONFIGURATIONS\\/WRITE\"))\n\n\n\n"}
{"prompt": "I want to find malicious processes that use explorer.exe to launch commands, potentially hiding their origin.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"/factory,{75dff2b7-6936-4c06-a8bb-676a7b00b24b}\" or (action_process_image_command_line contains \"explorer.exe\" and action_process_image_command_line contains \" /root,\"))\n\n\n\n"}
{"prompt": "I want to see a breakdown of all operations performed by each user, including their target usernames, operation names, reference IDs, tenant IDs, result types, caller IP addresses, identities, alias hosts, protocols, and timestamps.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.sql/servers/firewallrules/write\", \"microsoft.dbformysql/servers/firewallrules/write\", \"microsoft.network/azurefirewalls/write\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to identify single transactions with abnormally high upload data volume exceeding 1.5 times the average upload volume over the past week.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|toyotaeurope.service-now.com|sftpsite-prod-west.s3-accelerate.amazonaws.com|partner.westpacgroup.com|erasgw.portal.sony.biz\"\n| comp avg(rbytes) as current_day_upload_byte,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|toyotaeurope.service-now.com|sftpsite-prod-west.s3-accelerate.amazonaws.com|partner.westpacgroup.com|erasgw.portal.sony.biz\"\n| comp avg(rbytes) as 7_days_upload_byte,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_upload_byte) as 7_days_upload_byte_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter 7_days_upload_byte_avg > 1000000 and current_day_upload_byte > multiply(7_days_upload_byte_avg, 1.5)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": " I want to find any attempts to connect with cryptocurrency services by filtering Cisco Firepower logs for mentions of \"cryptocurrency\" and identifying connections to unknown IPs that haven't been scanned by IISVAS.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"cryptocurrency\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\"\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect instances of WMIC being used for remote command execution on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\WMIC\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and action_process_image_command_line contains \"/node:\") and  not ((action_process_image_command_line contains \"/node:127.0.0.1 \" or action_process_image_command_line contains \"/node:localhost \"))\n\n\n\n"}
{"prompt": " I want to detect Pass the Hash activity on my endpoints using event logs and the specified criteria. ", "response": "preset = xdr_event_log\n| alter SubjectUserSid = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserSid{}, \"\\\"(.*)\\\"\")\n| alter LogonType = regextract(to_json_string(action_evtlog_data_fields)->LogonType{}, \"\\\"(.*)\\\"\")\n| alter LogonProcessName = regextract(to_json_string(action_evtlog_data_fields)->LogonProcessName{}, \"\\\"(.*)\\\"\")\n| alter KeyLength = regextract(to_json_string(action_evtlog_data_fields)->KeyLength{}, \"\\\"(.*)\\\"\")\n| alter TargetUserName = regextract(to_json_string(action_evtlog_data_fields)->TargetUserName{}, \"\\\"(.*)\\\"\")\n| filter ((action_evtlog_event_id = 4624 and SubjectUserSid = \"S-1-0-0\" and LogonType = 3 and LogonProcessName = \"NtLmSsp\" and KeyLength = 0) or (action_evtlog_event_id = 4624 and LogonType = 9 and LogonProcessName = \"seclogo\")) and  not (TargetUserName = \"ANONYMOUS LOGON\")\n\n\n\n"}
{"prompt": "I want to find events that show suspicious loading of the Vsstrace.dll file through Volume Shadow Copy.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\vsstrace\\.dll\" and  not ((actor_process_image_path in (\"C:\\\\Windows\\\\explorer.exe\", \"C:\\\\Windows\\\\ImmersiveControlPanel\\\\SystemSettings.exe\") or (actor_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\Temp\\\\\\{.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\")) or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that are potentially using suspicious methods to interact with the Windows event log.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Win32_NTEventlogFile\" and (ScriptBlockText contains \".BackupEventlog(\" or ScriptBlockText contains \".ChangeSecurityPermissions(\" or ScriptBlockText contains \".ChangeSecurityPermissionsEx(\" or ScriptBlockText contains \".ClearEventLog(\" or ScriptBlockText contains \".Delete(\" or ScriptBlockText contains \".DeleteEx(\" or ScriptBlockText contains \".Rename(\" or ScriptBlockText contains \".TakeOwnerShip(\" or ScriptBlockText contains \".TakeOwnerShipEx(\"))\n\n\n\n"}
{"prompt": "I want to see data related to Cisco commands involving file transfer like TFTP, RCP, PUTS, COPY, configure replace, and archive tar.", "response": "datamodel\n| filter ( contains \"tftp\" or  contains \"rcp\" or  contains \"puts\" or  contains \"copy\" or  contains \"configure replace\" or  contains \"archive tar\")\n\n\n\n"}
{"prompt": "I want to see events related to certificates being exported from the local certificate store on Windows systems.", "response": "datamodel\n| filter xdm.event.id = 1007\n\n\n\n"}
{"prompt": "I want to see all \"Format Error\" events from Swift applications that have a severity level of warning, severe, or fatal.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"Format Error(from)\" and xdm.alert.severity in (\"warning\", \"severe\", \"fatal\")\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious instances where IIS AppCmd is used to modify global rewrite rules.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\appcmd\\.exe\" or actor_process_file_original_name = \"appcmd.exe\") and (action_process_image_command_line contains \"set\" and action_process_image_command_line contains \"config\" and action_process_image_command_line contains \"section:system.webServer/rewrite/globalRules\" and action_process_image_command_line contains \"commit:\"))\n\n\n\n"}
{"prompt": "I want to see when users from specific groups log on to computers.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4964\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name,\ntarget_domain\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where MSOHTMED.EXE downloads files from the internet.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\MSOHTMED\\.exe\" or actor_process_file_original_name = \"MsoHtmEd.exe\") and (action_process_image_command_line contains \"ftp:\n\n\n\n"}
{"prompt": "I want to see events where a password-protected ZIP file was opened on endpoints.", "response": "preset = xdr_event_log\n| alter TargetName = regextract(to_json_string(action_evtlog_data_fields)->TargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5379 and TargetName contains \"Microsoft_Windows_Shell_ZipFolder:filename\") and  not (TargetName contains \"\\\\Temporary Internet Files\\\\Content.Outlook\")\n\n\n\n"}
{"prompt": "I want to see events related to unauthorized password changes on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id = \"4723\" and xdm.source.user.username != xdm.target.user.username and xdm.source.user.username not contains \"ANONYMOUS LOGON\" and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username NOT IN (NULL, \"BPMSCCMADMIN\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see how many times firewall admins Biju, Joel, and Satheesh deleted objects from the European region over the past 5 minutes.", "response": "config case_sensitive = false\n| dataset = check_point_smartconsole_raw\n| bin _time span = 5m\n| filter operation = \"Delete Object\" and lowercase(administrator) in (\"biju_victordhasan\", \"joel_muni\", \"satheesh_k\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(subject) as result,\nvalues(_product) as product,\ncount() as matched_events by administrator,\n_time\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to find potential persistence threats that involve modifying TypedPaths in the Windows registry. ", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\TypedPaths\\\\.*\" and  not (actor_process_image_path in (\"C:\\\\Windows\\\\explorer.exe\", \"C:\\\\Windows\\\\SysWOW64\\\\explorer.exe\"))\n\n\n\n"}
{"prompt": "I want to find events where reg.exe is used to potentially tamper with RDP registry keys.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and (action_process_image_command_line contains \" add \" and action_process_image_command_line contains \"\\\\CurrentControlSet\\\\Control\\\\Terminal Server\" and action_process_image_command_line contains \"REG_DWORD\" and action_process_image_command_line contains \" /f\")) and ((action_process_image_command_line contains \"Licensing Core\" and action_process_image_command_line contains \"EnableConcurrentSessions\") or (action_process_image_command_line contains \"WinStations\\\\RDP-Tcp\" or action_process_image_command_line contains \"MaxInstanceCount\" or action_process_image_command_line contains \"fEnableWinStation\" or action_process_image_command_line contains \"TSUserEnabled\" or action_process_image_command_line contains \"TSEnabled\" or action_process_image_command_line contains \"TSAppCompat\" or action_process_image_command_line contains \"IdleWinStationPoolCount\" or action_process_image_command_line contains \"TSAdvertise\" or action_process_image_command_line contains \"AllowTSConnections\" or action_process_image_command_line contains \"fSingleSessionPerUser\" or action_process_image_command_line contains \"fDenyTSConnections\"))\n\n\n\n"}
{"prompt": "I want to find instances of potential Monero crypto coin mining pool lookups in DNS queries.", "response": "datamodel\n| filter (xdm.network.dns.dns_question.name contains \"pool.minexmr.com\" or xdm.network.dns.dns_question.name contains \"fr.minexmr.com\" or xdm.network.dns.dns_question.name contains \"de.minexmr.com\" or xdm.network.dns.dns_question.name contains \"sg.minexmr.com\" or xdm.network.dns.dns_question.name contains \"ca.minexmr.com\" or xdm.network.dns.dns_question.name contains \"us-west.minexmr.com\" or xdm.network.dns.dns_question.name contains \"pool.supportxmr.com\" or xdm.network.dns.dns_question.name contains \"mine.c3pool.com\" or xdm.network.dns.dns_question.name contains \"xmr-eu1.nanopool.org\" or xdm.network.dns.dns_question.name contains \"xmr-eu2.nanopool.org\" or xdm.network.dns.dns_question.name contains \"xmr-us-east1.nanopool.org\" or xdm.network.dns.dns_question.name contains \"xmr-us-west1.nanopool.org\" or xdm.network.dns.dns_question.name contains \"xmr-asia1.nanopool.org\" or xdm.network.dns.dns_question.name contains \"xmr-jp1.nanopool.org\" or xdm.network.dns.dns_question.name contains \"xmr-au1.nanopool.org\" or xdm.network.dns.dns_question.name contains \"xmr.2miners.com\" or xdm.network.dns.dns_question.name contains \"xmr.hashcity.org\" or xdm.network.dns.dns_question.name contains \"xmr.f2pool.com\" or xdm.network.dns.dns_question.name contains \"xmrpool.eu\" or xdm.network.dns.dns_question.name contains \"pool.hashvault.pro\")\n\n\n\n"}
{"prompt": "I want to find out which users received multiple phishing emails with the same malicious URL from different senders within a specific timeframe.  I also need to know their location and how many different senders contacted them.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter policyName = \"Default spam rule\" and headerFrom != null and headerTo != null and details != null and details contains \"urlInfo\"\n| alter headerTo_array = if(headerTo ~= \"\\\"\\\"\", recipients -> [], headerTo -> []),\nsender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0),\nextractedurls = json_extract(details, \"$.urlInfo\") -> []\n| arrayexpand headerTo_array\n| filter headerTo_array ~= \"infosys.com\"\n| alter headerTo_string = arrayindex(split(json_extract_scalar(headerTo_array, \"$.\"), \"@\"), 0),\nsender_domain = lowercase(arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0))\n| arrayexpand extractedurls\n| alter extracted_url = json_extract_scalar(extractedurls, \"$.url\")\n| filter extracted_url !~= \"^http:\n| join type = left\n(preset = ad_users\n| fields sam_account_name, location\n) as adusers adusers.sam_account_name = headerTo_string\n| filter sam_account_name != null and location != null\n| comp count() as location_observed_statistics,\nvalues(sender_domain) as sender_domain,\nvalues(headerTo_string) as recipients by extracted_url,\nlocation\n| filter array_length(sender_domain) > 5 and array_length(recipients) > 20"}
{"prompt": "I want to find potential exploitation attempts of CVE-2023-4966 on Citrix ADC that involve sensitive information disclosure via web requests.", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and xdm.network.http.url contains \"/oauth/idp/.well-known/openid-configuration\" and xdm.network.http.response_code = 200)\n\n\n\n"}
{"prompt": "I want to find potential RCE exploitation attempts involving NodeJS processes that appear in our log data.", "response": "datamodel\n| filter _raw_log contains \"node:child_process\"\n\n\n\n"}
{"prompt": "I want to find suspicious instances of curl being used to upload files on Linux systems.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/curl\" and ((action_process_image_command_line contains \" --form\" or action_process_image_command_line contains \" --upload-file \" or action_process_image_command_line contains \" --data \" or action_process_image_command_line contains \" --data-\") or action_process_image_command_line ~= \"\\s\\-[FTd]\\s\")) and  not ((action_process_image_command_line contains \":\n\n\n\n"}
{"prompt": "I want to see alerts for potentially malicious processes disguised as rundll32 that are registering DLLs.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"DllRegisterServer\" and  not (action_process_image_path ~= \".*\\\\rundll32\\.exe\")\n\n\n\n"}
{"prompt": "I want to see events related to Mimikatz Kirbi file creation or mimilsa log files.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\.kirbi\" or xdm.target.file.filename ~= \".*mimilsa\\.log\")\n\n\n\n"}
{"prompt": "I want to see alerts related to changes made to Kerberos policy on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4713\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ibpmeventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find any processes that are using system32 or syswow64 Tasks folder paths and might be attempting to evade detection.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"echo \" or action_process_image_command_line contains \"copy \" or action_process_image_command_line contains \"type \" or action_process_image_command_line contains \"file createnew\") and (action_process_image_command_line ~= \".*\\ C\\:\\\\Windows\\\\System32\\\\Tasks\\\\.*\" or action_process_image_command_line ~= \".*\\ C\\:\\\\Windows\\\\SysWow64\\\\Tasks\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see all instances where \"Microsoft.NodejsTools.PressAnyKey.exe\" was executed.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\Microsoft\\.NodejsTools\\.PressAnyKey\\.exe\"\n\n\n\n"}
{"prompt": "I want to find instances of the UNC2452 PowerShell pattern on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"Invoke-WMIMethod win32_process -name create -argumentlist\" and action_process_image_command_line contains \"rundll32 c:\\\\windows\") or (action_process_image_command_line contains \"wmic /node:\" and action_process_image_command_line contains \"process call create \\\"rundll32 c:\\\\windows\"))\n\n\n\n"}
{"prompt": "I want to see Windows events related to cleared audit logs, specifically focusing on those with event ID 1102 and information about the user who triggered the event.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"1102\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where Wmic.exe is used to gather information about AntiVirusProduct or FirewallProduct.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wmic\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and (action_process_image_command_line contains \"AntiVirusProduct\" or action_process_image_command_line contains \"FirewallProduct\"))\n\n\n\n"}
{"prompt": "I want to see any events related to OilRig APT using registry persistence techniques.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\UMe\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\UT\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential exploitation attempts of CVE-2022-26809 involving svchost.exe with the \"-k RPCSS\" command line argument.", "response": "preset = xdr_process\n| filter (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\svchost.exe\" and actor_process_image_command_line contains \"-k RPCSS\")\n\n\n\n"}
{"prompt": " I want to see alerts when there's allowed traffic to DMZ segments on RDP or Telnet ports. ", "response": "config case_sensitive = false\n| datamodel dataset = check_point_vpn_1_firewall_1_raw\n| alter origin = check_point_vpn_1_firewall_1_raw.origin\n| filter xdm.target.port in (3389, 23) and xdm.observer.action ~= \"accept\" and xdm.source.ipv4 != \"<ip>\" and xdm.source.ipv4 !~= \"103\\.75\\.173\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name !~= \"Infosys Technologies|Infosys Limited\" and xdm.target.asn.as_name ~= \"<org>\" and check_point_vpn_1_firewall_1_raw.cs3 != \"geo_protection\"\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_cidr_ips incidr(xdm.source.ipv4, vpn_cidr_ips.cidr_range) = true\n| filter cidr_range = null\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.target.ipv4\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_cidr_ips incidr(xdm.source.ipv4, vpn_cidr_ips.cidr_range) = true\n| filter (xdm.target.is_internal_ip = true or ip_address != null or cidr_range != null)\n| alter aggregation_criteria = \"ilsourceip\",\naggregation_criteria1 = \"ildestinationport\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect if someone has changed the Sysmon driver altitude value.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Services\\\\.*\" and action_registry_key_name ~= \".*\\\\Instances\\\\Sysmon\\ Instance\\\\Altitude\")\n\n\n\n"}
{"prompt": "I want to see alerts about new virtual smart cards being created using TpmVscMgr.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\tpmvscmgr\\.exe\" and actor_process_file_original_name = \"TpmVscMgr.exe\") and action_process_image_command_line contains \"create\")\n\n\n\n"}
{"prompt": "I want to see suspicious PowerShell invocations that use encoding and hidden windows.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \" -enc \" or ScriptBlockText contains \" -EncodedCommand \" or ScriptBlockText contains \" -ec \") and (ScriptBlockText contains \" -w hidden \" or ScriptBlockText contains \" -window hidden \" or ScriptBlockText contains \" -windowstyle hidden \" or ScriptBlockText contains \" -w 1 \") and (ScriptBlockText contains \" -noni \" or ScriptBlockText contains \" -noninteractive \"))\n\n\n\n"}
{"prompt": "I want to find instances where someone modified Registry Explorer policies by setting specific values like \"DWORD (0x00000001)\"  within relevant keys.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoLogOff\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoDesktop\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoRun\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoFind\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoControlPanel\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoFileMenu\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoClose\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoSetTaskbar\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoPropertiesMyDocuments\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\NoTrayContextMenu\") and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to detect attempts to disable Sophos Endpoint Defense tamper protection by looking for changes to specific registry keys.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"\\\\Sophos Endpoint Defense\\\\TamperProtection\\\\Config\\\\SAVEnabled\" or action_registry_key_name contains \"\\\\Sophos Endpoint Defense\\\\TamperProtection\\\\Config\\\\SEDEnabled\" or action_registry_key_name contains \"\\\\Sophos\\\\SAVService\\\\TamperProtection\\\\Enabled\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to see alerts for instances where Diskshadow is being used from potentially suspicious locations on endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"diskshadow.exe\" or action_process_image_path ~= \".*\\\\diskshadow\\.exe\") and (action_process_image_command_line contains \"-s \" or action_process_image_command_line contains \"/s \") and (action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or action_process_image_command_line ~= \".*\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances of Conhost.exe being used with command line path traversal attacks.", "response": "preset = xdr_process\n| filter (actor_process_image_command_line contains \"conhost\" and action_process_image_command_line contains \"/../../\")\n\n\n\n"}
{"prompt": "I want to see if there have been any successful brute force attempts on my IIS web servers.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| sort desc _time\n| join type = left\n(dataset = device_group_static_list\n| filter TYPE ~= \"microsoft iis\"\n| fields IP\n) as device_group device_group.IP = xdm.target.ipv4\n| filter IP != null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.network.http.response_code in (XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, XDM_CONST.HTTP_RSP_CODE_OK) and xdm.source.ipv4 not in (\"<ip>\")\n| alter event_pattern = if(xdm.network.http.response_code = XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED, \"E1\", \"E2\")\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, event_pattern,\n_time\n| bin _time span = 1m\n| comp latest(_time) as FirstEventTime,\nvalues(event_pattern) as pattern_events,\nvalues(*) as * by _time,\nxdm.source.ipv4\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events ~= \"E1,E1,E1\" and array_length(xdm.source.user.username) >= 3\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)\n"}
{"prompt": "I want to detect instances of an attacker using the Sticky Keys backdoor to gain privileged access on Windows systems.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"copy \" and action_process_image_command_line contains \"/y \" and action_process_image_command_line contains \"C:\\\\windows\\\\system32\\\\cmd.exe C:\\\\windows\\\\system32\\\\sethc.exe\")\n\n\n\n"}
{"prompt": "I want to find instances where the Windows Defender exclusion list in the registry has been modified.", "response": "preset = xdr_event_log\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4657 and ObjectName ~= \".*\\\\Microsoft\\\\Windows\\ Defender\\\\Exclusions\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see when an Okta Identity Provider was created.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type = \"system.idp.lifecycle.create\"\n\n\n\n"}
{"prompt": "I want to see events related to changes made to SQL Server procedure options using the `sp_procoption` stored procedure.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"MSSQLSERVER\" and action_evtlog_event_id = 33205 and (Data contains \"object_name:sp_procoption\" and Data contains \"statement:EXEC\"))\n\n\n\n"}
{"prompt": "I want to see failed login attempts from multiple users on the same device within a 15-minute window, filtered by CheckPoint logs and focusing on Mobile VPN connections.", "response": "config case_sensitive = false\n| dataset = check_point_connectra_raw\n| filter act = \"Failed Log In\" and origin = \"<ip>\" and requestClientApplication = \"Mobile VPN\" and (_final_reporting_device_ip != \"<ip>\" or _final_reporting_device_ip != \"<ip>\")\n| alter host_name = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = lowercase(replace(if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), if(array_length(regextract(duser, \"[a-zA-Z]+\\\\(.*)\")) > 0, arrayindex(regextract(duser, \"[a-zA-Z]+\\\\(.*)\"), 0), duser))), \"itlinfosys\", \"\"))\n| alter action = act,\nsource_port = spt,\ndest_port = dpt,\nsource_ip = src,\ndst_ip = host_ip,\nresult = outcome,\nuser_agent = requestClientApplication,\nos_edition = os_edition,\nproduct = _product\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestTime,\nvalues(source_ip) as src_ip,\nvalues(host_ip) as dst_ip,\nvalues(source_port) as src_port,\nvalues(dest_port) as dst_port,\nvalues(action) as action,\nvalues(user_dst) as user_dst,\nvalues(origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(product) as product,\ncount() as matched_events by host_name\n| filter array_length(user_dst) >= 2\n| alter aggregation_criteria = \"ilhostsource\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 2)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see events related to remote WMI ActiveScriptEventConsumers, focusing on login attempts where \"scrcons.exe\" is involved and excluding those with TargetLogonId of \"0x3e7\".", "response": "preset = xdr_event_log\n| alter LogonType = regextract(to_json_string(action_evtlog_data_fields)->LogonType{}, \"\\\"(.*)\\\"\")\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| alter TargetLogonId = regextract(to_json_string(action_evtlog_data_fields)->TargetLogonId{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4624 and LogonType = 3 and ProcessName ~= \".*scrcons\\.exe\") and  not (TargetLogonId = \"0x3e7\")\n\n\n\n"}
{"prompt": "{I want to find instances where Rundll32.exe is being used with suspicious \"advpack\" commands, specifically those containing \"#+\" or \"#-\" and \"12\".} \n\n\nLet me know if you'd like me to create prompts for other Cortex XQL queries!", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\" or action_process_image_command_line contains \"rundll32\") and action_process_image_command_line contains \"advpack\" and ((action_process_image_command_line contains \"#+\" and action_process_image_command_line contains \"12\") or action_process_image_command_line contains \"#-\"))\n\n\n\n"}
{"prompt": "I want to see all instances of the Chisel tunneling tool being used on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\chisel\\.exe\" or ((action_process_image_command_line contains \"exe client \" or action_process_image_command_line contains \"exe server \") and (action_process_image_command_line contains \"-socks5\" or action_process_image_command_line contains \"-reverse\" or action_process_image_command_line contains \" r:\" or action_process_image_command_line contains \":127.0.0.1:\" or action_process_image_command_line contains \"-tls-skip-verify \" or action_process_image_command_line contains \":socks\"))\n\n\n\n"}
{"prompt": "I want to see alerts for Kerberos replay attacks where identical information was sent twice.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4649\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| filter xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username != NULL\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to the CVE-2022-24527 Microsoft Connected Cache LPE vulnerability.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*WindowsPowerShell\\\\Modules\\\\webAdministration\\\\webAdministration\\.psm1\" and  not ((xdm.source.user.username contains \"AUTHORI\" or xdm.source.user.username contains \"AUTORI\"))\n\n\n\n"}
{"prompt": "I want to monitor for any changes made to the \"IS High Privileged Security Groups\" for the USEINFOSYS domain, specifically additions, removals, or modifications. I need alerts triggered immediately if anything is changed so that I can take immediate action.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4728\", \"4729\", \"4756\", \"4757\") and xdm.source.host.hostname ~= \"useinfosys.com$\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all uncommon child processes created by DefaultPack.exe on endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\DefaultPack\\.exe\"\n\n\n\n"}
{"prompt": "I want to see a list of RDP login attempts from non-CyberArk sources on <hostname>, excluding specified IPs, that have a LogonType of \"10\" and include the source IP address, destination server, and username.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter host_name ~= \"<hostname>\"\n| filter event_id = 4624\n| alter LogonType = event_data -> LogonType,\nIpAddress = event_data -> IpAddress,\nTargetUserName = event_data -> TargetUserName\n| filter IpAddress not in (\"<ip>\")\n| filter LogonType = \"10\"\n| fields IpAddress as sourceIP, host_name as destinationServer,\nTargetUserName as Username"}
{"prompt": " I want to find out if someone is trying to access credentials stored in Windows Credential Manager using PowerShell. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"vaultcmd\" and ScriptBlockText contains \"/listcreds:\") and (ScriptBlockText contains \"Windows Credentials\" or ScriptBlockText contains \"Web Credentials\"))\n\n\n\n"}
{"prompt": "I want to see a list of users who have been removed from specific privilege groups on Windows systems, including the action taken, the group name, and the user's name.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter _collector_type = \"XDR Collector\"\n| filter event_id in (4757, 4729, 633, 4733)\n| alter TargetGroupName = event_data -> TargetUserName,\nTargetSID = event_data -> MemberSid,\nTargetDomainName = event_data -> TargetDomainName,\nSubjectUserName = event_data -> SubjectUserName,\nAction = regextract(message, \"(.*)\\n\\nSubject:\"),\nTargetUserName = User -> name\n| alter Groupname = concat(TargetDomainName, \"\\\", TargetGroupName)\n| filter TargetGroupName in (\"Admins du domaine\", \"Administrateurs du schema\", \"Administrateurs de l'entreprise\", \"Administrateurs\", \"Op\u00e9rateurs de serveur\", \"Op\u00e9rateurs de sauvegarde\", \"Op\u00e9rateurs d'impression\")\n| filter SubjectUserName !~= \"\\$$\" and TargetUserName != null\n| fields Action, Groupname, SubjectUserName, TargetUserName,\nTargetSID, TargetGroupName, host_name"}
{"prompt": "I want to find instances where the \"DisableAIDataAnalysis\" registry value has been deleted, indicating that the Windows Recall feature might have been enabled by an adversary.", "response": "#N/A"}
{"prompt": "I want to find potential instances of the 3CXDesktopApp being used for malicious beaconing activity by looking for DNS queries to specific domains.", "response": "datamodel\n| filter (xdm.network.dns.dns_question.name contains \"akamaicontainer.com\" or xdm.network.dns.dns_question.name contains \"akamaitechcloudservices.com\" or xdm.network.dns.dns_question.name contains \"azuredeploystore.com\" or xdm.network.dns.dns_question.name contains \"azureonlinecloud.com\" or xdm.network.dns.dns_question.name contains \"azureonlinestorage.com\" or xdm.network.dns.dns_question.name contains \"dunamistrd.com\" or xdm.network.dns.dns_question.name contains \"glcloudservice.com\" or xdm.network.dns.dns_question.name contains \"journalide.org\" or xdm.network.dns.dns_question.name contains \"msedgepackageinfo.com\" or xdm.network.dns.dns_question.name contains \"msedgeupdate.net\" or xdm.network.dns.dns_question.name contains \"msstorageazure.com\" or xdm.network.dns.dns_question.name contains \"msstorageboxes.com\" or xdm.network.dns.dns_question.name contains \"officeaddons.com\" or xdm.network.dns.dns_question.name contains \"officestoragebox.com\" or xdm.network.dns.dns_question.name contains \"pbxcloudeservices.com\" or xdm.network.dns.dns_question.name contains \"pbxphonenetwork.com\" or xdm.network.dns.dns_question.name contains \"pbxsources.com\" or xdm.network.dns.dns_question.name contains \"qwepoi123098.com\" or xdm.network.dns.dns_question.name contains \"sbmsa.wiki\" or xdm.network.dns.dns_question.name contains \"sourceslabs.com\" or xdm.network.dns.dns_question.name contains \"visualstudiofactory.com\" or xdm.network.dns.dns_question.name contains \"zacharryblogs.com\")\n\n\n\n"}
{"prompt": "I want to find instances where the Conhost process is spawned by an uncommon parent process on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\conhost\\.exe\" and (actor_process_image_path ~= \".*\\\\explorer\\.exe\" or actor_process_image_path ~= \".*\\\\lsass\\.exe\" or actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_image_path ~= \".*\\\\services\\.exe\" or actor_process_image_path ~= \".*\\\\smss\\.exe\" or actor_process_image_path ~= \".*\\\\spoolsv\\.exe\" or actor_process_image_path ~= \".*\\\\svchost\\.exe\" or actor_process_image_path ~= \".*\\\\userinit\\.exe\" or actor_process_image_path ~= \".*\\\\wininit\\.exe\" or actor_process_image_path ~= \".*\\\\winlogon\\.exe\")) and  not ((actor_process_image_command_line contains \"-k apphost -s AppHostSvc\" or actor_process_image_command_line contains \"-k imgsvc\" or actor_process_image_command_line contains \"-k localService -p -s RemoteRegistry\" or actor_process_image_command_line contains \"-k LocalSystemNetworkRestricted -p -s NgcSvc\" or actor_process_image_command_line contains \"-k NetSvcs -p -s NcaSvc\" or actor_process_image_command_line contains \"-k netsvcs -p -s NetSetupSvc\" or actor_process_image_command_line contains \"-k netsvcs -p -s wlidsvc\" or actor_process_image_command_line contains \"-k NetworkService -p -s DoSvc\" or actor_process_image_command_line contains \"-k wsappx -p -s AppXSvc\" or actor_process_image_command_line contains \"-k wsappx -p -s ClipSVC\")) and  not ((actor_process_image_command_line ~= \".*C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Dropbox\\\\Client\\\\.*\" or actor_process_image_command_line ~= \".*C\\:\\\\Program\\ Files\\\\Dropbox\\\\Client\\\\.*\"))\n\n\n\n"}
{"prompt": " I want to see alerts about any changes made to Okta policies, including updates and deletions. ", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type in (\"policy.lifecycle.update\", \"policy.lifecycle.delete\")\n\n\n\n"}
{"prompt": "I want to see events related to potential NT API stub patching on endpoints.", "response": "preset = xdr_event_log\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| filter (GrantedAccess = \"0x1FFFFF\" and CallTrace ~= \"C\\:\\\\Windows\\\\SYSTEM32\\\\ntdll\\.dll\\+.*\" and CallTrace contains \"|UNKNOWN(\" and CallTrace ~= \".*\\)\") and  not (((SourceImage ~= \".*\\:\\\\Program\\ Files\\\\.*\" or SourceImage ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or SourceImage ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or SourceImage ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (TargetImage ~= \".*\\:\\\\Program\\ Files\\\\.*\" or TargetImage ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or TargetImage ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or TargetImage ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\")) or (SourceImage ~= \".*\\:\\\\Windows\\\\Microsoft\\.NET\\\\.*\" and TargetImage ~= \".*\\:\\\\Windows\\\\Microsoft\\.NET\\\\.*\") or ((SourceImage contains \":\\\\Windows\\\\system32\\\\taskhostw.exe\" or SourceImage contains \":\\\\Windows\\\\system32\\\\taskhost.exe\") and (TargetImage contains \":\\\\Windows\\\\Microsoft.NET\\\\Framework\\\\v\" or TargetImage contains \":\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v\") and TargetImage ~= \".*\\\\NGenTask\\.exe\")) and  not ((SourceImage ~= \".*\\\\thor\\.exe\" or SourceImage ~= \".*\\\\thor64\\.exe\") or ((SourceImage ~= \".*\\:\\\\Users\\\\.*\" and SourceImage contains \"\\\\AppData\\\\Local\\\\GitHubDesktop\\\\app-\") and (SourceImage ~= \".*\\\\GitHubDesktop\\.exe\" or SourceImage ~= \".*\\\\resources\\\\app\\\\git\\\\usr\\\\bin\\\\sh\\.exe\") and (TargetImage ~= \".*\\:\\\\Users\\\\.*\" and TargetImage contains \"\\\\AppData\\\\Local\\\\GitHubDesktop\\\\app-\")) or (SourceImage ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\stage\\\\Teams\\.exe\" and TargetImage ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\Update\\.exe\") or (SourceImage ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\Update\\.exe\" and TargetImage ~= \".*\\:\\\\WINDOWS\\\\SysWOW64\\\\regsvr32\\.exe\") or (SourceImage ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\Update\\.exe\" and TargetImage ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\stage\\\\Teams\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see events about new CloudShell instances being created in Azure.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName = \"MICROSOFT.PORTAL/CONSOLES/WRITE\"\n\n\n\n"}
{"prompt": "I want to see alerts about changes made to domain policies by high privilege administrators.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id = \"4739\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find unique combinations of agent_hostname, action_file_sha256, action_file_path, actor_process_image_sha256, actor_process_image_path, causality_actor_process_image_sha256, and causality_actor_process_image_path from this list.", "response": "dataset = xdr_data\n| fields agent_hostname, action_file_sha256, action_file_path,\nactor_process_image_sha256, actor_process_image_path,\ncausality_actor_process_image_sha256, causality_actor_process_image_path\n| filter action_file_sha256 in (\"bf4f41403280c1b115650d470f9b260a5c9042c04d9bcc2a6ca504a66379b2d6\", \"58e9f72081efff9bdaabd82e3b3efe5b1b9f1666cefe28f429ad7176a6d770ae\", \"ed285ad5ac6a8cf13461d6c2874fdcd3bf67002844831f66e21c2d0adda43fa4\", \"dbf88c623cc2ad99d82fa4c575fb105e2083465a47b84d64e2e1a63e183c274e\", \"a38ddff1e797adb39a08876932bc2538d771ff7db23885fb883fec526aff4fc8\", \"7d86841489afd1097576a649094ae1efb79b3147cd162ba019861dfad4e9573b\", \"4bfb0d5022dc499908da4597f3e19f9f64d3cc98ce756a2249c72179d3d75c47\", \"473f15c04122dad810c919b2f3484d46560fd2dd4573f6695d387195816b02a6\", \"b3fae4f84d4303cdbad4696554b4e8d2381ad3faf6e0c3c8d2ce60a4388caa02\", \"dcde6033b205433d6e9855c93740f798951fa3a3f252035a768d9f356fde806d\", \"85338f694c844c8b66d8a1b981bcf38627f95579209b2662182a009d849e1a4c\", \"db3906edad6009d1886ec1e2a198249b6d99820a3575f8ec80c6ce57f08d521a\", \"ec411a34fee49692f196e4dc0a905b25d0667825904862fdba153df5e53183e0\", \"a00a54e3fb8cb83fab38f8714f240ecc13ab9c492584aa571aec5fc71b48732d\", \"c584d1000591efa391386264e0d43ec35f4dbb146cad9390f73358d9c84ee78d\", \"8bdb662843c1f4b120fb4c25a5636008085900cdf9947b1dadb9b672ea6134dc\", \"c830cde8f929c35dad42cbdb6b28447df69ceffe99937bf420d32424df4d076a\", \"6ae3b0cb657e051f97835a6432c2b0f50a651b36b6d4af395bbe9060bb4ef4b2\", \"535e19bf14d8c76ec00a7e8490287ca2e2597cae2de5b8f1f65eb81ef1c2a4c6\", \"42de36e61d454afff5e50e6930961c85b55d681e23931efd248fd9b9b9297239\", \"4f53e4d52efcccdc446017426c15001bb0fe444c7a6cdc9966f8741cf210d997\", \"df00277045338ceaa6f70a7b8eee178710b3ba51eac28c1142ec802157492de6\", \"28433734bd9e3121e0a0b78238d5131837b9dbe26f1a930bc872bad44e68e44e\", \"cf65f0d33640f2cd0a0b06dd86a5c6353938ccb25f4ffd14116b4884181e0392\", \"5bb84e110d5f18cee47021a024d358227612dd6dac7b97fa781f85c6ad3ccee4\", \"ccf02bb919e1a44b13b366ea1b203f98772650475f2a06e9fac4b3c957a7c3fa\", \"815a73e20e90a413662eefe8594414684df3d5723edcd76070e1a5aee864616e\", \"10ef331115cbbd18b5be3f3761e046523f9c95c103484082b18e67a7c36e570c\", \"dc815be299f81c180aa8d2924f1b015f2c46686e866bc410e72de75f7cd41aae\", \"9275f5d57709e2204900d3dae2727f5932f85d3813ad31c9d351def03dd3d03d\", \"f35ccc9978797a895e5bee58fa8c3b7ad6d5ee55386e9e532f141ee8ed2e937d\", \"5256517e6237b888c65c8691f29219b6658d800c23e81d5167c4a8bbd2a0daa3\", \"d4485176aea67cc85f5ccc45bb66166f8bfc715ae4a695f0d870a1f8d848cc3d\", \"3fcc4c1f2f806acfc395144c98b8ba2a80fe1bf5e3ad3397588bbd2610a37100\", \"057a48fe378586b6913d29b4b10162b4b5045277f1be66b7a01fb7e30bd05ef3\", \"5dbd6bb2381bf54563ea15bc9fbb6d7094eaf7184e6975c50f8996f77bfc3f2c\", \"c39b0ea14e7766440c59e5ae5f48adee038d9b1c7a1375b376e966ca12c22cd3\", \"6f38a25482d82cd118c4255f25b9d78d96821d22bab498cdce9cda7a563ca992\", \"54962835992e303928aa909730ce3a50e311068c0960c708e82ab76701db5e6b\", \"e5e9b0f8d72f4e7b9022b7a83c673334d7967981191d2d98f9c57dc97b4caae1\", \"68d793940c28ddff6670be703690dfdf9e77315970c42c4af40ca7261a8570fa\", \"9da0f5ca7c8eab693d090ae759275b9db4ca5acdbcfe4a63d3871e0b17367463\", \"006fc6623fbb961084243cfc327c885f3c57f2eba8ee05fbc4e93e5358778c85\")\n| dedup agent_hostname,\naction_file_sha256,\naction_file_path,\nactor_process_image_sha256,\nactor_process_image_path,\ncausality_actor_process_image_sha256,\ncausality_actor_process_image_path"}
{"prompt": "I want to find instances of malware that use Invoke-Obfuscation Via Stdin to evade detection by obfuscating their code through standard input.", "response": "preset = xdr_process\n| filter action_process_image_command_line ~= \"(?i)(set).*\\&\\&\\s?set.*(environment|invoke|\\$\\{?input).*\\&\\&.*\\\"\"\n\n\n\n"}
{"prompt": "I want to detect the execution of FSharp Interpreters like \"FsiAnyCpu.exe\" and \"FSi.exe\" on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\fsi\\.exe\" or action_process_image_path ~= \".*\\\\fsianycpu\\.exe\") or actor_process_file_original_name in (\"fsi.exe\", \"fsianycpu.exe\"))\n\n\n\n"}
{"prompt": "I want to see events where PowerShell is used to change the startup type of a service to Disabled or Manual.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_file_original_name = \"PowerShell.EXE\") and ((action_process_image_command_line contains \"Set-Service\" and action_process_image_command_line contains \"-StartupType\") and (action_process_image_command_line contains \"Disabled\" or action_process_image_command_line contains \"Manual\")))\n\n\n\n"}
{"prompt": " I want to find out if hidden directories are being created on my system using the \"::$index_allocation\" stream. ", "response": "datamodel\n| filter xdm.target.file.filename contains \"::$index_allocation\"\n\n\n\n"}
{"prompt": "I want to find out if any downloads are happening from suspicious Dyndns domains.", "response": "datamodel\n| filter (xdm.network.http.url in (\"exe\", \"vbs\", \"bat\", \"rar\", \"ps1\", \"doc\", \"docm\", \"xls\", \"xlsm\", \"pptm\", \"rtf\", \"hta\", \"dll\", \"ws\", \"wsf\", \"sct\", \"zip\") and (xdm.network.http.domain ~= \".*\\.hopto\\.org\" or xdm.network.http.domain ~= \".*\\.no\\-ip\\.org\" or xdm.network.http.domain ~= \".*\\.no\\-ip\\.info\" or xdm.network.http.domain ~= \".*\\.no\\-ip\\.biz\" or xdm.network.http.domain ~= \".*\\.no\\-ip\\.com\" or xdm.network.http.domain ~= \".*\\.noip\\.com\" or xdm.network.http.domain ~= \".*\\.ddns\\.name\" or xdm.network.http.domain ~= \".*\\.myftp\\.org\" or xdm.network.http.domain ~= \".*\\.myftp\\.biz\" or xdm.network.http.domain ~= \".*\\.serveblog\\.net\" or xdm.network.http.domain ~= \".*\\.servebeer\\.com\" or xdm.network.http.domain ~= \".*\\.servemp3\\.com\" or xdm.network.http.domain ~= \".*\\.serveftp\\.com\" or xdm.network.http.domain ~= \".*\\.servequake\\.com\" or xdm.network.http.domain ~= \".*\\.servehalflife\\.com\" or xdm.network.http.domain ~= \".*\\.servehttp\\.com\" or xdm.network.http.domain ~= \".*\\.servegame\\.com\" or xdm.network.http.domain ~= \".*\\.servepics\\.com\" or xdm.network.http.domain ~= \".*\\.myvnc\\.com\" or xdm.network.http.domain ~= \".*\\.ignorelist\\.com\" or xdm.network.http.domain ~= \".*\\.jkub\\.com\" or xdm.network.http.domain ~= \".*\\.dlinkddns\\.com\" or xdm.network.http.domain ~= \".*\\.jumpingcrab\\.com\" or xdm.network.http.domain ~= \".*\\.ddns\\.info\" or xdm.network.http.domain ~= \".*\\.mooo\\.com\" or xdm.network.http.domain ~= \".*\\.dns\\-dns\\.com\" or xdm.network.http.domain ~= \".*\\.strangled\\.net\" or xdm.network.http.domain ~= \".*\\.adultdns\\.net\" or xdm.network.http.domain ~= \".*\\.craftx\\.biz\" or xdm.network.http.domain ~= \".*\\.ddns01\\.com\" or xdm.network.http.domain ~= \".*\\.dns53\\.biz\" or xdm.network.http.domain ~= \".*\\.dnsapi\\.info\" or xdm.network.http.domain ~= \".*\\.dnsd\\.info\" or xdm.network.http.domain ~= \".*\\.dnsdynamic\\.com\" or xdm.network.http.domain ~= \".*\\.dnsdynamic\\.net\" or xdm.network.http.domain ~= \".*\\.dnsget\\.org\" or xdm.network.http.domain ~= \".*\\.fe100\\.net\" or xdm.network.http.domain ~= \".*\\.flashserv\\.net\" or xdm.network.http.domain ~= \".*\\.ftp21\\.net\" or xdm.network.http.domain ~= \".*\\.http01\\.com\" or xdm.network.http.domain ~= \".*\\.http80\\.info\" or xdm.network.http.domain ~= \".*\\.https443\\.com\" or xdm.network.http.domain ~= \".*\\.imap01\\.com\" or xdm.network.http.domain ~= \".*\\.kadm5\\.com\" or xdm.network.http.domain ~= \".*\\.mysq1\\.net\" or xdm.network.http.domain ~= \".*\\.ns360\\.info\" or xdm.network.http.domain ~= \".*\\.ntdll\\.net\" or xdm.network.http.domain ~= \".*\\.ole32\\.com\" or xdm.network.http.domain ~= \".*\\.proxy8080\\.com\" or xdm.network.http.domain ~= \".*\\.sql01\\.com\" or xdm.network.http.domain ~= \".*\\.ssh01\\.com\" or xdm.network.http.domain ~= \".*\\.ssh22\\.net\" or xdm.network.http.domain ~= \".*\\.tempors\\.com\" or xdm.network.http.domain ~= \".*\\.tftpd\\.net\" or xdm.network.http.domain ~= \".*\\.ttl60\\.com\" or xdm.network.http.domain ~= \".*\\.ttl60\\.org\" or xdm.network.http.domain ~= \".*\\.user32\\.com\" or xdm.network.http.domain ~= \".*\\.voip01\\.com\" or xdm.network.http.domain ~= \".*\\.wow64\\.net\" or xdm.network.http.domain ~= \".*\\.x64\\.me\" or xdm.network.http.domain ~= \".*\\.xns01\\.com\" or xdm.network.http.domain ~= \".*\\.dyndns\\.org\" or xdm.network.http.domain ~= \".*\\.dyndns\\.info\" or xdm.network.http.domain ~= \".*\\.dyndns\\.tv\" or xdm.network.http.domain ~= \".*\\.dyndns\\-at\\-home\\.com\" or xdm.network.http.domain ~= \".*\\.dnsomatic\\.com\" or xdm.network.http.domain ~= \".*\\.zapto\\.org\" or xdm.network.http.domain ~= \".*\\.webhop\\.net\" or xdm.network.http.domain ~= \".*\\.25u\\.com\" or xdm.network.http.domain ~= \".*\\.slyip\\.net\"))\n\n\n\n"}
{"prompt": "I want to detect instances where Mshta.exe is used to execute HTA files downloaded from the web.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_file_original_name = \"MSHTA.EXE\") and (action_process_image_command_line contains \"http:\n\n\n\n"}
{"prompt": "{I want to see which users have both opened and closed live terminal connections on different hosts.} \n\n\nThis prompt captures the essence of the query:\n\n* **Focus:** Identifying users who performed both opening and closing actions.\n* **Actions:**  \"Opened\" and \"Closed\" are key verbs highlighting the desired activities.\n* **Scope:** The query's exclusion of \"Broker VM:\" implies a focus on specific hosts, but the prompt doesn't explicitly mention that to keep it concise.", "response": "dataset = management_auditing\n| filter management_auditing_type in (\"LIVE_TERMINAL\")\n\n| filter host_name not contains \"Broker VM:\"\n| comp count_distinct(description) as UniqTerminalActivities,\nvalues(description) as TerminalActivities by user_name,\nhost_name,\nemail\n| alter TermActsDetails = arraystring(TerminalActivities, \", \")\n| filter array_length(TerminalActivities) > 1 and TerminalActivities contains \"opened\" and TerminalActivities contains \"closed\""}
{"prompt": "I want to see when Okta API tokens have been revoked.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type = \"system.api_token.revoke\"\n\n\n\n"}
{"prompt": "I want to see network activity potentially indicating a compromised 3CXDesktopApp instance connecting to suspicious domains.", "response": "preset = network_story\n| filter (actor_process_image_path ~= \".*\\\\3CXDesktopApp\\.exe\" and (action_external_hostname contains \"akamaicontainer.com\" or action_external_hostname contains \"akamaitechcloudservices.com\" or action_external_hostname contains \"azuredeploystore.com\" or action_external_hostname contains \"azureonlinecloud.com\" or action_external_hostname contains \"azureonlinestorage.com\" or action_external_hostname contains \"dunamistrd.com\" or action_external_hostname contains \"glcloudservice.com\" or action_external_hostname contains \"journalide.org\" or action_external_hostname contains \"msedgepackageinfo.com\" or action_external_hostname contains \"msstorageazure.com\" or action_external_hostname contains \"msstorageboxes.com\" or action_external_hostname contains \"officeaddons.com\" or action_external_hostname contains \"officestoragebox.com\" or action_external_hostname contains \"pbxcloudeservices.com\" or action_external_hostname contains \"pbxphonenetwork.com\" or action_external_hostname contains \"pbxsources.com\" or action_external_hostname contains \"qwepoi123098.com\" or action_external_hostname contains \"sbmsa.wiki\" or action_external_hostname contains \"sourceslabs.com\" or action_external_hostname contains \"visualstudiofactory.com\" or action_external_hostname contains \"zacharryblogs.com\"))\n\n\n\n"}
{"prompt": "I want to find events related to adding debugger entries to the Hangs key in the Windows registry.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\Hangs\\\\Debugger\"\n\n\n\n"}
{"prompt": "I want to see alerts about ARP poisoning detected on my Cisco WLC.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_wlc_raw\n| alter msg_id = concat(xdm.event.original_event_type, \"-\", xdm.alert.severity, \"-\", xdm.event.operation_sub_type),\ndevice_ip = cisco_wlc_raw._final_reporting_device_ip,\nserver_name = arrayindex(regextract(cisco_wlc_raw._raw_log, \"\\<\\d+\\>([^\\:]+)\"), 0),\nmac_address = arrayindex(regextract(cisco_wlc_raw._raw_log, \"for\\s+client\\s([^\\s]+)\"), 0),\nxdm.source.user.username = if(xdm.source.user.username = null, arrayindex(regextract(cisco_wlc_raw._raw_log, \"user\\saccount\\s\\(([^\\)]+)\"), 0), xdm.source.user.username)\n| alter mac_address = coalesce(mac_address, if(xdm.source.host.mac_addresses = null, null, to_string(xdm.source.host.mac_addresses)))\n| filter msg_id in (\"DTL-1-ARP_POISON_DETECTED\")\n| fields msg_id, xdm.event.original_event_type, xdm.alert.severity,\nxdm.event.operation_sub_type, xdm.event.description,\nxdm.event.log_level, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.source.ipv4, xdm.source.ipv6, xdm.source.port,\nmac_address, xdm.source.process.name, xdm.source.user.username,\nxdm.source.agent.identifier, xdm.source.agent.type,\nxdm.target.ipv4, xdm.target.ipv6, xdm.target.port,\nxdm.target.host.ipv4_addresses, xdm.target.host.ipv6_addresses,\nxdm.target.interface, xdm.target.agent.identifier,\nxdm.target.host.hostname, xdm.target.host.mac_addresses,\nxdm.target.resource.type, xdm.target.resource_before.value,\nxdm.target.resource.value, xdm.session_context_id,\nxdm.alert.description, xdm.network.rule, xdm.network.ip_protocol,\nxdm.network.tls.cipher, cisco_wlc_raw._raw_log, device_ip,\nserver_name, _time, _insert_time, _product, _vendor\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where WMIC.exe is being used to check on running services on remote machines.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\WMIC\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and action_process_image_command_line contains \"service\")\n\n\n\n"}
{"prompt": "I want to detect potential port scanning activity based on the number of destination IPs and ports scanned within a short time frame.", "response": "datamodel\n| filter xdm.source.ipv4 != xdm.target.ipv4 and xdm.source.ipv4 != null and xdm.target.ipv4 != null\n| fields xdm.target.port, xdm.source.ipv4, xdm.target.ipv4,\nxdm.observer.product, xdm.observer.vendor\n| comp count_distinct(xdm.target.port) as dest_port_count,\nvalues(xdm.target.port) as target_port_values,\ncount_distinct(xdm.target.ipv4) as dest_ip_count,\nvalues(xdm.target.ipv4) as target_ip_values,\nmin(_time) as start_time,\nmax(_time) as end_time by xdm.source.ipv4\n| filter dest_port_count > 10 and dest_ip_count > 5 and timestamp_diff(end_time, start_time, \"MINUTE\") < 10"}
{"prompt": "I want to find registry events related to scheduled tasks created by Diamond Sleet APT during exploitation of the TeamCity CVE-2023-42793 vulnerability.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Schedule\\\\TaskCache\\\\Tree\\\\.*\" and action_registry_key_name contains \"Windows TeamCity Settings User Interface\")\n\n\n\n"}
{"prompt": "I want to detect suspicious activity related to changing the lock screen timeout using the Powercfg.exe tool.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powercfg\\.exe\" or actor_process_file_original_name = \"PowerCfg.exe\") and ((action_process_image_command_line contains \"/setacvalueindex \" and action_process_image_command_line contains \"SCHEME_CURRENT\" and action_process_image_command_line contains \"SUB_VIDEO\" and action_process_image_command_line contains \"VIDEOCONLOCK\") or (action_process_image_command_line contains \"-change \" and action_process_image_command_line contains \"-standby-timeout-\")))\n\n\n\n"}
{"prompt": "I want to detect instances of the Griffon malware attack pattern which utilizes command lines with specific patterns like \".txt\" and \"//b /e:jscript\" executing from temporary directories.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*\\\\local\\\\temp\\\\.*\" and action_process_image_command_line contains \"\n\n\n\n"}
{"prompt": "I want to detect potential instances of process hollowing by Pikabot, specifically looking for rundll32 executions leading to legitimate Windows binaries like SearchFilterHost, SearchProtocolHost, sndvol, wwermgr, and wwahost.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\rundll32\\.exe\" and (action_process_image_path ~= \".*\\\\SearchFilterHost\\.exe\" or action_process_image_path ~= \".*\\\\SearchProtocolHost\\.exe\" or action_process_image_path ~= \".*\\\\sndvol\\.exe\" or action_process_image_path ~= \".*\\\\wermgr\\.exe\" or action_process_image_path ~= \".*\\\\wwahost\\.exe\")) and  not ((action_process_image_path ~= \".*\\\\sndvol\\.exe\" and actor_process_image_command_line contains \"mmsys.cpl\"))\n\n\n\n"}
{"prompt": "I want to see details about terminated user activity related to proxy access via Symantec WSS, including user accounts, IP addresses, web pages accessed, and other relevant information.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\"))\n| join type = left\n(dataset = pan_dss_raw\n| fields company_name, sam_account_name, ou\n) as adusers adusers.sam_account_name = user_dst\n| filter sam_account_name != null and company_name ~= \"^SEP|^SEPX\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\nvalues(to_string(OU)) as org_unit,\nvalues(company_name) as emp_id by user_dst\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see all network communications involving the malicious IPs: 185.202.220.239, 64.190.113.28, 3.86.144.19, and 188.166.101.65 from Fortinet Fortigate devices.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw, cisco_asa_raw)\n| filter (xdm.source.ipv4 in (\"185.202.220.239\", \"64.190.113.28\", \"3.86.144.19\", \"188.166.101.65\")) or (xdm.target.ipv4 in (\"185.202.220.239\", \"64.190.113.28\", \"3.86.144.19\", \"188.166.101.65\"))"}
{"prompt": "I want to find instances of attackers disabling Windows features using Dism online.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\DismHost\\.exe\" and (actor_process_image_command_line contains \"/Online\" and actor_process_image_command_line contains \"/Disable-Feature\")) or (action_process_image_path ~= \".*\\\\Dism\\.exe\" and (action_process_image_command_line contains \"/Online\" and action_process_image_command_line contains \"/Disable-Feature\")))\n\n\n\n"}
{"prompt": "I want to find potential instances of Windows Kernel and 3rd-Party Drivers exploits that involve token stealing.", "response": "preset = xdr_process\n| filter (actor_process_integrity_level = \"Medium\" and action_process_integrity_level = \"System\" and action_process_username = \"NT AUTHORITY\\\\SYSTEM\")\n\n\n\n"}
{"prompt": "I want to detect when Remote Utilities Host Service is installed on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and ((actor_process_image_path contains \"\\\\rutserv.exe\" and actor_process_image_path contains \"-service\") or ServiceName = \"Remote Utilities - Host\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious processes on endpoints that use NTFS short names in their command lines.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"~1.exe\" or action_process_image_command_line contains \"~1.bat\" or action_process_image_command_line contains \"~1.msi\" or action_process_image_command_line contains \"~1.vbe\" or action_process_image_command_line contains \"~1.vbs\" or action_process_image_command_line contains \"~1.dll\" or action_process_image_command_line contains \"~1.ps1\" or action_process_image_command_line contains \"~1.js\" or action_process_image_command_line contains \"~1.hta\" or action_process_image_command_line contains \"~2.exe\" or action_process_image_command_line contains \"~2.bat\" or action_process_image_command_line contains \"~2.msi\" or action_process_image_command_line contains \"~2.vbe\" or action_process_image_command_line contains \"~2.vbs\" or action_process_image_command_line contains \"~2.dll\" or action_process_image_command_line contains \"~2.ps1\" or action_process_image_command_line contains \"~2.js\" or action_process_image_command_line contains \"~2.hta\") and  not (((actor_process_image_path ~= \".*\\\\WebEx\\\\WebexHost\\.exe\" or actor_process_image_path ~= \".*\\\\thor\\\\thor64\\.exe\") or action_process_image_command_line contains \"C:\\\\xampp\\\\vcredist\\\\VCREDI~1.EXE\"))\n\n\n\n"}
{"prompt": "I want to find instances of Python processes that use pty to spawn new terminals.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/python\" or action_process_image_path ~= \".*\\/python2\" or action_process_image_path ~= \".*\\/python3\") or (action_process_image_path contains \"/python2.\" or action_process_image_path contains \"/python3.\")) and ((action_process_image_command_line contains \"import pty\" and action_process_image_command_line contains \".spawn(\") or action_process_image_command_line contains \"from pty import spawn\")\n\n\n\n"}
{"prompt": "I want to find suspicious environment variables that have been registered on Windows systems.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Environment\\\\.*\" and ((action_registry_value_name in (\"powershell\", \"pwsh\") or action_registry_data in (\"powershell\", \"pwsh\")) or ((action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*C\\:\\\\Users\\\\Public\\\\.*\" or action_registry_value_name contains \"TVqQAAMAAAAEAAAA\" or action_registry_value_name contains \"TVpQAAIAAAAEAA8A\" or action_registry_value_name contains \"TVqAAAEAAAAEABAA\" or action_registry_value_name contains \"TVoAAAAAAAAAAAAA\" or action_registry_value_name contains \"TVpTAQEAAAAEAAAA\" or action_registry_value_name contains \"SW52b2tlL\" or action_registry_value_name contains \"ludm9rZS\" or action_registry_value_name contains \"JbnZva2Ut\" or action_registry_value_name contains \"SQBuAHYAbwBrAGUALQ\" or action_registry_value_name contains \"kAbgB2AG8AawBlAC0A\" or action_registry_value_name contains \"JAG4AdgBvAGsAZQAtA\") or (action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_data ~= \".*C\\:\\\\Users\\\\Public\\\\.*\" or action_registry_data contains \"TVqQAAMAAAAEAAAA\" or action_registry_data contains \"TVpQAAIAAAAEAA8A\" or action_registry_data contains \"TVqAAAEAAAAEABAA\" or action_registry_data contains \"TVoAAAAAAAAAAAAA\" or action_registry_data contains \"TVpTAQEAAAAEAAAA\" or action_registry_data contains \"SW52b2tlL\" or action_registry_data contains \"ludm9rZS\" or action_registry_data contains \"JbnZva2Ut\" or action_registry_data contains \"SQBuAHYAbwBrAGUALQ\" or action_registry_data contains \"kAbgB2AG8AawBlAC0A\" or action_registry_data contains \"JAG4AdgBvAGsAZQAtA\")) or ((action_registry_value_name ~= \"SUVY.*\" or action_registry_value_name ~= \"SQBFAF.*\" or action_registry_value_name ~= \"SQBuAH.*\" or action_registry_value_name ~= \"cwBhA.*\" or action_registry_value_name ~= \"aWV4.*\" or action_registry_value_name ~= \"aQBlA.*\" or action_registry_value_name ~= \"R2V0.*\" or action_registry_value_name ~= \"dmFy.*\" or action_registry_value_name ~= \"dgBhA.*\" or action_registry_value_name ~= \"dXNpbm.*\" or action_registry_value_name ~= \"H4sIA.*\" or action_registry_value_name ~= \"Y21k.*\" or action_registry_value_name ~= \"cABhAH.*\" or action_registry_value_name ~= \"Qzpc.*\" or action_registry_value_name ~= \"Yzpc.*\") or (action_registry_data ~= \"SUVY.*\" or action_registry_data ~= \"SQBFAF.*\" or action_registry_data ~= \"SQBuAH.*\" or action_registry_data ~= \"cwBhA.*\" or action_registry_data ~= \"aWV4.*\" or action_registry_data ~= \"aQBlA.*\" or action_registry_data ~= \"R2V0.*\" or action_registry_data ~= \"dmFy.*\" or action_registry_data ~= \"dgBhA.*\" or action_registry_data ~= \"dXNpbm.*\" or action_registry_data ~= \"H4sIA.*\" or action_registry_data ~= \"Y21k.*\" or action_registry_data ~= \"cABhAH.*\" or action_registry_data ~= \"Qzpc.*\" or action_registry_data ~= \"Yzpc.*\"))))\n\n\n\n"}
{"prompt": "I want to find instances where an Azure AD Hybrid Health AD FS service instance was deleted from my tenant.", "response": "dataset = msft_azure_raw\n| alter properties_categoryValue = json_extract_scalar(properties , \"$.categoryValue\")\n| alter properties_resourceProviderValue = json_extract_scalar(properties , \"$.resourceProviderValue\")\n| alter properties_resourceId = json_extract_scalar(properties , \"$.resourceId\")\n| filter (properties.categoryValue = \"Administrative\" and properties.resourceProviderValue = \"Microsoft.ADHybridHealthService\" and properties.resourceId contains \"AdFederationService\" and oproperties.perationNameValue = \"Microsoft.ADHybridHealthService/services/delete\")\n\n\n\n"}
{"prompt": "I want to see XQL queries related to modifications of Internet Explorer autorun keys in the Windows Event Log.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Internet Explorer\" or action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Internet Explorer\") and (action_registry_key_name contains \"\\\\Toolbar\" or action_registry_key_name contains \"\\\\Extensions\" or action_registry_key_name contains \"\\\\Explorer Bars\") and  not ((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\") or (action_registry_key_name contains \"\\\\Extensions\\\\{2670000A-7350-4f3c-8081-5663EE0C6C49}\" or action_registry_key_name contains \"\\\\Extensions\\\\{31D09BA0-12F5-4CCE-BE8A-2923E76605DA}\" or action_registry_key_name contains \"\\\\Extensions\\\\{789FE86F-6FC4-46A1-9849-EDE0DB0C95CA}\" or action_registry_key_name contains \"\\\\Extensions\\\\{A95fe080-8f5d-11d2-a20b-00aa003c157a}\") or (action_registry_key_name ~= \".*\\\\Toolbar\\\\ShellBrowser\\\\ITBar7Layout\" or action_registry_key_name ~= \".*\\\\Toolbar\\\\ShowDiscussionButton\" or action_registry_key_name ~= \".*\\\\Toolbar\\\\Locked\"))\n\n\n\n"}
{"prompt": "I want to find processes on macOS systems that are using tools like arp or ping and checking their network connections.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/arp\" and action_process_image_command_line contains \"-a\") or (action_process_image_path ~= \".*\\/ping\" and (action_process_image_command_line contains \" 10.\" or action_process_image_command_line contains \" 192.168.\" or action_process_image_command_line contains \" 172.16.\" or action_process_image_command_line contains \" 172.17.\" or action_process_image_command_line contains \" 172.18.\" or action_process_image_command_line contains \" 172.19.\" or action_process_image_command_line contains \" 172.20.\" or action_process_image_command_line contains \" 172.21.\" or action_process_image_command_line contains \" 172.22.\" or action_process_image_command_line contains \" 172.23.\" or action_process_image_command_line contains \" 172.24.\" or action_process_image_command_line contains \" 172.25.\" or action_process_image_command_line contains \" 172.26.\" or action_process_image_command_line contains \" 172.27.\" or action_process_image_command_line contains \" 172.28.\" or action_process_image_command_line contains \" 172.29.\" or action_process_image_command_line contains \" 172.30.\" or action_process_image_command_line contains \" 172.31.\" or action_process_image_command_line contains \" 127.\" or action_process_image_command_line contains \" 169.254.\")))\n\n\n\n"}
{"prompt": "I want to find instances where Curl.EXE is used to read local files.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\curl\\.exe\" or actor_process_file_original_name = \"curl.exe\") and action_process_image_command_line contains \"file:\n\n\n\n"}
{"prompt": " I want to detect changes made to AWS CloudTrail settings and identify which users are making those changes. ", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name != \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName IN (\"CreateTrail\", \"UpdateTrail\", \"DeleteTrail\", \"StartLogging\", \"StopLogging\") and account_id NOT IN (\"<account id>\")\n| filter target_username not contains \"<username>\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find any instances where an attacker might be exploiting CVE-2021-21978 through a VMware View Planner web upload process.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and (xdm.network.http.url contains \"logupload\" and xdm.network.http.url contains \"logMetaData\" and xdm.network.http.url contains \"wsgi_log_upload.py\"))\n\n\n\n"}
{"prompt": "I want to find instances where Office applications (like Word or Excel) spawn executables from users' directories.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\WINWORD\\.EXE\" or actor_process_image_path ~= \".*\\\\EXCEL\\.EXE\" or actor_process_image_path ~= \".*\\\\POWERPNT\\.exe\" or actor_process_image_path ~= \".*\\\\MSPUB\\.exe\" or actor_process_image_path ~= \".*\\\\VISIO\\.exe\" or actor_process_image_path ~= \".*\\\\MSACCESS\\.exe\" or actor_process_image_path ~= \".*\\\\EQNEDT32\\.exe\") and action_process_image_path ~= \"C\\:\\\\users\\\\.*\" and action_process_image_path ~= \".*\\.exe\") and  not (action_process_image_path ~= \".*\\\\Teams\\.exe\")\n\n\n\n"}
{"prompt": "I want to see events where a process like cmd.exe, cscript.exe, or powershell.exe spawns regsvr32.exe, excluding legitimate system calls.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") and action_process_image_path ~= \".*\\\\regsvr32\\.exe\") and  not ((actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\cmd.exe\" and action_process_image_command_line ~= \".*\\ \\/s\\ C\\:\\\\Windows\\\\System32\\\\RpcProxy\\\\RpcProxy\\.dll\"))\n\n\n\n"}
{"prompt": "I want to find instances of an attacker bypassing User Account Control (UAC) on Windows systems using DelegateExecute.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\open\\\\command\\\\DelegateExecute\" and (action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\"))\n\n\n\n"}
{"prompt": "I want to find instances where multiple users from different destinations attempt to log into iRemote from the same IP address within a 5-minute window.", "response": "dataset = msft_azure_raw\n| bin _time span = 5m\n| filter operationName = \"Sign-in activity\" and category = \"SignInLogs\"\n| alter result_code = to_integer(resultType),\nresult_desc = resultDescription,\nuser_dst = properties -> userPrincipalName,\nappDisplayName = properties -> appDisplayName,\nuserDisplayName = properties -> userDisplayName,\nuserAgent = properties -> userAgent,\nOS = json_extract_scalar(properties, \"$.deviceDetail.operatingSystem\"),\nresult = trim(arrayindex(regextract(properties, \"result\\\":\\\"([^,]+)\"), 0), \"\\\"\")\n| iploc callerIpAddress loc_country,\nloc_asn_org\n| filter result_code != 0 and appDisplayName ~= \"iremote\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(userDisplayName) as username,\nvalues(user_dst) as user_dst,\nvalues(appDisplayName) as server,\nvalues(result_code) as result_code,\nvalues(result_desc) as result_desc,\nvalues(userAgent) as user_agent,\nvalues(loc_country) as country,\nvalues(loc_asn_org) as org,\nvalues(OS) as OS,\nvalues(result) as result,\ncount() as matched_events by _time,\ncallerIpAddress\n| filter array_length(user_dst) >= 5\n| alter aggregation_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events where rundll32 is used to initiate a TCP connection, potentially indicating C2 communication from malware like Pikabot.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (causality_actor_process_image_path ~= \".*\\\\rundll32\\.exe\" and (actor_process_image_path ~= \".*\\\\SearchFilterHost\\.exe\" or actor_process_image_path ~= \".*\\\\SearchProtocolHost\\.exe\" or actor_process_image_path ~= \".*\\\\sndvol\\.exe\" or actor_process_image_path ~= \".*\\\\wermgr\\.exe\" or actor_process_image_path ~= \".*\\\\wwahost\\.exe\") and action_network_protocol = \"tcp\" and Initiated = \"true\")\n\n\n\n"}
{"prompt": "I want to see all events related to changes in membership for \"High Privileged Security Groups\" on the INFOSYS-CLOUD domain.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id IN (\"4728\", \"4729\", \"4756\", \"4757\") and microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.source.host.hostname contains \"infosys-cloud.com\"\n\n| alter target_username = if(xdm.target.user.username ~= \"ITLINFOSYS\\n\", concat(\"n\", arrayindex(regextract(xdm.target.user.username, \"[a-zA-Z0-9._]+\"), -1)), if(xdm.target.user.username ~= \"ITLINFOSYS\\r\", concat(\"r\", arrayindex(regextract(xdm.target.user.username, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(xdm.target.user.username, \"[a-zA-Z0-9._-]+\"), -1)))\n| alter xdm.target.user.username = if(xdm.event.description ~= \"Account Name:\\t\\tCN=\", trim(arrayindex(regextract(xdm.event.description, \"Account Name:\\t\\tCN=([^,]+)\"), 0)), target_username)\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find PowerShell scripts that use the Get-ADComputer cmdlet to discover and export computer information.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Get-ADComputer \" and ScriptBlockText contains \" -Filter \\*\") and (ScriptBlockText contains \" | Select \" or ScriptBlockText contains \"Out-File\" or ScriptBlockText contains \"Set-Content\" or ScriptBlockText contains \"Add-Content\"))\n\n\n\n"}
{"prompt": "I want to see alerts for security events matching the Common Criteria Security Audit Analysis requirements (FAU_SAA), specifically those logged by Windows as \"Monitored Security Event Pattern Occurred-PH2\".", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4618\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect network connections from my systems to DevTunnels domains, as these could indicate an attacker trying to establish a reverse shell or persistence.", "response": "#N/A"}
{"prompt": "I want to see events related to suspicious Active Directory enumeration using AdFind.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"lockoutduration\" or action_process_image_command_line contains \"lockoutthreshold\" or action_process_image_command_line contains \"lockoutobservationwindow\" or action_process_image_command_line contains \"maxpwdage\" or action_process_image_command_line contains \"minpwdage\" or action_process_image_command_line contains \"minpwdlength\" or action_process_image_command_line contains \"pwdhistorylength\" or action_process_image_command_line contains \"pwdproperties\") or action_process_image_command_line contains \"-sc admincountdmp\" or action_process_image_command_line contains \"-sc exchaddresses\")\n\n\n\n"}
{"prompt": "I want to see which users have had an unusually high number of denied Microsoft HTTP requests today compared to their average over the last seven days.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and user_agent ~= \"^Microsoft\" and tcp_action ~= \"DENIED\" and host_dst !~= \"^autodiscover\"\n| comp count() as current_day_count,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and user_agent ~= \"^Microsoft\" and tcp_action ~= \"DENIED\" and host_dst !~= \"^autodiscover\"\n| comp count() as 7_days_count,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_count) as 7_days_count_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_count_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_count > multiply(7_days_count_avg, 1.35)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see all events where the Windows Defender Firewall Service Failed To Load Group Policy.", "response": "datamodel\n| filter xdm.event.id = 2009\n\n\n\n"}
{"prompt": "I want to find instances of suspicious Mstsc.EXE executions that use local RDP files and potentially indicate Command And Control activity.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\mstsc\\.exe\" or actor_process_file_original_name = \"mstsc.exe\") and (action_process_image_command_line ~= \".*\\.rdp\" or action_process_image_command_line ~= \".*\\.rdp\\\"\") and (action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line contains \":\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\" or action_process_image_command_line contains \":\\\\Windows\\\\System32\\\\Tasks_Migrated \" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Tracing\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Downloads\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see all events related to Azure Keyvault keys being modified or deleted.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.KEYVAULT/VAULTS/KEYS/UPDATE/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE\", \"MICROSOFT.KEYVAULT/VAULTS/KEYS/CREATE/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/KEYS/IMPORT/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/KEYS/RECOVER/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/KEYS/RESTORE/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/KEYS/DELETE\", \"MICROSOFT.KEYVAULT/VAULTS/KEYS/BACKUP/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/KEYS/PURGE/ACTION\")\n\n\n\n"}
{"prompt": "I want to detect suspicious activity related to wget downloading files into temporary directories on Linux systems.", "response": "preset = xdr_file\n| filter (actor_process_image_path ~= \".*\\/wget\" and (action_file_name ~= \"\\/tmp\\/.*\" or action_file_name ~= \"\\/var\\/tmp\\/.*\"))\n\n\n\n"}
{"prompt": "I want to see Symantec WSS events with None category from Symantec EP, including details about the server name, user, event description, type, source and destination IP addresses, target URL, hostname, and any related proxy events.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Security\") and xdm.alert.name ~= \"^audit|^web attack|^malicious Site|^system infected|^os attack|^attack\"\n| alter server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer\\: ([^\\,]+)\"), 0)\n| alter category = xdm.alert.name,\nusername = xdm.source.user.username\n| alter event_desc = xdm.alert.description,\nevent_type = xdm.event.description,\ntarget_url = xdm.target.url,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nhostname = coalesce(xdm.target.host.hostname, xdm.source.host.hostname)\n| comp earliest(_time) as FirstAVEventTime,\nlatest(_time) as LatestAVEventTime,\nvalues(server_name) as server_name,\nvalues(category) as alert_category,\nvalues(event_desc) as event_desc,\nvalues(event_type) as event_type,\nvalues(src_ip) as src_ip,\nvalues(dst_ip) as dst_ip,\nvalues(target_url) as target_url by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nhostname\n| join type = left\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| alter user_dst = if(user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", \"\"\"non-interactive-user\"\"\", null, \"\"\"\"\"\"), if(user_dst ~= \"ITLINFOSYS\\n\", concat(\"n\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), if(user_dst ~= \"ITLINFOSYS\\r\", concat(\"r\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1))), user_dst)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by ip_src,\nuser_dst,\nalias_host\n) as proxyevents(proxyevents.ip_src = xdm.target.ipv4 or proxyevents.alias_host = hostname or proxyevents.user_dst = xdm.source.user.sam_account_name)\n| filter (ip_src != null or user_dst != null or alias_host != null) and category ~= \"uncategorized\""}
{"prompt": "I want to see alerts about processes that suggest HWP exploits are being used on endpoints.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\Hwp\\.exe\" and action_process_image_path ~= \".*\\\\gbb\\.exe\")\n\n\n\n"}
{"prompt": "I want to see which users were added to which privilege groups on Windows systems.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter _collector_type = \"XDR Collector\"\n| filter event_id in (4756, 4728, 632, 4732)\n| alter TargetGroupName = event_data -> TargetUserName,\nTargetSID = event_data -> MemberSid,\nTargetDomainName = event_data -> TargetDomainName,\nSubjectUserName = event_data -> SubjectUserName,\nAction = regextract(message, \"(.*)\\n\\nSubject:\"),\nTargetUserName = User -> name\n| alter Groupname = concat(TargetDomainName, \"\\\", TargetGroupName)\n| filter TargetGroupName in (\"Administrators\", \"Backup Operators\", \"Domain Admins\", \"Enterprise Admins\", \"Print Operators\", \"Replicator\", \"Schema Admins\", \"Server Operators\", \"Amer Server Admins\", \"DNS Admins\", \"grp_cnx_amer_gpo_admins\", \"grp_sec_rakija_operators\", \"NA_VMAdmins\", \"SEC.CNX.Global.Delegation.Access\", \"Server Team India\", \"SEC.CNX.Global.GPO.Editors\", \"grp_sec_itscs_operators\", \"grp_cnx_ind_it_ID_management\", \"GRP_SEC_AD_AccOp_ITSCS\", \"grp_sec_itscs_ad_admin\", \"SEC.IN.GPO.Editors\", \"emea_serverteam\")\n| filter SubjectUserName !~= \"\\$$\"\n| fields Action, Groupname, SubjectUserName, TargetUserName,\nTargetSID, TargetGroupName, host_name"}
{"prompt": "I want to see XQL results for PUA activities that use the CSExec Default Named Pipe.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter PipeName contains \"\\\\csexecsvc\"\n\n\n\n"}
{"prompt": "I want to find indicators of malware that are trying to hide by using Run Once tasks and configuring registry entries related to \"Microsoft\\Active Setup\\Installed Components\".", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Microsoft\\\\Active Setup\\\\Installed Components\" and action_registry_key_name ~= \".*\\\\StubPath\") and  not (((action_registry_value_name ~= \".*C\\:\\\\Program\\ Files\\\\Google\\\\Chrome\\\\Application\\\\.*\" or action_registry_data ~= \".*C\\:\\\\Program\\ Files\\\\Google\\\\Chrome\\\\Application\\\\.*\") and (action_registry_value_name contains \"\\\\Installer\\\\chrmstp.exe\\\" --configure-user-settings --verbose-logging --system-level\" or action_registry_data contains \"\\\\Installer\\\\chrmstp.exe\\\" --configure-user-settings --verbose-logging --system-level\")) or (((action_registry_value_name ~= \".*C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\Edge\\\\Application\\\\.*\" or action_registry_value_name ~= \".*C\\:\\\\Program\\ Files\\\\Microsoft\\\\Edge\\\\Application\\\\.*\") or (action_registry_data ~= \".*C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\Edge\\\\Application\\\\.*\" or action_registry_data ~= \".*C\\:\\\\Program\\ Files\\\\Microsoft\\\\Edge\\\\Application\\\\.*\")) and (action_registry_value_name ~= \".*\\\\Installer\\\\setup\\.exe\\\"\\ \\-\\-configure\\-user\\-settings\\ \\-\\-verbose\\-logging\\ \\-\\-system\\-level\\ \\-\\-msedge\\ \\-\\-channel\\=stable\" or action_registry_data ~= \".*\\\\Installer\\\\setup\\.exe\\\"\\ \\-\\-configure\\-user\\-settings\\ \\-\\-verbose\\-logging\\ \\-\\-system\\-level\\ \\-\\-msedge\\ \\-\\-channel\\=stable\")))\n\n\n\n"}
{"prompt": "I want to see files dumped from SAM files located in the Temp folder.", "response": "datamodel\n| filter (xdm.target.file.filename contains \"\\\\AppData\\\\Local\\\\Temp\\\\SAM-\" and xdm.target.file.filename contains \".dmp\")\n\n\n\n"}
{"prompt": "I want to find instances where users are added to the Remote Desktop Users group.", "response": "preset = xdr_process\n| filter (((action_process_image_command_line contains \"localgroup \" and action_process_image_command_line contains \" /add\") or (action_process_image_command_line contains \"Add-LocalGroupMember \" and action_process_image_command_line contains \" -Group \")) and (action_process_image_command_line contains \"Remote Desktop Users\" or action_process_image_command_line contains \"Utilisateurs du Bureau \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd distance\" or action_process_image_command_line contains \"Usuarios de escritorio remoto\"))\n\n\n\n"}
{"prompt": "I want to detect potential credential theft attempts on macOS devices using osascript and GUI input capture techniques.", "response": "preset = xdr_process\n| filter (action_process_image_path = \"/usr/sbin/osascript\" and (action_process_image_command_line contains \"-e\" and action_process_image_command_line contains \"display\" and action_process_image_command_line contains \"dialog\" and action_process_image_command_line contains \"answer\") and (action_process_image_command_line contains \"admin\" or action_process_image_command_line contains \"administrator\" or action_process_image_command_line contains \"authenticate\" or action_process_image_command_line contains \"authentication\" or action_process_image_command_line contains \"credentials\" or action_process_image_command_line contains \"pass\" or action_process_image_command_line contains \"password\" or action_process_image_command_line contains \"unlock\"))\n\n\n\n"}
{"prompt": "I want to find events where a Windows service is stopped using tools like sc.exe or net.exe, excluding specific known exceptions.", "response": "preset = xdr_process\n| filter (((actor_process_file_original_name in (\"sc.exe\", \"net.exe\", \"net1.exe\") or (action_process_image_path ~= \".*\\\\sc\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\")) and action_process_image_command_line contains \" stop \") and  not ((action_process_image_command_line in (\"sc  stop KSCWebConsoleMessageQueue\", \"sc  stop LGHUBUpdaterService\") and (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\")))) or ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and action_process_image_command_line contains \"Stop-Service \")\n\n\n\n"}
{"prompt": "I want to find instances where the Windows \"ping\" executable is used with a hexadecimal IP address.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\ping\\.exe\" and action_process_image_command_line contains \"0x\")\n\n\n\n"}
{"prompt": "I want to see alerts related to changes in authentication policies, specifically the creation or removal of domain trusts.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4706\", \"4707\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect potential Pikabot infections by looking for suspicious combinations of commands executed via cmd.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"cmd\" and action_process_image_command_line contains \"/c\") and (action_process_image_command_line contains \" & \" or action_process_image_command_line contains \" || \") and (action_process_image_command_line contains \" curl\" or action_process_image_command_line contains \" wget\" or action_process_image_command_line contains \" timeout \" or action_process_image_command_line contains \" ping \") and (action_process_image_command_line contains \" rundll32\" or action_process_image_command_line contains \" mkdir \"))\n\n\n\n"}
{"prompt": "I want to detect suspicious scheduled tasks created by users from their AppData Temp directory using schtasks.exe.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \"/Create \" and action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\") and  not ((action_process_image_command_line contains \"/Create /TN \\\"klcp_update\\\" /XML \" and action_process_image_command_line contains \"\\\\klcp_update_task.xml\"))\n\n\n\n"}
{"prompt": "I want to see alerts about processes that might be related to \"Mouse Lock\" malware on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_signature_product contains \"Mouse Lock\" or action_process_signature_vendor contains \"Misc314\" or action_process_image_command_line contains \"Mouse Lock_\")\n\n\n\n"}
{"prompt": "I want to find out which users received multiple phishing emails with the same malicious URL from different senders within a set time frame. I also want to know their location and the domains used by the senders.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter eventType in (\"Malware\", \"Ransomware\") and headerFrom != null and headerTo != null and details != null\n| alter headerTo_array = if(headerTo ~= \"\\\"\\\"\", recipients -> [], headerTo -> []),\nsender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0),\nextracted_hashes = json_extract(details, \"$.fileInfo\") -> []\n| arrayexpand headerTo_array\n| filter headerTo_array ~= \"<domain>\"\n| alter headerTo_string = arrayindex(split(json_extract_scalar(headerTo_array, \"$.\"), \"@\"), 0),\nsender_domain = lowercase(arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0))\n| arrayexpand extracted_hashes\n| alter extracted_filesha256 = json_extract_scalar(extracted_hashes, \"$.fileSha256\")\n| join type = left\n(preset = ad_users\n| fields sam_account_name, location\n) as adusers adusers.sam_account_name = headerTo_string\n| filter sam_account_name != null and location != null\n| comp count() as location_observed_statistics,\nvalues(sender_domain) as sender_domain,\nvalues(headerTo_string) as recipients by extracted_filesha256,\nlocation\n| filter array_length(sender_domain) > 1 and array_length(recipients) > 5"}
{"prompt": "I want to see users who have logged in from two different countries within a 4 hour period.", "response": "config case_sensitive = false\n| dataset = check_point_connectra_raw\n| filter act = \"Log In\" and duser != null and origin not in (\"<ip>\") and _final_reporting_device_ip != \"<ip>\"\n| alter hostname = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = lowercase(replace(if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), if(array_length(regextract(duser, \"[a-zA-Z]+\\\\(.*)\")) > 0, arrayindex(regextract(duser, \"[a-zA-Z]+\\\\(.*)\"), 0), duser))), \"itlinfosys\", \"\"))\n| join type = left\n(dataset = enterprise_admin_list\n| fields username, admin_type\n) as adminusers adminusers.username = user_dst\n| join type = left\n(preset = ad_users\n| fields full_user_name, security_group_list, sam_account_name,\nmember_of\n) as cieusers cieusers.sam_account_name = user_dst\n| filter admin_type in (\"domain_admin_win_admin\") or (security_group_list contains \"Tier0Users\" or member_of contains \"Tier0Users\")\n| iploc src loc_country\n| alter action = act,\nsource_port = spt,\ndest_port = dpt,\nsource_ip = src,\ndst_ip = host_ip,\nresult = outcome,\nuser_agent = requestClientApplication,\nos_edition = os_edition,\nproduct = _product\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestTime,\nvalues(source_ip) as src_ip,\nvalues(host_ip) as dst_ip,\nvalues(source_port) as src_port,\nvalues(dest_port) as dst_port,\nvalues(action) as action,\nvalues(hostname) as hostname,\nvalues(origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(product) as product,\nvalues(loc_country) as country_src,\ncount() as matched_events by user_dst\n| filter array_length(country_src) > 1 and array_length(hostname) > 1\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find suspicious instances of MSBuild being run with uncommon parent processes.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\MSBuild\\.exe\" or actor_process_file_original_name = \"MSBuild.exe\") and  not ((actor_process_image_path ~= \".*\\\\devenv\\.exe\" or actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\msbuild\\.exe\" or actor_process_image_path ~= \".*\\\\python\\.exe\" or actor_process_image_path ~= \".*\\\\explorer\\.exe\" or actor_process_image_path ~= \".*\\\\nuget\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see which admins are making more than 10 firewall object modifications within a 5 minute period on CheckPoint SmartConsole.", "response": "config case_sensitive = false\n| dataset = check_point_smartconsole_raw\n| bin _time span = 5m\n| filter operation = \"Modify Object\" and lowercase(administrator) not in (\"<user>\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(subject) as result,\nvalues(_product) as product,\ncount() as matched_events by administrator,\n_time\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect suspicious rundll32 executions with uncommon DLL extensions on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and  not (action_process_image_command_line = \"None\" or action_process_image_command_line = \"\" or ((action_process_image_command_line contains \".cpl \" or action_process_image_command_line contains \".cpl,\" or action_process_image_command_line contains \".cpl\\\"\" or action_process_image_command_line contains \".cpl'\" or action_process_image_command_line contains \".dll \" or action_process_image_command_line contains \".dll,\" or action_process_image_command_line contains \".dll\\\"\" or action_process_image_command_line contains \".dll'\" or action_process_image_command_line contains \".inf \" or action_process_image_command_line contains \".inf,\" or action_process_image_command_line contains \".inf\\\"\" or action_process_image_command_line contains \".inf'\") or (action_process_image_command_line ~= \".*\\.cpl\" or action_process_image_command_line ~= \".*\\.dll\" or action_process_image_command_line ~= \".*\\.inf\")) or action_process_image_command_line contains \" -localserver \" or (actor_process_image_path ~= \".*\\\\msiexec\\.exe\" and (action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Installer\\\\.*\" and action_process_image_command_line contains \".tmp\" and action_process_image_command_line contains \"zzzzInvokeManagedCustomActionOutOfProc\"))) and  not ((actor_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Microsoft\\\\EdgeUpdate\\\\Install\\\\{\" and actor_process_image_command_line contains \"\\\\EDGEMITMP_\" and actor_process_image_command_line contains \".tmp\\\\setup.exe\" and actor_process_image_command_line contains \"--install-archive=\" and actor_process_image_command_line contains \"--previous-version=\" and actor_process_image_command_line contains \"--msedgewebview --verbose-logging --do-not-launch-msedge --user-level\"))\n\n\n\n"}
{"prompt": "I want to find instances of the MSSQL Extended Stored Procedure Backdoor Maggie on my endpoints.", "response": "preset = xdr_event_log\n| alter Message = regextract(to_json_string(action_evtlog_data_fields)->Message{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"MSSQLSERVER\" and action_evtlog_event_id = 8128 and Message contains \"maggie\")\n\n\n\n"}
{"prompt": "I want to find instances where an attacker might be using svchost.exe with specific command line arguments to create scheduled tasks via PowerShell and potentially achieve persistence.", "response": "preset = xdr_process\n| filter (actor_process_image_path = \"C:\\\\WINDOWS\\\\System32\\\\svchost.exe\" and (actor_process_image_command_line contains \"-k netsvcs\" and actor_process_image_command_line contains \"-s Schedule\") and (action_process_image_command_line ~= \".*\\ \\-windowstyle\\ hidden\" or action_process_image_command_line ~= \".*\\ \\-w\\ hidden\" or action_process_image_command_line ~= \".*\\ \\-ep\\ bypass\" or action_process_image_command_line ~= \".*\\ \\-noni\"))\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is used to drop a .ps1 script file, excluding known safe or temporary files.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\\\pwsh\\.exe\") or (xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\")) and xdm.target.file.filename ~= \".*\\.ps1\") and  not (xdm.target.file.filename contains \"__PSScriptPolicyTest_\" or (xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") or xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\Temp\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find Cisco APs that have had at least 10 duplicate IP address detections within a 5-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 5m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter msg_id in (\"LWAPP-3-DUP_AP_IP\", \"LWAPP-3-DUP_IP\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\nxdm.source.ipv4,\neth_src,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ibpmdeviceip\",\naggregation_criteria1 = \"devicemacaddress\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to find files with the \".sed\" extension because they could indicate malicious self-extracting archive creation.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\.sed\"\n\n\n\n"}
{"prompt": "I want to see if any remote access tools have been installed on my endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id in (7045, 7036) and (ServiceName contains \"AmmyyAdmin\" or ServiceName contains \"Atera\" or ServiceName contains \"BASupportExpressSrvcUpdater\" or ServiceName contains \"BASupportExpressStandaloneService\" or ServiceName contains \"chromoting\" or ServiceName contains \"GoToAssist\" or ServiceName contains \"GoToMyPC\" or ServiceName contains \"jumpcloud\" or ServiceName contains \"LMIGuardianSvc\" or ServiceName contains \"LogMeIn\" or ServiceName contains \"monblanking\" or ServiceName contains \"Parsec\" or ServiceName contains \"RManService\" or ServiceName contains \"RPCPerformanceService\" or ServiceName contains \"RPCService\" or ServiceName contains \"SplashtopRemoteService\" or ServiceName contains \"SSUService\" or ServiceName contains \"TeamViewer\" or ServiceName contains \"TightVNC\" or ServiceName contains \"vncserver\" or ServiceName contains \"Zoho\"))\n\n\n\n"}
{"prompt": "I want to see if the HybridConnectionManager service has been installed on my endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and ServiceName = \"HybridConnectionManager\" and ServiceFileName contains \"HybridConnectionManager\")\n\n\n\n"}
{"prompt": "I want to detect suspicious activity related to the PsLogList tool being used on endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"psloglist.exe\" or (action_process_image_path ~= \".*\\\\psloglist\\.exe\" or action_process_image_path ~= \".*\\\\psloglist64\\.exe\")) and (action_process_image_command_line contains \" security\" or action_process_image_command_line contains \" application\" or action_process_image_command_line contains \" system\") and (action_process_image_command_line contains \" -d\" or action_process_image_command_line contains \" -x\" or action_process_image_command_line contains \" -s\" or action_process_image_command_line contains \" -c\" or action_process_image_command_line contains \" -g\"))\n\n\n\n"}
{"prompt": "I want to find malicious PowerShell commandlets like Invoke-SMBAutoBrute, Invoke-GPOLinks, or Invoke-Potato being used on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Invoke-SMBAutoBrute\" or ScriptBlockText contains \"Invoke-GPOLinks\" or ScriptBlockText contains \"Invoke-Potato\")\n\n\n\n"}
{"prompt": "I want to find potential persistence threats related to Notepad++ plugins.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\Notepad\\+\\+\\\\plugins\\\\.*\" and xdm.target.file.filename ~= \".*\\.dll\") and  not ((xdm.target.process.name ~= \".*\\\\Notepad\\+\\+\\\\updater\\\\gup\\.exe\" or xdm.source.process.name ~= \".*\\\\Notepad\\+\\+\\\\updater\\\\gup\\.exe\") or ((xdm.target.process.name ~= \"C\\:\\\\Users\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Users\\\\.*\") and (xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") and ((xdm.target.process.name ~= \".*\\\\target\\.exe\" or xdm.target.process.name ~= \".*Installer\\.x64\\.exe\") or (xdm.source.process.name ~= \".*\\\\target\\.exe\" or xdm.source.process.name ~= \".*Installer\\.x64\\.exe\"))))\n\n\n\n"}
{"prompt": "I want to find instances of potential privilege escalation attempts using named pipes, particularly those involving cmd.exe or powershell.exe and commands that use \"echo\" with redirection (\" > \") and access a named pipe.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\") or actor_process_file_original_name in (\"Cmd.Exe\", \"PowerShell.EXE\")) and (action_process_image_command_line contains \"echo\" and action_process_image_command_line contains \">\" and action_process_image_command_line ~= \".*\\\\\\\\\\.\\\\pipe\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect instances where Sysinternals DebugView has been renamed and executed on endpoints.", "response": "preset = xdr_process\n| filter action_process_signature_product = \"Sysinternals DebugView\" and  not ((actor_process_file_original_name = \"Dbgview.exe\" and action_process_image_path ~= \".*\\\\Dbgview\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see how many failed login attempts PAM administrators have had in the last 5 minutes, specifically for Binoy Paulose and Kalesh R.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| bin _time span = 5m\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR\"\n| filter xdm.event.id = \"4625\" and xdm.source.user.username not in (null, \"-\") and xdm.source.user.username in (\"binoy.paulose\", \"kalesh_r\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp count() as matched_events,\nvalues(*) as * by _time,\nxdm.source.user.username\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ildestination\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find indicators of Meterpreter or Cobalt Strike getting system service installation.", "response": "datamodel\n| filter ((xdm.target.process.executable.path contains \"cmd\" and xdm.target.process.executable.path contains \"/c\" and xdm.target.process.executable.path contains \"echo\" and xdm.target.process.executable.path ~= \".*\\\\pipe\\\\.*\") or (xdm.target.process.executable.path contains \"%COMSPEC%\" and xdm.target.process.executable.path contains \"/c\" and xdm.target.process.executable.path contains \"echo\" and xdm.target.process.executable.path ~= \".*\\\\pipe\\\\.*\") or (xdm.target.process.executable.path contains \"cmd.exe\" and xdm.target.process.executable.path contains \"/c\" and xdm.target.process.executable.path contains \"echo\" and xdm.target.process.executable.path ~= \".*\\\\pipe\\\\.*\") or (xdm.target.process.executable.path contains \"rundll32\" and xdm.target.process.executable.path contains \".dll,a\" and xdm.target.process.executable.path contains \"/p:\"))\n\n\n\n"}
{"prompt": "I want to see terminated user activity from CheckPoint that includes the user's name, organization unit, company ID, action taken, product and vendor information.", "response": "config case_sensitive = false\n| dataset in (check_point_connectra_raw, check_point_smartconsole_raw)\n| filter (duser != null or administrator != null) and act != \"IP Changed\"\n| alter user_dst = if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), duser))\n| alter user_dst = if(user_dst ~= \"<org>\\n\", concat(\"n\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), if(user_dst ~= \"<org>\\r\", concat(\"r\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)))\n| alter user_name = coalesce(user_dst, administrator)\n| filter user_name != null\n| join type = left\n(dataset = pan_dss_raw\n| fields company_name, sam_account_name, ou\n) as adusers adusers.sam_account_name = user_name\n| filter sam_account_name != null and company_name ~= \"^SEP|^SEPX\"\n| alter action = coalesce(Operation, act, Subject)\n| comp values(action) as action,\nvalues(to_string(OU)) as org_unit,\nvalues(company_name) as emp_id by user_name,\n_product,\n_vendor"}
{"prompt": "{I want to see a list of users who have experienced at least 15 MFA authentication failures within a defined timeframe.} \n\n\nLet me know if you need any further assistance!", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id in (\"6273\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| filter error_code = \"33\"\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"MFA_radius_windows\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.user.username\n| filter matched_events >= 15\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 15)), 1)"}
{"prompt": "I want to find any new DNS ServerLevelPluginDll installations detected by the Windows Event Log.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\services\\\\DNS\\\\Parameters\\\\ServerLevelPluginDll\"\n\n\n\n"}
{"prompt": " I want to find instances of malicious processes that were renamed from \"Microsoft.NodejsTools.PressAnyKey.exe\" and are running on endpoints. ", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"Microsoft.NodejsTools.PressAnyKey.exe\" and  not (action_process_image_path ~= \".*\\\\Microsoft\\.NodejsTools\\.PressAnyKey\\.exe\")\n\n\n\n"}
{"prompt": "I want to see real-time alerts from SOX servers based on Windows Event Log events 4723, 4719, 4724, 4738, 4741, 4742, and 4743.", "response": "Datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4723\", \"4719\", \"4724\", \"4738\", \"4741\", \"4742\", \"4743\")\n| join\n(dataset = sox_servers\n) as soxsrvs soxsrvs.Hostname = xdm.source.host.hostname\n\n| dedup xdm.source.host.hostname,\nxdm.event.id\n| fields *\n| view column order = populated"}
{"prompt": "I want to find detections of users being added to admin groups on macOS systems using the dseditgroup command.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/dseditgroup\" and (action_process_image_command_line contains \" -o edit \" and action_process_image_command_line contains \" -a \" and action_process_image_command_line contains \" -t user\" and action_process_image_command_line contains \"admin\"))\n\n\n\n"}
{"prompt": "I want to find instances where an IDiagnostic Profile is being used to bypass User Account Control (UAC) through  the DllHost process, involving files located in the Windows System32 directory.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\DllHost\\.exe\" or xdm.source.process.name ~= \".*\\\\DllHost\\.exe\") and xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" and xdm.target.file.filename ~= \".*\\.dll\")\n\n\n\n"}
{"prompt": "I want to find events related to someone changing the user account associated with the FAX service on Windows.", "response": "preset = xdr_registry\n| filter action_registry_key_name = \"HKLM\\\\System\\\\CurrentControlSet\\\\Services\\\\Fax\\\\ObjectName\" and  not ((action_registry_value_name contains \"NetworkService\" or action_registry_data contains \"NetworkService\"))\n\n\n\n"}
{"prompt": "I want to find instances where non-admin users experience 3 or more logon failures within a 5-minute window in CheckPoint logs.", "response": "config case_sensitive = false\n| dataset in (check_point_smartconsole_raw, check_point_smartview_tracker_raw, check_point_query_database_raw, check_point_smartdashboard_raw, check_point_web_api_raw, check_point_web_ui_raw)\n| bin _time span = 5m\n| filter subject contains \"Administrator Login\" and administrator != NULL and additional_info contains \"Administrator failed to log in\" and administrator != NULL and _final_reporting_device_ip != \"<ip>\"\n| join type = left\n(preset = ad_users\n| fields full_user_name, security_group_list, sam_account_name,\nmember_of\n) as cieusers administrator = cieusers.sam_account_name\n| filter security_group_list not contains \"<group>\" and member_of not contains \"<group>\"\n| alter user_agent = null,\nos_edition = null,\nsrc_port = null,\ndst_port = null,\nhostname = arrayindex(regextract(originsicname, \"o\\=([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(src_port) as src_port,\nvalues(dst_port) as dst_port,\nvalues(subject) as action,\nvalues(origin) as origin,\nvalues(hostname) as hostname,\nvalues(additional_info) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\ncount() as matched_events by _time,\nadministrator\n| filter matched_events >= 3\n\n| alter aggregation_criteria = \"username\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "{ I want to find instances of HackTool - WinRM Access Via Evil-WinRM running on my endpoints by looking for processes with ruby.exe that use specific command line arguments like \"-i\", \"-u\", and \"-p\". } \n\n\nLet me know if you'd like to adjust the prompt further!", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\ruby\\.exe\" and (action_process_image_command_line contains \"-i \" and action_process_image_command_line contains \"-u \" and action_process_image_command_line contains \"-p \"))\n\n\n\n"}
{"prompt": "I want to see indicators of network communication from ComRAT malware.", "response": "datamodel\n| filter xdm.network.http.url contains \"/index/index.php?h=\"\n\n\n\n"}
{"prompt": "I want to detect potential evasion tactics involving access to the Telegram API without being directly associated with Telegram or Bot applications.", "response": "datamodel\n| filter xdm.network.http.domain = \"api.telegram.org\" and  not ((xdm.network.http.browser contains \"Telegram\" or xdm.network.http.browser contains \"Bot\"))\n\n\n\n"}
{"prompt": "I want to find events where a process is created and running from a zip file on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\.zip\\\\.*\"\n\n\n\n"}
{"prompt": "I want to see events related to security group creation or deletion by users who are not administrators.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| alter xdm.target.user.username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| alter xdm.source.user.username = if(xdm.source.user.username ~= \"@ad.infosys.com\", rtrim(xdm.source.user.username, \"@ad.infosys.com\"), if(xdm.source.user.username ~= \"@infosys.com\", rtrim(xdm.source.user.username, \"@infosys.com\"), if(xdm.source.user.username ~= \"itlinfosys\", ltrim(xdm.source.user.username, \"itlinfosys\\\\\"), xdm.source.user.username)))\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| filter xdm.event.id in (\"4730\", \"4734\", \"4654\", \"4758\", \"4727\", \"4731\")\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type in (\"win_admin\", \"win_admin_accop\", \"domain_admin_win_admin\", \"tier0_admin\", \"tier1_admin\") or security_groups contains \"Tier0Users\" or security_groups contains \"tier1users\"\n) as ent_admin_dst ent_admin_dst.username = xdm.source.user.username or ent_admin_dst.sam_account_name = xdm.source.user.username\n| filter username = null\n\n| filter xdm.source.user.username not in (\"_vfmadmin\", \"_ccpsrvacnt\", \"dl_automation\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps(wingrps.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or wingrps.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE in (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone_server\")\n| alter event_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect when important scheduled tasks like Windows system restore, BitLocker, and Windows Update are deleted or disabled on endpoints.", "response": "preset = xdr_event_log\n| alter TaskName = regextract(to_json_string(action_evtlog_data_fields)->TaskName{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4699, 4701) and (TaskName contains \"\\\\Windows\\\\SystemRestore\\\\SR\" or TaskName ~= \".*\\\\Windows\\\\Windows\\ Defender\\\\.*\" or TaskName contains \"\\\\Windows\\\\BitLocker\" or TaskName ~= \".*\\\\Windows\\\\WindowsBackup\\\\.*\" or TaskName ~= \".*\\\\Windows\\\\WindowsUpdate\\\\.*\" or TaskName contains \"\\\\Windows\\\\UpdateOrchestrator\\\\Schedule\" or TaskName contains \"\\\\Windows\\\\ExploitGuard\")) and  not ((action_evtlog_event_id = 4699 and SubjectUserName ~= \".*\\$\" and TaskName ~= \".*\\\\Windows\\\\Windows\\ Defender\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential DLL downloads happening via PowerShell using Invoke-WebRequest.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"Invoke-WebRequest \" or action_process_image_command_line contains \"IWR \") and (action_process_image_command_line contains \"http\" and action_process_image_command_line contains \"OutFile\" and action_process_image_command_line contains \".dll\"))\n\n\n\n"}
{"prompt": "I want to find instances where \"taskkill.exe\" is used to forcefully terminate a process, especially if it looks suspicious.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\taskkill\\.exe\" or actor_process_file_original_name = \"taskkill.exe\") and (action_process_image_command_line contains \" /f\" and action_process_image_command_line contains \" /im \")) and  not (((actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or actor_process_image_path contains \":\\\\Windows\\\\Temp\") and actor_process_image_path ~= \".*\\.tmp\"))\n\n\n\n"}
{"prompt": "I want to find users who have accessed more than five different Zscaler SPAM category URLs based on behavioral analysis.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category ~= \"Spam\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 5"}
{"prompt": "I want to find all successful Office 365 logins from non-business countries by users in my SET list.", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Workload = \"AzureActiveDirectory\" and (Operation in (\"UserLoggedIn\") and ResultStatus = \"Success\") and UserId != NULL and incidr(ActorIpAddress, \"<ip>\") = False and ActorIpAddress not in (\"<ip>\")\n| iploc ActorIpAddress loc_country as IPtoCountry,\nloc_city as IPtoCity,\nloc_asn as IPtoASN,\nloc_continent as IPtoContinent\n| union (dataset = wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value))\n| filter ActorIpAddress != wl_ipv4 and incidr(ActorIpAddress, wl_cidr) = false and (IPtoCountry not in (null, NULL, \"\"\"\"\"\")) and (if(IPtoCountry in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\")) = false) and (if(UserId in (\"<user id>\")) = true)"}
{"prompt": "I want to see Duo login events where a user has both failed and successful logins from the same IP address within 2 minutes.", "response": "datamodel dataset = duo_duo_raw\n| filter incidr(xdm.source.ipv4, \"<ip>\") = False and (xdm.source.ipv4 not in (\"0.0.0.0\") and xdm.source.location.country not in (null, NULL, \"\"\"\"\"\") and xdm.event.outcome in (\"SUCCESS\", \"denied\"))\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter (xdm.source.ipv4 != wl_ipv4 and incidr(xdm.source.ipv4, wl_cidr) = false)\n| alter SuccessOutcome = if(xdm.event.outcome in (\"SUCCESS\"), xdm.event.outcome),\nDeniedOutcome = if(xdm.event.outcome in (\"denied\"), xdm.event.outcome),\nxdm.auth.mfa.client_details = json_extract_scalar(duo_duo_raw.auth_device, \"$.name\"),\nBrowser = json_extract_scalar(duo_duo_raw.access_device, \"$.browser\"),\nBrowserVer = json_extract_scalar(duo_duo_raw.access_device, \"$.browser_version\")\n| fields xdm.auth.auth_method, xdm.auth.mfa.method, xdm.event.outcome,\nxdm.event.outcome_reason, xdm.event.type, xdm.observer.name,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.user.upn, xdm.source.location.country,\nxdm.source.host.os, xdm.source.host.os_family, SuccessOutcome,\nDeniedOutcome, _time, xdm.auth.mfa.client_details,\nxdm.source.location.city, Browser, BrowserVer\n| comp min(_time) as FirstTimestamp,\nmax(_time) as LatestTimestamp,\ncount(DeniedOutcome) as DeniedOutcomeCount,\ncount(SuccessOutcome) as SuccessOutcomeCount,\ncount_distinct(xdm.event.outcome) as Multiple_UNIQ_EventTyes,\nvalues(xdm.auth.mfa.client_details) as AuthenticationDevice,\nvalues(xdm.source.location.country) as Countries,\nvalues(xdm.source.location.city) as Cities,\nvalues(Browser) as Browsers,\nvalues(BrowserVer) as BrowserVers,\nvalues(xdm.event.outcome) as MultipleEvents by xdm.source.user.username,\nxdm.source.ipv4,\nxdm.source.application.name,\nxdm.source.location.country,\nxdm.auth.auth_method,\nxdm.source.user.upn addrawdata = true as RawEventData\n| filter (DeniedOutcomeCount >= 2 and SuccessOutcomeCount >= 1) and Multiple_UNIQ_EventTyes >= 2 and timestamp_diff(LatestTimestamp, FirstTimestamp, \"SECOND\") <= 120\n| dedup xdm.source.user.username,\nxdm.source.ipv4,\nxdm.source.application.name,\nxdm.source.location.country,\nxdm.auth.auth_method,\nxdm.source.user.upn\n| alter CorrelationRuleName = \"EU_PROD DUO Failed and successfull login from Same IP\""}
{"prompt": "I want to see alerts for potential WizardUpdate malware infections on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/sh\" and (action_process_image_command_line contains \"=$(curl \" and action_process_image_command_line contains \"eval\")) or (action_process_image_path ~= \".*\\/curl\" and action_process_image_command_line contains \"_intermediate_agent_\"))\n\n\n\n"}
{"prompt": "I want to find processes that run SyncAppvPublishingServer.vbs and execute PowerShell code.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\SyncAppvPublishingServer.vbs\" and action_process_image_command_line contains \";\")\n\n\n\n"}
{"prompt": "I want to find Cisco Catalyst devices that are experiencing multiple instances of DHCP Snooping detected errors within a 5 minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 5m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter (msg_id in (\"DHCP_SNOOPING-5-DHCP_SNOOPING_MATCH_MAC_FAIL\", \"DHCP_SNOOPING-5-DHCP_SNOOPING_UNTRUSTED_PORT\", \"DHCP_SNOOPING-5-DHCP_SNOOPING_FAKE_INTERFACE\", \"DHCP_SNOOPING-4-INVALID_RELEASE_OR_DECLINE_PKT\") or (msg_id in (\"DHCP_SNOOPING-5-DHCP_SNOOPING_NONZERO_GIADDR\") and xdm.event.description ~= \"message type: DHCPDECLINE\")) and xdm.event.description !~= \"message type: DHCPINFORM\"\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\nmsg_id,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildeviceip\",\naggregation_criteria1 = \"ilmsgid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to find instances where Certutil.exe is used to encode files, potentially indicating malicious activity.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_file_original_name = \"CertUtil.exe\") and (action_process_image_command_line contains \"-encode\" or action_process_image_command_line contains \"/encode\") and (action_process_image_command_line contains \".acl\" or action_process_image_command_line contains \".bat\" or action_process_image_command_line contains \".doc\" or action_process_image_command_line contains \".gif\" or action_process_image_command_line contains \".jpeg\" or action_process_image_command_line contains \".jpg\" or action_process_image_command_line contains \".mp3\" or action_process_image_command_line contains \".pdf\" or action_process_image_command_line contains \".png\" or action_process_image_command_line contains \".ppt\" or action_process_image_command_line contains \".tmp\" or action_process_image_command_line contains \".xls\" or action_process_image_command_line contains \".xml\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to potential exploitation attempts using CVE-2023-38331 through WinRAR and suspicious child processes.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\WinRAR\\.exe\" and action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\\\\Rar$\" and action_process_image_command_line ~= \"\\.[a-zA-Z0-9]{1,4}\\ \\.\" and ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or actor_process_file_original_name in (\"Cmd.Exe\", \"cscript.exe\", \"PowerShell.EXE\", \"pwsh.dll\", \"wscript.exe\")))\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious activity related to Launchctl and FireEye on my agents.", "response": "dataset = xdr_data\n| filter actor_process_command_line contains \"launchctl*fireeye\" and causality_actor_process_command_line !~= \"(jamf|JamfManagementService|package_script_service|InstallFireEye_on_IDLE.sh)\"\n| fields agent_hostname as Hostname, action_file_path, actor_process_image_path as apip,\nactor_process_command_line as apcl, causality_actor_process_image_path as capip,\ncausality_actor_process_command_line as capcl, os_actor_process_image_path as osapip,\nos_actor_process_command_line as ospcl, _time as CXReportTime\n| dedup Hostname"}
{"prompt": "{I want to see all events where CertOC.EXE downloads files from HTTP URLs using the \"-GetCACAPS\" command.} \n\n\nLet me know if you'd like to explore other variations!", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certoc\\.exe\" or actor_process_file_original_name = \"CertOC.exe\") and (action_process_image_command_line contains \"-GetCACAPS\" and action_process_image_command_line contains \"http\"))\n\n\n\n"}
{"prompt": "I want to see events related to processes accessing SQLite Chromium Profile Data, like Login Data, Cookies, etc.", "response": "preset = xdr_process\n| filter ((action_process_signature_product = \"SQLite\" or (action_process_image_path ~= \".*\\\\sqlite\\.exe\" or action_process_image_path ~= \".*\\\\sqlite3\\.exe\")) and (action_process_image_command_line ~= \".*\\\\User\\ Data\\\\.*\" or action_process_image_command_line ~= \".*\\\\Opera\\ Software\\\\.*\" or action_process_image_command_line ~= \".*\\\\ChromiumViewer\\\\.*\") and (action_process_image_command_line contains \"Login Data\" or action_process_image_command_line contains \"Cookies\" or action_process_image_command_line contains \"Web Data\" or action_process_image_command_line contains \"History\" or action_process_image_command_line contains \"Bookmarks\"))\n\n\n\n"}
{"prompt": "I want to see events related to the Doas tool being used on Linux endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\/doas\"\n\n\n\n"}
{"prompt": "I want to see alerts about potential password brute force attacks, triggered when there are over 500 password change events within a 5-minute window.", "response": "datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4723\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.target.user.username\n| filter matched_events >= 500\n| alter aggregation_criteria = \"ileventtype\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 500)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": " I want to find events that show suspicious use of GetTypeFromCLSID and ShellExecute. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"::GetTypeFromCLSID(\" and ScriptBlockText contains \".ShellExecute(\")\n\n\n\n"}
{"prompt": "I want to find download activities that show unusually high single transaction data compared to their average download pattern over the past week.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|youtube.com\"\n| comp avg(bytes_src) as current_day_download_byte,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|youtube.com\"\n| comp sum(bytes_src) as 7_days_download_byte,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_download_byte) as 7_days_download_byte_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_download_byte > multiply(7_days_download_byte_avg, 3)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find instances of the TruffleSnout malware being executed on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name = \"TruffleSnout.exe\" or action_process_image_path ~= \".*\\\\TruffleSnout\\.exe\")\n\n\n\n"}
{"prompt": "I want to find instances where MSEDGE_PROXY.EXE is used to download files from the internet.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\msedge\\_proxy\\.exe\" or actor_process_file_original_name = \"msedge_proxy.exe\") and (action_process_image_command_line contains \"http:\n\n\n\n"}
{"prompt": "I want to see alerts when security-enabled group members are removed from local or global groups on NetApp filers.  The alert should trigger if any member is removed, whether it's a single removal or multiple removals within a five-minute window.", "response": "datamodel dataset = netapp_nas_filers_raw\n| bin _time span = 5m\n| filter xdm.event.id in (\"637\", \"633\")\n| fields xdm.source.host.hostname, xdm.event.id, xdm.event.description,\nxdm.source.ipv4, xdm.source.user.username, xdm.target.user.username,\nxdm.observer.action, xdm.target.file.directory, xdm.target.file.filename,\n_time\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find Duo users who logged in from multiple countries within 24 hours and identify those who have either DomainAdmin or CloudAdmin privileges.", "response": "dataset = duo_duo_raw\n| filter email != NULL and result in (\"success\") and eventtype in (\"authentication\")\n| alter DuoUserName = json_extract_scalar(user, \"$.name\"),\nIPAddress = json_extract_scalar(access_device, \"$.ip\"),\nDeviceTrustLevel = json_extract_scalar(adaptive_trust_assessments, \"$.remember_me.trust_level\"),\nApplicationName = application -> name,\nIntegration = application -> name,\nAccDevLocationCN = json_extract_scalar(access_device, \"$.location.country\"),\nAccDevLocationST = json_extract_scalar(access_device, \"$.location.state\"),\nAccDevLocationCY = json_extract_scalar(access_device, \"$.location.city\"),\nAccDevOS = json_extract_scalar(access_device, \"$.os\"),\nAccDevOSVer = json_extract_scalar(access_device, \"$.os_version\"),\nAccDevBrowser = json_extract_scalar(access_device, \"$.browser\"),\nAppSrc = json_extract_scalar(application, \"$.name\")\n| filter (IPAddress not in (\"<ips>\")) and (not incidr(IPAddress, \"<ip>\") and not incidr(IPAddress, \"<ip>\") and not incidr(IPAddress, \"<ip>\") and not incidr(IPAddress, \"<ip>\") and not incidr(IPAddress, \"<ip>\") and not incidr(IPAddress, \"<ip>\"))\n| union (dataset = wl_ip_cidrs)\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter (IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false) and (IPAddress not contains \"0.0.0.0\" and AccDevLocationCN != NULL)\n| fields AccDevLocationCN, AccDevBrowser, AccDevOS, DuoUserName,\nresult, reason, email, eventtype, DeviceTrustLevel,\nIPAddress, ApplicationName, Integration\n| alter DomainAdminUser = if(DuoUserName in (\"<names>\"), \"YES\", \"NO\"),\nCloudAdminUser = if(DuoUserName in (\"<names>\"), \"YES\", \"NO\")\n| filter DomainAdminUser = \"YES\" or CloudAdminUser = \"YES\"\n| comp first(_time) as FirstEvent_Timestamp,\nlatest(_time) as LatestEvent_Timestamp,\nvalues(AccDevLocationCN) as MultipleCountries by ApplicationName,\nreason,\nemail,\nDomainAdminUser,\nCloudAdminUser,\nDuoUserName,\nIntegration addrawdata = true as RawEventData\n| filter array_length(MultipleCountries) > 1"}
{"prompt": " I want to see all instances where user accounts are enabled or disabled in Active Directory by non-admins. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| alter xdm.target.user.username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| alter xdm.source.user.username = if(xdm.source.user.username ~= \"@ad.infosys.com\", rtrim(xdm.source.user.username, \"@ad.infosys.com\"), if(xdm.source.user.username ~= \"@infosys.com\", rtrim(xdm.source.user.username, \"@infosys.com\"), if(xdm.source.user.username ~= \"itlinfosys\", ltrim(xdm.source.user.username, \"itlinfosys\\\\\"), xdm.source.user.username)))\n| filter xdm.event.id in (\"4722\", \"4725\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps(wingrps.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or wingrps.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE in (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type IN (\"domain_admin_win_admin\", \"win_accop\", \"win_admin\", \"win_admin_accop\", \"tier0_admin\", \"tier1_admin\") or security_groups contains \"Tier0Users\" or security_groups contains \"tier1users\"\n) as ent_admin_dst ent_admin_dst.username = xdm.source.user.username or ent_admin_dst.sam_account_name = xdm.source.user.username\n| filter username = null and sam_account_name = null\n| filter xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username != NULL\n| filter xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.target.user.username != NULL\n| filter xdm.source.user.username not in (\"_mimsvc\", \"_Adobjmgmt\")\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about suspicious activity related to S3 data management in AWS.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"s3.amazonaws.com\" and eventName in (\"PutBucketLogging\", \"PutBucketWebsite\", \"PutEncryptionConfiguration\", \"PutLifecycleConfiguration\", \"PutReplicationConfiguration\", \"ReplicateObject\", \"RestoreObject\"))\n\n\n\n"}
{"prompt": "I want to find potential cases of lateral movement using Excel and suspicious child processes like foxprow.exe, schdplus.exe, or winproj.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\excel\\.exe\" and (actor_process_file_original_name in (\"foxprow.exe\", \"schdplus.exe\", \"winproj.exe\") or (action_process_image_path ~= \".*\\\\foxprow\\.exe\" or action_process_image_path ~= \".*\\\\schdplus\\.exe\" or action_process_image_path ~= \".*\\\\winproj\\.exe\")))\n\n\n\n"}
{"prompt": "I want to see all instances where AppleScript is being used on macOS endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/osascript\" and (action_process_image_command_line contains \" -e \" or action_process_image_command_line contains \".scpt\" or action_process_image_command_line contains \".js\"))\n\n\n\n"}
{"prompt": "I want to see files that might be related to the Onyx Sleet APT group by looking for any created files named \"inetmgr.exe\" located under the Windows ADFS\\bg folder.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\ADFS\\\\bg\\\\inetmgr\\.exe\"\n\n\n\n"}
{"prompt": "I want to see events where an external disk drive or USB storage device was recognized by the system.", "response": "preset = xdr_event_log\n| alter ClassName = regextract(to_json_string(action_evtlog_data_fields)->ClassName{}, \"\\\"(.*)\\\"\")\n| alter DeviceDescription = regextract(to_json_string(action_evtlog_data_fields)->DeviceDescription{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 6416 and (ClassName = \"DiskDrive\" or DeviceDescription = \"USB Mass Storage Device\"))\n\n\n\n"}
{"prompt": "I want to detect malicious attempts to modify Autorun keys.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows CE Services\\\\AutoStart\" or action_registry_key_name contains \"\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Command Processor\\\\Autorun\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Active Setup\\\\Installed Components\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows CE Services\\\\AutoStartOnDisconnect\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows CE Services\\\\AutoStartOnConnect\" or action_registry_key_name contains \"\\\\SYSTEM\\\\Setup\\\\CmdLine\" or action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Ctf\\\\LangBarAddin\" or action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Command Processor\\\\Autorun\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Active Setup\\\\Installed Components\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Classes\\\\Protocols\\\\Handler\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Classes\\\\Protocols\\\\Filter\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Classes\\\\Htmlfile\\\\Shell\\\\Open\\\\Command\\\\(Default)\" or action_registry_key_name contains \"\\\\Environment\\\\UserInitMprLogonScript\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\Control Panel\\\\Desktop\\\\Scrnsave.exe\" or action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Internet Explorer\\\\UrlSearchHooks\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Internet Explorer\\\\Desktop\\\\Components\" or action_registry_key_name contains \"\\\\Software\\\\Classes\\\\Clsid\\\\{AB8902B4-09CA-4bb6-B78D-A8F59079A8D5}\\\\Inprocserver32\" or action_registry_key_name contains \"\\\\Control Panel\\\\Desktop\\\\Scrnsave.exe\") or action_registry_key_name contains \"\\\\System\\\\CurrentControlSet\\\\Control\\\\Session Manager\" and (action_registry_key_name contains \"\\\\SetupExecute\" or action_registry_key_name contains \"\\\\S0InitialCommand\" or action_registry_key_name contains \"\\\\KnownDlls\" or action_registry_key_name contains \"\\\\Execute\" or action_registry_key_name contains \"\\\\BootExecute\" or action_registry_key_name contains \"\\\\AppCertDlls\") or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\" and (action_registry_key_name contains \"\\\\ShellServiceObjectDelayLoad\" or action_registry_key_name contains \"\\\\Run\" or action_registry_key_name contains \"\\\\Policies\\\\System\\\\Shell\" or action_registry_key_name contains \"\\\\Policies\\\\Explorer\\\\Run\" or action_registry_key_name contains \"\\\\Group Policy\\\\Scripts\\\\Startup\" or action_registry_key_name contains \"\\\\Group Policy\\\\Scripts\\\\Shutdown\" or action_registry_key_name contains \"\\\\Group Policy\\\\Scripts\\\\Logon\" or action_registry_key_name contains \"\\\\Group Policy\\\\Scripts\\\\Logoff\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellServiceObjects\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellIconOverlayIdentifiers\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellExecuteHooks\" or action_registry_key_name contains \"\\\\Explorer\\\\SharedTaskScheduler\" or action_registry_key_name contains \"\\\\Explorer\\\\Browser Helper Objects\" or action_registry_key_name contains \"\\\\Authentication\\\\PLAP Providers\" or action_registry_key_name contains \"\\\\Authentication\\\\Credential Providers\" or action_registry_key_name contains \"\\\\Authentication\\\\Credential Provider Filters\") or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\" and (action_registry_key_name contains \"\\\\Winlogon\\\\VmApplet\" or action_registry_key_name contains \"\\\\Winlogon\\\\Userinit\" or action_registry_key_name contains \"\\\\Winlogon\\\\Taskman\" or action_registry_key_name contains \"\\\\Winlogon\\\\Shell\" or action_registry_key_name contains \"\\\\Winlogon\\\\GpExtensions\" or action_registry_key_name contains \"\\\\Winlogon\\\\AppSetup\" or action_registry_key_name contains \"\\\\Winlogon\\\\AlternateShells\\\\AvailableShells\" or action_registry_key_name contains \"\\\\Windows\\\\IconServiceLib\" or action_registry_key_name contains \"\\\\Windows\\\\Appinit_Dlls\" or action_registry_key_name contains \"\\\\Image File Execution Options\" or action_registry_key_name contains \"\\\\Font Drivers\" or action_registry_key_name contains \"\\\\Drivers32\" or action_registry_key_name contains \"\\\\Windows\\\\Run\" or action_registry_key_name contains \"\\\\Windows\\\\Load\") or action_registry_key_name contains \"\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\" and (action_registry_key_name contains \"\\\\ShellServiceObjectDelayLoad\" or action_registry_key_name contains \"\\\\Run\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellServiceObjects\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellIconOverlayIdentifiers\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellExecuteHooks\" or action_registry_key_name contains \"\\\\Explorer\\\\SharedTaskScheduler\" or action_registry_key_name contains \"\\\\Explorer\\\\Browser Helper Objects\") or action_registry_key_name contains \"\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\" and (action_registry_key_name contains \"\\\\Windows\\\\Appinit_Dlls\" or action_registry_key_name contains \"\\\\Image File Execution Options\" or action_registry_key_name contains \"\\\\Drivers32\") or (action_registry_key_name contains \"\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Office\" or action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Office\") and (action_registry_key_name contains \"\\\\Word\\\\Addins\" or action_registry_key_name contains \"\\\\PowerPoint\\\\Addins\" or action_registry_key_name contains \"\\\\Outlook\\\\Addins\" or action_registry_key_name contains \"\\\\Onenote\\\\Addins\" or action_registry_key_name contains \"\\\\Excel\\\\Addins\" or action_registry_key_name contains \"\\\\Access\\\\Addins\" or action_registry_key_name contains \"test\\\\Special\\\\Perf\") or (action_registry_key_name contains \"\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Internet Explorer\" or action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Internet Explorer\") and (action_registry_key_name contains \"\\\\Toolbar\" or action_registry_key_name contains \"\\\\Extensions\" or action_registry_key_name contains \"\\\\Explorer Bars\") or action_registry_key_name contains \"\\\\Software\\\\Wow6432Node\\\\Classes\" and (action_registry_key_name contains \"\\\\Folder\\\\ShellEx\\\\ExtShellFolderViews\" or action_registry_key_name contains \"\\\\Folder\\\\ShellEx\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\Folder\\\\ShellEx\\\\ColumnHandlers\" or action_registry_key_name contains \"\\\\Directory\\\\Shellex\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\Directory\\\\Shellex\\\\CopyHookHandlers\" or action_registry_key_name contains \"\\\\CLSID\\\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\\\Instance\" or action_registry_key_name contains \"\\\\AllFileSystemObjects\\\\ShellEx\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\ShellEx\\\\PropertySheetHandlers\" or action_registry_key_name contains \"\\\\ShellEx\\\\ContextMenuHandlers\") or action_registry_key_name contains \"\\\\Software\\\\Classes\" and (action_registry_key_name contains \"\\\\Folder\\\\ShellEx\\\\ExtShellFolderViews\" or action_registry_key_name contains \"\\\\Folder\\\\ShellEx\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\Folder\\\\Shellex\\\\ColumnHandlers\" or action_registry_key_name contains \"\\\\Filter\" or action_registry_key_name contains \"\\\\Exefile\\\\Shell\\\\Open\\\\Command\\\\(Default)\" or action_registry_key_name contains \"\\\\Directory\\\\Shellex\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\Directory\\\\Shellex\\\\CopyHookHandlers\" or action_registry_key_name contains \"\\\\CLSID\\\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\\\Instance\" or action_registry_key_name contains \"\\\\Classes\\\\AllFileSystemObjects\\\\ShellEx\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\.exe\" or action_registry_key_name contains \"\\\\.cmd\" or action_registry_key_name contains \"\\\\ShellEx\\\\PropertySheetHandlers\" or action_registry_key_name contains \"\\\\ShellEx\\\\ContextMenuHandlers\") or action_registry_key_name contains \"\\\\Software\\\\Policies\\\\Microsoft\\\\Windows\\\\System\\\\Scripts\" and (action_registry_key_name contains \"\\\\Startup\" or action_registry_key_name contains \"\\\\Shutdown\" or action_registry_key_name contains \"\\\\Logon\" or action_registry_key_name contains \"\\\\Logoff\") or action_registry_key_name contains \"\\\\System\\\\CurrentControlSet\\\\Services\\\\WinSock2\\\\Parameters\" and (action_registry_key_name contains \"\\\\Protocol_Catalog9\\\\Catalog_Entries\" or action_registry_key_name contains \"\\\\NameSpace_Catalog5\\\\Catalog_Entries\") or action_registry_key_name contains \"\\\\SYSTEM\\\\CurrentControlSet\\\\Control\" and (action_registry_key_name contains \"\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp\\\\InitialProgram\" or action_registry_key_name contains \"\\\\Terminal Server\\\\Wds\\\\rdpwd\\\\StartupPrograms\" or action_registry_key_name contains \"\\\\SecurityProviders\\\\SecurityProviders\" or action_registry_key_name contains \"\\\\SafeBoot\\\\AlternateShell\" or action_registry_key_name contains \"\\\\Print\\\\Providers\" or action_registry_key_name contains \"\\\\Print\\\\Monitors\" or action_registry_key_name contains \"\\\\NetworkProvider\\\\Order\" or action_registry_key_name contains \"\\\\Lsa\\\\Notification Packages\" or action_registry_key_name contains \"\\\\Lsa\\\\Authentication Packages\" or action_registry_key_name contains \"\\\\BootVerificationProgram\\\\ImagePath\")) and  not (((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\") or action_registry_key_name ~= \".*\\\\NgcFirst\\\\ConsecutiveSwitchCount\" or actor_process_image_path = \"C:\\\\WINDOWS\\\\System32\\\\svchost.exe\"))\n\n\n\n"}
{"prompt": "I want to detect potential screen captures on endpoints using the CopyFromScreen function.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \".CopyFromScreen\"\n\n\n\n"}
{"prompt": "I want to find out about multiple failed login attempts on Linux systems where the username doesn't exist in AD or local systems.  Specifically, I'm interested in instances with 10 or more failures grouped by username, source IP address, and target host.", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| bin _time span = 5m\n| filter xdm.event.type in (\"sshd\", \"sudo\", \"su\") and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol = \"ssh2\" and xdm.event.description ~= \"authentication failure|authentication failure by illegal user|invalid username|Password failed|Failed password\" and xdm.source.ipv4 not in (NULL, null, \"<ip>\") and xdm.source.user.username !~= \"mdlzsifint_admn_prod|mpetl_pr|rb_reach|mcm_psm_adm_prd_rl|pilottenant|postgres\"\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _product, _vendor, device_ip\n| comp count() as matched_events,\nvalues(*) as * by xdm.source.user.username,\nxdm.source.ipv4,\nxdm.target.host.hostname,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"ilsourceip\",\naggregation_criteria2 = xdm.target.host.hostname,\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to see which network traffic uses suspicious User Agents commonly associated with APT attacks.", "response": "datamodel\n| filter xdm.network.http.browser in (\"SJZJ (compatible; MSIE 6.0; Win32)\", \"Mozilla/5.0 (Windows NT 6.; WOW64; rv:20.0) Gecko/20100101 Firefox/20.0\", \"User-Agent: Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; Trident/4.0; SLCC\", \"Mozilla/4.0 (compatible; MSIE 7.4; Win32;32-bit)\", \"webclient\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-EN; rv:1.7.12) Gecko/200\", \"Mozilla/4.0 (compatible; MSI 6.0;\", \"Mozilla/5.0 (Windows NT 6.3; WOW64; rv:28.0) Gecko/20100101 Firefox/28.0\", \"Mozilla/5.0 (Windows NT 6.2; WOW64; rv:20.0) Gecko/20100101 Firefox/\", \"Mozilla/5.0 (Windows NT 6.; WOW64; rv:20.0) Gecko/20100101 Firefox/2\", \"Mozilla/4.0\", \"Netscape\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; zh-EN; rv:1.7.12) Gecko/20100719 Firefox/1.0.7\", \"Mozilla/5.0 (Windows; U; Windows NT 5.1; en-US; rv:1.9.2.13) Firefox/3.6.13 GTB7.1\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; WOW64; Trident/5.0)\", \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NETCLR 2.0.50727)\", \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; SV1)\", \"Mozilla/4.0 (compatible; MSIE 11.0; Windows NT 6.1; SV1)\", \"Mozilla/4.0 (compatible; MSIE 8.0; Win32)\", \"Mozilla v5.1 (Windows NT 6.1; rv:6.0.1) Gecko/20100101 Firefox/6.0.1\", \"Mozilla/6.1 (compatible; MSIE 9.0; Windows NT 5.3; Trident/5.0)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; .NET CLR 1.1.4322; .NET CLR 2.0.50727; .NET CLR 3.0.04506.30; .NET CLR 3.0.04506.648; InfoPath.1)\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) WinHttp/1.6.3.8 (WinHTTP/5.1) like Gecko\", \"Mozilla v5.1 *\", \"MSIE 8.0\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; Media Center PC 6.0; .NET4.0C; .NET4.0E; InfoPath.2)\", \"Mozilla/4.0 (compatible; RMS)\", \"Mozilla/4.0 (compatible; MSIE 6.0; DynGate)\", \"O/9.27 (W; U; Z)\", \"Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.0; Trident/5.0;  Trident/5.0*\", \"Mozilla/5.0 (Windows NT 9; *\", \"hots scot\", \"Mozilla/5.0 (compatible; MSIE 10.0; Windows NT)\", \"Mozilla/5.0 (Windows NT 6.1; WOW64) Chrome/28.0.1500.95 Safari/537.36\", \"Mozilla/5.0 (Windows NT 6.2; Win32; rv:47.0)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1;SV1;\", \"Mozilla/5.0 (X11; Linux i686; rv:22.0) Firefox/22.0\", \"Mozilla/5.0 Chrome/72.0.3626.109 Safari/537.36\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:FTS_06) Gecko/22.36.35.06 Firefox/2.0\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/102.0.5005.63 Safari/537.36 Edg/100.0.1185.39\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 2.0.50727; .NET CLR 3.5.30729; .NET CLR 3.0.30729; InfoPath.3; .NET4.0C; .NET4.0E)\", \"Mozilla/4.0 (compatible; MSIE 9.0; Windows NT 10.0; .NET4.0C; .NET4.0E; Tablet PC 2.0)\", \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/42.0.2311.135 Safari/537.36 Edge/12.246001\")\n\n\n\n"}
{"prompt": "I want to see alerts about multifactor authentication being interrupted on Azure.", "response": "dataset = msft_azure_raw\n| alter properties_resultType = json_extract_scalar(properties , \"$.resultType\")\n| alter properties_resultDescription = json_extract_scalar(properties , \"$.resultDescription\")\n| filter ((properties.resultType = 50074 and properties.resultDescription contains \"Strong Auth required\") or (properties.resultType = 500121 and properties.resultDescription contains \"Authentication failed during strong authentication request\"))\n\n\n\n"}
{"prompt": "I want to see all internal TCP flood events from Cisco ASA, Fortinet Fortigate, and SonicWall NS devices where the source IP is internal, the target IP is internal, there are at least 100,000 packets sent, and the event duration is at least 600 seconds.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter (xdm.source.is_internal_ip = true and xdm.target.is_internal_ip = true) and xdm.network.ip_protocol = \"\"\"TCP\"\"\" and xdm.source.sent_packets >= 100000 and xdm.event.duration >= 60000000000\n| fields *"}
{"prompt": "I want to see Symantec WSS events flagged as \"Unwanted Software\" with details about the affected files, processes, users, IPs involved, and any related proxy activities.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Risk\")\n| alter hostname = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| filter xdm.target.file.sha256 != null and hostname != null\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\ndownload_site = arrayindex(regextract(symantec_ep_raw._raw_log, \"Download site:\\s([^\\,]+)\"), 0),\ndownloaded_by = arrayindex(regextract(symantec_ep_raw._raw_log, \"Downloaded by:\\s([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlast(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(server_name) as server_name,\nvalues(xdm.source.user.username) as username,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ips,\nvalues(xdm.target.ipv4) as dst_ips,\nvalues(download_site) as download_site,\nvalues(downloaded_by) as downloaded_by,\nvalues(xdm.target.file.sha256) as file_hash by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nxdm.target.host.hostname\n| join type = left\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by ip_src,\nuser_dst,\nalias_host\n) as proxyevents(proxyevents.ip_src = xdm.target.ipv4 or proxyevents.user_dst = xdm.source.user.sam_account_name or proxyevents.alias_host = `xdm.target.host.hostname`)\n| filter (ip_src != null or user_dst != null or alias_host != null) and category ~= \"unwanted software\"\n| alter process = replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_address = replace(replace(replace(to_string(ip_address), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nrisk_name = replace(replace(replace(to_string(risk_name), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nfile_name = arrayindex(split(replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"), \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(process, file_name, \"\")"}
{"prompt": " I want to find instances of the Fax Service DLL Search Order Hijack attack technique within Windows Event Logs. ", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\fxssvc\\.exe\" and action_module_path ~= \".*ualapi\\.dll\") and  not (action_module_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find potential Qakbot activity that uses Rundll32 with suspicious command line arguments.", "response": "preset = xdr_process\n| filter (((actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\curl\\.exe\" or actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") and action_process_image_path ~= \".*\\\\rundll32\\.exe\" and (action_process_image_command_line ~= \".*\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\")) and action_process_image_command_line contains \".dll\")\n\n\n\n"}
{"prompt": "I want to find processes that contain \"7za.exe\" and are creating a file named \"log.zip\" in the C:\\temp folder.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"7za.exe\" and action_process_image_command_line contains \"\\\\C$\\\\temp\\\\log.zip\")\n\n\n\n"}
{"prompt": "I want to find instances where threat actors modify the code page using \"mode.com\" to Russian language.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\mode\\.com\" or actor_process_file_original_name = \"MODE.COM\") and ((action_process_image_command_line contains \" con \" and action_process_image_command_line contains \" cp \" and action_process_image_command_line contains \" select=\") and (action_process_image_command_line ~= \".*\\=1251\" or action_process_image_command_line ~= \".*\\=866\")))\n\n\n\n"}
{"prompt": "I want to find events related to adding debugger entries to AeDebug for persistence purposes in the Windows Event Log.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\AeDebug\\\\Debugger\" and (action_registry_value_name ~= \".*\\.dll\" or action_registry_data ~= \".*\\.dll\")) and  not ((action_registry_value_name = \"\\\"C:\\\\WINDOWS\\\\system32\\\\vsjitdebugger.exe\\\" -p %ld -e %ld -j 0x%p\" or action_registry_data = \"\\\"C:\\\\WINDOWS\\\\system32\\\\vsjitdebugger.exe\\\" -p %ld -e %ld -j 0x%p\"))\n\n\n\n"}
{"prompt": "I want to find instances where a PowerShell command is used to import new modules on my endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"Import-Module \" or action_process_image_command_line contains \"ipmo \")) and  not (((actor_process_image_path contains \":\\\\Program Files\\\\WindowsApps\\\\Microsoft.WindowsTerminal_\" or actor_process_image_path contains \":\\\\Windows\\\\System32\\\\cmd.exe\") and (action_process_image_command_line ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Visual\\ Studio\\\\.*\" and action_process_image_command_line contains \"Tools\\\\Microsoft.VisualStudio.DevShell.dll\")))\n\n\n\n"}
{"prompt": "I want to find files that have been accessed by at least 10 different machines.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter symantec_ep_raw._raw_log !~= \",Intrusion\\sURL:\"\n| alter hostname = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| filter xdm.target.file.sha256 != null and hostname != null\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1),\nfile_hash = xdm.target.file.sha256,\nusername = xdm.source.user.username,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nprocess = xdm.target.file.path,\nrisk_name = xdm.alert.name,\naction = xdm.observer.action\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(directory) as directory,\nvalues(file_name) as file_name,\nvalues(file_extension) as file_extension,\nvalues(server_name) as aliashost,\nvalues(xdm.source.user.username) as username,\nvalues(symantec_server_name) as symantec_server_name,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ips,\nvalues(xdm.target.ipv4) as dst_ips,\nvalues(xdm.alert.category) as alert_category,\nvalues(hostname) as hostname by xdm.target.file.sha256\n| filter array_length(hostname) >= 10"}
{"prompt": " I want to detect malicious activity involving obfuscation techniques that utilize compression services on endpoints. ", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName contains \"new-object\" and ServiceFileName contains \"text.encoding]::ascii\" and ServiceFileName contains \"readtoend\") and (ServiceFileName contains \"system.io.compression.deflatestream\" or ServiceFileName contains \"system.io.streamreader\"))\n\n\n\n"}
{"prompt": "I want to find potential XXE exploitation attempts happening in JVM based applications.", "response": "datamodel\n| filter ( contains \"SAXParseException\" or  contains \"DOMException\")\n\n\n\n"}
{"prompt": " I want to see details about security rule deletions in Azure, specifically for rules with ID \"<id>\" that occurred recently.  Please show me information about the user who deleted the rule, the target user associated with the rule, and other relevant details like the time of deletion and the protocol used. ", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"<id>\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect potential Cloudflared Tunnel executions that might be used for command and control purposes.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \" tunnel \" and action_process_image_command_line contains \" run \") and (action_process_image_command_line contains \"-config \" or action_process_image_command_line contains \"-credentials-contents \" or action_process_image_command_line contains \"-credentials-file \" or action_process_image_command_line contains \"-token \"))\n\n\n\n"}
{"prompt": "I want to see events where a new logon credential is used, specifically outgoing logons with event ID 4624 and LogonType 9.", "response": "preset = xdr_event_log\n| alter LogonType = regextract(to_json_string(action_evtlog_data_fields)->LogonType{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4624 and LogonType = 9)\n\n\n\n"}
{"prompt": "I want to see events related to changes made to Azure Network Security Groups and their security rules.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/WRITE\", \"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/DELETE\", \"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/WRITE\", \"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/DELETE\", \"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/JOIN/ACTION\", \"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/PROVIDERS/MICROSOFT.INSIGHTS/DIAGNOSTICSETTINGS/WRITE\")\n\n\n\n"}
{"prompt": " I want to see Cortex XQL events related to processes being created that use specific commands like \"/account=system\" or \"/account=ti\" and include \"/exec=\" in their command line.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \" /account=system \" or action_process_image_command_line contains \" /account=ti \") and action_process_image_command_line contains \"/exec=\")\n\n\n\n"}
{"prompt": "I want to set up an alert called \"Servers Disconnected Alert(EU)\" that triggers when a server disconnects for more than 30 minutes but less than 8 hours, based on data from XDR.", "response": "dataset = endpoints\n| fields endpoint_status, last_seen, endpoint_name, endpoint_type,\nip_address\n| alter ct = current_time()\n| alter diff = timestamp_diff(ct, last_seen, \"MINUTE\")\n| filter endpoint_status = DISCONNECTED and endpoint_type = TYPE_SERVER and diff > 30 and diff <= 10080"}
{"prompt": "I want to see all instances where Sysinternals PsService is executed on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name = \"psservice.exe\" or (action_process_image_path ~= \".*\\\\PsService\\.exe\" or action_process_image_path ~= \".*\\\\PsService64\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to potential WWlib.DLL sideloading attacks detected through Windows Event Logs.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\wwlib\\.dll\" and  not (((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Office\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\.*\") and actor_process_image_path ~= \".*\\\\winword\\.exe\" and (action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Office\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see all software installations and uninstallation events from Windows Event Logs that aren't pre-approved.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| alter xdm.event.description = microsoft_windows_raw.event_data\n| filter (xdm.event.id in (\"11707\", \"11724\", \"11729\") and xdm.source.ipv4 not in (\"10.181.11.51\", \"10.205.55.228\", \"10.205.55.244\", \"10.205.11.165\", \"10.205.55.167\", \"10.205.55.168\", \"10.205.55.116\", \"10.205.55.132\", \"10.205.182.84\", \"10.205.182.92\", \"10.205.55.180\", \"10.205.55.181\", \"10.205.55.182\", \"10.205.55.183\", \"10.205.55.196\", \"10.205.55.197\", \"10.204.11.22\", \"10.205.11.85\", \"10.182.93.124\", \"10.182.93.52\") and (xdm.event.description = NULL or xdm.event.description !~= \"product: pgadmin\"))\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect applications trying to disable write protection on storage devices through registry modifications.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\System\\\\CurrentControlSet\\\\Control\" and action_process_image_command_line contains \"Write Protection\" and action_process_image_command_line contains \"0\" and action_process_image_command_line contains \"storage\")\n\n\n\n"}
{"prompt": "I want to see events where a DHCP server loaded a CallOut DLL.", "response": "preset = xdr_event_log\n| filter (action_evtlog_event_id = 1033 and provider_name = \"Microsoft-Windows-DHCP-Server\")\n\n\n\n"}
{"prompt": "I want to detect any changes made to Log Analytics Workspaces in Azure.", "response": "dataset = microsoft_windows_raw\n| filter event_id = 1111 /*config case_sensitive = false\n|dataset = msft_azure_raw\n|filter tenantId IN (\"<id>\")\n|filter operationName IN (\"MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/WRITE\",\"MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/DELETE\")\n|alter username = json_extract_scalar(identity,\"$.claims.name\"), target_username = json_extract_scalar(properties,\"$.userPrincipalName\"), referenceid = arrayindex(split(resourceId,\"/\"),2), aliashost = arrayindex(split(resourceId,\"/\"),-1), protocol = json_extract_scalar(properties,\"$.eventProperties.protocol\")\n|fields username, target_username, operationName, referenceid, tenantId, resulttype, callerIpAddress, identity, aliashost, protocol, _time\n|alter aggregation_criteria = \"ilsourceuser\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)*/"}
{"prompt": "I want to see alerts about potential SNAKE malware persistence service executions on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\services\\.exe\" and action_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\" and action_process_image_path ~= \".*\\\\WerFault\\.exe\")\n\n\n\n"}
{"prompt": "I want to see all instances where users were removed from specific privilege groups on Windows systems.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter _collector_type = \"XDR Collector\"\n| filter event_id in (4757, 4729, 633, 4733)\n| alter TargetGroupName = event_data -> TargetUserName,\nTargetSID = event_data -> MemberSid,\nTargetDomainName = event_data -> TargetDomainName,\nSubjectUserName = event_data -> SubjectUserName,\nAction = regextract(message, \"(.*)\\n\\nSubject:\"),\nTargetUserName = User -> name\n| alter Groupname = concat(TargetDomainName, \"\\\", TargetGroupName)\n| filter TargetGroupName in (\"Administrators\", \"Backup Operators\", \"Domain Admins\", \"Enterprise Admins\", \"Print Operators\", \"Replicator\", \"Schema Admins\", \"Server Operators\", \"Amer Server Admins\", \"DNS Admins\", \"grp_cnx_amer_gpo_admins\", \"grp_sec_rakija_operators\", \"NA_VMAdmins\", \"SEC.CNX.Global.Delegation.Access\", \"Server Team India\", \"SEC.CNX.Global.GPO.Editors\", \"grp_sec_itscs_operators\", \"grp_cnx_ind_it_ID_management\", \"GRP_SEC_AD_AccOp_ITSCS\", \"grp_sec_itscs_ad_admin\", \"SEC.IN.GPO.Editors\", \"emea_serverteam\")\n| filter SubjectUserName !~= \"\\$$\" and TargetUserName != null\n| fields Action, Groupname, SubjectUserName, TargetUserName,\nTargetSID, TargetGroupName, host_name"}
{"prompt": "I want to see PowerShell scripts that add exclusions to Windows Defender.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \" -ExclusionPath \" or ScriptBlockText contains \" -ExclusionExtension \" or ScriptBlockText contains \" -ExclusionProcess \" or ScriptBlockText contains \" -ExclusionIpAddress \") and (ScriptBlockText contains \"Add-MpPreference \" or ScriptBlockText contains \"Set-MpPreference \"))\n\n\n\n"}
{"prompt": " I want to find any suspicious processes on my endpoints that are using the UtilityFunctions.ps1 or RegSnapin utility. ", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"UtilityFunctions.ps1\" or action_process_image_command_line contains \"RegSnapin \")\n\n\n\n"}
{"prompt": "I want to find processes that are using `find` or `findstr` executables to search for passwords within Group Policy preferences (.xml files) but not within sysvol folders.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\find\\.exe\" or action_process_image_path ~= \".*\\\\findstr\\.exe\") or actor_process_file_original_name in (\"FIND.EXE\", \"FINDSTR.EXE\")) and (action_process_image_command_line contains \"cpassword\" and action_process_image_command_line ~= \".*\\\\sysvol\\\\.*\" and action_process_image_command_line contains \".xml\"))\n\n\n\n"}
{"prompt": "I want to find any instances of my network traffic accessing raw paste services like Pastebin or Ghostbin.", "response": "datamodel\n| filter (xdm.network.http.url contains \".paste.ee/r/\" or xdm.network.http.url contains \".pastebin.com/raw/\" or xdm.network.http.url contains \".hastebin.com/raw/\" or xdm.network.http.url contains \".ghostbin.co/paste/*/raw/\" or xdm.network.http.url contains \"pastetext.net/\" or xdm.network.http.url contains \"pastebin.pl/\" or xdm.network.http.url contains \"paste.ee/\")\n\n\n\n"}
{"prompt": "I want to detect when NSG rules are deleted in Azure using Windows Event Logs and get details like the username, target username, operation name, resource ID, tenant ID, and protocol.", "response": "dataset = microsoft_windows_raw\n| filter event_id = 1111 /*config case_sensitive = false\n|dataset = msft_azure_raw\n|filter tenantId IN (\"<id>\")\n|filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/DELETE\")\n|alter username = json_extract_scalar(identity,\"$.claims.name\"), target_username = json_extract_scalar(properties,\"$.userPrincipalName\"), referenceid = arrayindex(split(resourceId,\"/\"),2), aliashost = arrayindex(split(resourceId,\"/\"),-1), protocol = json_extract_scalar(properties,\"$.eventProperties.protocol\")\n|fields username, target_username, operationName, referenceid, tenantId, resulttype, callerIpAddress, identity, aliashost, protocol, _time\n|alter aggregation_criteria = \"ilsourceuser\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)*/"}
{"prompt": "I want to see all events related to AdminSDHolder SDProp Exclusion being added, specifically those from Windows Event Logs that mention \"dSHeuristics\".", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"5136\") and xdm.event.description contains \"dSHeuristics\"\n| fields *"}
{"prompt": "I want to see events where users are editing the /etc/sudoers file.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE = \"edgeverve_unix\"\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| alter xdm.event.type = coalesce(xdm.event.type, arrayindex(regextract(linux_linux_raw._raw_log, \"\\stype=[^\\s]+\"), 0)),\ncommand_exe = arrayindex(regextract(linux_linux_raw._raw_log, \"\\sexe=\\\"([^\\\"]+)\"), 0),\ncommand = coalesce(arrayindex(regextract(xdm.event.description, \"\\[COMMAND\\=([^\\]]+)\\]\"), 0), arrayindex(regextract(xdm.event.description, \"COMMAND=(.*)\"), 0), arrayindex(regextract(xdm.event.description, \"\\s*\\[[^\\]]+\\]:\\s(.*)\"), 0)),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| alter xdm.target.process.command_line = coalesce(command_exe, command)\n| filter xdm.target.process.command_line in (\"/bin/vim /etc/sudoers\", \"/bin/vi /etc/sudoers\", \"/bin/nano /etc/sudoers\", \"/usr/bin/vi /etc/sudoers\", \"/usr/bin/vim /etc/sudoers\", \"/usr/bin/nano /etc/sudoers\")\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect potential network scanning activity on Linux endpoints by identifying processes using known network reconnaissance tools.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/nc\" or action_process_image_path ~= \".*\\/ncat\" or action_process_image_path ~= \".*\\/netcat\" or action_process_image_path ~= \".*\\/socat\") and  not ((action_process_image_command_line contains \" --listen \" or action_process_image_command_line contains \" -l \"))) or (action_process_image_path ~= \".*\\/autorecon\" or action_process_image_path ~= \".*\\/hping\" or action_process_image_path ~= \".*\\/hping2\" or action_process_image_path ~= \".*\\/hping3\" or action_process_image_path ~= \".*\\/naabu\" or action_process_image_path ~= \".*\\/nmap\" or action_process_image_path ~= \".*\\/nping\" or action_process_image_path ~= \".*\\/telnet\")\n\n\n\n"}
{"prompt": "I want to detect web traffic going to onion domains through the Symantec BlueCoat system.", "response": "config case_sensitive = false\n| dataset = symantec_bluecoatwss_raw\n| alter action = `sc - filter - result`,\nipaddr = `s - ip`,\nevent_source = `x - bluecoat - appliance - name`,\nhost_dst = `cs - host`,\ncategories = `cs - categories`,\nuser_dst = `cs - userdn`,\nalias_host = json_extract_scalar(_raw_json, \"$.x-client-device-name\"),\ntcp_action = `s - action`,\nresult = json_extract_scalar(_raw_json, \"$.cs-method\"),\nrbytes = json_extract_scalar(_raw_json, \"$.cs-bytes\"),\nip_src = `c - ip`,\nip_dst = `r - ip`,\nweb_page = `cs - uri - path`,\nquery = `cs - uri - query`,\ngroups = json_extract_scalar(_raw_json, \"$.cs-auth-groups\"),\nbytes_src = json_extract_scalar(_raw_json, \"$.sc-bytes\"),\nextension = `cs - uri - extension`,\nuser_agent = replace(arrayindex(regextract(_raw_json, \"cs\\(User\\-Agent\\)\\\"\\: ([^\\,]+)\"), 0), \"\\\"\", \"\")\n| alter time = _time,\naggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)\n| filter host_dst ~= \".onion$\""}
{"prompt": "I want to find instances where CMSTP.exe is used with specific command line arguments that could indicate an attempt to bypass UAC.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmstp\\.exe\" or actor_process_file_original_name = \"CMSTP.EXE\") and (action_process_image_command_line contains \"/s\" or action_process_image_command_line contains \"-s\" or action_process_image_command_line contains \"/au\" or action_process_image_command_line contains \"-au\" or action_process_image_command_line contains \"/ni\" or action_process_image_command_line contains \"-ni\"))\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to Msiexec.exe trying to unregister DLL files.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\msiexec\\.exe\" or actor_process_file_original_name = \"\\\\msiexec.exe\") and action_process_image_command_line contains \" -z \" and action_process_image_command_line contains \".dll\")\n\n\n\n"}
{"prompt": "I want to see events related to the MacOS Emond Launch Daemon.", "response": "datamodel\n| filter ((xdm.target.file.filename contains \"/etc/emond.d/rules/\" and xdm.target.file.filename ~= \".*\\.plist\") or xdm.target.file.filename contains \"/private/var/db/emondClients/\")\n\n\n\n"}
{"prompt": "I want to detect suspicious use of the W32tm service on my endpoints, specifically when it's used with command line arguments like /stripchart, /computer:, /period:, /dataonly, and /samples.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\w32tm\\.exe\" or actor_process_file_original_name = \"w32time.dll\") and (action_process_image_command_line contains \"/stripchart\" and action_process_image_command_line contains \"/computer:\" and action_process_image_command_line contains \"/period:\" and action_process_image_command_line contains \"/dataonly\" and action_process_image_command_line contains \"/samples:\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when AdExp or ADExplorer is used to create snapshots of the Active Directory database.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\ADExplorer\\.exe\" or actor_process_file_original_name = \"AdExp\") and action_process_image_command_line contains \"snapshot\")\n\n\n\n"}
{"prompt": "I want to find instances where suspicious scripts are being executed from unusual locations on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or (action_process_image_command_line contains \" -ep bypass \" or action_process_image_command_line contains \" -ExecutionPolicy bypass \" or action_process_image_command_line contains \" -w hidden \" or action_process_image_command_line contains \"/e:javascript \" or action_process_image_command_line contains \"/e:Jscript \" or action_process_image_command_line contains \"/e:vbscript \") or actor_process_file_original_name in (\"cscript.exe\", \"mshta.exe\", \"wscript.exe\")) and ((action_process_image_command_line ~= \".*\\:\\\\Perflogs\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\" or action_process_image_command_line contains \"\\\\AppData\\\\Roaming\\\\Temp\" or action_process_image_command_line contains \"\\\\Temporary Internet\" or action_process_image_command_line contains \"\\\\Windows\\\\Temp\") or ((action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Favorites\\\\.*\") or (action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Favourites\\\\.*\") or (action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Contacts\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see all events related to changes made to user accounts for platform admins, including details about the user, the time of the change, and any error codes or failure reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter target_user_username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| filter xdm.event.id in (\"4722\", \"4724\", \"4725\", \"4726\") and xdm.source.user.username not in (\"_adobjmgmt\", \"_accman\", \"anonymous logon\", \"_pamaccmgr\", \"_PamAccmgr\")\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type in (\"av_admin\", \"azure_cloud_admin\", \"bluecoat_admin\", \"byod_admin\", \"dmz_owner\", \"firewall_admin\", \"ilms_admin\", \"is_fusion_admin\", \"isg_qualys_admin\", \"nas_l1_admin\", \"nas_l1_l2_admin\", \"nas_l1_l2_l3_admin\", \"nas_l1_l3_admin\", \"nas_l2_admin\", \"nas_l2_l3_admin\", \"nas_l3_admin\", \"netscaler_admin\", \"network_admin\", \"network_ipt_admin\", \"nips_admin\", \"sccm_admin\", \"securid_admin\", \"sharepoint_admin\", \"win_accop\", \"win_admin\", \"win_admin_accop\") or security_groups contains \"UNIX_Group_R1\" or security_groups contains \"UNIX_Group_R2\" or security_groups contains \"Tier1Users\"\n) as admins admins.username = target_user_username or admins.sam_account_name = target_user_username\n| filter username != null or sam_account_name != null\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for potential Mpclient.DLL sideloading attacks that use Defender binaries.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\MpCmdRun\\.exe\" or action_process_image_path ~= \".*\\\\NisSrv\\.exe\") and  not ((action_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Windows\\ Defender\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Security\\ Client\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Windows\\ Defender\\\\.*\" or action_process_image_path ~= \"C\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\Platform\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to investigate potential QBot activity based on processes like WinRAR and wscript.exe being used along with specific command lines involving ping, type commands, regsvr32, and files in the ProgramData folder.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\WinRAR\\.exe\" and action_process_image_path ~= \".*\\\\wscript\\.exe\") or action_process_image_command_line contains \" /c ping.exe -n 6 127.0.0.1 & type \" or (action_process_image_command_line contains \"regsvr32.exe\" and action_process_image_command_line contains \"C:\\\\ProgramData\" and action_process_image_command_line contains \".tmp\"))\n\n\n\n"}
{"prompt": "I want to find events where an attacker uses SyncAppvPublishingServer.exe to bypass PowerShell restrictions.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"SyncAppvPublishingServer.exe\"\n\n\n\n"}
{"prompt": "I want to see alerts related to security settings being updated on OCSP Responder Services.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"5124\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where a process named \"curl.exe\" is downloading a file using command line arguments like '-O', '--remote-name', or '--output'.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\curl\\.exe\" or action_process_signature_product = \"The curl executable\") and (action_process_image_command_line contains \" -O\" or action_process_image_command_line contains \"--remote-name\" or action_process_image_command_line contains \"--output\"))\n\n\n\n"}
{"prompt": "I want to find network connections initiated from processes located in the \"C:\\Users\\Public\" folder because attackers often drop malware there.", "response": "#N/A"}
{"prompt": "I want to find potentially suspicious activities related to Windows Apps where common tools like cmd.exe, powershell.exe, or Base64 are involved.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*C\\:\\\\Program\\ Files\\\\WindowsApps\\\\.*\" and ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or (action_process_image_command_line contains \"cmd /c\" or action_process_image_command_line contains \"Invoke-\" or action_process_image_command_line contains \"Base64\")) and  not ((actor_process_image_path contains \":\\\\Program Files\\\\WindowsApps\\\\Microsoft.WindowsTerminal\" and actor_process_image_path ~= \".*\\\\WindowsTerminal\\.exe\" and (action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\")))\n\n\n\n"}
{"prompt": "I want to find instances of suspicious driver or DLL installations potentially happening through Odbcconf.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\odbcconf\\.exe\" or actor_process_file_original_name = \"odbcconf.exe\") and action_process_image_command_line contains \"INSTALLDRIVER \") and  not (action_process_image_command_line contains \".dll\")\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple SymantecWSS Proxy Avoidance URLs within an hour.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and category ~= \"Proxy Avoidance\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to detect instances of Invoke-Obfuscation being used to obfuscate IEX invocations in PowerShell.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter (Payload ~= \"\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\[\" or Payload ~= \"\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\[\" or Payload ~= \"\\$env\\:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env\\:Public\\[\" or Payload ~= \"\\$env\\:ComSpec\\[(\\s*\\d{1,3}\\s*\\,){2}\" or Payload ~= \"\\*mdr\\*W\\s*\\)\\.Name\" or Payload ~= \"\\$VerbosePreference\\.ToString\\(\" or Payload ~= \"\\[String\\]\\s*\\$VerbosePreference\")\n\n\n\n"}
{"prompt": "I want to see events related to suspicious activity involving PSExec and WMI processes.", "response": "datamodel\n| filter (xdm.event.id = 1121 and ((xdm.target.process.name ~= \".*\\\\wmiprvse\\.exe\" or xdm.target.process.name ~= \".*\\\\psexesvc\\.exe\") or (xdm.source.process.name ~= \".*\\\\wmiprvse\\.exe\" or xdm.source.process.name ~= \".*\\\\psexesvc\\.exe\")))\n\n\n\n"}
{"prompt": "I want to find processes that are created with a high integrity level and use the legacy Conhost option (-ForceV1).", "response": "preset = xdr_process\n| filter (action_process_integrity_level = \"High\" and (action_process_image_command_line contains \"conhost.exe\" and action_process_image_command_line contains \"0xffffffff\" and action_process_image_command_line contains \"-ForceV1\"))\n\n\n\n"}
{"prompt": "I want to see when an ISO image is mounted on endpoints.", "response": "preset = xdr_event_log\n| alter ObjectServer = regextract(to_json_string(action_evtlog_data_fields)->ObjectServer{}, \"\\\"(.*)\\\"\")\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4663 and ObjectServer = \"Security\" and ObjectType = \"File\" and ObjectName ~= \"\\\\Device\\\\CdRom.*\") and  not (ObjectName in (\"\\\\Device\\\\CdRom0\\\\autorun.ico\", \"\\\\Device\\\\CdRom0\\\\setup.exe\", \"\\\\Device\\\\CdRom0\\\\setup64.exe\"))\n\n\n\n"}
{"prompt": "I want to see how many times firewall admins in India modified objects within a 5-minute window and flag any instances with 10 or more modifications.", "response": "config case_sensitive = false\n| dataset = check_point_smartconsole_raw\n| bin _time span = 5m\n| filter operation = \"Modify Object\" and lowercase(administrator) in (\"hyamsunder.vasam\", \"hyamsunder.vasam\", \"abhijit_patil02\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(subject) as result,\nvalues(_product) as product,\ncount() as matched_events by administrator,\n_time\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see which Pcap drivers are being used on my endpoints.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName contains \"pcap\" or ServiceFileName contains \"npcap\" or ServiceFileName contains \"npf\" or ServiceFileName contains \"nm3\" or ServiceFileName contains \"ndiscap\" or ServiceFileName contains \"nmnt\" or ServiceFileName contains \"windivert\" or ServiceFileName contains \"USBPcap\" or ServiceFileName contains \"pktmon\"))\n\n\n\n"}
{"prompt": "I want to find potential Emotet activity based on specific command line patterns.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" -e* PAA\" or action_process_image_command_line contains \"JABlAG4AdgA6AHUAcwBlAHIAcAByAG8AZgBpAGwAZQ\" or action_process_image_command_line contains \"QAZQBuAHYAOgB1AHMAZQByAHAAcgBvAGYAaQBsAGUA\" or action_process_image_command_line contains \"kAGUAbgB2ADoAdQBzAGUAcgBwAHIAbwBmAGkAbABlA\" or action_process_image_command_line contains \"IgAoACcAKgAnACkAOwAkA\" or action_process_image_command_line contains \"IAKAAnACoAJwApADsAJA\" or action_process_image_command_line contains \"iACgAJwAqACcAKQA7ACQA\" or action_process_image_command_line contains \"JABGAGwAeAByAGgAYwBmAGQ\" or action_process_image_command_line contains \"PQAkAGUAbgB2ADoAdABlAG0AcAArACgA\" or action_process_image_command_line contains \"0AJABlAG4AdgA6AHQAZQBtAHAAKwAoA\" or action_process_image_command_line contains \"9ACQAZQBuAHYAOgB0AGUAbQBwACsAKA\") and  not ((action_process_image_command_line contains \"fAAgAEMAbwBuAHYAZQByAHQAVABvAC0ASgBzAG8AbgAgAC0ARQByAHIAbwByAEEAYwB0AGkAbwBuACAAUwBpAGwAZQBuAHQAbAB5AEMAbwBuAHQAaQBuAHUAZQ\" or action_process_image_command_line contains \"wAIABDAG8AbgB2AGUAcgB0AFQAbwAtAEoAcwBvAG4AIAAtAEUAcgByAG8AcgBBAGMAdABpAG8AbgAgAFMAaQBsAGUAbgB0AGwAeQBDAG8AbgB0AGkAbgB1AGUA\" or action_process_image_command_line contains \"8ACAAQwBvAG4AdgBlAHIAdABUAG8ALQBKAHMAbwBuACAALQBFAHIAcgBvAHIAQQBjAHQAaQBvAG4AIABTAGkAbABlAG4AdABsAHkAQwBvAG4AdABpAG4AdQBlA\"))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that might be used by the Lace Tempest APT group to launch malware by exploiting CVE-2023-47246.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"\\\\SysAidServer\\\\tomcat\\\\webapps\" and ScriptBlockText contains \"Starting user.exe\" and ScriptBlockText contains \"\\\\usersfiles\\\\user.exe\" and ScriptBlockText contains \"Remove-Item -Force \\\"$wapps\" and ScriptBlockText contains \"(Sophos).\")\n\n\n\n"}
{"prompt": "I want to find potential privilege escalation attempts using Kerberos relay over LDAP on Windows machines.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4624\") and xdm.event.operation_sub_type in (\"An account was successfully logged on\") and xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS and xdm.event.description contains \"Kerberos\" and xdm.logon.type = XDM_CONST.LOGON_TYPE_NETWORK and (xdm.source.ipv4 in (\"127.0.0.1\") and xdm.source.port > 0) and (xdm.target.user.identifier ~= \"S-1-5-21-.*?-500\")\n| fields *"}
{"prompt": "{I want to find potential FIN7 activity related to reconnaissance and lateral movement using POWERTRASH techniques on my endpoints.} \n\n\nLet me know if you'd like me to adjust this prompt in any way!", "response": "preset = xdr_process\n| filter ((action_process_image_command_line ~= \".*\\-noni\\ \\-nop\\ \\-exe\\ bypass\\ \\-f\\ \\\\\\\\.*\" and action_process_image_command_line contains \"ADMIN$\") or (action_process_image_command_line contains \"-ex bypass -noprof -nolog -nonint -f\" and action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find Cisco Catalyst devices that are reporting more than 10 instances of duplicate IP addresses for APs within a 5 minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 5m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter msg_id in (\"LWAPP-3-DUP_AP_IP\", \"LWAPP-3-DUP_IP\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\nxdm.source.ipv4,\neth_src,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildeviceip\",\naggregation_criteria1 = \"macaddress\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to find security events related to suspicious read access requests on service registry keys.", "response": "preset = xdr_event_log\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter AccessList = regextract(to_json_string(action_evtlog_data_fields)->AccessList{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4663 and (ObjectName ~= \".*\\\\SYSTEM\\\\.*\" and ObjectName ~= \".*ControlSet\\\\Services\\\\.*\") and AccessList contains \"%%1538\")\n\n\n\n"}
{"prompt": "I want to see details about successful VPN logins from Morocco that have been logged by SonicWall.", "response": "datamodel dataset = sonicwall_ns_raw\n| alter xdm.event.original_event_type = arrayindex(regextract(sonicwall_ns_raw._raw_log, \"m\\=(\\d+)\\s\"), 0),\nxdm.source.user.username = arrayindex(regextract(sonicwall_ns_raw._raw_log, \"usr\\=\\\"([^\\\"]+)\\\"\\s\"), 0),\nxdm.event.operation_sub_type = arrayindex(regextract(sonicwall_ns_raw._raw_log, \"msg\\=\\\"([^\\\"]+)\\\"\\s\"), 0)\n| filter xdm.event.original_event_type in (\"1080\") and xdm.source.location.country in (\"Morocco\")\n| fields xdm.source.user.username, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.original_event_type, xdm.event.type, xdm.intermediate.asn.as_name,\nxdm.intermediate.asn.as_number, xdm.intermediate.ipv4,\nxdm.intermediate.is_internal_ip, xdm.intermediate.location.city,\nxdm.intermediate.location.continent, xdm.intermediate.location.country,\nxdm.intermediate.location.latitude, xdm.intermediate.location.longitude,\nxdm.intermediate.location.region, xdm.intermediate.location.timezone,\nxdm.network.ip_protocol, xdm.observer.action, xdm.observer.name,\nxdm.observer.product, xdm.observer.vendor, xdm.session_context_id,\nxdm.source.ipv4, xdm.source.is_internal_ip, xdm.target.ipv4,\nxdm.target.is_internal_ip, xdm.target.port"}
{"prompt": "I want to find security events related to potential backdoor execution using common accessibility tools like Sticky Keys.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\winlogon\\.exe\" and (action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\wt\\.exe\") and (action_process_image_command_line contains \"sethc.exe\" or action_process_image_command_line contains \"utilman.exe\" or action_process_image_command_line contains \"osk.exe\" or action_process_image_command_line contains \"Magnify.exe\" or action_process_image_command_line contains \"Narrator.exe\" or action_process_image_command_line contains \"DisplaySwitch.exe\"))\n\n\n\n"}
{"prompt": "I want to see indicators of exploitation for CVE-2023-20198 on Cisco IOS XE web UI.", "response": "datamodel\n| filter ( contains \"%WEBUI-6-INSTALL_OPERATION_INFO:\" or  contains \"%SYS-5-CONFIG_P:\" or  contains \"%SEC_LOGIN-5-WEBLOGIN_SUCCESS:\") and ( contains \"cisco_tac_admin\" or  contains \"cisco_support\" or  contains \"cisco_sys_manager\")\n\n\n\n"}
{"prompt": "I want to see alerts related to potential misuse of COM objects for downloading malicious code by examining PowerShell process creation commands.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"[Type]::GetTypeFromCLSID(\" and (action_process_image_command_line contains \"0002DF01-0000-0000-C000-000000000046\" or action_process_image_command_line contains \"F6D90F16-9C73-11D3-B32E-00C04F990BB4\" or action_process_image_command_line contains \"F5078F35-C551-11D3-89B9-0000F81FE221\" or action_process_image_command_line contains \"88d96a0a-f192-11d4-a65f-0040963251e5\" or action_process_image_command_line contains \"AFBA6B42-5692-48EA-8141-DC517DCF0EF1\" or action_process_image_command_line contains \"AFB40FFD-B609-40A3-9828-F88BBE11E4E3\" or action_process_image_command_line contains \"88d96a0b-f192-11d4-a65f-0040963251e5\" or action_process_image_command_line contains \"2087c2f4-2cef-4953-a8ab-66779b670495\" or action_process_image_command_line contains \"000209FF-0000-0000-C000-000000000046\" or action_process_image_command_line contains \"00024500-0000-0000-C000-000000000046\"))\n\n\n\n"}
{"prompt": " I want to see alerts about scripts that remove Windows Defender settings like Controlled Folder Access and Attack Surface Reduction Rules. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Remove-MpPreference\" and (ScriptBlockText contains \"-ControlledFolderAccessProtectedFolders \" or ScriptBlockText contains \"-AttackSurfaceReductionRules_Ids \" or ScriptBlockText contains \"-AttackSurfaceReductionRules_Actions \" or ScriptBlockText contains \"-CheckForSignaturesBeforeRunningScan \"))\n\n\n\n"}
{"prompt": " I want to find instances of UAC bypass using Iscsicpl and ImageLoad technique. ", "response": "preset = xdr_image_load\n| filter (actor_process_image_path = \"C:\\\\Windows\\\\SysWOW64\\\\iscsicpl.exe\" and action_module_path ~= \".*\\\\iscsiexe\\.dll\") and  not ((action_module_path ~= \".*C\\:\\\\Windows\\\\.*\" and action_module_path contains \"iscsiexe.dll\"))\n\n\n\n"}
{"prompt": "I want to see alerts for Unix servers that have experienced at least five failed SSH login attempts from public IP addresses in the last time period.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"Tools_Platform_Server\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"sshd\" and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol = \"ssh2\" and xdm.source.is_internal_ip = false and incidr(xdm.source.ipv4, \"169.254.0.0/16\") = false\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address as ip\n) as dmz_ips dmz_ips.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_ips incidr(xdm.source.ipv4, vpn_ips.cidr_range) = true\n| filter cidr_range = null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, linux_linux_raw._final_reporting_device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by device_ip\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to find any activity related to the WMImplant hack tool on my endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"WMImplant\" or ScriptBlockText contains \" change_user \" or ScriptBlockText contains \" gen_cli \" or ScriptBlockText contains \" command_exec \" or ScriptBlockText contains \" disable_wdigest \" or ScriptBlockText contains \" disable_winrm \" or ScriptBlockText contains \" enable_wdigest \" or ScriptBlockText contains \" enable_winrm \" or ScriptBlockText contains \" registry_mod \" or ScriptBlockText contains \" remote_posh \" or ScriptBlockText contains \" sched_job \" or ScriptBlockText contains \" service_mod \" or ScriptBlockText contains \" process_kill \" or ScriptBlockText contains \" active_users \" or ScriptBlockText contains \" basic_info \" or ScriptBlockText contains \" power_off \" or ScriptBlockText contains \" vacant_system \" or ScriptBlockText contains \" logon_events \")\n\n\n\n"}
{"prompt": "I want to find instances where applications access the Windows Credential History File that are not typical system processes.", "response": "datamodel\n| filter xdm.target.file.path ~= \".*\\\\Microsoft\\\\Protect\\\\CREDHIST\" and  not (((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\")) or (xdm.target.process.name ~= \".*\\:\\\\Windows\\\\explorer\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\explorer\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see a list of users who have had at least two logon events with different outcomes within a one-minute timeframe, along with their usernames, IP addresses, and the timestamps of those events.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| alter xdm.source.process.name = arrayindex(regextract(xdm.event.description, \"Logon Process:\\t\\t([^\\n]+)\"), 0)\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| filter xdm.event.id = \"4624\" and xdm.event.outcome in (\"Success\") and xdm.source.process.name = \"user32\" and xdm.target.user.username in (\"abhijit_patil02\", \"aiswarya.s06\", \"ajay_kadu\", \"ajesh_s\", \"alagumuthu.mariappan\", \"amudambigai_p\", \"anand_shekhar01\", \"athimoolam_a\", \"balaji_m07\", \"balasubramaniam_r02\", \"banupriya_s03\", \"bharathy_l\", \"biju_victordhasan\", \"chella_priyak\", \"dcm_monitoring\", \"deepa.sy\", \"deepak_veluchamy\", \"devaki.k\", \"ezhilarasi_m\", \"ezilarasu.mohan\", \"gowreswarir.r\", \"harishkumar.s01\", \"jayaganesh.j\", \"jegadheesan.a\", \"joel_muni\", \"k.latha\", \"kalyan_ganta\", \"kannan.vijayan\", \"karthikeyan.b\", \"kaushick.r\", \"keerthana.rajan\", \"kishorekumar.raji\", \"kraghavendra\", \"lokeshwar.b\", \"meenakshi.kumar01\", \"mohanraj_g03\", \"monisha.sankar\", \"nagarajan.m\", \"nancy.mayilvahanan\", \"naveen.a03\", \"p.dhanusha\", \"panjabmahadev_yede\", \"parthasarathy_pg\", \"parthiban_g\", \"paulraj_selvaraj01\", \"pittasairama.l\", \"piyush_kute\", \"prakash_c04\", \"prasanth.k\", \"prasanth.sivan\", \"priya_j03\", \"raghavendra_goliya\", \"raj_kumar18\", \"raja_shanmugam\", \"ramanan.is\", \"ramakrishnan.p\", \"ramkumar.r13\", \"ramkumars.a\", \"rani_jayamoorthy\", \"ravikumar_satla\", \"renuga.chandrasekar\", \"santhosh.k19\", \"saranraj_g01\", \"satheesh_k\", \"shyamsunder.vasam\", \"sisira.s\", \"siva_thirumaiyan\", \"siva_vadagana\", \"sivagnanam.m\", \"sivaram\", \"sravanthi.bandi\", \"sravanthi.c\", \"sravanthi.hosdoday\", \"srivatsan.r\", \"suheshkumar_nair\", \"sukhvinder.kaur\", \"suneel.sah\", \"sunidhi.yadav\", \"swathikiran.m\", \"swetha.rajan01\", \"uma.batcha\", \"venkatesh.ragupathy\", \"vignesh.ramaraj\", \"vigneshwaran.r\", \"vinothkumar.l\", \"viswanathan_d01\", \"yuvaraja_kuppan\", \"nirmal_arumugam\") and xdm.source.host.hostname not in (\"usadlinfotsp02.infosys-platforms.com\", \"usadlinfotsp03.infosys-platforms.com\", \"usascinfotsp02.infosys-platforms.com\", \"usscinfotsp01.infosys-platforms.com\", \"eurlninftero01.infosys-platforms.com\", \"eurlninftero02.infosys-platforms.com\", \"eurfrinftero01.infosys-platforms.com\", \"eurfrinftero02.infosys-platforms.com\", \"eurfrinftero03.infosys-platforms.com\", \"indcsinfotso01.infosys-platforms.com\", \"indmyinftso02.infosys-platforms.com\", \"indmyinftso01.infosys-platforms.com\", \"indhyinftso02.infosys-platforms.com\", \"indhyinftso01.infosys-platforms.com\", \"auspminfots01.infosys-platforms.com\", \"aussnibpts02.infosys-platforms.com\", \"aussninfnbom01.infosys-platforms.com\", \"ausulibpoobts01.infosys-platforms.com\", \"ausulibpoobts02.infosys-platforms.com\", \"ausulinfaots01.infosys-platforms.com\", \"indhyinfpamo02.infosys-platforms.com\", \"indhyinfpamo03.infosys-platforms.com\", \"usadlinfpam01.infosys-platforms.com\", \"usadlinfpam02.infosys-platforms.com\", \"usascinfotsp04.infosys-platforms.com\", \"usadlinfotsp09.infosys-platforms.com\", \"usadlinfotsp10.infosys-platforms.com\", \"usascinfotsp05.infosys-platforms.com\", \"auspminfratso01.infosys-platforms.com\", \"auspminfratso02.infosys-platforms.com\", \"ausulinfratso01.infosys-platforms.com\", \"indhyinftso03.infosys-platforms.com\", \"indhyinftso04.infosys-platforms.com\", \"indmyinftso03.infosys-platforms.com\", \"indmyinftso04.infosys-platforms.com\", \"eurlninfptso01.infosys-platforms.com\", \"eurlninfptso02.infosys-platforms.com\", \"eurfrinfptso01.infosys-platforms.com\", \"indhyinfgdcc01\", \"usascinfgdc01.infosys-platforms.com\", \"usdlinfgdc01.infosys-platforms.com\", \"usadlinfodcp02.infosys-platforms.com\", \"indhyinfgdco02.infosys-platforms.com\", \"indhyinfgdco01.infosys-platforms.com\", \"eurfrinfgdco02.infosys-platforms.com\", \"indmyinfgdco02.infosys-platforms.com\", \"eurlninfgdco01.infosys-platforms.com\", \"eurfrinfgdco01.infosys-platforms.com\", \"aussnibpgdc01.infosys-platforms.com\", \"aussnibpgdc02.infosys-platforms.com\", \"ausulibpgdc01.infosys-platforms.com\", \"indmyinfgdco01.infosys-platforms.com\", \"usascinfgdc02.infosys-platforms.com\", \"eurlninfgdco02.infosys-platforms.com\", \"usadlinfexm01.infosys-platforms.com\", \"usadlinfexm02.infosys-platforms.com\", \"usadlinfexw01.infosys-platforms.com\", \"indhyinfexm01.infosys-platforms.com\", \"indhyinfexm02.infosys-platforms.com\", \"indhyinfexw01.infosys-platforms.com\", \"auspminfexm01.infosys-platforms.com\", \"indhyinfgdcc01\") and xdm.source.host.hostname !~= \"infosys-apps.com\" and xdm.source.host.hostname !~= \"infosys-edge.com\" and xdm.target.ipv4 not in (\"10.181.9.10\", \"10.181.9.11\", \"10.181.144.6\", \"10.182.9.4\", \"10.182.9.5\", \"10.182.141.164\", \"10.205.11.213\", \"10.205.11.214\", \"10.205.141.183\", \"10.205.141.184\", \"10.204.11.164\", \"10.204.11.165\", \"10.204.141.164\")\n| Bin _time span = 1m\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nxdm.source.process.name, logon_session_id, event_description,\nfailure_reason, result, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.target.user.username,\nxdm.source.ipv4\n| filter matched_events >= 2\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find processes that might be running malicious Squirrel Lolbin payloads by looking for specific command line arguments related to process creation and shortcut generation.  Exclude known legitimate updates from Discord, GitHubDesktop, and Microsoft Teams.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\update\\.exe\" and (action_process_image_command_line contains \"--processStart\" or action_process_image_command_line contains \"--processStartAndWait\" or action_process_image_command_line contains \"--createShortcut\")) and  not ((action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" and action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Discord\\\\Update.exe\" and action_process_image_command_line contains \" --processStart\" and action_process_image_command_line contains \"Discord.exe\") or ((action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" and action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\GitHubDesktop\\\\Update.exe\" and action_process_image_command_line contains \"GitHubDesktop.exe\") and (action_process_image_command_line contains \"--createShortcut\" or action_process_image_command_line contains \"--processStartAndWait\")) or ((action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" and action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\Update.exe\" and action_process_image_command_line contains \"Teams.exe\") and (action_process_image_command_line contains \"--processStart\" or action_process_image_command_line contains \"--createShortcut\")))\n\n\n\n"}
{"prompt": "I want to see events where a driver is loaded from a temporary directory.", "response": "datamodel\n| filter (xdm.target.process.executable.filename ~= \".*\\\\Temp\\\\.*\" or xdm.source.process.executable.filename ~= \".*\\\\Temp\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see if there are any Cisco Catalyst devices that have had more than three simultaneous TCP connections within a two minute period.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 2m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"TCP-2-TCP_MAXESTABLISHED\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see if any suspicious processes are loading unsigned dbghelp or dbgcore DLLs.", "response": "preset = xdr_image_load\n| filter ((action_module_path ~= \".*\\\\dbghelp\\.dll\" or action_module_path ~= \".*\\\\dbgcore\\.dll\") and actor_process_signature_status = \"false\")\n\n\n\n"}
{"prompt": "I want to see events where PowerShell might be obfuscating its command line using special characters.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line ~= \"\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+.*\\+\" or action_process_image_command_line ~= \"\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{.*\\{\" or action_process_image_command_line ~= \"\\^.*\\^.*\\^.*\\^.*\\^\" or action_process_image_command_line ~= \"\\`.*\\`.*\\`.*\\`.*\\`\")) and  not (actor_process_image_path = \"C:\\\\Program Files\\\\Amazon\\\\SSM\\\\ssm-document-worker.exe\" or (action_process_image_command_line contains \"new EventSource(\\\"Microsoft.Windows.Sense.Client.Management\\\"\" or action_process_image_command_line contains \"public static extern bool InstallELAMCertificateInfo(SafeFileHandle handle);\"))\n\n\n\n"}
{"prompt": "I want to see events where Cmd.exe is used to read input from standard input.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"Cmd.Exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") and action_process_image_command_line contains \"<\")\n\n\n\n"}
{"prompt": "I want to detect attempts to disable Tamper Protection on Windows Defender using registry changes.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Microsoft\\\\Windows Defender\\\\Features\\\\TamperProtection\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\")) and  not ((actor_process_image_path ~= \"C\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\Platform\\\\.*\" and actor_process_image_path ~= \".*\\\\MsMpEng\\.exe\") or actor_process_image_path = \"C:\\\\Program Files\\\\Windows Defender\\\\MsMpEng.exe\")\n\n\n\n"}
{"prompt": "I want to find instances of potential Impacket lateral movement activity on my endpoints.", "response": "preset = xdr_process\n| filter (((actor_process_image_path ~= \".*\\\\wmiprvse\\.exe\" or actor_process_image_path ~= \".*\\\\mmc\\.exe\" or actor_process_image_path ~= \".*\\\\explorer\\.exe\" or actor_process_image_path ~= \".*\\\\services\\.exe\") and (action_process_image_command_line contains \"cmd.exe\" and action_process_image_command_line contains \"/Q\" and action_process_image_command_line contains \"/c\" and action_process_image_command_line ~= \".*\\\\\\\\127\\.0\\.0\\.1\\\\.*\" and action_process_image_command_line contains \"&1\")) or ((actor_process_image_command_line contains \"svchost.exe -k netsvcs\" or actor_process_image_command_line contains \"taskeng.exe\") and (action_process_image_command_line contains \"cmd.exe\" and action_process_image_command_line contains \"/C\" and action_process_image_command_line ~= \".*Windows\\\\Temp\\\\.*\" and action_process_image_command_line contains \"&1\")))\n\n\n\n"}
{"prompt": "I want to find instances where bash.exe is executed without any flags, potentially indicating an attempt to bypass security measures.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\bash\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\bash\\.exe\") or actor_process_file_original_name = \"Bash.exe\") and  not ((action_process_image_command_line contains \"bash.exe -\" or action_process_image_command_line contains \"bash -\") or action_process_image_command_line = \"None\" or action_process_image_command_line = \"\" or action_process_image_command_line in (\"bash.exe\", \"bash\"))\n\n\n\n"}
{"prompt": "I want to find instances of .NET code being compiled dynamically using Csc.exe on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\csc\\.exe\" and action_process_image_command_line contains \"/noconfig /fullpaths @\")\n\n\n\n"}
{"prompt": "I want to find potential CVE-2023-36874 exploits that are generating unusual .wer reports.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\WER\\\\ReportArchive\\\\.*\" and xdm.target.file.filename ~= \".*\\\\Report\\.wer\") and  not ((xdm.target.file.filename contains \"\\\\ReportArchive\\\\AppCrash_\" or xdm.target.file.filename contains \"\\\\ReportArchive\\\\AppHang_\" or xdm.target.file.filename contains \"\\\\ReportArchive\\\\Critical_\" or xdm.target.file.filename contains \"\\\\ReportArchive\\\\Kernel_\" or xdm.target.file.filename contains \"\\\\ReportArchive\\\\NonCritical_\"))\n\n\n\n"}
{"prompt": "I want to detect potential COLDSTEEL RAT activity by looking for suspicious Windows user creation events in the registry.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\ProfileList\\\\S-1-5-21-\" and action_registry_key_name contains \"\\\\ProfileImagePath\") and ((action_registry_value_name contains \"ANONYMOUS\" or action_registry_value_name contains \"_DomainUser_\") or (action_registry_data contains \"ANONYMOUS\" or action_registry_data contains \"_DomainUser_\")))\n\n\n\n"}
{"prompt": "I want to see all Cisco CLI commands related to cryptography like export, import and trustpoints.", "response": "datamodel\n| filter ( contains \"crypto pki export\" or  contains \"crypto pki import\" or  contains \"crypto pki trustpoint\")\n\n\n\n"}
{"prompt": "I want to see all DNS queries that include \"3dkit.org\", \"dersmarketim.com\", \"galerielamy.com\", or \"olidhealth.com\" in the domain name.", "response": "datamodel\n| filter (xdm.network.dns.dns_question.name contains \"3dkit.org\" or xdm.network.dns.dns_question.name contains \"dersmarketim.com\" or xdm.network.dns.dns_question.name contains \"galerielamy.com\" or xdm.network.dns.dns_question.name contains \"olidhealth.com\")\n\n\n\n"}
{"prompt": "I want to detect malicious activity where attackers abuse the `print.exe` executable to copy remote files.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\print\\.exe\" and action_process_image_command_line ~= \"print.*\" and (action_process_image_command_line contains \"/D\" and action_process_image_command_line contains \".exe\")) and  not (action_process_image_command_line contains \"print.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious child processes created as System, especially if the process username contains \"AUTHORI\" or \"AUTORI\".", "response": "preset = xdr_process\n| filter ((actor_effective_username contains \"AUTHORI\" or actor_effective_username contains \"AUTORI\") and (actor_effective_username ~= \".*\\\\NETWORK\\ SERVICE\" or actor_effective_username ~= \".*\\\\LOCAL\\ SERVICE\") and (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\") and (action_process_username ~= \".*\\\\SYSTEM\" or action_process_username ~= \".*\\\\Syst\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdme\" or action_process_username ~= \".*\\\\\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\") and action_process_integrity_level = \"System\") and  not ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" and action_process_image_command_line contains \"DavSetCookie\"))\n\n\n\n"}
{"prompt": "I want to find potential exploitation attempts of CVE-2022-46169 using suspicious HTTP requests that include specific base64 encoded commands, PowerShell, cmd, or wget.", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and (xdm.network.http.url contains \"/remote_agent.php\" and xdm.network.http.url contains \"action=polldata\" and xdm.network.http.url contains \"poller_id=\") and (xdm.network.http.url contains \"| base64 -d | /bin/bash`\" or xdm.network.http.url contains \"%7C%20base64%20-d%20%7C%20%2Fbin%2Fbash%60\" or xdm.network.http.url contains \"`whoami\" or xdm.network.http.url contains \"powershell\" or xdm.network.http.url contains \"cmd\" or xdm.network.http.url contains \"wget\"))\n\n\n\n"}
{"prompt": "I want to find out which users are receiving a high volume of phishing emails from infosys.com and other domains within a short period.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter eventType in (\"Phishing\")\n| alter headerTo_array = headerTo -> []\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\"),\nfile_details = json_extract(details, \"$.fileInfo\")\n| filter headerTo_string ~= \"infosys.com$\"\n| comp count() as matched_events,\nvalues(eventType) as eventType,\nvalues(headerFrom) as headerFrom,\nfirst(file_details) as file_details,\nvalues(embeddedUrls) as embeddedUrls by headerTo_string\n| alter file_details = arrayindex(file_details -> [], 0)\n| alter file_name = json_extract_scalar(file_details, \"$.fileName\"),\nfile_hash = json_extract_scalar(file_details, \"$.fileSha256\"),\nthreat_name = json_extract_scalar(file_details, \"$.threatName\")\n| filter matched_events >= 5"}
{"prompt": "I want to see all messages about removed message templates from Swift applications.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.description contains \"message template removed\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to see which IP addresses attempted to connect to critical ports (RDP, SSH, SMB) from my Cisco Firepower device over the past 5 minutes and how many times they tried.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.target.port in (22, 3389, 139) and xdm.observer.action = \"alert\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\" and xdm.source.ipv4 != \"0.0.0.0\" and xdm.target.ipv4 != \"0.0.0.0\"\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.ipv4,\nxdm.target.port,\n_time\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ilsourceip\",\naggregation_criteria1 = \"ildestinationport\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential Cross Site Scripting (XSS) attacks based on strings found in web access logs.", "response": "datamodel\n| filter xdm.network.http.method = \"GET\" and ( contains \"=<script>\" or  contains \"=%3Cscript%3E\" or  contains \"=%253Cscript%253E\" or  contains \"<iframe \" or  contains \"%3Ciframe \" or  contains \"<svg \" or  contains \"%3Csvg \" or  contains \"document.cookie\" or  contains \"document.domain\" or  contains \" onerror=\" or  contains \" onresize=\" or  contains \" onload=\\\"\" or  contains \"onmouseover=\" or  contains \"${alert\" or  contains \"javascript:alert\" or  contains \"javascript%3Aalert\") and  not (xdm.network.http.response_code = 404)\n\n\n\n"}
{"prompt": "I want to see events related to Okta MFA being reset or deactivated.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type in (\"user.mfa.factor.deactivate\", \"user.mfa.factor.reset_all\")\n\n\n\n"}
{"prompt": "I want to detect if someone is trying to steal data from my clipboard using the xclip tool.", "response": "preset = xdr_process\n| filter (action_process_image_path contains \"xclip\" and (action_process_image_command_line contains \"-sel\" and action_process_image_command_line contains \"clip\" and action_process_image_command_line contains \"-o\"))\n\n\n\n"}
{"prompt": "I want to find indicators of UNC4841 - SSL Certificate Exfiltration Via Openssl on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/openssl\" and action_process_image_command_line ~= \"[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\" and (action_process_image_command_line contains \"s_client\" and action_process_image_command_line contains \"-quiet\" and action_process_image_command_line contains \"-connect\") and (action_process_image_command_line contains \":443\" or action_process_image_command_line contains \":8080\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when enterprise domain admin accounts are locked out due to multiple logon failures.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4740\") and xdm.target.user.username in (\"<username>\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps(wingrps.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or wingrps.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE in (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find any Cisco device commands related to Denial of Service attacks like \"shutdown\", \"config-register 0x2100\", or \"config-register 0x2142\".", "response": "datamodel\n| filter ( contains \"shutdown\" or  contains \"config-register 0x2100\" or  contains \"config-register 0x2142\")\n\n\n\n"}
{"prompt": "I want to see alerts for privileged password changes made by domain admins.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter target_user_username = if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<user>\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| filter target_user_username not in (\"<user>\", \"<user>\", \"<user>\") and xdm.event.id in (\"4723\")\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type = \"domain_admin_win_admin\" or security_groups contains \"Tier0Users\"\n| alter username = if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<user>\", ltrim(username, \"<user>\\\\\"), username)))\n) as ent_admin_dst ent_admin_dst.username = target_user_username or ent_admin_dst.sam_account_name = target_user_username\n| filter username != null or sam_account_name != null\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_user_username\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where a remote PowerShell session is initiated using wsmprovhost.exe on endpoints.", "response": "preset = xdr_event_log\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter (ContextInfo contains \" = ServerRemoteHost \" and ContextInfo contains \"wsmprovhost.exe\") and  not (ContextInfo contains \"\\\\Windows\\\\system32\\\\WindowsPowerShell\\\\v1.0\\\\Modules\\\\Microsoft.PowerShell.Archive\\\\Microsoft.PowerShell.Archive.psm1\")\n\n\n\n"}
{"prompt": "I want to detect if uncommon applications are accessing Windows Outlook Mail files, which could indicate potential credential theft.", "response": "datamodel\n| filter (xdm.target.file.path contains \"\\\\AppData\\\\Local\\\\Comms\\\\Unistore\\\\data\" or xdm.target.file.path ~= \".*\\\\AppData\\\\Local\\\\Comms\\\\UnistoreDB\\\\store\\.vol\") and  not ((xdm.target.process.name = \"System\" or xdm.source.process.name = \"System\") or ((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\"))) and  not (((xdm.target.process.name ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\.*\") and ((xdm.target.process.name ~= \".*\\\\MpCopyAccelerator\\.exe\" or xdm.target.process.name ~= \".*\\\\MsMpEng\\.exe\") or (xdm.source.process.name ~= \".*\\\\MpCopyAccelerator\\.exe\" or xdm.source.process.name ~= \".*\\\\MsMpEng\\.exe\"))) or ((xdm.target.process.name ~= \".*\\\\thor64\\.exe\" or xdm.target.process.name ~= \".*\\\\thor\\.exe\") or (xdm.source.process.name ~= \".*\\\\thor64\\.exe\" or xdm.source.process.name ~= \".*\\\\thor\\.exe\")))\n\n\n\n"}
{"prompt": "I want to see alerts about when Outlook's \"EnableUnsafeClientMailRules\" setting is enabled on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"\\\\Outlook\\\\Security\\\\EnableUnsafeClientMailRules\"\n\n\n\n"}
{"prompt": "I want to detect potential instances of the Rotten Potato exploit where processes are using elevated privileges.", "response": "preset = xdr_process\n| filter (actor_effective_username in (\"NT AUTHORITY\\\\NETWORK SERVICE\", \"NT AUTHORITY\\\\LOCAL SERVICE\") and action_process_username = \"NT AUTHORITY\\\\SYSTEM\") and  not ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" and action_process_image_command_line contains \"DavSetCookie\"))\n\n\n\n"}
{"prompt": "I want to detect potential exploitation attempts of the CVE-2023-22518 vulnerability in Confluence.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and (xdm.network.http.url contains \"/json/setup-restore-local.action\" or xdm.network.http.url contains \"/json/setup-restore-progress.action\" or xdm.network.http.url contains \"/json/setup-restore.action\" or xdm.network.http.url contains \"/server-info.action\" or xdm.network.http.url contains \"/setup/setupadministrator.action\") and xdm.network.http.response_code in (200, 302, 405))\n\n\n\n"}
{"prompt": "I want to see all denied login attempts to Infosys assets, especially for high profile (\"Red_Carpet\") users.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4625\", \"4825\")\n| alter logon_type = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Logon Type:\\t\\t\\t([^\\n]+)\"), 0))\n| alter status_code = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Status:\\t\\t\\t([^\\n]+)\"), 0))\n| filter ((xdm.event.id IN (\"4625\") and logon_type = \"10\" and status_code = \"0xc000015b\") or xdm.event.id IN (\"4825\"))\n| alter target_username = if(xdm.event.id IN (\"4825\"), arrayindex(regextract(xdm.event.description, \"User Name:\\t([^\\n]+)\"), 0), xdm.target.user.username)\n| alter target_username = if(target_username ~= \"@ad.infosys.com\", rtrim(target_username, \"@ad.infosys.com\"), if(target_username ~= \"@infosys.com\", rtrim(target_username, \"@infosys.com\"), if(target_username ~= \"itlinfosys\", ltrim(target_username, \"itlinfosys\\\\\"), target_username)))\n| join\n(dataset = redcarpet_users_list\n| alter username_field = if(username ~= \"@ad.infosys.com\", rtrim(username, \"@ad.infosys.com\"), if(username ~= \"@infosys.com\", rtrim(username, \"@infosys.com\"), if(username ~= \"itlinfosys\", ltrim(username, \"itlinfosys\\\\\"), username)))\n) as red_carpet red_carpet.username_field = target_username\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| alter xdm.source.ipv4 = if(xdm.source.ipv4 = null, trim(arrayindex(regextract(xdm.event.description, \"Client Address:\\s([^\\n]+)\"), 0)), xdm.source.ipv4)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_username\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see who has been added to either Global or Device Admin roles in Azure AD.", "response": "dataset = msft_azure_raw\n| alter properties_category = json_extract_scalar(properties , \"$.category\")\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| alter properties_targetResources = json_extract_scalar(properties , \"$.targetResources\")\n| filter (properties.category = \"RoleManagement\" and (properties.operationName contains \"Add\" and properties.operationName contains \"member to role\") and (properties.targetResources contains \"7698a772-787b-4ac8-901f-60d6b08affd2\" or properties.targetResources contains \"62e90394-69f5-4237-9190-012177145e10\"))\n\n\n\n"}
{"prompt": " I want to see activity related to suspicious Rundll32 Setupapi.dll usage that might be evasive. ", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\runonce\\.exe\" and actor_process_image_path ~= \".*\\\\rundll32\\.exe\" and (actor_process_image_command_line contains \"setupapi.dll\" and actor_process_image_command_line contains \"InstallHinfSection\"))\n\n\n\n"}
{"prompt": "I want to find potential signs of ScreenConnect being used to remotely execute files on a system.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\ScreenConnect\\.WindowsClient\\.exe\" or xdm.source.process.name ~= \".*\\\\ScreenConnect\\.WindowsClient\\.exe\") and xdm.target.file.filename ~= \".*\\\\Documents\\\\ConnectWiseControl\\\\Temp\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see events where stordiag.exe is creating child processes that are likely malicious, such as schtasks.exe, systeminfo.exe, or fltmc.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\stordiag\\.exe\" and (action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\systeminfo\\.exe\" or action_process_image_path ~= \".*\\\\fltmc\\.exe\")) and  not ((actor_process_image_path ~= \"c\\:\\\\windows\\\\system32\\\\.*\" or actor_process_image_path ~= \"c\\:\\\\windows\\\\syswow64\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see Azure AD events where administrators granted consent to applications, including details like the user who was consented for, the operation performed, and timestamps.", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Operation ~= \"consent to application|add oauth2permissiongrant\"\n| alter adminconsent = json_extract_scalar(ModifiedProperties, \"$[0].NewValue\"),\nsource_user = json_extract_scalar(`Target`, \"$[3].ID\")\n| filter (adminconsent = \"True\")\n| fields UserId, source_user, ObjectId, ResultStatus, Operation,\n_time, CreationTime, adminconsent, `Target`\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to find potential exploits of CVE-2023-27363 involving FoxitPDFReader that create HTA files in the Startup folder.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\FoxitPDFReader\\.exe\" or xdm.source.process.name ~= \".*\\\\FoxitPDFReader\\.exe\") and xdm.target.file.filename ~= \".*\\\\Microsoft\\\\Windows\\\\Start\\ Menu\\\\Programs\\\\Startup\\\\.*\" and xdm.target.file.filename ~= \".*\\.hta\")\n\n\n\n"}
{"prompt": "I want to find processes on endpoints that use rundll32.exe with shell32.dll and shellexec_rundll to launch powershell, possibly indicating obfuscation techniques.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"rundll32.exe\" and action_process_image_command_line contains \"shell32.dll\" and action_process_image_command_line contains \"shellexec_rundll\" and action_process_image_command_line contains \"powershell\")\n\n\n\n"}
{"prompt": "I want to see alerts related to potential lateral movement through misuse of the SMB Spoolss named pipe.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName = \"\\\\\\\\\\*\\\\IPC$\" and RelativeTargetName = \"spoolss\")\n\n\n\n"}
{"prompt": "I want to find processes that use Base64 encoded strings related to shadowcopy listing.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"VwBpAG4AMwAyAF8AUwBoAGEAZABvAHcAYwBvAHAAeQAgAHwAIABGAG8AcgBFAGEAYwBoAC0ATwBiAGoAZQBjAHQA\" or action_process_image_command_line contains \"cAaQBuADMAMgBfAFMAaABhAGQAbwB3AGMAbwBwAHkAIAB8ACAARgBvAHIARQBhAGMAaAAtAE8AYgBqAGUAYwB0A\" or action_process_image_command_line contains \"XAGkAbgAzADIAXwBTAGgAYQBkAG8AdwBjAG8AcAB5ACAAfAAgAEYAbwByAEUAYQBjAGgALQBPAGIAagBlAGMAdA\")\n\n\n\n"}
{"prompt": "I want to see activity related to Rclone being used through a proxy server.", "response": "datamodel\n| filter xdm.network.http.browser ~= \"rclone\\/v.*\"\n\n\n\n"}
{"prompt": "I want to find instances of IcedID malware using Rundll32 to execute suspicious single-digit DLL files.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\rundll32\\.exe\" and (action_process_image_command_line ~= \".*\\\\1\\.dll\\,\\ DllRegisterServer\" or action_process_image_command_line ~= \".*\\ 1\\.dll\\,\\ DllRegisterServer\"))\n\n\n\n"}
{"prompt": "I want to see events where accounts were locked out due to brute force attempts.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| filter xdm.event.id in (\"4740\") and (xdm.source.user.username ~= \"NULL\" or xdm.source.user.username not in (\"_dcmpamwindows\", \"hydscoadm\")) and xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\"\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see Cortex XQL alerts for when RemComSvc.exe is created.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\RemComSvc\\.exe\"\n\n\n\n"}
{"prompt": "I want to see a breakdown of all actions taken by users, grouped by their username, including details like target usernames, operation names, reference IDs, tenant IDs, result types, IP addresses, identities, alias hosts, protocols, and timestamps.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.SECURITY/SECURITYSOLUTIONS/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of AADInternals PowerShell cmdlets being executed on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Add-AADInt\" or ScriptBlockText contains \"ConvertTo-AADInt\" or ScriptBlockText contains \"Disable-AADInt\" or ScriptBlockText contains \"Enable-AADInt\" or ScriptBlockText contains \"Export-AADInt\" or ScriptBlockText contains \"Get-AADInt\" or ScriptBlockText contains \"Grant-AADInt\" or ScriptBlockText contains \"Install-AADInt\" or ScriptBlockText contains \"Invoke-AADInt\" or ScriptBlockText contains \"Join-AADInt\" or ScriptBlockText contains \"New-AADInt\" or ScriptBlockText contains \"Open-AADInt\" or ScriptBlockText contains \"Read-AADInt\" or ScriptBlockText contains \"Register-AADInt\" or ScriptBlockText contains \"Remove-AADInt\" or ScriptBlockText contains \"Restore-AADInt\" or ScriptBlockText contains \"Search-AADInt\" or ScriptBlockText contains \"Send-AADInt\" or ScriptBlockText contains \"Set-AADInt\" or ScriptBlockText contains \"Start-AADInt\" or ScriptBlockText contains \"Update-AADInt\")\n\n\n\n"}
{"prompt": " I want to see events related to potential exploitation of CVE-2023-40477 through the creation of .REV files by processes like explorer.exe or WinRAR.exe. ", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\explorer\\.exe\" or xdm.target.process.name ~= \".*\\\\WinRAR\\.exe\") or (xdm.source.process.name ~= \".*\\\\explorer\\.exe\" or xdm.source.process.name ~= \".*\\\\WinRAR\\.exe\")) and xdm.target.file.filename ~= \".*\\.rev\")\n\n\n\n"}
{"prompt": " I want to see events where a user account was both enabled and disabled within an hour. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| sort asc _time\n| bin _time span = 1h\n| filter xdm.event.id in (\"4722\", \"4725\")\n| join type = left\n(dataset = device_group_static_list\n) as wingrps(wingrps.HOSTNAME = xdm.source.host.hostname or wingrps.IP = microsoft_windows_raw._reporting_device_ip)\n| filter TYPE in (\"Domain_Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| filter xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.target.user.username != NULL\n| alter pattern = if(xdm.event.id = \"4722\", \"E1\", \"E2\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, pattern\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.event.id) as event_id,\nvalues(xdm.source.user.username) as primary_user,\nvalues(xdm.source.host.hostname) as hostname,\nvalues(xdm.logon.type) as logon_type,\nvalues(xdm.event.outcome) as event_outcome,\nvalues(*) as * by xdm.target.user.username,\n_time\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events contains \"E1,E2\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances where someone is installing native code modules into IIS using appcmd.exe through the command line.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\appcmd\\.exe\" or actor_process_file_original_name = \"appcmd.exe\") and ((action_process_image_command_line contains \"install\" and action_process_image_command_line contains \"module\") and (action_process_image_command_line contains \"-name:\" or action_process_image_command_line contains \"/name:\"))) and  not (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\inetsrv\\\\iissetup.exe\")\n\n\n\n"}
{"prompt": "I want to detect attempts to create new file associations using .exe files based on registry changes.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"Classes\\\\.\" and (action_registry_value_name = \"exefile\" or action_registry_data = \"exefile\"))\n\n\n\n"}
{"prompt": "I want to see all Network ACL changes made in AWS, excluding my own account.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name != \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"CreateNetworkAcl\", \"CreateNetworkAclEntry\", \"DeleteNetworkAcl\", \"DeleteNetworkAclEntry\", \"ReplaceNetworkAclEntry\", \"ReplaceNetworkAclAssociation\")\n| filter account_id != \"<account id>\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdescription\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see indicators of UAC Bypass via Sdclt attacks detected by Windows Event Logs.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*Software\\\\Classes\\\\exefile\\\\shell\\\\runas\\\\command\\\\isolatedCommand\" or (action_registry_key_name ~= \".*Software\\\\Classes\\\\Folder\\\\shell\\\\open\\\\command\\\\SymbolicLinkValue\" and (action_registry_value_name ~= \"\\-1[0-9]{3}\\\\Software\\\\Classes\\\\\" or action_registry_data ~= \"\\-1[0-9]{3}\\\\Software\\\\Classes\\\\\")))\n\n\n\n"}
{"prompt": "I want to find all SET users who have successfully logged in from two different countries within a 24 hour period using Duo.", "response": "dataset = duo_duo_raw\n| filter email != NULL\n\n| filter result in (\"success\") and eventtype in (\"authentication\")\n| alter DuoUserName = json_extract(user, \"$.name\"),\nIPAddress = json_extract(access_device, \"$.ip\"),\nDeviceTrustLevel = json_extract(adaptive_trust_assessments, \"$.remember_me.trust_level\")\n\n| join type = right\n(dataset = wl_ip_cidrs\n| fields wl_description, wl_logsrc, wl_type, wl_value\n| filter wl_type = \"ipv4\"\n) as wlist wlist.wl_value != IPAddress\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false\n| alter AccDevLocationCN = json_extract(access_device, \"$.location.country\"),\nAccDevLocationST = json_extract(access_device, \"$.location.state\"),\nAccDevLocationCY = json_extract(access_device, \"$.location.city\"),\nAccDevOS = json_extract(access_device, \"$.os\"),\nAccDevOSVer = json_extract(access_device, \"$.os_version\"),\nAccDevBrowser = json_extract(access_device, \"$.browser\")\n| alter AppSrc = json_extract(application, \"$.name\")\n| filter IPAddress not contains \"0.0.0.0\" and AccDevLocationCN != NULL\n| alter AccDevLocationCN = replace(AccDevLocationCN, \"\\\"\", \"\")\n| fields AccDevLocationCN, AccDevBrowser, AccDevOS, DuoUserName,\nresult, reason, email, IPAddress\n\n| alter SET_USER = if(email in (\"<emails>\"), \"<users>\", \"<users>\")\n| filter SET_USER = \"SET-USER\"\n| dedup AccDevLocationCN by asc DuoUserName\n| alter custom_data = concat(\"AlertData : [\", SET_USER, \"] \", email, \" - \", DuoUserName, \" - \", result, \" - \", reason, \" - \", AccDevLocationCN, \" - \", IPAddress, \" - \", AccDevOS)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(custom_data) as MultiCNSET by DuoUserName\n| filter array_length(MultiCNSET) > 2"}
{"prompt": "I want to find files on Linux systems that might be related to the Triple Cross eBPF Rootkit persistence mechanism. Specifically, I'm looking for files with names containing \"ebpfbackdoor\".", "response": "preset = xdr_file\n| filter action_file_name ~= \".*ebpfbackdoor\"\n\n\n\n"}
{"prompt": "I want to see suspicious PowerShell invocations that use specific techniques like  `-nop`, `-w hidden`, base64 encoding, or registry manipulation.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"-nop\" and ScriptBlockText contains \" -w \" and ScriptBlockText contains \"hidden\" and ScriptBlockText contains \" -c \" and ScriptBlockText contains \"[Convert]::FromBase64String\") or (ScriptBlockText contains \" -w \" and ScriptBlockText contains \"hidden\" and ScriptBlockText contains \"-noni\" and ScriptBlockText contains \"-nop\" and ScriptBlockText contains \" -c \" and ScriptBlockText contains \"iex\" and ScriptBlockText contains \"New-Object\") or (ScriptBlockText contains \" -w \" and ScriptBlockText contains \"hidden\" and ScriptBlockText contains \"-ep\" and ScriptBlockText contains \"bypass\" and ScriptBlockText contains \"-Enc\") or (ScriptBlockText contains \"powershell\" and ScriptBlockText contains \"reg\" and ScriptBlockText contains \"add\" and ScriptBlockText contains \"HKCU\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run\") or (ScriptBlockText contains \"bypass\" and ScriptBlockText contains \"-noprofile\" and ScriptBlockText contains \"-windowstyle\" and ScriptBlockText contains \"hidden\" and ScriptBlockText contains \"new-object\" and ScriptBlockText contains \"system.net.webclient\" and ScriptBlockText contains \".download\") or (ScriptBlockText contains \"iex\" and ScriptBlockText contains \"New-Object\" and ScriptBlockText contains \"Net.WebClient\" and ScriptBlockText contains \".Download\")) and  not ((ScriptBlockText contains \"(New-Object System.Net.WebClient).DownloadString('https:\n\n\n\n"}
{"prompt": "{I want to find instances of potential Raspberry Robin malware that use files with a specific naming convention, such as \"abc.def.exe\".} \n\n\nThis prompt accurately reflects the XQL query's purpose and uses natural language for better user experience.", "response": "preset = xdr_process\n| filter action_process_image_command_line ~= \"\\\\[a-zA-Z0-9]{1,32}\\.[a-zA-Z0-9]{1,6}\\.[\\ \\\"\\']{1}\"\n\n\n\n"}
{"prompt": "I want to see alerts related to DNS Server Error Failed Loading the ServerLevelPluginDLL.", "response": "datamodel\n| filter xdm.event.id in (150, 770, 771)\n\n\n\n"}
{"prompt": "I want to find instances of UAC bypass attempts using Winsat path parsing in the Windows Event Log.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Root\\\\InventoryApplicationFile\\\\winsat.exe|\" and action_registry_key_name ~= \".*\\\\LowerCaseLongPath\" and (action_registry_value_name ~= \"c\\:\\\\users\\\\.*\" or action_registry_data ~= \"c\\:\\\\users\\\\.*\") and (action_registry_value_name ~= \".*\\\\appdata\\\\local\\\\temp\\\\system32\\\\winsat\\.exe\" or action_registry_data ~= \".*\\\\appdata\\\\local\\\\temp\\\\system32\\\\winsat\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find any instances of commands that create symlinks for the /etc/passwd file.", "response": "datamodel\n| filter ( contains \"ln -s -f /etc/passwd\" or  contains \"ln -s /etc/passwd\")\n\n\n\n"}
{"prompt": "I want to find events related to malware that uses specific DLL files, like AclNumsInvertHost.dll or ParametersNamesPopup.dll.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\AclNumsInvertHost\\.dll\" or action_module_path ~= \".*\\\\AddressResourcesSpec\\.dll\" or action_module_path ~= \".*\\\\BlendMonitorStringBuild\\.dll\" or action_module_path ~= \".*\\\\ChildPaletteConnected\\.dll\" or action_module_path ~= \".*\\\\DeregisterSeekUsers\\.dll\" or action_module_path ~= \".*\\\\HandleFrequencyAll\\.dll\" or action_module_path ~= \".*\\\\HardSwapColor\\.dll\" or action_module_path ~= \".*\\\\LengthInMemoryActivate\\.dll\" or action_module_path ~= \".*\\\\ModeBitmapNumericAnimate\\.dll\" or action_module_path ~= \".*\\\\ModeFolderSignMove\\.dll\" or action_module_path ~= \".*\\\\ParametersNamesPopup\\.dll\" or action_module_path ~= \".*\\\\PerformanceCaptionApi\\.dll\" or action_module_path ~= \".*\\\\ScrollbarHandleGet\\.dll\" or action_module_path ~= \".*\\\\UnregisterAncestorAppendAuto\\.dll\" or action_module_path ~= \".*\\\\WowIcmpRemoveReg\\.dll\")\n\n\n\n"}
{"prompt": "I want to see events related to Amsi.DLL being loaded by processes that aren't common system or application executables.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\amsi\\.dll\" and  not ((actor_process_image_path ~= \".*\\:\\\\Windows\\\\explorer\\.exe\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\Sysmon64\\.exe\") or (actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\WinSxS\\\\.*\") or ((actor_process_image_path ~= \".*\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework64\\\\.*\") and actor_process_image_path ~= \".*\\\\ngentask\\.exe\") or actor_process_image_path = \"None\" or actor_process_image_path = \"\") and  not ((actor_process_image_path ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\Platform\\\\.*\" and actor_process_image_path ~= \".*\\\\MsMpEng\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find potential instances of Netcat reverse shell executions on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/nc\" or action_process_image_path ~= \".*\\/ncat\") and (action_process_image_command_line contains \" -c \" or action_process_image_command_line contains \" -e \") and (action_process_image_command_line contains \" ash\" or action_process_image_command_line contains \" bash\" or action_process_image_command_line contains \" bsh\" or action_process_image_command_line contains \" csh\" or action_process_image_command_line contains \" ksh\" or action_process_image_command_line contains \" pdksh\" or action_process_image_command_line contains \" sh\" or action_process_image_command_line contains \" tcsh\" or action_process_image_command_line contains \"/bin/ash\" or action_process_image_command_line contains \"/bin/bash\" or action_process_image_command_line contains \"/bin/bsh\" or action_process_image_command_line contains \"/bin/csh\" or action_process_image_command_line contains \"/bin/ksh\" or action_process_image_command_line contains \"/bin/pdksh\" or action_process_image_command_line contains \"/bin/sh\" or action_process_image_command_line contains \"/bin/tcsh\" or action_process_image_command_line contains \"/bin/zsh\" or action_process_image_command_line contains \"$IFSash\" or action_process_image_command_line contains \"$IFSbash\" or action_process_image_command_line contains \"$IFSbsh\" or action_process_image_command_line contains \"$IFScsh\" or action_process_image_command_line contains \"$IFSksh\" or action_process_image_command_line contains \"$IFSpdksh\" or action_process_image_command_line contains \"$IFSsh\" or action_process_image_command_line contains \"$IFStcsh\" or action_process_image_command_line contains \"$IFSzsh\"))\n\n\n\n"}
{"prompt": "I want to detect if an attacker is using dotnet-trace.exe to execute malicious code through a binary proxy.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\dotnet\\-trace\\.exe\" or actor_process_file_original_name = \"dotnet-trace.dll\") and (action_process_image_command_line contains \"-- \" and action_process_image_command_line contains \"collect\"))\n\n\n\n"}
{"prompt": "I want to find instances where the \"attrib\" command is used with the \"+s\" option to mark files in suspicious locations as system files.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\attrib\\.exe\" or actor_process_file_original_name = \"ATTRIB.EXE\") and action_process_image_command_line contains \" +s\" and (action_process_image_command_line contains \" %\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_process_image_command_line ~= \".*\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\\\Downloads\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Temp\\\\.*\") and (action_process_image_command_line contains \".bat\" or action_process_image_command_line contains \".dll\" or action_process_image_command_line contains \".exe\" or action_process_image_command_line contains \".hta\" or action_process_image_command_line contains \".ps1\" or action_process_image_command_line contains \".vbe\" or action_process_image_command_line contains \".vbs\")) and  not ((action_process_image_command_line ~= \".*\\\\Windows\\\\TEMP\\\\.*\" and action_process_image_command_line contains \".exe\"))\n\n\n\n"}
{"prompt": "I want to see events where PowerShell scripts are used to disable Windows Defender features.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Set-MpPreference\" and (ScriptBlockText contains \"-dbaf $true\" or ScriptBlockText contains \"-dbaf 1\" or ScriptBlockText contains \"-dbm $true\" or ScriptBlockText contains \"-dbm 1\" or ScriptBlockText contains \"-dips $true\" or ScriptBlockText contains \"-dips 1\" or ScriptBlockText contains \"-DisableArchiveScanning $true\" or ScriptBlockText contains \"-DisableArchiveScanning 1\" or ScriptBlockText contains \"-DisableBehaviorMonitoring $true\" or ScriptBlockText contains \"-DisableBehaviorMonitoring 1\" or ScriptBlockText contains \"-DisableBlockAtFirstSeen $true\" or ScriptBlockText contains \"-DisableBlockAtFirstSeen 1\" or ScriptBlockText contains \"-DisableCatchupFullScan $true\" or ScriptBlockText contains \"-DisableCatchupFullScan 1\" or ScriptBlockText contains \"-DisableCatchupQuickScan $true\" or ScriptBlockText contains \"-DisableCatchupQuickScan 1\" or ScriptBlockText contains \"-DisableIntrusionPreventionSystem $true\" or ScriptBlockText contains \"-DisableIntrusionPreventionSystem 1\" or ScriptBlockText contains \"-DisableIOAVProtection $true\" or ScriptBlockText contains \"-DisableIOAVProtection 1\" or ScriptBlockText contains \"-DisableRealtimeMonitoring $true\" or ScriptBlockText contains \"-DisableRealtimeMonitoring 1\" or ScriptBlockText contains \"-DisableRemovableDriveScanning $true\" or ScriptBlockText contains \"-DisableRemovableDriveScanning 1\" or ScriptBlockText contains \"-DisableScanningMappedNetworkDrivesForFullScan $true\" or ScriptBlockText contains \"-DisableScanningMappedNetworkDrivesForFullScan 1\" or ScriptBlockText contains \"-DisableScanningNetworkFiles $true\" or ScriptBlockText contains \"-DisableScanningNetworkFiles 1\" or ScriptBlockText contains \"-DisableScriptScanning $true\" or ScriptBlockText contains \"-DisableScriptScanning 1\" or ScriptBlockText contains \"-MAPSReporting $false\" or ScriptBlockText contains \"-MAPSReporting 0\" or ScriptBlockText contains \"-drdsc $true\" or ScriptBlockText contains \"-drdsc 1\" or ScriptBlockText contains \"-drtm $true\" or ScriptBlockText contains \"-drtm 1\" or ScriptBlockText contains \"-dscrptsc $true\" or ScriptBlockText contains \"-dscrptsc 1\" or ScriptBlockText contains \"-dsmndf $true\" or ScriptBlockText contains \"-dsmndf 1\" or ScriptBlockText contains \"-dsnf $true\" or ScriptBlockText contains \"-dsnf 1\" or ScriptBlockText contains \"-dss $true\" or ScriptBlockText contains \"-dss 1\")) or (ScriptBlockText contains \"Set-MpPreference\" and (ScriptBlockText contains \"HighThreatDefaultAction Allow\" or ScriptBlockText contains \"htdefac Allow\" or ScriptBlockText contains \"LowThreatDefaultAction Allow\" or ScriptBlockText contains \"ltdefac Allow\" or ScriptBlockText contains \"ModerateThreatDefaultAction Allow\" or ScriptBlockText contains \"mtdefac Allow\" or ScriptBlockText contains \"SevereThreatDefaultAction Allow\" or ScriptBlockText contains \"stdefac Allow\"))\n\n\n\n"}
{"prompt": "{I want to find instances where Windows Explorer is launched with the \"/NOUACCHECK\" flag and identify any potential malicious activity associated with it.} \n\n\nLet me know if you'd like me to refine this further based on a specific user persona or context!", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\explorer\\.exe\" and action_process_image_command_line contains \"/NOUACCHECK\") and  not ((actor_process_image_command_line = \"C:\\\\Windows\\\\system32\\\\svchost.exe -k netsvcs -p -s Schedule\" or actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\svchost.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell modules are created by processes that aren't PowerShell itself.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\WindowsPowerShell\\\\Modules\\\\.*\" or xdm.target.file.filename ~= \".*\\\\PowerShell\\\\7\\\\Modules\\\\.*\") and  not (((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\PowerShell\\\\7\\-preview\\\\pwsh\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\PowerShell\\\\7\\\\pwsh\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\poqexec\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\_ise\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\poqexec\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\_ise\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\.exe\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\PowerShell\\\\7\\-preview\\\\pwsh\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\PowerShell\\\\7\\\\pwsh\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\poqexec\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\_ise\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\poqexec\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\_ise\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\.exe\")))\n\n\n\n"}
{"prompt": " I want to detect attempts to disable antivirus services using PowerShell commands like \"Stop-Service\" or \"Remove-Service\". ", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"Stop-Service \" or action_process_image_command_line contains \"Remove-Service \") and (action_process_image_command_line contains \" McAfeeDLPAgentService\" or action_process_image_command_line contains \" Trend Micro Deep Security Manager\" or action_process_image_command_line contains \" TMBMServer\" or action_process_image_command_line contains \"Sophos\" or action_process_image_command_line contains \"Symantec\"))\n\n\n\n"}
{"prompt": "I want to find potential instances of ShellDispatch.DLL being sideloaded through image loading actions.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\ShellDispatch\\.dll\" and  not (((action_module_path ~= \".*\\:\\\\Users\\\\.*\" and action_module_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") or action_module_path ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential hacktool services being installed or executed on my endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id in (7045, 7036)) and ((ServiceName contains \"cachedump\" or ServiceName contains \"DumpSvc\" or ServiceName contains \"gsecdump\" or ServiceName contains \"pwdump\" or ServiceName contains \"UACBypassedService\" or ServiceName contains \"WCE SERVICE\" or ServiceName contains \"WCESERVICE\" or ServiceName contains \"winexesvc\") or actor_process_image_path contains \"bypass\")\n\n\n\n"}
{"prompt": "I want to see all instances where a .NET assembly DLL was loaded via an Office application, such as Excel or Word.", "response": "preset = xdr_image_load\n| filter ((actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\mspub\\.exe\" or actor_process_image_path ~= \".*\\\\onenote\\.exe\" or actor_process_image_path ~= \".*\\\\onenoteim\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\winword\\.exe\") and action_module_path ~= \"C\\:\\\\Windows\\\\assembly\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see alerts for external brute force attacks against users, including details like the number of events, duration, and involved IP addresses from sources like Fortinet Fortigate and Cisco ASA.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter (xdm.source.is_internal_ip = false and xdm.source.ipv4 != \"0.0.0.0\" and xdm.source.ipv4 != \"<ip>\" and (incidr(xdm.source.ipv4, \"<ip>\") = false)) and xdm.event.original_event_type in (\"0100032002\", \"611102\")\n| alter BVM_Hostname = if(_product = \"Fortigate\", fortinet_fortigate_raw._broker_device_name, if(_product = \"ASA\", cisco_asa_raw._broker_device_name)),\nBVM_IPAddress = if(_product = \"Fortigate\", fortinet_fortigate_raw._broker_ip_address, if(_product = \"ASA\", cisco_asa_raw._broker_ip_address)),\nReporting_DeviceIP = if(_product = \"Fortigate\", fortinet_fortigate_raw._final_reporting_device_ip, if(_product = \"ASA\", cisco_asa_raw._final_reporting_device_ip))\n| alter Product_BVM_Hostname = coalesce(BVM_Hostname, fortinet_fortigate1_raw._broker_device_name),\nProduct_BVM_IPAddress = coalesce(BVM_IPAddress, fortinet_fortigate1_raw._broker_ip_address),\nProduct_Reporting_DeviceIP = coalesce(Reporting_DeviceIP, fortinet_fortigate1_raw._final_reporting_device_ip)\n| comp earliest(_time) as FirstEventTimestamp,\nlatest(_time) as LatestEventTimestamp,\ncount() as EventCount by xdm.target.user.username,\nxdm.event.original_event_type,\nxdm.observer.action,\nxdm.source.ipv4,\nxdm.target.ipv4,\nxdm.observer.product,\nProduct_Reporting_DeviceIP,\nProduct_BVM_IPAddress\n| alter Activity_Duration_Minutes = timestamp_diff(LatestEventTimestamp, FirstEventTimestamp, \"MINUTE\")\n| filter EventCount >= 10"}
{"prompt": "I want to detect suspicious screensaver binary files being created.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\.scr\" and  not (((xdm.target.process.name ~= \".*\\\\Kindle\\.exe\" or xdm.target.process.name ~= \".*\\\\Bin\\\\ccSvcHst\\.exe\") or (xdm.source.process.name ~= \".*\\\\Kindle\\.exe\" or xdm.source.process.name ~= \".*\\\\Bin\\\\ccSvcHst\\.exe\")) or ((xdm.target.process.name ~= \".*\\\\TiWorker\\.exe\" or xdm.source.process.name ~= \".*\\\\TiWorker\\.exe\") and xdm.target.file.filename ~= \".*\\\\uwfservicingscr\\.scr\"))\n\n\n\n"}
{"prompt": "I want to see information about processes on macOS that are retrieving local group data.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/dscacheutil\" and (action_process_image_command_line contains \"-q\" and action_process_image_command_line contains \"group\")) or (action_process_image_path ~= \".*\\/cat\" and action_process_image_command_line contains \"/etc/group\") or (action_process_image_path ~= \".*\\/dscl\" and (action_process_image_command_line contains \"-list\" and action_process_image_command_line contains \"/groups\")))\n\n\n\n"}
{"prompt": "I want to identify potential port scan activity across my Cisco ASA, Fortinet Fortigate, and SonicWall NS devices. I'm looking for a situation where at least 5000 different target ports are scanned within a minute timeframe.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter xdm.source.port not in (0, 389, 123, 135, 80, 443, 8443, 53, 445, 137, 139, 161, 20, 8080) and xdm.source.ipv4 not in (\"<IP>\")\n| alter bin_time = _time\n| bin bin_time span = 1m timeshift = 1705881600\n| comp earliest(_time) as First_eventtime,\nlatest(_time) as Latest_eventtime,\ncount(xdm.target.port) as Count_Target_Ports,\nvalues(xdm.target.ipv4) as Target_Ports,\nvalues(xdm.event.description) as Event_Details by bin_time,\nxdm.source.ipv4,\nxdm.network.ip_protocol,\n_vendor,\n_product\n| alter time_diff_in_seconds = timestamp_diff(Latest_eventtime, First_eventtime, \"SECOND\")\n| filter Count_Target_Ports >= 5000 and time_diff_in_seconds <= 60\n| fields *\n| view column order = populated"}
{"prompt": "I want to see alerts related to suspicious uses of the \"finger.exe\" process on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name = \"finger.exe\" or action_process_image_path ~= \".*\\\\finger\\.exe\")\n\n\n\n"}
{"prompt": "I want to find instances where cmd.exe redirects its output to a stream.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\cmd\\.exe\" and (action_process_image_command_line contains \"> \" and action_process_image_command_line contains \":\")) and  not (action_process_image_command_line ~= \".*\\ \\:\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see alerts about processes using Net.exe or net1.exe to mount webdav shares over HTTP.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and (action_process_image_command_line contains \" use \" and action_process_image_command_line contains \" http\"))\n\n\n\n"}
{"prompt": "I want to see events related to new ActiveScriptEventConsumers being created via Wmic.EXE on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"ActiveScriptEventConsumer\" and action_process_image_command_line contains \" CREATE \")\n\n\n\n"}
{"prompt": "I want to find detections for techniques involving bypassing User Account Control (UAC) using WSReset.exe.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\wsreset\\.exe\" and  not ((action_process_image_path ~= \".*\\\\conhost\\.exe\" or actor_process_file_original_name = \"CONHOST.EXE\"))\n\n\n\n"}
{"prompt": " I want to detect if attackers are trying to enumerate crontab entries on Linux endpoints by checking for processes that interact with \"crontab\" and its \"-l\" option. ", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/crontab\" and action_process_image_command_line contains \" -l\")\n\n\n\n"}
{"prompt": "I want to see events where PowerShell is using rundll32.exe to launch shell32.dll, specifically looking for obfuscation techniques like shellexec_rundll.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter (Payload contains \"rundll32.exe\" and Payload contains \"shell32.dll\" and Payload contains \"shellexec_rundll\" and Payload contains \"powershell\")\n\n\n\n"}
{"prompt": "{I want to detect suspicious new service creations on my endpoints.} \n\n\nThis prompt reflects the query's focus on detecting potentially malicious service creation activities and uses natural language that a user might employ.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sc\\.exe\" and (action_process_image_command_line contains \"create\" and action_process_image_command_line contains \"binPath=\")) or (action_process_image_command_line contains \"New-Service\" and action_process_image_command_line contains \"-BinaryPathName\")) and (action_process_image_command_line contains \"powershell\" or action_process_image_command_line contains \"mshta\" or action_process_image_command_line contains \"wscript\" or action_process_image_command_line contains \"cscript\" or action_process_image_command_line contains \"svchost\" or action_process_image_command_line contains \"dllhost\" or action_process_image_command_line contains \"cmd \" or action_process_image_command_line contains \"cmd.exe /c\" or action_process_image_command_line contains \"cmd.exe /k\" or action_process_image_command_line contains \"cmd.exe /r\" or action_process_image_command_line contains \"rundll32\" or action_process_image_command_line contains \"C:\\\\Users\\\\Public\" or action_process_image_command_line ~= \".*\\\\Downloads\\\\.*\" or action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\" or action_process_image_command_line ~= \".*\\\\Microsoft\\\\Windows\\\\Start\\ Menu\\\\Programs\\\\Startup\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\TEMP\\\\.*\" or action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\")\n\n\n\n"}
{"prompt": "I want to see events related to the installation of the KrbSCM service, which is part of privilege escalation attempts.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 7045 and ServiceName = \"KrbSCM\")\n\n\n\n"}
{"prompt": "I want to see alerts for potential dropper scripts being executed via WScript or CScript.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\") and (action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Tmp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") and (action_process_image_command_line contains \".js\" or action_process_image_command_line contains \".jse\" or action_process_image_command_line contains \".vba\" or action_process_image_command_line contains \".vbe\" or action_process_image_command_line contains \".vbs\" or action_process_image_command_line contains \".wsf\"))\n\n\n\n"}
{"prompt": "I want to see details about recent changes made to Network Security Groups in Azure, including who made the changes, what type of change was made, and when it occurred.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/WRITE\", \"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see Fortigate configuration changes on all devices, specifically identifying those made on New Avalon.", "response": "datamodel dataset in (fortinet_fortigate_raw)\n| filter xdm.event.original_event_type ~= \"32099|32104\"\n| alter Desc_String = if(fortinet_fortigate_raw._broker_device_name contains \"NEWAVLON\", \"New Avalon\", \".\")\n| fields fortinet_fortigate_raw._final_reporting_device_ip,\nfortinet_fortigate_raw._reporting_device_name, xdm.event.type,\nxdm.event.description, xdm.source.process.name, xdm.target.user.username,\nxdm.observer.product, xdm.target.resource.name, xdm.target.resource.id,\nfortinet_fortigate_raw._broker_device_name, _time as time,\nDesc_String"}
{"prompt": "I want to find instances where \"format.com\" is used with an uncommon filesystem selection in process commands, which could indicate malicious activity.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\format\\.com\" and action_process_image_command_line contains \"/fs:\") and  not ((action_process_image_command_line contains \"/fs:exFAT\" or action_process_image_command_line contains \"/fs:FAT\" or action_process_image_command_line contains \"/fs:NTFS\" or action_process_image_command_line contains \"/fs:ReFS\" or action_process_image_command_line contains \"/fs:UDF\"))\n\n\n\n"}
{"prompt": "I want to see alerts about Okta Network Zones that have been deactivated or deleted.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type in (\"zone.deactivate\", \"zone.delete\")\n\n\n\n"}
{"prompt": "I want to see detections related to the DNS RCE CVE-2020-1350 exploit that involve the dns.exe process but exclude known benign processes like werfault.exe, conhost.exe, dnscmd.exe, and another instance of dns.exe.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\System32\\\\dns\\.exe\" and  not ((action_process_image_path ~= \".*\\\\System32\\\\werfault\\.exe\" or action_process_image_path ~= \".*\\\\System32\\\\conhost\\.exe\" or action_process_image_path ~= \".*\\\\System32\\\\dnscmd\\.exe\" or action_process_image_path ~= \".*\\\\System32\\\\dns\\.exe\"))\n\n\n\n"}
{"prompt": " I want to see alerts when BGP entries on Cisco Catalyst switches exceed a threshold of 5 or more matching events within one minute. ", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 1m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"BGP-2-INSUFMEM\", \"BGP-3-ADDPATH\", \"BGP-3-ADDROUTE\", \"BGP-3-AFIINDEX\", \"BGP-3-BADMASK\", \"BGP-3-BADROUTEMAP\", \"BGP-3-BGP_INCONSISTENT\", \"BGP-3-BGP_NO_REMOTE_READ\", \"BGP-3-DELPATH\", \"BGP-3-DELROUTE\", \"BGP-3-INSUFCHUNKS\", \"BGP-3-INVALID_MPLS\", \"BGP-3-MARTIAN_IP\", \"BGP-3-MAXPATHS\", \"BGP-3-MAXPFXEXCEED\", \"BGP-3-NEGCOUNTER\", \"BGP-3-NOBITFIELD\", \"BGP-3-NOMEMORY\", \"BGP-3-NOTIFICATION\", \"BGP-3-ORF_PFXLIST\", \"BGP-3-RADIXINIT\", \"BGP-4-AFIMPORT\", \"BGP-4-ATTRNULL\", \"BGP-4-BFD_NOT_ONEHOP\", \"BGP-4-BGP_RF_REG_FAILED\", \"BGP-4-INCORRECT_TTL\", \"BGP-4-ISSU_HOLDTIME\", \"BGP-4-MAXPFX\", \"BGP-4-MAX_EXTCOMM_EXCEED\", \"BGP-4-MSGDUMP\", \"BGP-4-NBRTRACK\", \"BGP-4-NORTRID\", \"BGP-4-RIDSYNC\", \"BGP-4-VPNV4NH_IF\", \"BGP-4-VPNV4NH_MASK\", \"BGP-5-ADJCHANGE:01\", \"BGP-5-ADJCHANGE\", \"BGP-5-BGP_MAX_MSG_LIMIT\", \"BGP-5-DAMPENING_LOW_MAX_PENALTY\", \"BGP-5-DAMP\", \"BGP-5-DAMPENING_DECAY_TIME\", \"BGP-5-DAMPENING_HIGH_MAX_PENALTY\", \"BGP-5-VERSION_WRAP\", \"BGP-6-ASPATH\", \"BGP-6-BIGCHUNK\", \"BGP-6-NEXTHOP\", \"BGP_MPLS-3-CHKPT_LBL_BIND_FAIL\", \"BGP_MPLS-3-GEN_ERROR\", \"BGP_MPLS-3-IPRMCONNECT\", \"BGP_MPLS-3-IPV4_AGGR_LABEL\", \"BGP_MPLS-3-LSDCONNECT\", \"BGP_MPLS-3-NBR_ROUTE\", \"BGP_MPLS-3-NSF_LBL_ALLOC_FAIL\", \"BGP_MPLS-3-PERVRF\", \"BGP_MPLS-3-PER_VRF_AGGR\", \"BGP_MPLS-3-SIZEMISMATCH\", \"BGP_MPLS-3-VPN_REWRITE\", \"BGP_MPLS-4-INV_IAS_LABEL\", \"BGP_MPLS-4-LABELALLOC\", \"BGP_MPLS-6-MPLS_INIT\", \"BGP_MPLS-7-IPv4LABELALLOC\", \"BGP_MPLS-7-VPNv4LABELALLOC\", \"BGP_SESSION-5-ADJCHANGE\", \"BGP-3-NOTIFICATION\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to see alerts about situations where a server can't generate Kerberos tickets due to missing encryption keys.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Microsoft-Windows-Kerberos-Key-Distribution-Center\" and action_evtlog_event_id in (16, 27))\n\n\n\n"}
{"prompt": "I want to detect potential malicious PowerShell activity by identifying scripts using suspicious keywords like those related to Assembly loading, reflection manipulation, and process control.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"System.Reflection.Assembly.Load($\" or ScriptBlockText contains \"[System.Reflection.Assembly]::Load($\" or ScriptBlockText contains \"[Reflection.Assembly]::Load($\" or ScriptBlockText contains \"System.Reflection.AssemblyName\" or ScriptBlockText contains \"Reflection.Emit.AssemblyBuilderAccess\" or ScriptBlockText contains \"Reflection.Emit.CustomAttributeBuilder\" or ScriptBlockText contains \"Runtime.InteropServices.UnmanagedType\" or ScriptBlockText contains \"Runtime.InteropServices.DllImportAttribute\" or ScriptBlockText contains \"SuspendThread\" or ScriptBlockText contains \"rundll32\")\n\n\n\n"}
{"prompt": "I want to see events related to PsExec Tool executions on endpoints, specifically those where the process image path contains \"PSEXESVC.exe\" and the process username includes either \"AUTHORI\" or \"AUTORI\".", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\PSEXESVC\\.exe\" and (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\"))\n\n\n\n"}
{"prompt": "I want to find instances where cmd.exe is launched by unusual parent processes like csrss.exe, ctfmon.exe, or dllhost.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\cmd\\.exe\" and (actor_process_image_path ~= \".*\\\\csrss\\.exe\" or actor_process_image_path ~= \".*\\\\ctfmon\\.exe\" or actor_process_image_path ~= \".*\\\\dllhost\\.exe\" or actor_process_image_path ~= \".*\\\\epad\\.exe\" or actor_process_image_path ~= \".*\\\\FlashPlayerUpdateService\\.exe\" or actor_process_image_path ~= \".*\\\\GoogleUpdate\\.exe\" or actor_process_image_path ~= \".*\\\\jucheck\\.exe\" or actor_process_image_path ~= \".*\\\\jusched\\.exe\" or actor_process_image_path ~= \".*\\\\LogonUI\\.exe\" or actor_process_image_path ~= \".*\\\\lsass\\.exe\" or actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_image_path ~= \".*\\\\SearchIndexer\\.exe\" or actor_process_image_path ~= \".*\\\\SearchProtocolHost\\.exe\" or actor_process_image_path ~= \".*\\\\SIHClient\\.exe\" or actor_process_image_path ~= \".*\\\\sihost\\.exe\" or actor_process_image_path ~= \".*\\\\slui\\.exe\" or actor_process_image_path ~= \".*\\\\spoolsv\\.exe\" or actor_process_image_path ~= \".*\\\\sppsvc\\.exe\" or actor_process_image_path ~= \".*\\\\taskhostw\\.exe\" or actor_process_image_path ~= \".*\\\\unsecapp\\.exe\" or actor_process_image_path ~= \".*\\\\WerFault\\.exe\" or actor_process_image_path ~= \".*\\\\wermgr\\.exe\" or actor_process_image_path ~= \".*\\\\wlanext\\.exe\" or actor_process_image_path ~= \".*\\\\WUDFHost\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances where a tool accesses LSASS memory and has \"dump\" in its name, specifically checking for various access permissions.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and SourceImage contains \"dump\" and (GrantedAccess ~= \".*10\" or GrantedAccess ~= \".*30\" or GrantedAccess ~= \".*50\" or GrantedAccess ~= \".*70\" or GrantedAccess ~= \".*90\" or GrantedAccess ~= \".*B0\" or GrantedAccess ~= \".*D0\" or GrantedAccess ~= \".*F0\" or GrantedAccess ~= \".*18\" or GrantedAccess ~= \".*38\" or GrantedAccess ~= \".*58\" or GrantedAccess ~= \".*78\" or GrantedAccess ~= \".*98\" or GrantedAccess ~= \".*B8\" or GrantedAccess ~= \".*D8\" or GrantedAccess ~= \".*F8\" or GrantedAccess ~= \".*1A\" or GrantedAccess ~= \".*3A\" or GrantedAccess ~= \".*5A\" or GrantedAccess ~= \".*7A\" or GrantedAccess ~= \".*9A\" or GrantedAccess ~= \".*BA\" or GrantedAccess ~= \".*DA\" or GrantedAccess ~= \".*FA\" or GrantedAccess ~= \".*0x14C2\" or GrantedAccess ~= \".*FF\"))\n\n\n\n"}
{"prompt": "I want to find events related to potential malicious use of `cat`, `grep`, `head`, `tail`, or `more` commands when interacting with `/etc/sudoers` on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/cat\" or action_process_image_path ~= \".*grep\" or action_process_image_path ~= \".*\\/head\" or action_process_image_path ~= \".*\\/tail\" or action_process_image_path ~= \".*\\/more\") and action_process_image_command_line contains \" /etc/sudoers\")\n\n\n\n"}
{"prompt": "I want to find events related to bash interactive shells being created on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/bash\" and action_process_image_command_line contains \" -i \")\n\n\n\n"}
{"prompt": "I want to find potential persistence threats on my endpoints that involve logon scripts using UserInitMprLogonScript in their command line.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"UserInitMprLogonScript\"\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to querying GPOs using the \"Get-GPO\" command on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Get-GPO\"\n\n\n\n"}
{"prompt": "I want to find out which AWS users created policy versions that grant access to all resources in their accounts.", "response": "dataset = amazon_aws_raw\n| alter policy_document = request_parameters -> policyDocument\n| alter key_policy_statements = policy_document -> Statement []\n| arrayexpand key_policy_statements\n| alter key_policy_action_1 = key_policy_statements -> Action\n| filter key_policy_action_1 = \"*\"\n| comp count(),\nmin(_time) AS firstTime,\nmax(_time) AS lastTime,\nvalues(key_policy_statements) AS policy_added by event_name,\nevent_source,\nrecipient_account_id,\nerror_code,\nuser_agent,\nevent_id,\naws_region,\nuser_identity,\nuser_identity_arn\n"}
{"prompt": "I want to see information about processes on endpoints that are gathering system information like uptime, hostname, CPU details, and hardware specs.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/uname\" or action_process_image_path ~= \".*\\/hostname\" or action_process_image_path ~= \".*\\/uptime\" or action_process_image_path ~= \".*\\/lspci\" or action_process_image_path ~= \".*\\/dmidecode\" or action_process_image_path ~= \".*\\/lscpu\" or action_process_image_path ~= \".*\\/lsmod\")\n\n\n\n"}
{"prompt": "I want to detect Fortinet exploit kit activity based on events from Cisco ASA and Fortigate devices.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw)\n"}
{"prompt": "I want to find URLs accessed on my IIS web server that are not restricted.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| join type = left\n(dataset = device_group_static_list\n| filter TYPE ~= \"microsoft iis\"\n| fields IP\n) as device_group device_group.IP = xdm.target.ipv4\n| filter IP != null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.network.http.url ~= \"admin\\.php\"\n| filter xdm.target.ipv4 not in (\"<ip>\") and xdm.source.ipv4 not in (\"<ip>\")\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect instances where Lolbin Ssh.exe is being used as a proxy server.", "response": "preset = xdr_process\n| filter actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\OpenSSH\\\\sshd.exe\" or (action_process_image_path ~= \".*\\\\ssh\\.exe\" and (action_process_image_command_line contains \"ProxyCommand=\" or (action_process_image_command_line contains \"PermitLocalCommand\" and action_process_image_command_line contains \"LocalCommand\")))\n\n\n\n"}
{"prompt": "I want to see events where CobaltStrike is being loaded using Rundll32.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\" or (action_process_image_command_line contains \"rundll32.exe\" or action_process_image_command_line contains \"rundll32 \")) and (action_process_image_command_line contains \".dll\" and (action_process_image_command_line ~= \".*\\ StartW\" or action_process_image_command_line ~= \".*\\,StartW\")))\n\n\n\n"}
{"prompt": "I want to see all instances where users with names \"admin\", \"administrator\", or \"root\" are accessing Azure resources.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| filter username IN (\"admin\", \"administrator\", \"root\")\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about accounts where an SID History was added, indicating potential privilege escalation attacks.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4765\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name,\ntarget_domain\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where a security group is created by an enterprise domain administrator on Windows systems, and investigate any potential privilege concerns associated with the newly created group.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4731\", \"4727\", \"4754\", \"4764\")\n| alter target_username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| join type = left\n(dataset = enterprise_admin_list\n| filter admin_type = \"domain_admin_win_admin\"\n| alter enterprise_username = if(username ~= \"@ad.infosys.com\", rtrim(username, \"@ad.infosys.com\"), if(username ~= \"@infosys.com\", rtrim(username, \"@infosys.com\"), if(username ~= \"itlinfosys\", ltrim(username, \"itlinfosys\\\\\"), username)))\n) as enterprise_admin enterprise_admin.enterprise_username = target_username\n| filter enterprise_username != null\n\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect suspicious executions of PsExec by looking for processes named \"psexesvc.exe\" that aren't located in their expected directory.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"psexesvc.exe\" and  not (action_process_image_path = \"C:\\\\Windows\\\\PSEXESVC.exe\")\n\n\n\n"}
{"prompt": "I want to detect suspicious command patterns used when creating scheduled tasks on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\schtasks\\.exe\" and action_process_image_command_line contains \"/Create \") and (((action_process_image_command_line contains \"/sc minute \" or action_process_image_command_line contains \"/ru system \") and (action_process_image_command_line contains \"cmd /c\" or action_process_image_command_line contains \"cmd /k\" or action_process_image_command_line contains \"cmd /r\" or action_process_image_command_line contains \"cmd.exe /c \" or action_process_image_command_line contains \"cmd.exe /k \" or action_process_image_command_line contains \"cmd.exe /r \")) or (action_process_image_command_line contains \" -decode \" or action_process_image_command_line contains \" -enc \" or action_process_image_command_line contains \" -w hidden \" or action_process_image_command_line contains \" bypass \" or action_process_image_command_line contains \" IEX\" or action_process_image_command_line contains \".DownloadData\" or action_process_image_command_line contains \".DownloadFile\" or action_process_image_command_line contains \".DownloadString\" or action_process_image_command_line contains \"/c start /min \" or action_process_image_command_line contains \"FromBase64String\" or action_process_image_command_line contains \"mshta http\" or action_process_image_command_line contains \"mshta.exe http\") or ((action_process_image_command_line ~= \".*\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Tmp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\.*\" or action_process_image_command_line contains \"%AppData%\" or action_process_image_command_line contains \"%Temp%\" or action_process_image_command_line contains \"%tmp%\") and (action_process_image_command_line contains \"cscript\" or action_process_image_command_line contains \"curl\" or action_process_image_command_line contains \"wscript\")))\n\n\n\n"}
{"prompt": "I want to see alerts related to processes using rundll32.exe to dump memory via comsvcs.dll.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\" or action_process_image_command_line contains \"rundll32\") and (((action_process_image_command_line contains \"comsvcs\" and action_process_image_command_line contains \"full\") and (action_process_image_command_line contains \"#-\" or action_process_image_command_line contains \"#+\" or action_process_image_command_line contains \"#24\" or action_process_image_command_line contains \"24 \" or action_process_image_command_line contains \"MiniDump\")))) or ((action_process_image_command_line contains \"24\" and action_process_image_command_line contains \"comsvcs\" and action_process_image_command_line contains \"full\") and (action_process_image_command_line contains \" #\" or action_process_image_command_line contains \",#\" or action_process_image_command_line contains \", #\"))\n\n\n\n"}
{"prompt": "I want to detect inbound traffic allowed towards risky ports like 3389, 21, 22, and 23 from external IPs to internal zones.", "response": "config case_sensitive = false\n| datamodel dataset = check_point_vpn_1_firewall_1_raw\n| filter xdm.target.port in (3389, 21, 22, 23) and xdm.source.ipv4 !~= \"(10\\.[0-9]{1,3}|172\\.(1[6-9]|2[0-9]|3[01])|192\\.168)\\.[0-9]{1,3}\\.[0-9]{1,3}\" and xdm.source.ipv4 not in (\"<ip>\") and xdm.observer.action = \"accept\"\n| filter xdm.target.zone in (\"Internal\") and xdm.target.is_internal_ip = true\n| alter aggregation_criteria = \"ilsourceip\",\nalertaggregation1 = \"ildestinationport\",\norigin = check_point_vpn_1_firewall_1_raw.origin,\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for suspicious executions of sc.exe that delete antivirus services on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sc\\.exe\" or actor_process_file_original_name = \"sc.exe\") and action_process_image_command_line contains \" delete \" and (action_process_image_command_line contains \"AvgAdminServer\" or action_process_image_command_line contains \"AVG Antivirus\" or action_process_image_command_line contains \"MBEndpointAgent\" or action_process_image_command_line contains \"MBAMService\" or action_process_image_command_line contains \"MBCloudEA\" or action_process_image_command_line contains \"avgAdminClient\" or action_process_image_command_line contains \"SAVService\" or action_process_image_command_line contains \"SAVAdminService\" or action_process_image_command_line contains \"Sophos AutoUpdate Service\" or action_process_image_command_line contains \"Sophos Clean Service\" or action_process_image_command_line contains \"Sophos Device Control Service\" or action_process_image_command_line contains \"Sophos File Scanner Service\" or action_process_image_command_line contains \"Sophos Health Service\" or action_process_image_command_line contains \"Sophos MCS Agent\" or action_process_image_command_line contains \"Sophos MCS Client\" or action_process_image_command_line contains \"SntpService\" or action_process_image_command_line contains \"swc_service\" or action_process_image_command_line contains \"swi_service\" or action_process_image_command_line contains \"Sophos UI\" or action_process_image_command_line contains \"swi_update\" or action_process_image_command_line contains \"Sophos Web Control Service\" or action_process_image_command_line contains \"Sophos System Protection Service\" or action_process_image_command_line contains \"Sophos Safestore Service\" or action_process_image_command_line contains \"hmpalertsvc\" or action_process_image_command_line contains \"RpcEptMapper\" or action_process_image_command_line contains \"Sophos Endpoint Defense Service\" or action_process_image_command_line contains \"SophosFIM\" or action_process_image_command_line contains \"swi_filter\" or action_process_image_command_line contains \"FirebirdGuardianDefaultInstance\" or action_process_image_command_line contains \"FirebirdServerDefaultInstance\" or action_process_image_command_line contains \"WRSVC\" or action_process_image_command_line contains \"ekrn\" or action_process_image_command_line contains \"ekrnEpsw\" or action_process_image_command_line contains \"klim6\" or action_process_image_command_line contains \"AVP18.0.0\" or action_process_image_command_line contains \"KLIF\" or action_process_image_command_line contains \"klpd\" or action_process_image_command_line contains \"klflt\" or action_process_image_command_line contains \"klbackupdisk\" or action_process_image_command_line contains \"klbackupflt\" or action_process_image_command_line contains \"klkbdflt\" or action_process_image_command_line contains \"klmouflt\" or action_process_image_command_line contains \"klhk\" or action_process_image_command_line contains \"KSDE1.0.0\" or action_process_image_command_line contains \"kltap\" or action_process_image_command_line contains \"ScSecSvc\" or action_process_image_command_line contains \"Core Mail Protection\" or action_process_image_command_line contains \"Core Scanning Server\" or action_process_image_command_line contains \"Core Scanning ServerEx\" or action_process_image_command_line contains \"Online Protection System\" or action_process_image_command_line contains \"RepairService\" or action_process_image_command_line contains \"Core Browsing Protection\" or action_process_image_command_line contains \"Quick Update Service\" or action_process_image_command_line contains \"McAfeeFramework\" or action_process_image_command_line contains \"macmnsvc\" or action_process_image_command_line contains \"masvc\" or action_process_image_command_line contains \"mfemms\" or action_process_image_command_line contains \"mfevtp\" or action_process_image_command_line contains \"TmFilter\" or action_process_image_command_line contains \"TMLWCSService\" or action_process_image_command_line contains \"tmusa\" or action_process_image_command_line contains \"TmPreFilter\" or action_process_image_command_line contains \"TMSmartRelayService\" or action_process_image_command_line contains \"TMiCRCScanService\" or action_process_image_command_line contains \"VSApiNt\" or action_process_image_command_line contains \"TmCCSF\" or action_process_image_command_line contains \"tmlisten\" or action_process_image_command_line contains \"TmProxy\" or action_process_image_command_line contains \"ntrtscan\" or action_process_image_command_line contains \"ofcservice\" or action_process_image_command_line contains \"TmPfw\" or action_process_image_command_line contains \"PccNTUpd\" or action_process_image_command_line contains \"PandaAetherAgent\" or action_process_image_command_line contains \"PSUAService\" or action_process_image_command_line contains \"NanoServiceMain\" or action_process_image_command_line contains \"EPIntegrationService\" or action_process_image_command_line contains \"EPProtectedService\" or action_process_image_command_line contains \"EPRedline\" or action_process_image_command_line contains \"EPSecurityService\" or action_process_image_command_line contains \"EPUpdateService\"))\n\n\n\n"}
{"prompt": "I want to see any evidence of PsExec or similar tools being used on endpoints based on pipe names.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter (PipeName ~= \"psexec.*\" or PipeName ~= \"paexec.*\" or PipeName ~= \"remcom.*\" or PipeName ~= \"csexec.*\")\n\n\n\n"}
{"prompt": "I want to see who is making changes to firewall rules on Azure SQL servers and MySQL servers, including the protocol used.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.sql/servers/firewallrules/write\", \"microsoft.dbformysql/servers/firewallrules/write\", \"microsoft.network/azurefirewalls/write\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect attempts by the \"ProcessHacker\" application to elevate privileges on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| alter AccountName = regextract(to_json_string(action_evtlog_data_fields)->AccountName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and ServiceName ~= \"ProcessHacker.*\" and AccountName = \"LocalSystem\")\n\n\n\n"}
{"prompt": "I want to see alerts for when new DLLs are registered using odbcconf.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\odbcconf\\.exe\" or actor_process_file_original_name = \"odbcconf.exe\") and (action_process_image_command_line contains \"REGSVR \" and action_process_image_command_line contains \".dll\"))\n\n\n\n"}
{"prompt": "I want to find unusual ping activity from external IP addresses that aren't on our approved lists and haven't been recently scanned by IISVAS.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"PROTOCOL-ICMP PING|PROTOCOL-ICMP Unusual PING detected\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name !~= \"qualys\"\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.ipv4,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to detect if suspicious processes like curl.exe or KeyScramblerLogon are used to create Autoit3.exe.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\Autoit3\\.exe\" or xdm.target.process.name ~= \".*\\\\curl\\.exe\" or xdm.target.process.name ~= \".*\\\\ExtExport\\.exe\" or xdm.target.process.name ~= \".*\\\\KeyScramblerLogon\\.exe\" or xdm.target.process.name ~= \".*\\\\wmprph\\.exe\") or (xdm.source.process.name ~= \".*\\\\Autoit3\\.exe\" or xdm.source.process.name ~= \".*\\\\curl\\.exe\" or xdm.source.process.name ~= \".*\\\\ExtExport\\.exe\" or xdm.source.process.name ~= \".*\\\\KeyScramblerLogon\\.exe\" or xdm.source.process.name ~= \".*\\\\wmprph\\.exe\")) and xdm.target.file.filename ~= \".*\\\\Autoit3\\.exe\")\n\n\n\n"}
{"prompt": "I want to see instances of potential Oracle WebLogic CVE-2021-2109 exploits where HTTP GET requests target URLs containing \"com.bea.console.handles.JndiBindingHandle\", \"ldap://\", and \"AdminServer\".", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and (xdm.network.http.url contains \"com.bea.console.handles.JndiBindingHandle\" and xdm.network.http.url contains \"ldap:\n\n\n\n"}
{"prompt": "I want to see all instances of password reset activity performed by non-admin users across our Windows systems, including details about who initiated the reset and on which device it occurred.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4724\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"SOX winevent_nic\", \"Non-SOX winevent_nic\", \"TFS Windows Servers\", \"azure_isweb_windows\", \"ph2_windows_servers\", \"azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"AWS_AD\", \"AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"cloud_windows\", \"Intranet\", \"Azure\", \"Azure_Cloud\", \"Azure_web\", \"DMZ_web\", \"intranet_isweb\")\n| filter xdm.target.user.username NOT IN (\"CLIUSR\") and xdm.source.user.username NOT IN (\"<usermame>\")\n| filter xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.target.user.username != NULL and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username != NULL\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious instances of the \"wusa.exe\" process being run by parents located in unusual directories.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\wusa\\.exe\" and ((actor_process_image_path ~= \".*\\:\\\\Perflogs\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or actor_process_image_path ~= \".*\\\\Appdata\\\\Local\\\\Temp\\\\.*\" or actor_process_image_path contains \"\\\\Temporary Internet\") or ((actor_process_image_path ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_path ~= \".*\\\\Favorites\\\\.*\") or (actor_process_image_path ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_path ~= \".*\\\\Favourites\\\\.*\") or (actor_process_image_path ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_path ~= \".*\\\\Contacts\\\\.*\") or (actor_process_image_path ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_path ~= \".*\\\\Pictures\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious executions of xp_cmdshell within MSSQL databases.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"MSSQLSERVER\" and action_evtlog_event_id = 33205 and (Data contains \"object_name:xp_cmdshell\" and Data contains \"statement:EXEC\"))\n\n\n\n"}
{"prompt": "I want to detect activity related to OceanLotus malware by looking for specific registry key modifications.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\SOFTWARE\\\\Classes\\\\CLSID\\\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\\\Model\" or (action_registry_key_name ~= \".*Classes\\\\AppXc52346ec40fb4061ad96be0e6cb7d16a\\\\.*\" or action_registry_key_name ~= \".*Classes\\\\AppX3bbba44c6cae4d9695755183472171e2\\\\.*\" or action_registry_key_name ~= \".*Classes\\\\CLSID\\\\\\{E3517E26\\-8E93\\-458D\\-A6DF\\-8030BC80528B\\}\\\\.*\" or action_registry_key_name contains \"Classes\\\\CLSID\\\\{E08A0F4B-1F65-4D4D-9A09-BD4625B9C5A1}\\\\Model\") or (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\App\\\\.*\" and ((action_registry_key_name ~= \".*AppXbf13d4ea2945444d8b13e2121cb6b663\\\\.*\" or action_registry_key_name ~= \".*AppX70162486c7554f7f80f481985d67586d\\\\.*\" or action_registry_key_name ~= \".*AppX37cc7fdccd644b4f85f4b22d5a3f105a\\\\.*\") and (action_registry_key_name ~= \".*Application\" or action_registry_key_name ~= \".*DefaultIcon\")))\n\n\n\n"}
{"prompt": "I want to see alerts about changes made to Azure Firewall rule configurations, including modifications and deletions.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.NETWORK/FIREWALLPOLICIES/RULECOLLECTIONGROUPS/WRITE\", \"MICROSOFT.NETWORK/FIREWALLPOLICIES/RULECOLLECTIONGROUPS/DELETE\", \"MICROSOFT.NETWORK/FIREWALLPOLICIES/RULEGROUPS/WRITE\", \"MICROSOFT.NETWORK/FIREWALLPOLICIES/RULEGROUPS/DELETE\")\n\n\n\n"}
{"prompt": "I want to find the most frequently observed domains used in phishing emails from Trend Micro Email Security data where the sender domain is extracted and matched against the recipient domain.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter headerTo != null and headerFrom != null and eventType in (\"Phishing\")\n| alter headerTo_array = headerTo -> []\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\")\n| filter messageID ~= \"smtp\"\n| alter sender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0)\n| comp count() as total_events,\nvalues(sender_domain) as sender_domain by eventType\n| arrayexpand sender_domain\n| join type = left\n(dataset = trend_micro_email_security_raw\n| filter headerTo != null and headerFrom != null and eventType in (\"Phishing\")\n| alter headerTo_array = headerTo -> []\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\")\n| filter messageID ~= \"smtp\"\n| alter sender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0)\n| comp count() as matched_events,\nvalues(headerFrom) as headerFrom,\nvalues(headerTo_string) as headerTo_string by sender_domain,\neventType\n) as domainevents domainevents.sender_domain = sender_domain and domainevents.eventType = eventType\n| alter domain_obser_stats = round(multiply(divide(matched_events, total_events), 100))\n| filter domain_obser_stats >= 40"}
{"prompt": "I want to see events where a shell script is executed from the /tmp directory.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/bash\" or action_process_image_path ~= \".*\\/csh\" or action_process_image_path ~= \".*\\/dash\" or action_process_image_path ~= \".*\\/fish\" or action_process_image_path ~= \".*\\/ksh\" or action_process_image_path ~= \".*\\/sh\" or action_process_image_path ~= \".*\\/zsh\") and action_process_image_command_line contains \" -c \" and action_process_image_command_line contains \"/tmp/\")\n\n\n\n"}
{"prompt": "I want to see all instances of files being created on admin shares via SMB with write access, excluding system accounts.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName ~= \".*C\\$\" and AccessMask = \"0x2\") and  not (SubjectUserName ~= \".*\\$\")\n\n\n\n"}
{"prompt": "I want to detect high and medium severity alerts from Azure Active Directory Identity Protection that haven't been resolved yet. I also want to see the usernames and source IPs associated with these alerts.", "response": "dataset in (microsoft_graph_generic_alert_raw, msft_graph_security_alerts_raw)\n| filter detectionSource = \"azureAdIdentityProtection\" and severity in (\"high\", \"medium\") and status != \"resolved\"\n| alter username = json_extract_scalar(evidence, \"$.0.userAccount.userPrincipalName\"),\nsourceip = json_extract_scalar(evidence, \"$.1.ipAddress\")\n| dedup id\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see if anyone is using the \"jamf\" binary to create accounts, manage profiles, or make changes on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/jamf\" and (action_process_image_command_line contains \"createAccount\" or action_process_image_command_line contains \"manage\" or action_process_image_command_line contains \"removeFramework\" or action_process_image_command_line contains \"removeMdmProfile\" or action_process_image_command_line contains \"resetPassword\" or action_process_image_command_line contains \"setComputerName\"))\n\n\n\n"}
{"prompt": "{I want to see alerts about accounts where SID History was added, showing details like the username, computer name, and any error codes.} \n\n\nLet me know if you need help with any other parts of this prompt!", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4765\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ibpmeventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to changes made to Azure domain federation settings.", "response": "dataset = msft_azure_raw\n| alter properties_activityDisplayName = json_extract_scalar(properties , \"$.activityDisplayName\")\n| filter properties.activityDisplayName = \"Set federation settings on domain\"\n\n\n\n"}
{"prompt": "I want to detect processes that might be enumerating credentials from third-party applications.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\Software\\\\SimonTatham\\\\PuTTY\\\\Sessions\" or action_process_image_command_line ~= \".*\\\\Software\\\\SimonTatham\\\\PuTTY\\\\SshHostKeys\\\\.*\" or action_process_image_command_line ~= \".*\\\\Software\\\\Mobatek\\\\MobaXterm\\\\.*\" or action_process_image_command_line contains \"\\\\Software\\\\WOW6432Node\\\\Radmin\\\\v3.0\\\\Server\\\\Parameters\\\\Radmin\" or action_process_image_command_line contains \"\\\\Software\\\\Aerofox\\\\FoxmailPreview\" or action_process_image_command_line contains \"\\\\Software\\\\Aerofox\\\\Foxmail\\\\V3.1\" or action_process_image_command_line contains \"\\\\Software\\\\IncrediMail\\\\Identities\" or action_process_image_command_line contains \"\\\\Software\\\\Qualcomm\\\\Eudora\\\\CommandLine\" or action_process_image_command_line contains \"\\\\Software\\\\RimArts\\\\B2\\\\Settings\" or action_process_image_command_line contains \"\\\\Software\\\\OpenVPN-GUI\\\\configs\" or action_process_image_command_line contains \"\\\\Software\\\\Martin Prikryl\\\\WinSCP 2\\\\Sessions\" or action_process_image_command_line contains \"\\\\Software\\\\FTPWare\\\\COREFTP\\\\Sites\" or action_process_image_command_line contains \"\\\\Software\\\\DownloadManager\\\\Passwords\" or action_process_image_command_line contains \"\\\\Software\\\\OpenSSH\\\\Agent\\\\Keys\" or action_process_image_command_line contains \"\\\\Software\\\\TightVNC\\\\Server\" or action_process_image_command_line contains \"\\\\Software\\\\ORL\\\\WinVNC3\\\\Password\" or action_process_image_command_line contains \"\\\\Software\\\\RealVNC\\\\WinVNC4\")\n\n\n\n"}
{"prompt": "I want to see alerts about changes to system audit policies on Windows machines.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4719\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to see information about AWS \"StopAccessLogging\" events from Amazon AWS.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| alter arn = message -> userIdentity.arn,\neventName = message -> eventName,\nsourceIPAddress = message -> sourceIPAddress,\nprincipalId = message -> userIdentity.principalId,\naccountId = message -> userIdentity.accountId,\ncreationDate = message -> userIdentity.sessionContext.attributes.creationDate,\neventTime = message -> eventTime\n| filter eventName = \"StopAccessLogging\"\n| fields _vendor, _product, eventTime, eventName, arn,\nsourceIPAddress, accountId, principalId"}
{"prompt": "I want to see if any EFS Fileshares have been deleted or modified recently.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"elasticfilesystem.amazonaws.com\" and eventName = \"DeleteFileSystem\")\n\n\n\n"}
{"prompt": "I want to find instances where an attacker tries to dump credentials using WerFault against lsass.exe", "response": "preset = xdr_event_log\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| filter (SourceImage ~= \".*\\\\WerFault\\.exe\" and TargetImage ~= \".*\\\\lsass\\.exe\" and GrantedAccess = \"0x1FFFFF\")\n\n\n\n"}
{"prompt": "I want to detect instances where ProcDump is being executed with its name potentially changed or disguised.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name = \"procdump\" or ((action_process_image_command_line contains \" -ma \" or action_process_image_command_line contains \" /ma \") and (action_process_image_command_line contains \" -accepteula \" or action_process_image_command_line contains \" /accepteula \"))) and  not ((action_process_image_path ~= \".*\\\\procdump\\.exe\" or action_process_image_path ~= \".*\\\\procdump64\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see any instances where reg.exe was used to add a folder exclusion to Windows Defender via the registry.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\reg\\.exe\" and (action_process_image_command_line contains \"SOFTWARE\\\\Microsoft\\\\Windows Defender\\\\Exclusions\\\\Paths\" or action_process_image_command_line contains \"SOFTWARE\\\\Microsoft\\\\Microsoft Antimalware\\\\Exclusions\\\\Paths\") and (action_process_image_command_line contains \"ADD \" and action_process_image_command_line contains \"/t \" and action_process_image_command_line contains \"REG_DWORD \" and action_process_image_command_line contains \"/v \" and action_process_image_command_line contains \"/d \" and action_process_image_command_line contains \"0\"))\n\n\n\n"}
{"prompt": "I want to see Duo successful authentication events from non-EU countries that originated from IPs not in our whitelist.", "response": "config case_sensitive = false\n| dataset = duo_duo_raw\n| filter host = \"api-c7e21466.duosecurity.com\"\n| filter email != NULL\n| filter result in (\"success\") and eventtype in (\"authentication\")\n| alter DuoUserName = json_extract(user, \"$.name\"),\nIPAddress = json_extract_scalar(access_device, \"$.ip\"),\nDeviceTrustLevel = json_extract(adaptive_trust_assessments, \"$.remember_me.trust_level\")\n| alter AccDevLocationCN = json_extract_scalar(access_device, \"$.location.country\"),\nAccDevLocationST = json_extract(access_device, \"$.location.state\"),\nAccDevLocationCY = json_extract(access_device, \"$.location.city\"),\nAccDevOS = json_extract(access_device, \"$.os\"),\nAccDevOSVer = json_extract(access_device, \"$.os_version\"),\nAccDevBrowser = json_extract(access_device, \"$.browser\"),\nAccDevBrowserVer = json_extract(access_device, \"$.browser_version\"),\nIntegration = json_extract_scalar(application, \"$.name\")\n| alter AccDevLocationCN = replace(AccDevLocationCN, \"\\\"\", \"\"),\nIPAddress = replace(IPAddress, \"\\\"\", \"\"),\nPhoneNumber = auth_device -> name\n| filter incidr(IPAddress, \"221.120.107.0/24\") = False\n| filter (not incidr(IPAddress, \"8.39.144.0/24\") and not incidr(IPAddress, \"8.36.116.0/24\") and not incidr(IPAddress, \"31.186.239.0/24\") and not incidr(IPAddress, \"74.217.93.0/24\") and not incidr(IPAddress, \"103.219.79.0/24\") and not incidr(IPAddress, \"163.116.128.0/17\") and not incidr(IPAddress, \"173.38.0.0/16\") and not incidr(IPAddress, \"192.118.0.0/16\") and not incidr(IPAddress, \"165.225.94.0/24\") and not incidr(IPAddress, \"165.225.201.0/24\") and not incidr(IPAddress, \"163.116.0.0/16\") and not incidr(IPAddress, \"147.161.237.0/24\") and not incidr(IPAddress, \"147.161.251.0/24\") and not incidr(IPAddress, \"147.161.250.0/23\") and not incidr(IPAddress, \"147.161.130.0/23\") and not incidr(IPAddress, \"147.161.131.0/23\") and not incidr(IPAddress, \"165.225.200.0/23\")) and (IPAddress not in (\"221.120.107.30\", \"213.41.57.78\"))\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false\n| alter Private_IP_Segment_192 = incidr(IPAddress, \"192.168.0.0/16\"),\nPrivate_IP_Segment_10 = incidr(IPAddress, \"10.0.0.0/8\"),\nPrivate_IP_Segment_172 = incidr(IPAddress, \"172.16.0.0/12\")\n| filter IPAddress not contains \"0.0.0.0\"\n| alter DuoUserName = replace(DuoUserName, \"\\\"\", \"\")\n| filter AccDevLocationCN not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\")\n| alter CorrelationAlertName = \"CNX_EU_PROD DUO Successful Authentication from Non-business Country\"\n| filter (AccDevLocationCN != NULL)\n| fields DuoUserName, IPAddress, email, reason, result,\neventtype, AccDevLocationCN, AccDevLocationST, AccDevLocationCY,\nAccDevBrowser, AccDevBrowserVer, AccDevOS, AccDevOSVer,\nIntegration, access_device, *"}
{"prompt": "I want to see events related to workstations being locked.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 4800\n\n\n\n"}
{"prompt": "I want to see Firewall logs for blocked connections where either the source or target IP matches a list of malicious IPs provided by Facebook.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter xdm.observer.action in (\"blocked\", \"deny\")\n| join\n(dataset = cv_fb_mz_iocs\n| filter ioc_description in (\"FB_Malicious_IPAddress\") and ioc_type in (\"ipv4\")\n) as ioclookup ioclookup.ioc_value = xdm.source.ipv4\n| filter ioc_value = xdm.target.ipv4 or ioc_value = xdm.source.ipv4"}
{"prompt": "I want to find instances where the Wuauclt.exe process is running without any command line arguments.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\Wuauclt\\.exe\" or actor_process_file_original_name = \"Wuauclt.exe\") and (action_process_image_command_line ~= \".*Wuauclt\" or action_process_image_command_line ~= \".*Wuauclt\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see which admin users are experiencing more than 7 authentication failures on Unix servers within the last hour.", "response": "datamodel dataset = linux_linux_raw\n| bin _time span = 1m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"RSD-Unix-servers\", \"sdam_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| alter xdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), xdm.source.user.username),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.event.type = \"sshd\" and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.source.user.username not in (NULL, \"<user>\") and xdm.source.ipv4 not in (\"<ip>\")\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name, security_groups\n| filter security_groups contains \"UNIX_Group_R1\" or security_groups contains \"UNIX_Group_R2\"\n) as ad_users ad_users.sam_account_name = xdm.source.user.username\n| filter sam_account_name != null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp count() as matched_events,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 7\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about suspicious child processes spawned by WmiPrvSE that use potentially malicious tools like certutil, cscript, mshta, msiexec, regsvr32, rundll32, verclsid, or wscript.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\wbem\\\\WmiPrvSE\\.exe\" and ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\msiexec\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\verclsid\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or (action_process_image_path ~= \".*\\\\cmd\\.exe\" and (action_process_image_command_line contains \"cscript\" or action_process_image_command_line contains \"mshta\" or action_process_image_command_line contains \"powershell\" or action_process_image_command_line contains \"pwsh\" or action_process_image_command_line contains \"regsvr32\" or action_process_image_command_line contains \"rundll32\" or action_process_image_command_line contains \"wscript\"))) and  not (action_process_image_path ~= \".*\\\\WerFault\\.exe\" or action_process_image_path ~= \".*\\\\WmiPrvSE\\.exe\" or (action_process_image_path ~= \".*\\\\msiexec\\.exe\" and action_process_image_command_line contains \"/i \"))\n\n\n\n"}
{"prompt": "I want to see events related to new user profile creations in AWS, including details like the username, source IP address, and type of action.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name = \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventname IN (\"CreateLoginProfile\")\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"illogonsessionid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find users who have accessed more than five SymantecWSS SCAM category URLs based on behavioral study data.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and category ~= \"Scam/Questionable Legality\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see alerts about administrative users clearing audit logs on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| alter target_username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| filter xdm.event.id = \"1102\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset in (enterprise_admin_list)\n| filter admin_type in (\"domain_admin_win_admin\")\n) as ent_admin_dst ent_admin_dst.username = target_username\n| filter username = null\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps(wingrps.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or wingrps.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE in (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to detect instances of threat actors using MODE.COM to modify code pages on endpoints. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\mode\\.com\" or actor_process_file_original_name = \"MODE.COM\") and (action_process_image_command_line contains \" con \" and action_process_image_command_line contains \" cp \" and action_process_image_command_line contains \" select=\"))\n\n\n\n"}
{"prompt": "I want to see how many failed remote login attempts there have been on Unix servers within the last 5 minutes, grouped by username and timestamp.", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| bin _time span = 5m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"edgeverve_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type in (\"sshd\", \"sudo\", \"su\") and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol = \"ssh2\" and xdm.source.user.username not in (NULL, \"autoid\", \"migbrac\", \"crm_appscan\", \"finacle_appscan\", \"enterprisedb\", \"gs1adm\", \"ftadm\", \"qantasadm\", \"crmadmin\", \"jtrstadm\", \"bciadm\", \"feadm\", \"ING11ADM\", \"iobadm\", \"gstatsadm\", \"bmmig\", \"eqcuadm\", \"dopadm\", \"ebbpadm2\", \"ora12102\", \"ora12101', 'fedadm\", \"INGADM\", \"medadm\", \"medadm1\", \"fnimsadm\", \"ora11g\", \"ubsadm\", \"quantasadm\", \"ingadmin\", \"devops\", \"jtbadm\", \"qntsadm\", \"fbmigadm\", \"fbmigadm\", \"eximadm\", \"kotadm\", \"dfsdev1\", \"sonaradm\", \"abreladm\", \"qudoseb\", \"wasadm\", \"ntbadm\", \"ubmigadm\", \"tstsp\", \"scmod03\", \"trgadm\", \"fecbdadm\", \"frel1adm\", \"_pamsdam\", \"_pamunix\", \"finadm\", \"git\") and xdm.source.ipv4 not in (\"10.181.11.142\", \"10.156.118.117\", \"10.82.136.11\", \"10.10.100.68\", \"10.122.128.21\", \"10.152.163.42\", \"172.18.20.31\", \"172.18.38.149\", \"10.182.11.41\", \"172.18.1.25\", \"10.67.122.149\", \"10.219.7.67\", \"10.95.9.148\", \"10.118.132.98\", \"172.27.104.10\", \"10.122.128.20\", \"10.219.7.68\", \"10.139.38.106\", \"172.18.22.85\", \"10.67.122.151\", \"10.185.122.10\", \"10.76.63.68\", \"10.205.11.115\", \"10.67.122.150\", \"10.158.100.43\", \"10.82.136.10\", \"10.85.174.246\", \"10.78.172.244\", \"172.18.22.176\", \"10.204.11.97\", \"10.87.22.109\", \"10.67.122.148\", \"10.156.118.116\", \"172.18.43.37\", \"10.82.136.12\", \"10.139.38.107\") and xdm.target.host.hostname != \"bl4ul279\"\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, device_ip\n| comp count() as matched_events,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see activity related to Exchange PowerShell snap-ins being used through PowerShell or pwsh.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and action_process_image_command_line contains \"Add-PSSnapin\" and (action_process_image_command_line contains \"Microsoft.Exchange.Powershell.Snapin\" or action_process_image_command_line contains \"Microsoft.Exchange.Management.PowerShell.SnapIn\")) and  not ((actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\msiexec.exe\" and action_process_image_command_line contains \"$exserver=Get-ExchangeServer ([Environment]::MachineName) -ErrorVariable exerr 2> $null\"))\n\n\n\n"}
{"prompt": "I want to see all instances where mailbox permissions were delegated within Infosys, including details about the users involved, the type of access granted, and the server where the change occurred.", "response": "config case_sensitive = false\n| datamodel dataset = msft_admin_audit_raw\n| filter xdm.observer.action in (\"Set-Mailbox\") and xdm.event.description ~= \"grantsendonbehalfto\"\n| alter parameter_length = array_length(split(xdm.event.description, \" \")),\nparameter_values = split(xdm.event.operation, \" \")\n| alter mailbox = arrayindex(parameter_values, 1),\nMailboxAccessGivenTo = arrayindex(parameter_values, 0),\naccessrights = if(parameter_length = 3, arrayindex(parameter_values, 0), arrayindex(parameter_values, 2)),\nlog_src_name = \"AdminAudit\",\nserver_name = msft_admin_audit_raw._collector_hostname\n| fields xdm.target.user.username, xdm.source.user.username,\nxdm.observer.action, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.event.id, xdm.event.description, xdm.event.operation,\nxdm.event.operation_sub_type, xdm.observer.type,\nxdm.event.is_completed, xdm.logon.is_elevated, MailboxAccessGivenTo,\nmailbox, _time, _insert_time, accessrights, log_src_name,\nserver_name, msft_admin_audit_raw.rundate\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential persistence threats related to CHM Helper DLLs using Windows Event Logs.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\HtmlHelp Author\\\\Location\" or action_registry_key_name contains \"\\\\Software\\\\WOW6432Node\\\\Microsoft\\\\HtmlHelp Author\\\\Location\")\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is importing certificates from suspicious locations like temporary folders or public directories.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"Import-Certificate\" and action_process_image_command_line contains \" -FilePath \" and action_process_image_command_line contains \"Cert:\\\\LocalMachine\\\\Root\") and (action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\TEMP\\\\.*\" or action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\" or action_process_image_command_line ~= \".*\\\\Downloads\\\\.*\" or action_process_image_command_line ~= \".*\\\\Perflogs\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances where processes are accessing TrolleyExpress versions 7, 8, or 9, either through the command line or directly by file path.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\TrolleyExpress 7\" or action_process_image_command_line contains \"\\\\TrolleyExpress 8\" or action_process_image_command_line contains \"\\\\TrolleyExpress 9\" or action_process_image_command_line contains \"\\\\TrolleyExpress.exe 7\" or action_process_image_command_line contains \"\\\\TrolleyExpress.exe 8\" or action_process_image_command_line contains \"\\\\TrolleyExpress.exe 9\" or action_process_image_command_line contains \"\\\\TrolleyExpress.exe -ma \") or (action_process_image_path ~= \".*\\\\TrolleyExpress\\.exe\" and  not (actor_process_file_original_name contains \"CtxInstall\" or actor_process_file_original_name = \"None\"))\n\n\n\n"}
{"prompt": "I want to see events related to system network discovery processes on macOS endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/netstat\" or action_process_image_path ~= \".*\\/ifconfig\" or action_process_image_path ~= \".*\\/socketfilterfw\" or action_process_image_path ~= \".*\\/networksetup\" or action_process_image_path ~= \".*\\/arp\") or (action_process_image_path = \"/usr/bin/defaults\" and (action_process_image_command_line contains \"read\" and action_process_image_command_line contains \"/Library/Preferences/com.apple.alf\")))\n\n\n\n"}
{"prompt": "I want to see all Swift application raw data events that describe a message template modification.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.description contains \"message template modified\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see Amazon S3 bucket activity that involves privileged administrative actions like setting policies or lifecycle rules.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name != \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"PutBucketAcl\", \"PutBucketPolicy\", \"PutBucketCors\", \"PutBucketLifecycle\", \"PutBucketReplication\", \"PutBucketReplication\", \"DeleteBucketPolicy\", \"DeleteBucketCors\", \"DeleteBucketLifecycle\", \"DeleteBucketReplication\")\n| filter target_username not contains \"<Username>\" and account_id != \"<Account ID>\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdescription\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential command and control activity related to the Peach Sandstorm APT by looking for HTTP GET requests to specific URLs like \"/api/Core/Command/Init\" or \"/api/Core/Command/Restart\".", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and (xdm.network.http.url ~= \".*\\/api\\/Core\\/Command\\/Init\" or xdm.network.http.url ~= \".*\\/api\\/Core\\/Command\\/Restart\"))\n\n\n\n"}
{"prompt": "I want to see events where MSHTA is used to launch potentially suspicious child processes like cmd.exe or powershell.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\mshta\\.exe\" and ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\reg\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\") or actor_process_file_original_name in (\"Cmd.Exe\", \"PowerShell.EXE\", \"pwsh.dll\", \"wscript.exe\", \"cscript.exe\", \"Bash.exe\", \"reg.exe\", \"REGSVR32.EXE\", \"bitsadmin.exe\")))\n\n\n\n"}
{"prompt": "I want to find suspicious executions of PowerShell that are using base64 encoding.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \" -e \" or action_process_image_command_line contains \" -en \" or action_process_image_command_line contains \" -enc \" or action_process_image_command_line contains \" -enco\" or action_process_image_command_line contains \" -ec \")) and  not (action_process_image_command_line contains \" -Encoding \" or (actor_process_image_path ~= \".*C\\:\\\\Packages\\\\Plugins\\\\Microsoft\\.GuestConfiguration\\.ConfigurationforWindows\\\\.*\" or actor_process_image_path contains \"\\\\gc_worker.exe\"))\n\n\n\n"}
{"prompt": "I want to find suspicious connections to remote accounts on my endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"System.DirectoryServices.Protocols.LdapDirectoryIdentifier\" or ScriptBlockText contains \"System.Net.NetworkCredential\" or ScriptBlockText contains \"System.DirectoryServices.Protocols.LdapConnection\")\n\n\n\n"}
{"prompt": " I want to see all events related to Sysmon configuration changes on my endpoints. ", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 16\n\n\n\n"}
{"prompt": "I want to see details about endpoints that have been isolated within the last day and have more than one user associated with them.", "response": "dataset = endpoints\n| filter endpoint_isolated = ENUM.ISOLATED\n| filter timestamp_diff(current_time(), isolation_date, \"DAY\") <= 1\n| fields user, endpoint_name, endpoint_type, endpoint_status,\nendpoint_isolated, isolation_date, platform, operating_system,\nagent_version, mac_address, network_interface, os_version,\narchitecture, ip_address, domain, last_seen, content_version,\ncontent_release_timestamp, last_content_update_time,\ncontent_status, assigned_extensions_policy, assigned_prevention_policy,\ntags, is_edr_enabled, content_auto_update, proxy,\nlast_used_proxy, last_used_proxy_port, last_origin_ip,\ninstallation_package, endpoint_id, install_date,\nfirst_seen, scan_status, last_successful_scan, encryption_status,\nagent_license_type, host_insights, last_triage,\nis_forensics_enabled, token_hash, system_uptime"}
{"prompt": "I want to detect potential antivirus web shells based on their executable signers.", "response": "datamodel\n| filter ((xdm.source.process.executable.signer ~= \"PHP\\..*\" or xdm.source.process.executable.signer ~= \"JSP\\..*\" or xdm.source.process.executable.signer ~= \"ASP\\..*\" or xdm.source.process.executable.signer ~= \"Perl\\..*\" or xdm.source.process.executable.signer ~= \"VBS\\/Uxor.*\" or xdm.source.process.executable.signer ~= \"IIS\\/BackDoor.*\" or xdm.source.process.executable.signer ~= \"JAVA\\/Backdoor.*\" or xdm.source.process.executable.signer ~= \"Troj\\/ASP.*\" or xdm.source.process.executable.signer ~= \"Troj\\/PHP.*\" or xdm.source.process.executable.signer ~= \"Troj\\/JSP.*\") or (xdm.source.process.executable.signer contains \"Webshell\" or xdm.source.process.executable.signer contains \"Chopper\" or xdm.source.process.executable.signer contains \"SinoChoper\" or xdm.source.process.executable.signer contains \"ASPXSpy\" or xdm.source.process.executable.signer contains \"Aspdoor\" or xdm.source.process.executable.signer contains \"filebrowser\" or xdm.source.process.executable.signer contains \"PHP_\" or xdm.source.process.executable.signer contains \"JSP_\" or xdm.source.process.executable.signer contains \"ASP_\" or xdm.source.process.executable.signer contains \"PHP:\" or xdm.source.process.executable.signer contains \"JSP:\" or xdm.source.process.executable.signer contains \"ASP:\" or xdm.source.process.executable.signer contains \"Perl:\" or xdm.source.process.executable.signer contains \"PHP/\" or xdm.source.process.executable.signer contains \"JSP/\" or xdm.source.process.executable.signer contains \"ASP/\" or xdm.source.process.executable.signer contains \"Perl/\" or xdm.source.process.executable.signer contains \"PHPShell\" or xdm.source.process.executable.signer contains \"Trojan.PHP\" or xdm.source.process.executable.signer contains \"Trojan.ASP\" or xdm.source.process.executable.signer contains \"Trojan.JSP\" or xdm.source.process.executable.signer contains \"Trojan.VBS\" or xdm.source.process.executable.signer contains \"PHP/Agent\" or xdm.source.process.executable.signer contains \"ASP/Agent\" or xdm.source.process.executable.signer contains \"JSP/Agent\" or xdm.source.process.executable.signer contains \"VBS/Agent\" or xdm.source.process.executable.signer contains \"Backdoor/PHP\" or xdm.source.process.executable.signer contains \"Backdoor/JSP\" or xdm.source.process.executable.signer contains \"Backdoor/ASP\" or xdm.source.process.executable.signer contains \"Backdoor/VBS\" or xdm.source.process.executable.signer contains \"Backdoor/Java\" or xdm.source.process.executable.signer contains \"PHP.Agent\" or xdm.source.process.executable.signer contains \"ASP.Agent\" or xdm.source.process.executable.signer contains \"JSP.Agent\" or xdm.source.process.executable.signer contains \"VBS.Agent\" or xdm.source.process.executable.signer contains \"Backdoor.PHP\" or xdm.source.process.executable.signer contains \"Backdoor.JSP\" or xdm.source.process.executable.signer contains \"Backdoor.ASP\" or xdm.source.process.executable.signer contains \"Backdoor.VBS\" or xdm.source.process.executable.signer contains \"Backdoor.Java\" or xdm.source.process.executable.signer contains \"PShlSpy\" or xdm.source.process.executable.signer contains \"C99shell\"))\n\n\n\n"}
{"prompt": " I want to find instances where Cmstp.exe loads DLLs or OCXs from suspicious locations like temporary folders, ProgramData, or Users directories. ", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\cmstp\\.exe\" and (action_module_path ~= \".*\\\\PerfLogs\\\\.*\" or action_module_path ~= \".*\\\\ProgramData\\\\.*\" or action_module_path ~= \".*\\\\Users\\\\.*\" or action_module_path ~= \".*\\\\Windows\\\\Temp\\\\.*\" or action_module_path ~= \".*C\\:\\\\Temp\\\\.*\") and (action_module_path ~= \".*\\.dll\" or action_module_path ~= \".*\\.ocx\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious attempts to add BitLocker settings through the registry.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"REG\" and action_process_image_command_line contains \"ADD\" and action_process_image_command_line contains \"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\FVE\" and action_process_image_command_line contains \"/v\" and action_process_image_command_line contains \"/f\") and (action_process_image_command_line contains \"EnableBDEWithNoTPM\" or action_process_image_command_line contains \"UseAdvancedStartup\" or action_process_image_command_line contains \"UseTPM\" or action_process_image_command_line contains \"UseTPMKey\" or action_process_image_command_line contains \"UseTPMKeyPIN\" or action_process_image_command_line contains \"RecoveryKeyMessageSource\" or action_process_image_command_line contains \"UseTPMPIN\" or action_process_image_command_line contains \"RecoveryKeyMessage\"))\n\n\n\n"}
{"prompt": "I want to see alerts about multiple account lockouts for Finance Group Users, including details like the username, error code, hostname, and logon session ID.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id = \"4740\"\n| alter target_user_username = if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<user>\", ltrim(xdm.target.user.username, \"<user>\\\\\"), xdm.target.user.username)))\n| join type = left\n(dataset = enterprise_admin_list\n) as ent_admin_src ent_admin_src.username = target_user_username\n| filter admin_type in (\"fin_user\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where an attacker is using reg.exe to dump registry hives like SAM or SECURITY.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and (action_process_image_command_line contains \" save \" or action_process_image_command_line contains \" export \") and (action_process_image_command_line contains \"hklm\\\\sam\" or action_process_image_command_line contains \"hklm\\\\security\" or action_process_image_command_line contains \"HKEY_LOCAL_MACHINE\\\\SAM\" or action_process_image_command_line contains \"HKEY_LOCAL_MACHINE\\\\SECURITY\"))\n\n\n\n"}
{"prompt": "I want to see events related to potential Linux crypto mining activity on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" --cpu-priority=\" or action_process_image_command_line contains \"--donate-level=0\" or action_process_image_command_line contains \" -o pool.\" or action_process_image_command_line contains \" --nicehash\" or action_process_image_command_line contains \" --algo=rx/0 \" or action_process_image_command_line contains \"stratum+tcp:\n\n\n\n"}
{"prompt": "I want to see a list of events flagged as alerts by Cisco Firepower that match a specific event ID and action, excluding certain IP addresses and ASNs. I also want to group the results by policy name and show the first event time, count of matched events, and timestamp.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.observer.action = \"alert\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\" and xdm.source.ipv4 != \"0.0.0.0\" and xdm.target.ipv4 != \"0.0.0.0\"\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.event.description,\n_time\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ilsourceip\",\naggregation_criteria1 = \"ilsigname\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to create a rule that triggers an alert whenever any dataset is deleted from Management Auditing, except for lookups.", "response": "config case_sensitive = false\n| dataset = management_auditing\n| filter management_auditing_type = \"Datasets\" and subtype contains \"Delete dataset\" and description not contains \"Lookup\"\n| fields _time, description, email, id, subtype, user_name"}
{"prompt": "I want to find suspicious activity related to Ngrok usage on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \" tcp 139\" or action_process_image_command_line contains \" tcp 445\" or action_process_image_command_line contains \" tcp 3389\" or action_process_image_command_line contains \" tcp 5985\" or action_process_image_command_line contains \" tcp 5986\") or (action_process_image_command_line contains \" start \" and action_process_image_command_line contains \"--all\" and action_process_image_command_line contains \"--config\" and action_process_image_command_line contains \".yml\") or (action_process_image_path ~= \".*ngrok\\.exe\" and (action_process_image_command_line contains \" tcp \" or action_process_image_command_line contains \" http \" or action_process_image_command_line contains \" authtoken \")) or (action_process_image_command_line contains \".exe authtoken \" or action_process_image_command_line contains \".exe start --all\"))\n\n\n\n"}
{"prompt": "I want to find out when there have been 10 or more object deletions by firewall admins named \"hyamsunder.vasam\", \"abhijit_patil02\" in the IND region within a 5-minute window.", "response": "config case_sensitive = false\n| dataset = check_point_smartconsole_raw\n| bin _time span = 5m\n| filter operation = \"Delete Object\" and lowercase(administrator) in (\"hyamsunder.vasam\", \"hyamsunder.vasam\", \"abhijit_patil02\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(subject) as result,\nvalues(_product) as product,\ncount() as matched_events by administrator,\n_time\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of potential QueueJumper exploitation using CVE-2023-21554 on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\Windows\\\\System32\\\\mqsvc\\.exe\" and (action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\wsl\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find activities that are suppressing Windows Security Center notifications through registry modifications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\ Defender\\\\UX\\ Configuration\\\\Notification\\_Suppress\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to detect new RUN keys that point to suspicious folders on Windows systems.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\.*\") and (((action_registry_value_name ~= \".*\\:\\\\\\$Recycle\\.bin\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Users\\\\Default\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Users\\\\Desktop\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\%temp\\%\\\\.*\" or action_registry_value_name ~= \".*\\%tmp\\%\\\\.*\") or (action_registry_data ~= \".*\\:\\\\\\$Recycle\\.bin\\\\.*\" or action_registry_data ~= \".*\\:\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\Default\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\Desktop\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\%temp\\%\\\\.*\" or action_registry_data ~= \".*\\%tmp\\%\\\\.*\")) or ((action_registry_value_name ~= \"\\%Public\\%\\\\.*\" or action_registry_value_name ~= \"wscript.*\" or action_registry_value_name ~= \"cscript.*\") or (action_registry_data ~= \"\\%Public\\%\\\\.*\" or action_registry_data ~= \"wscript.*\" or action_registry_data ~= \"cscript.*\")))) and  not ((actor_process_image_path ~= \"C\\:\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\.*\" and ((action_registry_value_name contains \"rundll32.exe C:\\\\WINDOWS\\\\system32\\\\advpack.dll,DelNodeRunDLL32\" or action_registry_data contains \"rundll32.exe C:\\\\WINDOWS\\\\system32\\\\advpack.dll,DelNodeRunDLL32\") and (action_registry_value_name ~= \".*C\\:\\\\Windows\\\\Temp\\\\.*\" or action_registry_data ~= \".*C\\:\\\\Windows\\\\Temp\\\\.*\"))))\n\n\n\n"}
{"prompt": "I want to see alerts about potential Waveedit.DLL sideloading based on image load events in the Windows Event Log.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\waveedit\\.dll\" and  not ((actor_process_image_path in (\"C:\\\\Program Files (x86)\\\\Nero\\\\Nero Apps\\\\Nero WaveEditor\\\\waveedit.exe\", \"C:\\\\Program Files\\\\Nero\\\\Nero Apps\\\\Nero WaveEditor\\\\waveedit.exe\") and (action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Nero\\\\Nero\\ Apps\\\\Nero\\ WaveEditor\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Nero\\\\Nero\\ Apps\\\\Nero\\ WaveEditor\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see information about LittleCorporal Generated Maldoc Injections detected on endpoints through Windows event logs.  Specifically, I'm interested in events where WinWord is involved and there are references to .NET Framework 64 bit installations with an \"UNKNOWN\" call trace.", "response": "preset = xdr_event_log\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| filter (SourceImage ~= \".*\\\\winword\\.exe\" and (CallTrace contains \":\\\\Windows\\\\Microsoft.NET\\\\Framework64\\\\v2.\" and CallTrace contains \"UNKNOWN\"))\n\n\n\n"}
{"prompt": "I want to find potential base64 encoded user agents in my network traffic.", "response": "datamodel\n| filter xdm.network.http.browser ~= \".*\\=\"\n\n\n\n"}
{"prompt": "I want to find instances of JexBoss command sequences in my logs that include \"bash -c /bin/bash\" and \"&/dev/tcp/\".", "response": "datamodel\n| filter (_raw_log contains \"bash -c /bin/bash\" and _raw_log contains \"&/dev/tcp/\")\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious instances of Mstsc.EXE being used with local RDP files.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\mstsc\\.exe\" or actor_process_file_original_name = \"mstsc.exe\") and (action_process_image_command_line ~= \".*\\.rdp\" or action_process_image_command_line ~= \".*\\.rdp\\\"\")) and  not ((actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\lxss\\\\wslhost.exe\" and action_process_image_command_line contains \"C:\\\\ProgramData\\\\Microsoft\\\\WSL\\\\wslg.rdp\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious processes on macOS that have spaces after their filenames or command line arguments.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*\\ \" or action_process_image_path ~= \".*\\ \")\n\n\n\n"}
{"prompt": "I want to find instances of PowerShell token obfuscation on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| alter Path = regextract(to_json_string(action_evtlog_data_fields)->Path{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText ~= \"\\w+\\`(\\w+|\\-|.)\\`[\\w+|\\s]\" or ScriptBlockText ~= \"\\\"(\\{\\d\\}){2,}\\\"\\s*\\-f\" or ScriptBlockText ~= \"\\$\\{((e|n|v)*\\`(e|n|v)*)+\\:path\\}|\\$\\{((e|n|v)*\\`(e|n|v)*)+\\:((p|a|t|h)*\\`(p|a|t|h)*)+\\}|\\$\\{env\\:((p|a|t|h)*\\`(p|a|t|h)*)+\\}\") and  not ((ScriptBlockText contains \"it will return true or false instead\" or ScriptBlockText contains \"The function also prevents `Get-ItemProperty` from failing\") or (Path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\\\Exchange\\ Server\\\\.*\" and Path ~= \".*\\\\bin\\\\servicecontrol\\.ps1\" and ScriptBlockText contains \"`r`n\"))\n\n\n\n"}
{"prompt": "I want to see information about instances where Psexec.exe is being used or processes named \"psexec.c\" are executing on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\psexec\\.exe\" or actor_process_file_original_name = \"psexec.c\")\n\n\n\n"}
{"prompt": "I want to find instances where an adversary might be exploiting weak permissions on registry entries used by services.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"get-acl\" and ScriptBlockText ~= \".*REGISTRY\\:\\:HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see events related to potential persistence through the use of GlobalFlags in the Windows registry.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\.*\" and action_registry_key_name ~= \".*\\\\Image\\ File\\ Execution\\ Options\\\\.*\" and action_registry_key_name contains \"\\\\GlobalFlag\") or ((action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\.*\" and action_registry_key_name ~= \".*\\\\SilentProcessExit\\\\.*\") and (action_registry_key_name contains \"\\\\ReportingMode\" or action_registry_key_name contains \"\\\\MonitorProcess\")))\n\n\n\n"}
{"prompt": "I want to see all instances where an attacker might be exploiting the Proxy vulnerability (CVE-2022-36804) using a publicly available exploit script. The exploitation should involve Microsoft Exchange and target both \"/owa/mastermailbox\" and \"/powershell\" URLs, using a POST request with a successful response code of 200.", "response": "datamodel\n| filter (xdm.network.http.browser = \"Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/105.0.5195.54 Safari/537.36\" and xdm.network.http.method = \"POST\" and xdm.network.http.response_code = 200 and (xdm.network.http.url contains \"/owa/mastermailbox\" and xdm.network.http.url contains \"/powershell\"))\n\n\n\n"}
{"prompt": "I want to find events where regedit is exporting registry keys to alternate data streams.", "response": "datamodel\n| filter (xdm.target.process.name ~= \".*\\\\regedit\\.exe\" or xdm.source.process.name ~= \".*\\\\regedit\\.exe\")\n\n\n\n"}
{"prompt": "I want to find suspicious macOS processes that use Script Editor and potentially execute other commands like curl, bash, or python.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\/Script\\ Editor\" and ((action_process_image_path ~= \".*\\/curl\" or action_process_image_path ~= \".*\\/bash\" or action_process_image_path ~= \".*\\/sh\" or action_process_image_path ~= \".*\\/zsh\" or action_process_image_path ~= \".*\\/dash\" or action_process_image_path ~= \".*\\/fish\" or action_process_image_path ~= \".*\\/osascript\" or action_process_image_path ~= \".*\\/mktemp\" or action_process_image_path ~= \".*\\/chmod\" or action_process_image_path ~= \".*\\/php\" or action_process_image_path ~= \".*\\/nohup\" or action_process_image_path ~= \".*\\/openssl\" or action_process_image_path ~= \".*\\/plutil\" or action_process_image_path ~= \".*\\/PlistBuddy\" or action_process_image_path ~= \".*\\/xattr\" or action_process_image_path ~= \".*\\/sqlite\" or action_process_image_path ~= \".*\\/funzip\" or action_process_image_path ~= \".*\\/popen\") or (action_process_image_path contains \"python\" or action_process_image_path contains \"perl\")))\n\n\n\n"}
{"prompt": "I want to see CyberArk vault activity logs specifically for password attempts on non-standard users from stations 10.64.103.83 or devices with IPs 10.64.103.83 or 10.82.34.113, excluding attempts by 'passwordmanager', 'pvwaappuser', 'pvwaappuser1', 'pvwaappuser2', and users starting with 'psmapp_' .", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_dst = xdm.target.user.username,\nuser_src = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station = \"10.64.103.83\" or device_ip in (\"10.64.103.83\", \"10.82.34.113\")\n| filter action ~= \"retrieve password\" and user_dst not in (\"passwordmanager\", \"pvwaappuser\", \"pvwaappuser1\", \"pvwaappuser2\") and user_dst !~= \"psmapp_\" and user_src not in (\"psmadminconnect\", \"psmconnect\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find all instances where a .diagcab file was created on Windows.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\.diagcab\"\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that enumerate directories on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"foreach\" and ScriptBlockText contains \"Get-ChildItem\" and ScriptBlockText contains \"-Path \" and ScriptBlockText contains \"-ErrorAction \" and ScriptBlockText contains \"SilentlyContinue\" and ScriptBlockText contains \"Out-File \" and ScriptBlockText contains \"-append\")\n\n\n\n"}
{"prompt": "I want to see all successful authentications using single factor authentication for specific applications, like [Application ID 1] or [Application ID 2], from Microsoft Azure.", "response": "dataset = msft_azure_raw\n| alter properties_status = json_extract_scalar(properties , \"$.status\")\n| alter properties_appId = json_extract_scalar(properties , \"$.appId\")\n| alter properties_authenticationRequirement = json_extract_scalar(properties , \"$.authenticationRequirement\")\n| filter (properties.status = \"Success\" and properties.appId = \"Insert Application ID use OR for multiple\" and properties.authenticationRequirement = \"singleFactorAuthentication\")\n\n\n\n"}
{"prompt": "I want to see alerts for oversized DHCP packets exceeding 512 KB on my Cisco Wireless LAN Controllers.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_wlc_raw\n| alter msg_id = concat(xdm.event.original_event_type, \"-\", xdm.alert.severity, \"-\", xdm.event.operation_sub_type),\ndevice_ip = cisco_wlc_raw._final_reporting_device_ip,\nserver_name = arrayindex(regextract(cisco_wlc_raw._raw_log, \"\\<\\d+\\>([^\\:]+)\"), 0),\nmac_address = arrayindex(regextract(cisco_wlc_raw._raw_log, \"for\\s+client\\s([^\\s]+)\"), 0),\nxdm.source.user.username = if(xdm.source.user.username = null, arrayindex(regextract(cisco_wlc_raw._raw_log, \"user\\saccount\\s\\(([^\\)]+)\"), 0), xdm.source.user.username)\n| alter mac_address = coalesce(mac_address, if(xdm.source.host.mac_addresses = null, null, to_string(xdm.source.host.mac_addresses)))\n| filter msg_id in (\"DHCP-4-DHCP_PKT_OVRSIZE\")\n| fields msg_id, xdm.event.original_event_type, xdm.alert.severity,\nxdm.event.operation_sub_type, xdm.event.description,\nxdm.event.log_level, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.source.ipv4, xdm.source.ipv6, xdm.source.port,\nmac_address, xdm.source.process.name, xdm.source.user.username,\nxdm.source.agent.identifier, xdm.source.agent.type,\nxdm.target.ipv4, xdm.target.ipv6, xdm.target.port,\nxdm.target.host.ipv4_addresses, xdm.target.host.ipv6_addresses,\nxdm.target.interface, xdm.target.agent.identifier,\nxdm.target.host.hostname, xdm.target.host.mac_addresses,\nxdm.target.resource.type, xdm.target.resource_before.value,\nxdm.target.resource.value, xdm.session_context_id,\nxdm.alert.description, xdm.network.rule, xdm.network.ip_protocol,\nxdm.network.tls.cipher, cisco_wlc_raw._raw_log, device_ip,\nserver_name, _time, _insert_time, _product, _vendor\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious processes that are trying to use uncommon system directories or service binaries.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_path contains \"\\\\$Recycle.bin\" or action_process_image_path ~= \".*\\\\Users\\\\All\\ Users\\\\.*\" or action_process_image_path ~= \".*\\\\Users\\\\Default\\\\.*\" or action_process_image_path ~= \".*\\\\Users\\\\Contacts\\\\.*\" or action_process_image_path ~= \".*\\\\Users\\\\Searches\\\\.*\" or action_process_image_path ~= \".*C\\:\\\\Perflogs\\\\.*\" or action_process_image_path ~= \".*\\\\config\\\\systemprofile\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Fonts\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\IME\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\addins\\\\.*\") and (actor_process_image_path ~= \".*\\\\services\\.exe\" or actor_process_image_path ~= \".*\\\\svchost\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find processes on endpoints that are running Java with remote debugging enabled, but aren't connected to localhost or 127.0.0.1.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"transport=dt_socket,address=\" and (action_process_image_command_line contains \"jre1.\" or action_process_image_command_line contains \"jdk1.\")) and  not ((action_process_image_command_line contains \"address=127.0.0.1\" or action_process_image_command_line contains \"address=localhost\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when objects are created and deleted on F5 load balancers within a 10-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = f5_load_balancer_raw\n| filter xdm.event.type = \"Audit\" and xdm.observer.action IN (\"create\", \"obj_delete\")\n| sort asc _time\n| alter pattern = if(xdm.observer.action = \"create\", \"E1\", \"E2\"),\nobjname = coalesce(arrayindex(regextract(xdm.event.description, \"create {([^{}]+)\"), 0), arrayindex(regextract(xdm.event.description, \"obj_delete {([^{}]+)\"), 0))\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.event.type) as event_type,\nvalues(xdm.source.host.hostname) as source_host,\nvalues(xdm.event.description) as event_desc,\nvalues(xdm.observer.action) as action,\nvalues(xdm.event.outcome_reason) as status,\nvalues(xdm.target.resource.name) as resource,\nvalues(xdm.source.process.command_line) as command_line,\nvalues(xdm.source.process.pid) as process_id,\nvalues(xdm.source.process.name) as process_name,\nvalues(xdm.source.process.executable.path) as folder_path,\nvalues(objname) as obj_name,\nvalues(f5_load_balancer_raw._final_reporting_device_ip) as device_ip by xdm.source.user.username\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events contains \"E1,E2\"\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances where AspNetCompiler spawns suspicious child processes, like calc.exe, notepad.exe, or processes accessing sensitive system locations.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\aspnet\\_compiler\\.exe\" and ((action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\notepad\\.exe\") or (action_process_image_path ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Roaming\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see Cortex XQL alerts for Python path configuration files being created on Linux systems.", "response": "preset = xdr_file\n| filter (action_file_name ~= \"(?i)\\/lib\\/python3\\.([5-9]|[0-9]{2})\\/site\\-packages\\/\" and action_file_name ~= \".*\\.pth\")\n\n\n\n"}
{"prompt": "I want to detect instances where attackers are using obfuscation techniques involving clipboard services on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and ServiceFileName contains \"(Clipboard|i\")\n\n\n\n"}
{"prompt": "I want to see events related to failed DNS zone transfers from the Datamodel.", "response": "datamodel\n| filter xdm.event.id = 6004\n\n\n\n"}
{"prompt": "I want to find instances where commands are used to clear or remove the syslog on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"rm /var/log/syslog\" or action_process_image_command_line contains \"rm -r /var/log/syslog\" or action_process_image_command_line contains \"rm -f /var/log/syslog\" or action_process_image_command_line contains \"rm -rf /var/log/syslog\" or action_process_image_command_line contains \"unlink /var/log/syslog\" or action_process_image_command_line contains \"unlink -r /var/log/syslog\" or action_process_image_command_line contains \"unlink -f /var/log/syslog\" or action_process_image_command_line contains \"unlink -rf /var/log/syslog\" or action_process_image_command_line contains \"mv /var/log/syslog\" or action_process_image_command_line contains \" >/var/log/syslog\" or action_process_image_command_line contains \" > /var/log/syslog\")\n\n\n\n"}
{"prompt": "I want to find instances of self access provisioning where an employee grants themselves access through delegation.", "response": "config case_sensitive = false\n| dataset IN (cams_Camssiem_audit_raw, cams_Camssiem_raw)\n| filter txtProvActionStatus = \"Add\" and trim(access_provided_by) = trim(EmpNo)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_dst, company_name as companyname1\n) as JT1 JT1.companyname1 = trim(EmpNo)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_src, company_name as companyname2\n) as JT2 JT2.companyname2 = trim(Access_Provided_By)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as fullname, company_name as companyname3\n) as JT3 JT3.companyname3 = trim(txtDelegatedEmpNo)\n| alter aggregation_criteria = \"ileventuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of the \"Invoke-Obfuscation STDIN+ Launcher - System\" technique, where attackers use PowerShell and system commands with obfuscated execution paths.", "response": "preset = xdr_event_log\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \"cmd\" and actor_process_image_path contains \"powershell\") and (actor_process_image_path contains \"/c\" or actor_process_image_path contains \"/r\")) and (actor_process_image_path contains \"noexit\" or (actor_process_image_path contains \"input\" and actor_process_image_path contains \"$\")))\n\n\n\n"}
{"prompt": "I want to see all instances of the COLDSTEEL RAT Cleanup Command Execution activity on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and (actor_process_image_command_line contains \" -k msupdate\" or actor_process_image_command_line contains \" -k msupdate2\" or actor_process_image_command_line contains \" -k alg\") and action_process_image_path ~= \".*\\\\rundll32\\.exe\" and (action_process_image_command_line contains \"UpdateDriverForPlugAndPlayDevicesW\" or action_process_image_command_line contains \"ServiceMain\" or action_process_image_command_line contains \"DiUninstallDevice\"))\n\n\n\n"}
{"prompt": "I want to find vulnerabilities related to risky EKU settings in Active Directory Certificate Templates.", "response": "preset = xdr_event_log\n| alter TemplateContent = regextract(to_json_string(action_evtlog_data_fields)->TemplateContent{}, \"\\\"(.*)\\\"\")\n| alter NewTemplateContent = regextract(to_json_string(action_evtlog_data_fields)->NewTemplateContent{}, \"\\\"(.*)\\\"\")\n| filter ((action_evtlog_event_id = 4898 and (TemplateContent contains \"1.3.6.1.5.5.7.3.2\" or TemplateContent contains \"1.3.6.1.5.2.3.4\" or TemplateContent contains \"1.3.6.1.4.1.311.20.2.2\" or TemplateContent contains \"2.5.29.37.0\")) and TemplateContent contains \"CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT\") or ((action_evtlog_event_id = 4899 and (NewTemplateContent contains \"1.3.6.1.5.5.7.3.2\" or NewTemplateContent contains \"1.3.6.1.5.2.3.4\" or NewTemplateContent contains \"1.3.6.1.4.1.311.20.2.2\" or NewTemplateContent contains \"2.5.29.37.0\")) and NewTemplateContent contains \"CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT\")\n\n\n\n"}
{"prompt": "I want to see alerts related to potential APT10 Cloud Hopper activity on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cscript\\.exe\" and action_process_image_command_line contains \".vbs /shell \") or (action_process_image_command_line ~= \".*csvde\\ \\-f\\ C\\:\\\\windows\\\\web\\\\.*\" and action_process_image_command_line contains \".log\"))\n\n\n\n"}
{"prompt": " I want to find out which departments are being targeted by phishing emails that contain the same malicious URLs and have multiple recipients from different senders.  ", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter policyName = \"Default spam rule\" and headerFrom != null and headerTo != null and details != null and details contains \"urlInfo\"\n| alter headerTo_array = if(headerTo ~= \"\\\"\\\"\", recipients -> [], headerTo -> []),\nsender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0),\nextractedurls = json_extract(details, \"$.urlInfo\") -> []\n| arrayexpand headerTo_array\n| filter headerTo_array ~= \"infosys.com\"\n| alter headerTo_string = arrayindex(split(json_extract_scalar(headerTo_array, \"$.\"), \"@\"), 0),\nsender_domain = lowercase(arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0))\n| arrayexpand extractedurls\n| alter extracted_url = json_extract_scalar(extractedurls, \"$.url\")\n| filter extracted_url !~= \"^http:\n| join type = left\n(preset = ad_users\n| fields sam_account_name, department\n) as adusers adusers.sam_account_name = headerTo_string\n| filter sam_account_name != null and department != null\n| comp count() as department_observed_statistics,\nvalues(sender_domain) as sender_domain,\nvalues(headerTo_string) as recipients by extracted_url,\ndepartment\n| filter array_length(sender_domain) > 5 and array_length(recipients) > 20"}
{"prompt": "I want to find instances where processes are accessing Volume Shadow Copy and potentially extracting sensitive files like the SAM registry hive or NTDS.dit.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\\\\\?\\\\GLOBALROOT\\\\Device\\\\HarddiskVolumeShadowCopy\" and (action_process_image_command_line contains \"\\\\NTDS.dit\" or action_process_image_command_line contains \"\\\\SYSTEM\" or action_process_image_command_line contains \"\\\\SECURITY\"))\n\n\n\n"}
{"prompt": "I want to see suspicious PowerShell invocations that might indicate evasive tactics like command obfuscation and base64 encoding.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"-nop\" and action_process_image_command_line contains \" -w \" and action_process_image_command_line contains \"hidden\" and action_process_image_command_line contains \" -c \" and action_process_image_command_line contains \"[Convert]::FromBase64String\") or (action_process_image_command_line contains \" -w \" and action_process_image_command_line contains \"hidden\" and action_process_image_command_line contains \"-noni\" and action_process_image_command_line contains \"-nop\" and action_process_image_command_line contains \" -c \" and action_process_image_command_line contains \"iex\" and action_process_image_command_line contains \"New-Object\") or (action_process_image_command_line contains \" -w \" and action_process_image_command_line contains \"hidden\" and action_process_image_command_line contains \"-ep\" and action_process_image_command_line contains \"bypass\" and action_process_image_command_line contains \"-Enc\") or (action_process_image_command_line contains \"powershell\" and action_process_image_command_line contains \"reg\" and action_process_image_command_line contains \"add\" and action_process_image_command_line ~= \".*\\\\software\\\\.*\") or (action_process_image_command_line contains \"bypass\" and action_process_image_command_line contains \"-noprofile\" and action_process_image_command_line contains \"-windowstyle\" and action_process_image_command_line contains \"hidden\" and action_process_image_command_line contains \"new-object\" and action_process_image_command_line contains \"system.net.webclient\" and action_process_image_command_line contains \".download\") or (action_process_image_command_line contains \"iex\" and action_process_image_command_line contains \"New-Object\" and action_process_image_command_line contains \"Net.WebClient\" and action_process_image_command_line contains \".Download\")) and  not ((action_process_image_command_line contains \"(New-Object System.Net.WebClient).DownloadString('https:\n\n\n\n"}
{"prompt": "I want to find instances of malware using registry persistence techniques that involve typosquatting \"Microsift\" and potentially hiding executables named \".exe Platypus\".", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\.*\" and (action_registry_key_name contains \"Microsift\" or (action_registry_value_name contains \".exe Platypus\" or action_registry_data contains \".exe Platypus\")))\n\n\n\n"}
{"prompt": "I want to find instances where msiexec is used to quietly install software from a remote location.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\msiexec\\.exe\" or actor_process_file_original_name = \"msiexec.exe\") and ((action_process_image_command_line contains \"-i\" or action_process_image_command_line contains \"/i\") or (action_process_image_command_line contains \"-package\" or action_process_image_command_line contains \"/package\") or (action_process_image_command_line contains \"-a\" or action_process_image_command_line contains \"/a\") or (action_process_image_command_line contains \"-j\" or action_process_image_command_line contains \"/j\")) and (action_process_image_command_line contains \"-q\" or action_process_image_command_line contains \"/q\") and (action_process_image_command_line contains \"http\" or action_process_image_command_line ~= \".*\\\\\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see events related to the installation of the CSExec service on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (ServiceName = \"csexecsvc\" or actor_process_image_path ~= \".*\\\\csexecsvc\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see which users have passwords set to never expire on Windows systems and identify the specific machines where these changes occurred.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (4738)\n| alter ProfilePath = event_data -> ProfilePath,\nAccountExpires = event_data -> AccountExpires,\nSubjectDomainName = event_data -> SubjectDomainName,\nUserPrincipalName = event_data -> UserPrincipalName,\nPrimaryGroupId = event_data -> PrimaryGroupId,\nOldUacValue = event_data -> OldUacValue,\nSamAccountName = event_data -> SamAccountName,\nScriptPath = event_data -> ScriptPath,\nSubjectUserName = event_data -> SubjectUserName,\nTargetUserName = event_data -> TargetUserName,\nUserParameters = event_data -> UserParameters,\nTargetDomainName = event_data -> TargetDomainName,\nDummy = event_data -> Dummy,\nUserAccountControl = arrayindex(regextract(message, \"User Account Control:\\t\\n\\t\\t(.*?)\\n\\t\"), 0),\nPasswordLastSet = event_data -> PasswordLastSet,\nHomeDirectory = event_data -> HomeDirectory,\nSidHistory = event_data -> SidHistory,\nDisplayName = event_data -> DisplayName,\nPrivilegeList = event_data -> PrivilegeList,\nUserWorkstations = event_data -> UserWorkstations,\nSubjectLogonId = event_data -> SubjectLogonId,\nHomePath = event_data -> HomePath,\nTargetSid = event_data -> TargetSid,\nSubjectUserSid = event_data -> SubjectUserSid,\nAllowedToDelegateTo = event_data -> AllowedToDelegateTo,\nNewUacValue = event_data -> NewUacValue,\nLogonHours = event_data -> LogonHours\n| filter message contains \"Don't Expire Password\" and TargetUserName not in (\"ANONYMOUS LOGON\", \"BigByte_Bot01\", \"adssp.prod\") and TargetUserName not contains \"\"\"$\"\"\"\n| alter Desc_String = if(incidr(_collector_internal_ip_address, \"<ip>\"), \"New Avalon\", if(incidr(_collector_internal_ip_address, \"<ip>\"), \"New Avalon\", \".\"))\n| fields UserAccountControl, TargetUserName, computer_name,\n*"}
{"prompt": "I want to find instances where Office applications are using WMI commands.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wbem\\\\WMIC\\.exe\" or action_process_image_command_line contains \"wmic \") and (actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\msaccess\\.exe\" or actor_process_image_path ~= \".*\\\\mspub\\.exe\" or actor_process_image_path ~= \".*\\\\eqnedt32\\.exe\" or actor_process_image_path ~= \".*\\\\visio\\.exe\"))\n\n\n\n"}
{"prompt": " I want to find instances where PowerShell is used to export certificates on endpoints. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Export-PfxCertificate\" or ScriptBlockText contains \"Export-Certificate\") and  not (ScriptBlockText contains \"CmdletsToExport = @(\")\n\n\n\n"}
{"prompt": "I want to see events related to computers being added or removed from the domain controller.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id in (4741, 4743)\n\n\n\n"}
{"prompt": "I want to find out if any PowerShell scripts are trying to list domain groups or users.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"get-ADPrincipalGroupMembership\" or (ScriptBlockText contains \"get-aduser\" and ScriptBlockText contains \"-f \" and ScriptBlockText contains \"-pr \" and ScriptBlockText contains \"DoesNotRequirePreAuth\"))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious processes executing files with double extensions like .doc.lnk or .docx.js.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\.doc\\.lnk\" or actor_process_image_path ~= \".*\\.docx\\.lnk\" or actor_process_image_path ~= \".*\\.xls\\.lnk\" or actor_process_image_path ~= \".*\\.xlsx\\.lnk\" or actor_process_image_path ~= \".*\\.ppt\\.lnk\" or actor_process_image_path ~= \".*\\.pptx\\.lnk\" or actor_process_image_path ~= \".*\\.rtf\\.lnk\" or actor_process_image_path ~= \".*\\.pdf\\.lnk\" or actor_process_image_path ~= \".*\\.txt\\.lnk\" or actor_process_image_path ~= \".*\\.doc\\.js\" or actor_process_image_path ~= \".*\\.docx\\.js\" or actor_process_image_path ~= \".*\\.xls\\.js\" or actor_process_image_path ~= \".*\\.xlsx\\.js\" or actor_process_image_path ~= \".*\\.ppt\\.js\" or actor_process_image_path ~= \".*\\.pptx\\.js\" or actor_process_image_path ~= \".*\\.rtf\\.js\" or actor_process_image_path ~= \".*\\.pdf\\.js\" or actor_process_image_path ~= \".*\\.txt\\.js\") or (actor_process_image_command_line contains \".doc.lnk\" or actor_process_image_command_line contains \".docx.lnk\" or actor_process_image_command_line contains \".xls.lnk\" or actor_process_image_command_line contains \".xlsx.lnk\" or actor_process_image_command_line contains \".ppt.lnk\" or actor_process_image_command_line contains \".pptx.lnk\" or actor_process_image_command_line contains \".rtf.lnk\" or actor_process_image_command_line contains \".pdf.lnk\" or actor_process_image_command_line contains \".txt.lnk\" or actor_process_image_command_line contains \".doc.js\" or actor_process_image_command_line contains \".docx.js\" or actor_process_image_command_line contains \".xls.js\" or actor_process_image_command_line contains \".xlsx.js\" or actor_process_image_command_line contains \".ppt.js\" or actor_process_image_command_line contains \".pptx.js\" or actor_process_image_command_line contains \".rtf.js\" or actor_process_image_command_line contains \".pdf.js\" or actor_process_image_command_line contains \".txt.js\"))\n\n\n\n"}
{"prompt": "I want to find potential registry reconnaissance attempts using PowerShell scripts detected on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText ~= \"(Get\\-Item|gci|Get\\-ChildItem).{1,64}\\-Path.{1,64}\\\\(currentcontrolset\\\\services|CurrentVersion\\\\Policies\\\\Explorer\\\\Run|CurrentVersion\\\\Run|CurrentVersion\\\\ShellServiceObjectDelayLoad|CurrentVersion\\\\Windows\\winlogon)\\\\\"\n\n\n\n"}
{"prompt": "I want to find alerts about the \"HackTool - Koh Default Named Pipe\" that involve named pipes with either \"\\\\imposecost\" or \"\\\\imposingcost\" in their names.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter (PipeName contains \"\\\\imposecost\" or PipeName contains \"\\\\imposingcost\")\n\n\n\n"}
{"prompt": "I want to detect when an account is disabled in Active Directory.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id in (4725)\n| alter TUserName = json_extract_scalar(action_evtlog_data_fields, \"$.SubjectUserName\"),\nAccountName = arrayindex(regextract(action_evtlog_message, \"Account Name\\:(.*)\"), 0),\nGrpName = arrayindex(regextract(action_evtlog_message, \"Group Name\\:(.*)\"), 0),\nTargetDomainName = json_extract_scalar(action_evtlog_data_fields, \"$.TargetDomainName\"),\nSamAccountName = json_extract_scalar(action_evtlog_data_fields, \"$.SamAccountName\")\n| filter TUserName !~= \".*?$\""}
{"prompt": "I want to see network activity that might indicate exploitation of the CVE-2020-10148 SolarWinds Orion API Auth Bypass vulnerability.", "response": "datamodel\n| filter ((xdm.network.http.url contains \"/WebResource.axd\" or xdm.network.http.url contains \"/ScriptResource.axd\" or xdm.network.http.url contains \"/i18n.ashx\" or xdm.network.http.url contains \"/Skipi18n\") and (xdm.network.http.url contains \"/SolarWinds/\" or xdm.network.http.url contains \"/api/\")) and  not (xdm.network.http.url contains \"Orion/Skipi18n/Profiler/\" or (xdm.network.http.url contains \"css.i18n.ashx\" or xdm.network.http.url contains \"js.i18n.ashx\"))\n\n\n\n"}
{"prompt": "I want to find suspicious Rundll32 scripts that are running on endpoints and look for command lines containing \"rundll32\" with arguments like \"mshtml,RunHTMLApplication\" or \"mshtml,#135\", along with javascript: or vbscript:. ", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"rundll32\" and (action_process_image_command_line contains \"mshtml,RunHTMLApplication\" or action_process_image_command_line contains \"mshtml,#135\") and (action_process_image_command_line contains \"javascript:\" or action_process_image_command_line contains \"vbscript:\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential Edputil.DLL sideloading attacks detected through Windows Event Logs.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\edputil\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_module_path ~= \"C\\\\Windows\\\\WinSxS\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see detections for malicious activity involving the \"register-cimprovider.exe\" process loading DLLs.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\register\\-cimprovider\\.exe\" and (action_process_image_command_line contains \"-path\" and action_process_image_command_line contains \"dll\"))\n\n\n\n"}
{"prompt": "{I want to see alerts related to security settings being updated on the OCSP Responder Service, particularly those indicating potential real-time attacks.} \n\n\nLet me know if you'd like me to refine this prompt further!", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"5124\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all file events where a file named \"csexecsvc.exe\" is created.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\csexecsvc\\.exe\"\n\n\n\n"}
{"prompt": "I want to find potential malicious activity related to file association settings in the Windows registry.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Associations\\\\.*\" and ((action_registry_key_name ~= \".*\\\\DefaultFileTypeRisk\" and (action_registry_value_name = \"DWORD (0x00006152)\" or action_registry_data = \"DWORD (0x00006152)\")) or (action_registry_key_name ~= \".*\\\\LowRiskFileTypes\" and ((action_registry_value_name contains \".zip;\" or action_registry_value_name contains \".rar;\" or action_registry_value_name contains \".exe;\" or action_registry_value_name contains \".bat;\" or action_registry_value_name contains \".com;\" or action_registry_value_name contains \".cmd;\" or action_registry_value_name contains \".reg;\" or action_registry_value_name contains \".msi;\" or action_registry_value_name contains \".htm;\" or action_registry_value_name contains \".html;\") or (action_registry_data contains \".zip;\" or action_registry_data contains \".rar;\" or action_registry_data contains \".exe;\" or action_registry_data contains \".bat;\" or action_registry_data contains \".com;\" or action_registry_data contains \".cmd;\" or action_registry_data contains \".reg;\" or action_registry_data contains \".msi;\" or action_registry_data contains \".htm;\" or action_registry_data contains \".html;\"))))\n\n\n\n"}
{"prompt": "I want to see all events related to Lazarus Loaders, which I believe are being used to launch malicious processes on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"cmd.exe /c \" and action_process_image_command_line contains \" -p 0x\") and (action_process_image_command_line ~= \".*C\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\RECYCLER\\\\.*\")) or ((action_process_image_command_line contains \"rundll32.exe \" and action_process_image_command_line ~= \".*C\\:\\\\ProgramData\\\\.*\") and (action_process_image_command_line contains \".bin,\" or action_process_image_command_line contains \".tmp,\" or action_process_image_command_line contains \".dat,\" or action_process_image_command_line contains \".io,\" or action_process_image_command_line contains \".ini,\" or action_process_image_command_line contains \".db,\"))\n\n\n\n"}
{"prompt": "I want to see events related to modifications made to Autorun keys in the Wow6432Node registry under the Windows NT CurrentVersion branch.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\" and (action_registry_key_name contains \"\\\\Windows\\\\Appinit_Dlls\" or action_registry_key_name contains \"\\\\Image File Execution Options\" or action_registry_key_name contains \"\\\\Drivers32\") and  not ((action_registry_value_name in (\"(Empty)\", \"\\\\REGISTRY\\\\MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\") or action_registry_data in (\"(Empty)\", \"\\\\REGISTRY\\\\MACHINE\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Image File Execution Options\")))\n\n\n\n"}
{"prompt": "I want to find instances of suspicious UltraVNC execution on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"-autoreconnect \" and action_process_image_command_line contains \"-connect \" and action_process_image_command_line contains \"-id:\")\n\n\n\n"}
{"prompt": "I want to find instances of Cisco devices disabling logging in the system logs.", "response": "datamodel\n| filter ( contains \"no logging\" or  contains \"no aaa new-model\")\n\n\n\n"}
{"prompt": "I want to see all instances where critical enterprise users encountered access denied errors, including details about the error and the impacted system.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4625\", \"4825\")\n| alter logon_type = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Logon Type:\\t\\t\\t([^\\n]+)\"), 0))\n| alter status_code = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Status:\\t\\t\\t([^\\n]+)\"), 0))\n| filter ((xdm.event.id IN (\"4625\") and logon_type = \"10\" and status_code = \"0xc000015b\") or xdm.event.id IN (\"4825\"))\n| alter target_username = if(xdm.event.id IN (\"4825\"), arrayindex(regextract(xdm.event.description, \"User Name:\\t([^\\n]+)\"), 0), xdm.target.user.username)\n| alter target_username = if(target_username ~= \"@ad.infosys.com\", rtrim(target_username, \"@ad.infosys.com\"), if(target_username ~= \"@infosys.com\", rtrim(target_username, \"@infosys.com\"), if(target_username ~= \"itlinfosys\", ltrim(target_username, \"itlinfosys\\\\\"), target_username)))\n| join type = left\n(dataset = pan_dss_raw\n| filter security_groups ~= \"Tier0Users|Tier1Users\"\n) as tier_admin tier_admin.sam_account_name = target_username\n| filter sam_account_name != null\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| alter xdm.source.ipv4 = if(xdm.source.ipv4 = null, trim(arrayindex(regextract(xdm.event.description, \"Client Address:\\s([^\\n]+)\"), 0)), xdm.source.ipv4)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_username\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about backups or system state backups being deleted via wbadmin.exe on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wbadmin\\.exe\" or actor_process_file_original_name = \"WBADMIN.EXE\") and (action_process_image_command_line contains \"delete \" and action_process_image_command_line contains \"backup\")) and  not (action_process_image_command_line contains \"keepVersions:0\")\n\n\n\n"}
{"prompt": "I want to find instances of potential indirect command execution using the \"forfiles\" tool.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\forfiles\\.exe\" and (actor_process_image_command_line contains \" /c \" or actor_process_image_command_line contains \" -c \") and (actor_process_image_command_line contains \" /p \" or actor_process_image_command_line contains \" -p \") and (actor_process_image_command_line contains \" /m \" or actor_process_image_command_line contains \" -m \")) and  not ((action_process_image_path ~= \".*\\\\cmd\\.exe\" and (action_process_image_command_line contains \"xcopy\" and action_process_image_command_line contains \"cmd /c del\")))\n\n\n\n"}
{"prompt": "I want to find potentially suspicious files that are being created, especially those with .dmp, .dump, or .hdmp extensions.  These files might be created by processes like cmd.exe, cscript.exe, mshta.exe, powershell.exe, pwsh.exe, or wscript.exe.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\cmd\\.exe\" or xdm.target.process.name ~= \".*\\\\cscript\\.exe\" or xdm.target.process.name ~= \".*\\\\mshta\\.exe\" or xdm.target.process.name ~= \".*\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\\\pwsh\\.exe\" or xdm.target.process.name ~= \".*\\\\wscript\\.exe\") or (xdm.source.process.name ~= \".*\\\\cmd\\.exe\" or xdm.source.process.name ~= \".*\\\\cscript\\.exe\" or xdm.source.process.name ~= \".*\\\\mshta\\.exe\" or xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\" or xdm.source.process.name ~= \".*\\\\wscript\\.exe\")) and (xdm.target.file.filename ~= \".*\\.dmp\" or xdm.target.file.filename ~= \".*\\.dump\" or xdm.target.file.filename ~= \".*\\.hdmp\"))\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is being used to execute code with Pester.bat as a parent process.", "response": "preset = xdr_process\n| filter (((actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\") and actor_process_image_command_line ~= \".*\\\\WindowsPowerShell\\\\Modules\\\\Pester\\\\.*\") and (actor_process_image_command_line contains \"{ Invoke-Pester -EnableExit ;\" or actor_process_image_command_line contains \"{ Get-Help \\\"\"))\n\n\n\n"}
{"prompt": "I want to find potential malicious activity by looking for processes that use specific WinAPI calls in their command lines.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"AddSecurityPackage\" or action_process_image_command_line contains \"AdjustTokenPrivileges\" or action_process_image_command_line contains \"Advapi32\" or action_process_image_command_line contains \"CloseHandle\" or action_process_image_command_line contains \"CreateProcessWithToken\" or action_process_image_command_line contains \"CreatePseudoConsole\" or action_process_image_command_line contains \"CreateRemoteThread\" or action_process_image_command_line contains \"CreateThread\" or action_process_image_command_line contains \"CreateUserThread\" or action_process_image_command_line contains \"DangerousGetHandle\" or action_process_image_command_line contains \"DuplicateTokenEx\" or action_process_image_command_line contains \"EnumerateSecurityPackages\" or action_process_image_command_line contains \"FreeHGlobal\" or action_process_image_command_line contains \"FreeLibrary\" or action_process_image_command_line contains \"GetDelegateForFunctionPointer\" or action_process_image_command_line contains \"GetLogonSessionData\" or action_process_image_command_line contains \"GetModuleHandle\" or action_process_image_command_line contains \"GetProcAddress\" or action_process_image_command_line contains \"GetProcessHandle\" or action_process_image_command_line contains \"GetTokenInformation\" or action_process_image_command_line contains \"ImpersonateLoggedOnUser\" or action_process_image_command_line contains \"kernel32\" or action_process_image_command_line contains \"LoadLibrary\" or action_process_image_command_line contains \"memcpy\" or action_process_image_command_line contains \"MiniDumpWriteDump\" or action_process_image_command_line contains \"ntdll\" or action_process_image_command_line contains \"OpenDesktop\" or action_process_image_command_line contains \"OpenProcess\" or action_process_image_command_line contains \"OpenProcessToken\" or action_process_image_command_line contains \"OpenThreadToken\" or action_process_image_command_line contains \"OpenWindowStation\" or action_process_image_command_line contains \"PtrToString\" or action_process_image_command_line contains \"QueueUserApc\" or action_process_image_command_line contains \"ReadProcessMemory\" or action_process_image_command_line contains \"RevertToSelf\" or action_process_image_command_line contains \"RtlCreateUserThread\" or action_process_image_command_line contains \"secur32\" or action_process_image_command_line contains \"SetThreadToken\" or action_process_image_command_line contains \"VirtualAlloc\" or action_process_image_command_line contains \"VirtualFree\" or action_process_image_command_line contains \"VirtualProtect\" or action_process_image_command_line contains \"WaitForSingleObject\" or action_process_image_command_line contains \"WriteInt32\" or action_process_image_command_line contains \"WriteProcessMemory\" or action_process_image_command_line contains \"ZeroFreeGlobalAllocUnicode\") and  not ((action_process_image_path ~= \".*\\\\MpCmdRun\\.exe\" and action_process_image_command_line contains \"GetLoadLibraryWAddress32\"))\n\n\n\n"}
{"prompt": "I want to see PowerShell commands that look like they might be part of a PowerView attack.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Export-PowerViewCSV\" or ScriptBlockText contains \"Find-DomainLocalGroupMember\" or ScriptBlockText contains \"Find-DomainObjectPropertyOutlier\" or ScriptBlockText contains \"Find-DomainProcess\" or ScriptBlockText contains \"Find-DomainShare\" or ScriptBlockText contains \"Find-DomainUserEvent\" or ScriptBlockText contains \"Find-DomainUserLocation\" or ScriptBlockText contains \"Find-ForeignGroup\" or ScriptBlockText contains \"Find-ForeignUser\" or ScriptBlockText contains \"Find-GPOComputerAdmin\" or ScriptBlockText contains \"Find-GPOLocation\" or ScriptBlockText contains \"Find-InterestingDomain\" or ScriptBlockText contains \"Find-InterestingFile\" or ScriptBlockText contains \"Find-LocalAdminAccess\" or ScriptBlockText contains \"Find-ManagedSecurityGroups\" or ScriptBlockText contains \"Get-CachedRDPConnection\" or ScriptBlockText contains \"Get-DFSshare\" or ScriptBlockText contains \"Get-DomainDFSShare\" or ScriptBlockText contains \"Get-DomainDNSRecord\" or ScriptBlockText contains \"Get-DomainDNSZone\" or ScriptBlockText contains \"Get-DomainFileServer\" or ScriptBlockText contains \"Get-DomainGPOComputerLocalGroupMapping\" or ScriptBlockText contains \"Get-DomainGPOLocalGroup\" or ScriptBlockText contains \"Get-DomainGPOUserLocalGroupMapping\" or ScriptBlockText contains \"Get-LastLoggedOn\" or ScriptBlockText contains \"Get-LoggedOnLocal\" or ScriptBlockText contains \"Get-NetFileServer\" or ScriptBlockText contains \"Get-NetForest\" or ScriptBlockText contains \"Get-NetGPOGroup\" or ScriptBlockText contains \"Get-NetProcess\" or ScriptBlockText contains \"Get-NetRDPSession\" or ScriptBlockText contains \"Get-RegistryMountedDrive\" or ScriptBlockText contains \"Get-RegLoggedOn\" or ScriptBlockText contains \"Get-WMIRegCachedRDPConnection\" or ScriptBlockText contains \"Get-WMIRegLastLoggedOn\" or ScriptBlockText contains \"Get-WMIRegMountedDrive\" or ScriptBlockText contains \"Get-WMIRegProxy\" or ScriptBlockText contains \"Invoke-ACLScanner\" or ScriptBlockText contains \"Invoke-CheckLocalAdminAccess\" or ScriptBlockText contains \"Invoke-EnumerateLocalAdmin\" or ScriptBlockText contains \"Invoke-EventHunter\" or ScriptBlockText contains \"Invoke-FileFinder\" or ScriptBlockText contains \"Invoke-Kerberoast\" or ScriptBlockText contains \"Invoke-MapDomainTrust\" or ScriptBlockText contains \"Invoke-ProcessHunter\" or ScriptBlockText contains \"Invoke-RevertToSelf\" or ScriptBlockText contains \"Invoke-ShareFinder\" or ScriptBlockText contains \"Invoke-UserHunter\" or ScriptBlockText contains \"Invoke-UserImpersonation\" or ScriptBlockText contains \"Remove-RemoteConnection\" or ScriptBlockText contains \"Request-SPNTicket\" or ScriptBlockText contains \"Resolve-IPAddress\")\n\n\n\n"}
{"prompt": "I want to see events related to PowerTool execution on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\PowerTool\\.exe\" or action_process_image_path ~= \".*\\\\PowerTool64\\.exe\") or actor_process_file_original_name = \"PowerTool.exe\")\n\n\n\n"}
{"prompt": "I want to find out if any firewall admins in Europe modified more than 10 objects on CheckPoint within a 5-minute period.", "response": "config case_sensitive = false\n| dataset = check_point_smartconsole_raw\n| bin _time span = 5m\n| filter operation = \"Modify Object\" and lowercase(administrator) in (\"biju_victordhasan\", \"joel_muni\", \"satheesh_k\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(subject) as result,\nvalues(_product) as product,\ncount() as matched_events by administrator,\n_time\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see details about NSG rule changes made recently, including who changed them, when they were changed, and what protocols were affected.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"9227fdca-483d-424c-bc56-9fd2b4030484\", \"3fd7f1e1-88df-41df-982e-90c0daa354b9\", \"f2a4f062-8a8b-444f-82b8-e668b51cf42e\", \"71cce8cd-49d7-4463-bf9f-20dd2a68c5eb\", \"416105b8-5451-4d32-8f96-fcb0deb64ae0\", \"799febb6-d243-48d7-86a3-e94c956f46ba\", \"7269cfc9-f839-4437-9ded-f6d4bdec41d2\", \"8de7d5e6-d76e-497e-97c2-557d13d801e8\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect if someone is using the \"dir /S\" command on Windows to list files in a directory and all its subdirectories.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and action_process_image_command_line contains \"dir*-s\")\n\n\n\n"}
{"prompt": "I want to find suspicious instances where the PROCEXP152.sys file is created in the application-data local temporary folder, excluding legitimate use cases by Process Explorer or similar tools.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and xdm.target.file.filename ~= \".*PROCEXP152\\.sys\") and  not (((xdm.target.process.name contains \"\\\\procexp64.exe\" or xdm.target.process.name contains \"\\\\procexp.exe\" or xdm.target.process.name contains \"\\\\procmon64.exe\" or xdm.target.process.name contains \"\\\\procmon.exe\") or (xdm.source.process.name contains \"\\\\procexp64.exe\" or xdm.source.process.name contains \"\\\\procexp.exe\" or xdm.source.process.name contains \"\\\\procmon64.exe\" or xdm.source.process.name contains \"\\\\procmon.exe\")))\n\n\n\n"}
{"prompt": "I want to find instances of malware using rundll32.exe and shell32.dll that might be launching PowerShell for malicious purposes.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName contains \"rundll32.exe\" and ServiceFileName contains \"shell32.dll\" and ServiceFileName contains \"shellexec_rundll\" and ServiceFileName contains \"powershell\"))\n\n\n\n"}
{"prompt": "I want to see events where processes are being used to disable security tools on macOS endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path = \"/bin/launchctl\" and action_process_image_command_line contains \"unload\") and (action_process_image_command_line contains \"com.objective-see.lulu.plist\" or action_process_image_command_line contains \"com.objective-see.blockblock.plist\" or action_process_image_command_line contains \"com.google.santad.plist\" or action_process_image_command_line contains \"com.carbonblack.defense.daemon.plist\" or action_process_image_command_line contains \"com.carbonblack.daemon.plist\" or action_process_image_command_line contains \"at.obdev.littlesnitchd.plist\" or action_process_image_command_line contains \"com.tenablesecurity.nessusagent.plist\" or action_process_image_command_line contains \"com.opendns.osx.RoamingClientConfigUpdater.plist\" or action_process_image_command_line contains \"com.crowdstrike.falcond.plist\" or action_process_image_command_line contains \"com.crowdstrike.userdaemon.plist\" or action_process_image_command_line contains \"osquery\" or action_process_image_command_line contains \"filebeat\" or action_process_image_command_line contains \"auditbeat\" or action_process_image_command_line contains \"packetbeat\" or action_process_image_command_line contains \"td-agent\")) or (action_process_image_path = \"/usr/sbin/spctl\" and action_process_image_command_line contains \"disable\")\n\n\n\n"}
{"prompt": "I want to detect suspicious WMIC execution triggered by common Office applications like Word, Excel, and PowerPoint.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\WINWORD\\.EXE\" or actor_process_image_path ~= \".*\\\\EXCEL\\.EXE\" or actor_process_image_path ~= \".*\\\\POWERPNT\\.exe\" or actor_process_image_path ~= \".*\\\\MSPUB\\.exe\" or actor_process_image_path ~= \".*\\\\VISIO\\.exe\" or actor_process_image_path ~= \".*\\\\MSACCESS\\.EXE\" or actor_process_image_path ~= \".*\\\\EQNEDT32\\.EXE\" or actor_process_image_path ~= \".*\\\\ONENOTE\\.EXE\" or actor_process_image_path ~= \".*\\\\wordpad\\.exe\" or actor_process_image_path ~= \".*\\\\wordview\\.exe\") and (action_process_image_path ~= \".*\\\\wbem\\\\WMIC\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and ((action_process_image_command_line contains \"process\" and action_process_image_command_line contains \"create\" and action_process_image_command_line contains \"call\") and (action_process_image_command_line contains \"regsvr32\" or action_process_image_command_line contains \"rundll32\" or action_process_image_command_line contains \"msiexec\" or action_process_image_command_line contains \"mshta\" or action_process_image_command_line contains \"verclsid\" or action_process_image_command_line contains \"wscript\" or action_process_image_command_line contains \"cscript\")))\n\n\n\n"}
{"prompt": "I want to see potential initial access attempts via DLL Search Order Hijacking that involve common Microsoft applications and specific file locations.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\winword\\.exe\" or xdm.target.process.name ~= \".*\\\\excel\\.exe\" or xdm.target.process.name ~= \".*\\\\powerpnt\\.exe\" or xdm.target.process.name ~= \".*\\\\MSACCESS\\.EXE\" or xdm.target.process.name ~= \".*\\\\MSPUB\\.EXE\" or xdm.target.process.name ~= \".*\\\\fltldr\\.exe\" or xdm.target.process.name ~= \".*\\\\cmd\\.exe\" or xdm.target.process.name ~= \".*\\\\certutil\\.exe\" or xdm.target.process.name ~= \".*\\\\mshta\\.exe\" or xdm.target.process.name ~= \".*\\\\cscript\\.exe\" or xdm.target.process.name ~= \".*\\\\wscript\\.exe\" or xdm.target.process.name ~= \".*\\\\curl\\.exe\" or xdm.target.process.name ~= \".*\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\\\pwsh\\.exe\") or (xdm.source.process.name ~= \".*\\\\winword\\.exe\" or xdm.source.process.name ~= \".*\\\\excel\\.exe\" or xdm.source.process.name ~= \".*\\\\powerpnt\\.exe\" or xdm.source.process.name ~= \".*\\\\MSACCESS\\.EXE\" or xdm.source.process.name ~= \".*\\\\MSPUB\\.EXE\" or xdm.source.process.name ~= \".*\\\\fltldr\\.exe\" or xdm.source.process.name ~= \".*\\\\cmd\\.exe\" or xdm.source.process.name ~= \".*\\\\certutil\\.exe\" or xdm.source.process.name ~= \".*\\\\mshta\\.exe\" or xdm.source.process.name ~= \".*\\\\cscript\\.exe\" or xdm.source.process.name ~= \".*\\\\wscript\\.exe\" or xdm.source.process.name ~= \".*\\\\curl\\.exe\" or xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\")) and xdm.target.file.filename ~= \".*\\.dll\" and (xdm.target.file.filename ~= \".*\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\.*\") and (xdm.target.file.filename ~= \".*\\\\Microsoft\\\\OneDrive\\\\.*\" or xdm.target.file.filename ~= \".*\\\\Microsoft\\ OneDrive\\\\.*\" or xdm.target.file.filename ~= \".*\\\\Microsoft\\\\Teams\\\\.*\" or xdm.target.file.filename contains \"\\\\Local\\\\slack\\\\app-\" or xdm.target.file.filename ~= \".*\\\\Local\\\\Programs\\\\Microsoft\\ VS\\ Code\\\\.*\")) and  not (((xdm.target.process.name ~= \".*\\\\cmd\\.exe\" or xdm.source.process.name ~= \".*\\\\cmd\\.exe\") and (xdm.target.file.filename ~= \".*\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\.*\" and xdm.target.file.filename ~= \".*\\\\Microsoft\\\\OneDrive\\\\.*\" and xdm.target.file.filename contains \"\\\\api-ms-win-core-\")))\n\n\n\n"}
{"prompt": "I want to see alerts about modifications or deletions made to Azure firewalls.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.NETWORK/AZUREFIREWALLS/WRITE\", \"MICROSOFT.NETWORK/AZUREFIREWALLS/DELETE\")\n\n\n\n"}
{"prompt": "I want to find instances where the Net utility was used with a password provided directly in the command line.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and (action_process_image_command_line contains \" use \" and action_process_image_command_line ~= \".*\\:.*\\\\.*\" and action_process_image_command_line contains \"/USER:* *\")) and  not (action_process_image_command_line ~= \".*\\ \")\n\n\n\n"}
{"prompt": "I want to see alerts about the CVE-2020-10189 Zoho ManageEngine exploit that involve the creation of processes like cmd.exe, powershell.exe, bitsadmin.exe, etc.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*DesktopCentral\\_Server\\\\jre\\\\bin\\\\java\\.exe\" and (action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\systeminfo\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\" or action_process_image_path ~= \".*\\\\reg\\.exe\" or action_process_image_path ~= \".*\\\\query\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances of attackers using Icacls to hide files from everyone.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"iCACLS.EXE\" or action_process_image_path ~= \".*\\\\icacls\\.exe\") and (action_process_image_command_line contains \"/deny\" and action_process_image_command_line contains \"*S-1-1-0:\"))\n\n\n\n"}
{"prompt": "I want to see all activities related to changes in Exchange Admin groups, including additions, removals, and membership modifications.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.target.user.groups in (\"exchange organization administrators\", \"exchange public folder administrators\", \"exchange view-only administrators\", \"view-only organization management\", \"public folder management\", \"recipient management\", \"exchange recipient administrators\", \"exchangehtcadmins\", \"exchangeitpadmins\", \"exchangekecadmins\", \"exchangemeladmins\", \"exchangerhladmins\", \"exchangesfoadmins\", \"exchangesgiadmins\", \"exchangeshladmins\", \"exchangesjcadmins\", \"acl_emsg\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of Net.EXE being used to enumerate shares and sessions on endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and action_process_image_command_line contains \"view\") and  not (action_process_image_command_line ~= \".*\\\\\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see events related to Turla malware installing its services on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and ServiceName in (\"srservice\", \"ipvpn\", \"hkmsvc\"))\n\n\n\n"}
{"prompt": "I want to see events where a Privileged Access Manager user views an old password on a managed system.", "response": "config case_sensitive = false\n| dataset = hitachi_pam_raw\n| filter oper ~= \"WVPH\"\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nevent_desc = \"A Privileged Access Manager user views a historical(not current) password on a managed system.\",\ndevice_type = \"pam\""}
{"prompt": "I want to detect if someone is using \"ioreg\" to gather system information on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/ioreg\" or action_process_image_command_line contains \"ioreg\") and (action_process_image_command_line contains \"-l\" or action_process_image_command_line contains \"-c\") and (action_process_image_command_line contains \"AppleAHCIDiskDriver\" or action_process_image_command_line contains \"IOPlatformExpertDevice\" or action_process_image_command_line contains \"Oracle\" or action_process_image_command_line contains \"Parallels\" or action_process_image_command_line contains \"USB Vendor Name\" or action_process_image_command_line contains \"VirtualBox\" or action_process_image_command_line contains \"VMware\"))\n\n\n\n"}
{"prompt": "I want to see potential persistence threats detected through manipulation of /etc/rc.local files on Linux systems.", "response": "config case_sensitive = false\n| datamodel dataset = xdr_data\n| filter xdm.source.host.os_family = XDM_CONST.OS_FAMILY_LINUX and xdm.target.file.path contains \"/etc/rc.local\" and xdm.target.file.file_type contains \"rc.local\" and xdm.target.file.extension not contains \"swp\"\n| fields *"}
{"prompt": "I want to find instances where adversaries might be using PowerShell to create remote sessions on other computers.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"New-PSSession\" and ScriptBlockText contains \"-ComputerName \")\n\n\n\n"}
{"prompt": "I want to see a list of suspicious Launchctl activity related to FireEye on my agents, excluding known legitimate uses.", "response": "dataset = xdr_data\n| filter actor_process_command_line contains \"launchctl*fireeye\" and causality_actor_process_command_line !~= \"(jamf|JamfManagementService|package_script_service|InstallFireEye_on_IDLE.sh)\"\n| fields agent_hostname as Hostname, action_file_path, actor_process_image_path as apip,\nactor_process_command_line as apcl, causality_actor_process_image_path as capip,\ncausality_actor_process_command_line as capcl, os_actor_process_image_path as osapip,\nos_actor_process_command_line as ospcl, _time as CXReportTime\n| dedup Hostname"}
{"prompt": "I want to detect instances of malicious activity involving the use of OpenConsole.exe.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name = \"OpenConsole.exe\" or action_process_image_path ~= \".*\\\\OpenConsole\\.exe\") and  not (action_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\WindowsApps\\\\Microsoft\\.WindowsTerminal.*\")\n\n\n\n"}
{"prompt": "I want to detect instances of SCM DLL sideloading attacks on Windows systems.", "response": "preset = xdr_image_load\n| filter (action_module_path in (\"C:\\\\Windows\\\\System32\\\\WLBSCTRL.dll\", \"C:\\\\Windows\\\\System32\\\\TSMSISrv.dll\", \"C:\\\\Windows\\\\System32\\\\TSVIPSrv.dll\") and actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\svchost.exe\")\n\n\n\n"}
{"prompt": "I want to see activity related to changes made to service accounts managed by IS, including creations, deletions, enablement, and disablement. I need this information from Windows Event Logs.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4722\", \"4725\", \"4720\", \"4726\")\n| alter target_uname = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| join type = left\n(dataset = Epm_ServiceID_static_list\n| alter username_field = if(username ~= \"@ad.infosys.com\", rtrim(username, \"@ad.infosys.com\"), if(username ~= \"@infosys.com\", rtrim(username, \"@infosys.com\"), if(username ~= \"itlinfosys\", ltrim(username, \"itlinfosys\\\\\"), username)))\n) as JT1 JT1.username_field = target_uname\n| filter username_field != null\n\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see who is making changes to Azure network security groups, including their username, target username, operation name, and the time of the change.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all Windows events related to Account Policy or Account Lockout Policy modifications, including details about the user, computer, and outcome of the modification.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id = \"4739\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see if there have been unusually high numbers of computer account deletions in our Infosys Infrastructure recently.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| bin _time span = 5m\n| filter xdm.event.id in (\"4743\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip\n| comp earliest(_time) as FirstEventTime,\nvalues(*) as *,\ncount() as matched_events by _time,\nxdm.source.user.username\n| filter matched_events >= 500\n| alter aggregation_criteria = \"ilsourceuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 500)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": " I want to see events related to processes using \"wmic.exe\" to gather hardware model information through the csproduct command. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wmic\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and action_process_image_command_line contains \"csproduct\")\n\n\n\n"}
{"prompt": "I want to find instances of malicious processes using PkgMgr and DISM to bypass UAC.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\pkgmgr\\.exe\" and action_process_image_path ~= \".*\\\\dism\\.exe\" and action_process_integrity_level in (\"High\", \"System\"))\n\n\n\n"}
{"prompt": "I want to see indicators of credential dumping by Pypykatz on my endpoints.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and (CallTrace contains \"C:\\\\Windows\\\\SYSTEM32\\\\ntdll.dll+\" and CallTrace contains \"C:\\\\Windows\\\\System32\\\\KERNELBASE.dll+\" and CallTrace contains \"libffi-7.dll\" and CallTrace contains \"_ctypes.pyd+\" and CallTrace contains \"python3*.dll+\") and GrantedAccess = \"0x1FFFFF\")\n\n\n\n"}
{"prompt": "I want to find out which Duo logins from blocked countries were made by SET users in the last 24 hours.", "response": "config case_sensitive = false\n| dataset = duo_duo_raw\n| filter email != NULL\n| filter result in (\"success\") and eventtype in (\"authentication\")\n| alter DuoUserName = json_extract(user, \"$.name\"),\nIPAddress = json_extract(access_device, \"$.ip\"),\nDeviceTrustLevel = json_extract(adaptive_trust_assessments, \"$.remember_me.trust_level\")\n| join type = right\n(dataset = wl_ip_cidrs\n| fields wl_description, wl_logsrc, wl_type, wl_value\n| filter wl_type = \"ipv4\"\n) as wlist wlist.wl_value != IPAddress\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false\n| alter AccDevLocationCN = json_extract(access_device, \"$.location.country\"),\nAccDevLocationST = json_extract(access_device, \"$.location.state\"),\nAccDevLocationCY = json_extract(access_device, \"$.location.city\"),\nAccDevOS = json_extract(access_device, \"$.os\"),\nAccDevOSVer = json_extract(access_device, \"$.os_version\"),\nAccDevBrowser = json_extract(access_device, \"$.browser\")\n| alter AppSrc = json_extract(application, \"$.name\")\n| filter IPAddress not contains \"0.0.0.0\" and (AccDevLocationCN != NULL or len(AccDevLocationCN) > 4)\n| alter AccDevLocationCN = replace(AccDevLocationCN, \"\\\"\", \"\")\n| filter AccDevLocationCN not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\")\n| fields _raw_log as EventLog, DuoUserName, reason, IPAddress,\nresult, eventtype, email, AccDevLocationCN\n\n| filter email in (\"<emails>\")\n| comp count() as counter by AccDevLocationCN,\nemail\n| filter counter >= 1"}
{"prompt": "I want to see Windows security events related to SAM Registry Hive handle requests.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4656 and ObjectType = \"Key\" and ObjectName ~= \".*\\\\SAM\")\n\n\n\n"}
{"prompt": "I want to see all instances of an agent stopping the Xagt process and compare it to the last known status of that agent.", "response": "dataset = xdr_data\n| filter actor_process_command_line contains \"stop*xagt\"\n| fields agent_hostname as Hostname, action_file_path, actor_process_image_path as apip,\nactor_process_command_line as apcl, causality_actor_process_image_path as capip,\ncausality_actor_process_command_line as capcl, os_actor_process_image_path as osapip,\nos_actor_process_command_line as ospcl, _time as CXReportTime\n| dedup Hostname\n| join type = inner\n(dataset = host_inventory\n| arrayexpand services\n| alter Agent_Name = json_extract(services, \"$.display_name\"),\nAgent_Status = json_extract(services, \"$.started\"),\nAgent_State = json_extract(services, \"$.state\")\n| filter Agent_Name ~= \"(\\\"FireEye Endpoint Agent\\\")\"\n) as AC AC.host_name = Hostname\n| alter diff = timestamp_diff(CXReportTime, _time, \"MINUTE\")\n| fields CXReportTime, Hostname, Agent_Name, Agent_Status,\ndiff as OTimeDiff, apip, apcl, _time as ObservedTime,\ncapip, capcl, osapip, ospcl\n| sort asc OTimeDiff,\ndesc Hostname"}
{"prompt": "I want to find potential information disclosure attempts targeting Milesight routers exploiting CVE-2023-43261.", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and xdm.network.http.url contains \"/lang/log/httpd.log\" and xdm.network.http.response_code = 200)\n\n\n\n"}
{"prompt": "I want to see all CloudTrail events related to creating, updating, deleting, starting, or stopping trails, focusing on events involving the \"root\" user.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name = \"EV_CloudTrail\"\n| filter eventName IN (\"CreateTrail\", \"UpdateTrail\", \"DeleteTrail\", \"StartLogging\", \"StopLogging\")\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username1 = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username2 = json_extract_scalar(userIdentity, \"$.userName\"),\ntarget_username3 = trim(json_extract(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"\\\"\")\n| filter target_username1 = \"root\" or target_username2 = \"root\" or target_username3 = \"root\" or source_username = \"root\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about unusual executions of the Whoami.EXE program.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\whoami\\.exe\" or actor_process_file_original_name = \"whoami.exe\") and  not ((actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_image_path = \"None\" or actor_process_image_path = \"\") and  not (actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Monitoring\\ Agent\\\\Agent\\\\MonitoringHost\\.exe\")\n\n\n\n"}
{"prompt": "I want to see all events where PowerShell is used to stop a Windows service.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\") or (action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\")) and action_process_image_command_line contains \"Stop-Service \")\n\n\n\n"}
{"prompt": " I want to see which processes are accessing the microphone and webcam on my endpoints. ", "response": "preset = xdr_event_log\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4657, 4656, 4663) and (ObjectName contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\CapabilityAccessManager\\\\ConsentStore\\\\microphone\\\\NonPackaged\" or ObjectName contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\CapabilityAccessManager\\\\ConsentStore\\\\webcam\\\\NonPackaged\"))\n\n\n\n"}
{"prompt": "I want to see alerts about processes using csvde.exe to export Active Directory data to a file.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\csvde\\.exe\" or actor_process_file_original_name = \"csvde.exe\") and action_process_image_command_line contains \" -f\") and  not (action_process_image_command_line contains \" -i\")\n\n\n\n"}
{"prompt": "I want to see alerts for when Okta policy rules are modified or deleted.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type in (\"policy.rule.update\", \"policy.rule.delete\")\n\n\n\n"}
{"prompt": "I want to see a list of all successful and failed logon events for users and their associated groups.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4964\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to detect instances of PowerShell using the \"Unblock-File\" cmdlet with suspicious file paths. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Unblock-File \" and ScriptBlockText contains \"-Path \")\n\n\n\n"}
{"prompt": "I want to find instances where RdrLeakDiag.EXE is used to create memory dumps of processes.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"fullmemdmp\" or action_process_image_command_line contains \"/memdmp\" or action_process_image_command_line contains \"-memdmp\") and (action_process_image_command_line contains \" -o \" or action_process_image_command_line contains \" /o \") and (action_process_image_command_line contains \" -p \" or action_process_image_command_line contains \" /p \")) or ((action_process_image_path ~= \".*\\\\rdrleakdiag\\.exe\" or actor_process_file_original_name = \"RdrLeakDiag.exe\") and (action_process_image_command_line contains \"fullmemdmp\" or action_process_image_command_line contains \"/memdmp\" or action_process_image_command_line contains \"-memdmp\"))\n\n\n\n"}
{"prompt": "I want to see information about unauthorized software installed on machines, specifically processes named \"webtunnel-client\" or \"rot.exe\".", "response": "config case_sensitive = false\n| dataset = xdr_data\n| filter event_type = PROCESS and event_sub_type = PROCESS_START\n| filter action_process_image_name contains \"webtunnel-client\" or action_process_image_name = \"rot.exe\"\n| fields action_process_image_name, actor_effective_username,\nagent_hostname, agent_ip_addresses"}
{"prompt": "I want to detect the creation of self-extracting directive files (.sed) in suspicious locations like ProgramData, Temp, and Windows folders.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*\\:\\\\ProgramData\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Temp\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") and xdm.target.file.filename ~= \".*\\.sed\")\n\n\n\n"}
{"prompt": "I want to find events related to disabling PUA Protection on Windows Defender through the registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Policies\\\\Microsoft\\\\Windows Defender\\\\PUAProtection\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to see events related to potential Metasploit SMB authentication attempts on my endpoints.", "response": "preset = xdr_event_log\n| alter LogonType = regextract(to_json_string(action_evtlog_data_fields)->LogonType{}, \"\\\"(.*)\\\"\")\n| alter AuthenticationPackageName = regextract(to_json_string(action_evtlog_data_fields)->AuthenticationPackageName{}, \"\\\"(.*)\\\"\")\n| alter WorkstationName = regextract(to_json_string(action_evtlog_data_fields)->WorkstationName{}, \"\\\"(.*)\\\"\")\n| alter Workstation = regextract(to_json_string(action_evtlog_data_fields)->Workstation{}, \"\\\"(.*)\\\"\")\n| filter ((action_evtlog_event_id in (4625, 4624) and LogonType = 3 and AuthenticationPackageName = \"NTLM\" and WorkstationName ~= \"^[A-Za-z0-9]{16}$\") or (action_evtlog_event_id = 4776 and Workstation ~= \"^[A-Za-z0-9]{16}$\"))\n\n\n\n"}
{"prompt": "I want to see PowerShell events using the Get-NetTCPConnection cmdlet on my endpoints.", "response": "preset = xdr_event_log\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter ContextInfo contains \"Get-NetTCPConnection\"\n\n\n\n"}
{"prompt": " I want to find instances where files from the Windows event log have been deleted. ", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\winevt\\\\Logs\\\\.*\" and xdm.target.file.filename ~= \".*\\.evtx\")\n\n\n\n"}
{"prompt": "I want to find instances where someone has disabled warnings about Office macros by tampering with the registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Security\\\\VBAWarnings\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to see Fortigate configuration change events for device(s) <ip>.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter xdm.event.original_event_type in (\"0100032104\", \"0100032099\")\n| alter FG_Device_Address = fortinet_fortigate_raw._final_reporting_device_ip,\nFG1_Device_Address = fortinet_fortigate1_raw._final_reporting_device_ip\n| filter FG_Device_Address in (\"<ip>\") or FG1_Device_Address in (\"<ip>\")"}
{"prompt": "I want to see events where legitimate applications like Word or Excel are dropping archives like .zip, .rar, or .7z files.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\winword\\.exe\" or xdm.target.process.name ~= \".*\\\\excel\\.exe\" or xdm.target.process.name ~= \".*\\\\powerpnt\\.exe\" or xdm.target.process.name ~= \".*\\\\msaccess\\.exe\" or xdm.target.process.name ~= \".*\\\\mspub\\.exe\" or xdm.target.process.name ~= \".*\\\\eqnedt32\\.exe\" or xdm.target.process.name ~= \".*\\\\visio\\.exe\" or xdm.target.process.name ~= \".*\\\\wordpad\\.exe\" or xdm.target.process.name ~= \".*\\\\wordview\\.exe\" or xdm.target.process.name ~= \".*\\\\certutil\\.exe\" or xdm.target.process.name ~= \".*\\\\certoc\\.exe\" or xdm.target.process.name ~= \".*\\\\CertReq\\.exe\" or xdm.target.process.name ~= \".*\\\\Desktopimgdownldr\\.exe\" or xdm.target.process.name ~= \".*\\\\esentutl\\.exe\" or xdm.target.process.name ~= \".*\\\\finger\\.exe\" or xdm.target.process.name ~= \".*\\\\notepad\\.exe\" or xdm.target.process.name ~= \".*\\\\AcroRd32\\.exe\" or xdm.target.process.name ~= \".*\\\\RdrCEF\\.exe\" or xdm.target.process.name ~= \".*\\\\mshta\\.exe\" or xdm.target.process.name ~= \".*\\\\hh\\.exe\") or (xdm.source.process.name ~= \".*\\\\winword\\.exe\" or xdm.source.process.name ~= \".*\\\\excel\\.exe\" or xdm.source.process.name ~= \".*\\\\powerpnt\\.exe\" or xdm.source.process.name ~= \".*\\\\msaccess\\.exe\" or xdm.source.process.name ~= \".*\\\\mspub\\.exe\" or xdm.source.process.name ~= \".*\\\\eqnedt32\\.exe\" or xdm.source.process.name ~= \".*\\\\visio\\.exe\" or xdm.source.process.name ~= \".*\\\\wordpad\\.exe\" or xdm.source.process.name ~= \".*\\\\wordview\\.exe\" or xdm.source.process.name ~= \".*\\\\certutil\\.exe\" or xdm.source.process.name ~= \".*\\\\certoc\\.exe\" or xdm.source.process.name ~= \".*\\\\CertReq\\.exe\" or xdm.source.process.name ~= \".*\\\\Desktopimgdownldr\\.exe\" or xdm.source.process.name ~= \".*\\\\esentutl\\.exe\" or xdm.source.process.name ~= \".*\\\\finger\\.exe\" or xdm.source.process.name ~= \".*\\\\notepad\\.exe\" or xdm.source.process.name ~= \".*\\\\AcroRd32\\.exe\" or xdm.source.process.name ~= \".*\\\\RdrCEF\\.exe\" or xdm.source.process.name ~= \".*\\\\mshta\\.exe\" or xdm.source.process.name ~= \".*\\\\hh\\.exe\")) and (xdm.target.file.filename ~= \".*\\.zip\" or xdm.target.file.filename ~= \".*\\.rar\" or xdm.target.file.filename ~= \".*\\.7z\" or xdm.target.file.filename ~= \".*\\.diagcab\" or xdm.target.file.filename ~= \".*\\.appx\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious password-protected ZIP files being opened on endpoints. Specifically, I'm looking for files with names related to invoices, orders, payments, or deliveries.", "response": "preset = xdr_event_log\n| alter TargetName = regextract(to_json_string(action_evtlog_data_fields)->TargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5379 and TargetName contains \"Microsoft_Windows_Shell_ZipFolder:filename\") and (TargetName contains \"invoice\" or TargetName contains \"new order\" or TargetName contains \"rechnung\" or TargetName contains \"factura\" or TargetName contains \"delivery\" or TargetName contains \"purchase\" or TargetName contains \"order\" or TargetName contains \"payment\")\n\n\n\n"}
{"prompt": "I want to see events related to processes abusing debug privileges by creating child processes from trusted system images and using PowerShell, cmd.exe or pwsh.exe.", "response": "preset = xdr_process\n| filter (((actor_process_image_path ~= \".*\\\\winlogon\\.exe\" or actor_process_image_path ~= \".*\\\\services\\.exe\" or actor_process_image_path ~= \".*\\\\lsass\\.exe\" or actor_process_image_path ~= \".*\\\\csrss\\.exe\" or actor_process_image_path ~= \".*\\\\smss\\.exe\" or actor_process_image_path ~= \".*\\\\wininit\\.exe\" or actor_process_image_path ~= \".*\\\\spoolsv\\.exe\" or actor_process_image_path ~= \".*\\\\searchindexer\\.exe\") and (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\")) and ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\", \"Cmd.Exe\"))) and  not ((action_process_image_command_line contains \" route \" and action_process_image_command_line contains \" ADD \"))\n\n\n\n"}
{"prompt": "I want to see alerts related to attempts to set the Directory Services Restore Mode administrator password.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4794\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name,\ntarget_domain\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "{I want to see alerts about attempts to set the DSRM administrator password in Windows Event Logs.} \n\n\nLet me know if you need help with other parts of the XQL query or prompt generation!", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4794\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of attackers using MSHTA and VBScript to obfuscate system calls.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \"mshta\" and actor_process_image_path contains \"vbscript:createobject\"))\n\n\n\n"}
{"prompt": "I want to find suspicious modifications to registry keys related to file system behavior and autorun functionality.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Software\\\\Classes\" and (action_registry_key_name contains \"\\\\Folder\\\\ShellEx\\\\ExtShellFolderViews\" or action_registry_key_name contains \"\\\\Folder\\\\ShellEx\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\Folder\\\\Shellex\\\\ColumnHandlers\" or action_registry_key_name contains \"\\\\Filter\" or action_registry_key_name contains \"\\\\Exefile\\\\Shell\\\\Open\\\\Command\\\\(Default)\" or action_registry_key_name contains \"\\\\Directory\\\\Shellex\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\Directory\\\\Shellex\\\\CopyHookHandlers\" or action_registry_key_name contains \"\\\\CLSID\\\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\\\Instance\" or action_registry_key_name contains \"\\\\Classes\\\\AllFileSystemObjects\\\\ShellEx\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\.exe\" or action_registry_key_name contains \"\\\\.cmd\" or action_registry_key_name contains \"\\\\ShellEx\\\\PropertySheetHandlers\" or action_registry_key_name contains \"\\\\ShellEx\\\\ContextMenuHandlers\")) and  not ((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\") or (action_registry_value_name = \"{807583E5-5146-11D5-A672-00B0D022E945}\" or action_registry_data = \"{807583E5-5146-11D5-A672-00B0D022E945}\") or actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\drvinst.exe\" or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\svchost.exe\" and action_registry_key_name ~= \".*\\\\lnkfile\\\\shellex\\\\ContextMenuHandlers\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to identify potentially suspicious Rundll32 activity on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"javascript:\" and action_process_image_command_line contains \".RegisterXLL\") or (action_process_image_command_line contains \"url.dll\" and action_process_image_command_line contains \"OpenURL\") or (action_process_image_command_line contains \"url.dll\" and action_process_image_command_line contains \"OpenURLA\") or (action_process_image_command_line contains \"url.dll\" and action_process_image_command_line contains \"FileProtocolHandler\") or (action_process_image_command_line contains \"zipfldr.dll\" and action_process_image_command_line contains \"RouteTheCall\") or (action_process_image_command_line contains \"shell32.dll\" and action_process_image_command_line contains \"Control_RunDLL\") or (action_process_image_command_line contains \"shell32.dll\" and action_process_image_command_line contains \"ShellExec_RunDLL\") or (action_process_image_command_line contains \"mshtml.dll\" and action_process_image_command_line contains \"PrintHTML\") or (action_process_image_command_line contains \"advpack.dll\" and action_process_image_command_line contains \"LaunchINFSection\") or (action_process_image_command_line contains \"advpack.dll\" and action_process_image_command_line contains \"RegisterOCX\") or (action_process_image_command_line contains \"ieadvpack.dll\" and action_process_image_command_line contains \"LaunchINFSection\") or (action_process_image_command_line contains \"ieadvpack.dll\" and action_process_image_command_line contains \"RegisterOCX\") or (action_process_image_command_line contains \"ieframe.dll\" and action_process_image_command_line contains \"OpenURL\") or (action_process_image_command_line contains \"shdocvw.dll\" and action_process_image_command_line contains \"OpenURL\") or (action_process_image_command_line contains \"syssetup.dll\" and action_process_image_command_line contains \"SetupInfObjectInstallAction\") or (action_process_image_command_line contains \"setupapi.dll\" and action_process_image_command_line contains \"InstallHinfSection\") or (action_process_image_command_line contains \"pcwutl.dll\" and action_process_image_command_line contains \"LaunchApplication\") or (action_process_image_command_line contains \"dfshim.dll\" and action_process_image_command_line contains \"ShOpenVerbApplication\") or (action_process_image_command_line contains \"dfshim.dll\" and action_process_image_command_line contains \"ShOpenVerbShortcut\") or (action_process_image_command_line contains \"scrobj.dll\" and action_process_image_command_line contains \"GenerateTypeLib\" and action_process_image_command_line contains \"http\") or (action_process_image_command_line contains \"shimgvw.dll\" and action_process_image_command_line contains \"ImageView_Fullscreen\" and action_process_image_command_line contains \"http\") or (action_process_image_command_line contains \"comsvcs.dll\" and action_process_image_command_line contains \"MiniDump\")) and  not (action_process_image_command_line contains \"shell32.dll,Control_RunDLL desk.cpl,screensaver,@screensaver\" or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\control.exe\" and actor_process_image_command_line contains \".cpl\" and (action_process_image_command_line contains \"Shell32.dll\" and action_process_image_command_line contains \"Control_RunDLL\" and action_process_image_command_line contains \".cpl\")) or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\control.exe\" and action_process_image_command_line ~= \"\\\"C\\:\\\\Windows\\\\system32\\\\rundll32\\.exe\\\"\\ Shell32\\.dll\\,Control\\_RunDLL\\ \\\"C\\:\\\\Windows\\\\System32\\\\.*\" and action_process_image_command_line ~= \".*\\.cpl\\\"\\,\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious reconnaissance activity using the Get-LocalGroupMember PowerShell cmdlet on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Get-LocalGroupMember \" and (action_process_image_command_line contains \"domain admins\" or action_process_image_command_line contains \" administrator\" or action_process_image_command_line contains \" administrateur\" or action_process_image_command_line contains \"enterprise admins\" or action_process_image_command_line contains \"Exchange Trusted Subsystem\" or action_process_image_command_line contains \"Remote Desktop Users\" or action_process_image_command_line contains \"Utilisateurs du Bureau \ufffd\ufffd\ufffd\ufffd\ufffd\ufffd distance\" or action_process_image_command_line contains \"Usuarios de escritorio remoto\"))\n\n\n\n"}
{"prompt": " I want to create an alert for events related to our defined Dutch bank servers that include specific event IDs like 11707, 4688, 11724, and 598.  ", "response": "Datamodel dataset = microsoft_windows_raw\n| join type = inner\n(dataset = db_bank_servers\n) as dbbnk dbbnk.Hostname = xdm.source.host.hostname\n| filter xdm.event.id in (\"11707\", \"4688\", \"11724\", \"598\") and Hostname ~= xdm.source.host.hostname"}
{"prompt": "I want to see when users log on to specific computers and which groups they belong to.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4964\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect WMI persistence using command line events from the Windows Event Log.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe\" and action_module_path ~= \".*\\\\wbemcons\\.dll\")\n\n\n\n"}
{"prompt": "I want to see events where files with suspicious extensions like .aspx, .asp, or .exe are dropped by processes related to Exchange Server.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\w3wp\\.exe\" or xdm.source.process.name ~= \".*\\\\w3wp\\.exe\") and xdm.target.process.command_line contains \"MSExchange\") and (xdm.target.file.filename ~= \".*\\.aspx\" or xdm.target.file.filename ~= \".*\\.asp\" or xdm.target.file.filename ~= \".*\\.ashx\" or xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.exe\" or xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.vbs\"))\n\n\n\n"}
{"prompt": "I want to detect instances of creating new Windows services using the sc.exe command.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\sc\\.exe\" and (action_process_image_command_line contains \"create\" and action_process_image_command_line contains \"binPath\"))\n\n\n\n"}
{"prompt": "I want to see all failed password change attempts towards CyberArk Safe accounts by specific users.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4723\")\n| filter xdm.target.user.username IN (\"app_admin_adisports\", \"app_admin_bdo\", \"app_admin_rbl\", \"db_admin_bdo\", \"db_admin_rbl\", \"os_admin_bdo\", \"os_admin_adisports\", \"os_admin_rbl\", \"finassure_admin_bdo\", \"finassure_admin_rbl\", \"kba_admin_adisports\", \"kba_admin_bdo_nonprod\", \"kba_admin_bdo_prod\")\n| filter xdm.event.outcome in (\"FAILED\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential persistence threats related to Excel add-ins through changes made to the Windows registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*Software\\\\Microsoft\\\\Office\\\\.*\" and action_registry_key_name ~= \".*\\\\Excel\\\\Options\" and (action_registry_value_name ~= \"\\/R\\ .*\" or action_registry_data ~= \"\\/R\\ .*\") and (action_registry_value_name ~= \".*\\.xll\" or action_registry_data ~= \".*\\.xll\"))\n\n\n\n"}
{"prompt": "I want to see if there are multiple password changes by the same user within a short period of time.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4723\")\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.source.user.username != xdm.source.host.hostname and xdm.source.user.username not in (\"ANONYMOUS LOGON\") and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username not in (\"ussftp_ldap\", \"sftp_use\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": " I want to find recent file creations that link to ISO, IMG, VHD, or VHDX files, as this could indicate phishing activity. ", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*\\.iso\\.lnk\" or xdm.target.file.filename ~= \".*\\.img\\.lnk\" or xdm.target.file.filename ~= \".*\\.vhd\\.lnk\" or xdm.target.file.filename ~= \".*\\.vhdx\\.lnk\") and xdm.target.file.filename ~= \".*\\\\Microsoft\\\\Windows\\\\Recent\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find instances of potential Pulse Connect Secure RCE attacks based on specific URL patterns.", "response": "datamodel\n| filter ((xdm.network.http.url contains \"/dana-na/auth/\" or xdm.network.http.url contains \"/dana-ws/\" or xdm.network.http.url contains \"/dana-cached/\") and (xdm.network.http.url contains \"*id=\" or xdm.network.http.url contains \"*token=\" or xdm.network.http.url contains \"Secid_canceltoken.cgi\" or xdm.network.http.url contains \"CGI::param\" or xdm.network.http.url contains \"meeting\" or xdm.network.http.url contains \"smb\" or xdm.network.http.url contains \"namedusers\" or xdm.network.http.url contains \"metric\"))\n\n\n\n"}
{"prompt": "I want to see events where users are creating or deleting security groups but aren't admins.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id = \"4764\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "{ I want to see Azure events related to route table configuration changes. } \n\n\nThis captures the essence of the XQL query's purpose while being clear and concise for a user.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.network/routetables/write\", \"microsoft.network/routetables/delete\", \"microsoft.network/routetables/routes/write\", \"microsoft.network/routetables/routes/delete\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"9227fdca-483d-424c-bc56-9fd2b4030484\", \"3fd7f1e1-88df-41df-982e-90c0daa354b9\", \"f2a4f062-8a8b-444f-82b8-e668b51cf42e\", \"71cce8cd-49d7-4463-bf9f-20dd2a68c5eb\", \"416105b8-5451-4d32-8f96-fcb0deb64ae0\", \"799febb6-d243-48d7-86a3-e94c956f46ba\", \"7269cfc9-f839-4437-9ded-f6d4bdec41d2\", \"8de7d5e6-d76e-497e-97c2-557d13d801e8\")\n| filter username != null\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to volume shadow copy mounts on endpoints.", "response": "preset = xdr_event_log\n| alter DeviceName = regextract(to_json_string(action_evtlog_data_fields)->DeviceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Microsoft-Windows-Ntfs\" and action_evtlog_event_id = 98 and DeviceName contains \"HarddiskVolumeShadowCopy\")\n\n\n\n"}
{"prompt": "I want to find instances where the PowerShell Execution Policy might have been tampered with.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\ShellIds\\\\Microsoft\\.PowerShell\\\\ExecutionPolicy\" or action_registry_key_name ~= \".*\\\\Policies\\\\Microsoft\\\\Windows\\\\PowerShell\\\\ExecutionPolicy\") and ((action_registry_value_name contains \"Bypass\" or action_registry_value_name contains \"Unrestricted\") or (action_registry_data contains \"Bypass\" or action_registry_data contains \"Unrestricted\"))) and  not ((actor_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple ZScaler ProxyAvoidance category URLs based on behavioral analysis.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category ~= \"Anonymizer\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 50\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find suspicious shell script executions happening from temporary directories on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \"\\/tmp\\/.*\" and (action_process_image_path ~= \".*\\/bash\" or action_process_image_path ~= \".*\\/csh\" or action_process_image_path ~= \".*\\/dash\" or action_process_image_path ~= \".*\\/fish\" or action_process_image_path ~= \".*\\/ksh\" or action_process_image_path ~= \".*\\/sh\" or action_process_image_path ~= \".*\\/zsh\"))\n\n\n\n"}
{"prompt": "I want to see allowed connections from my Fortigate firewall that match domains flagged by Facebook as malicious.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter xdm.observer.action in (\"passthrough\") and xdm.event.type ~= \"utm:webfilter\"\n| join\n(dataset = cv_fb_mz_iocs\n| filter ioc_description in (\"FB_Malicious_Domain\") and ioc_type in (\"domain\")\n) as ioclookup ioclookup.ioc_value = xdm.target.host.fqdn\n| filter (xdm.network.http.domain ~= ioc_value) or (ioc_value ~= xdm.target.host.fqdn)"}
{"prompt": "I want to find instances where PowerShell was used to delete mounted shares.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Remove-SmbShare\" or ScriptBlockText contains \"Remove-FileShare\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential LethalHTA technique executions where svchost.exe is being used to spawn mshta.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and action_process_image_path ~= \".*\\\\mshta\\.exe\")\n\n\n\n"}
{"prompt": "I want to see all instances of Rundll32 being executed without parameters on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line in (\"rundll32.exe\", \"rundll32\")\n\n\n\n"}
{"prompt": "I want to find out about potential brute force attempts on SOX clients. I'm interested in seeing details like usernames, IP addresses, and timestamps of failed logins that happened frequently within a short period.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| alter TargetUserName = event_data -> TargetUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nSubjectUserSid = event_data -> SubjectUserSid,\nTargetDomainName = event_data -> TargetDomainName,\nStatus = event_data -> Status,\nProcessId = event_data -> ProcessId,\nSubjectUserName = event_data -> SubjectUserName,\nSubjectLogonId = event_data -> SubjectLogonId,\nTargetUserSid = event_data -> TargetUserSid,\nFailureReason = event_data -> FailureReason,\nSubStatus = event_data -> SubStatus,\nSubStatusDescription = \"Account is currently disabled\",\nLogonType = event_data -> LogonType,\nLogonTypeDescription = \"A user or computer logged on to this computer from the network.\",\nLogonProcessName = event_data -> LogonProcessName,\nAuthenticationPackageName = event_data -> AuthenticationPackageName,\nWorkstationName = event_data -> WorkstationName,\nTransmittedServices = event_data -> TransmittedServices,\nLmPackageName = event_data -> LmPackageName,\nKeyLength = event_data -> KeyLength,\nProcessName = event_data -> ProcessName,\nSourceIpAddress = event_data -> IpAddress,\nIpPort = event_data -> IpPort\n| filter event_id in (4625) and (SubjectUserName != NULL or SubjectUserName != \"-\") and SourceIpAddress in (\"10.140.8.32\", \"10.140.8.36\", \"10.140.8.38\", \"10.140.8.71\", \"10.140.8.72\", \"10.140.8.73\", \"172.28.70.1\")\n| fields AuthenticationPackageName, FailureReason, IpPort,\nKeyLength, LmPackageName, LogonProcessName, LogonType,\nLogonTypeDescription, ProcessId, ProcessName, SourceIpAddress,\nSubjectUserName, event_data, event_result, event_action,\nmessage, _collector_hostname, _collector_id, _collector_ip_address,\n_collector_name, _collector_type, event_id, event_result\n| comp first(_time) as FirstEventTimestamp,\nlatest(_time) as LatestEventTimestamp,\ncount_distinct(_time) as UniqueEventsCount,\ncount(event_id) as EventCount by SubjectUserName,\nSourceIpAddress,\nevent_id,\nLogonTypeDescription,\nevent_action,\n_collector_ip_address addrawdata = true as RawEventData\n| filter UniqueEventsCount >= 15 and timestamp_diff(LatestEventTimestamp, FirstEventTimestamp, \"MINUTE\") <= 10"}
{"prompt": "I want to find any suspicious instances of Svchost being launched with an uncommon parent process.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\svchost\\.exe\" and  not ((actor_process_image_path ~= \".*\\\\Mrt\\.exe\" or actor_process_image_path ~= \".*\\\\MsMpEng\\.exe\" or actor_process_image_path ~= \".*\\\\ngen\\.exe\" or actor_process_image_path ~= \".*\\\\rpcnet\\.exe\" or actor_process_image_path ~= \".*\\\\services\\.exe\" or actor_process_image_path ~= \".*\\\\TiWorker\\.exe\") or actor_process_image_path = \"None\" or actor_process_image_path in (\"-\", \"\"))\n\n\n\n"}
{"prompt": "I want to detect potential network sniffing activity on my endpoints using tools like tshark and windump.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\tshark\\.exe\" and action_process_image_command_line contains \"-i\") or action_process_image_path ~= \".*\\\\windump\\.exe\")\n\n\n\n"}
{"prompt": "I want to detect potential exploitation attempts of CVE-2022-29072, which allows privilege escalation and command execution through 7-Zip on Windows.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and actor_process_image_path ~= \".*\\\\7zFM\\.exe\") and  not ((action_process_image_command_line contains \" /c \" or action_process_image_command_line contains \" /k \" or action_process_image_command_line contains \" /r \") or action_process_image_command_line = \"None\")\n\n\n\n"}
{"prompt": "I want to find out if any new domain controllers have been added or existing ones removed from our Infosys network.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.target.user.groups = \"domain controllers\"\n\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see details about CyberArk password changes that happened on specific reference IDs, excluding those related to expiration periods and from the \"skyboxlb\" user.", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_src = xdm.target.user.username,\nuser_dst = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station != \"10.64.103.83\" and device_ip != \"10.64.103.83\"\n| filter reference_id in (24, 57) and reason !~= \"ExpirationPeriod\" and user_src not in (\"skyboxlb\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where an attacker might be trying to steal Google Chrome login information.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Copy-Item\" and ScriptBlockText contains \"-Destination\") and (ScriptBlockText contains \"\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Login Data\" or ScriptBlockText contains \"\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Login Data For Account\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious PowerShell IEX execution patterns on my endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \" | iex;\" or action_process_image_command_line contains \" | iex \" or action_process_image_command_line contains \" | iex}\" or action_process_image_command_line contains \" | IEX ;\" or action_process_image_command_line contains \" | IEX -Error\" or action_process_image_command_line contains \" | IEX (new\" or action_process_image_command_line contains \");IEX \")) and (action_process_image_command_line contains \"::FromBase64String\" or action_process_image_command_line contains \".GetString([System.Convert]::\")) or (action_process_image_command_line contains \")|iex;$\" or action_process_image_command_line contains \");iex($\" or action_process_image_command_line contains \");iex $\" or action_process_image_command_line contains \" | IEX | \" or action_process_image_command_line contains \" | iex\\\\\\\"\")\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that are changing permissions using Set-Acl.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\") or (action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\")) and (action_process_image_command_line contains \"Set-Acl \" and action_process_image_command_line contains \"-AclObject \" and action_process_image_command_line contains \"-Path \"))\n\n\n\n"}
{"prompt": "I want to find files named \"dllhost.exe\" located in the \"C:\\\\users\\\\public\\\\Documents\\\" directory that might be indicators of a COLDSTEEL RAT infection.", "response": "datamodel\n| filter xdm.target.file.filename = \"C:\\\\users\\\\public\\\\Documents\\\\dllhost.exe\"\n\n\n\n"}
{"prompt": "I want to find instances of the \"cloudflared\" binary being executed from locations outside its typical installation directories.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\cloudflared\\.exe\" and  not ((action_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\cloudflared\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\cloudflared\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see all instances where scheduled tasks were created and files were involved.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\Tasks\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see all relevant antivirus signature keywords mentioned in application logs from my endpoints.", "response": "preset = xdr_event_log\n| alter Level = regextract(to_json_string(action_evtlog_data_fields)->Level{}, \"\\\"(.*)\\\"\")\n| filter ( contains \"Adfind\" or  contains \"ASP/BackDoor\" or  contains \"ATK/\" or  contains \"Backdoor.ASP\" or  contains \"Backdoor.Cobalt\" or  contains \"Backdoor.JSP\" or  contains \"Backdoor.PHP\" or  contains \"Blackworm\" or  contains \"Brutel\" or  contains \"BruteR\" or  contains \"Chopper\" or  contains \"Cobalt\" or  contains \"COBEACON\" or  contains \"Cometer\" or  contains \"CRYPTES\" or  contains \"Cryptor\" or  contains \"Destructor\" or  contains \"DumpCreds\" or  contains \"Exploit.Script.CVE\" or  contains \"FastReverseProxy\" or  contains \"Filecoder\" or  contains \"GrandCrab\" or  contains \"HackTool\" or  contains \"HKTL:\" or  contains \"HKTL.\" or  contains \"HKTL/\" or  contains \"HTool\" or  contains \"IISExchgSpawnCMD\" or  contains \"Impacket\" or  contains \"JSP/BackDoor\" or  contains \"Keylogger\" or  contains \"Koadic\" or  contains \"Krypt\" or  contains \"Lazagne\" or  contains \"Metasploit\" or  contains \"Meterpreter\" or  contains \"MeteTool\" or  contains \"Mimikatz\" or  contains \"Mpreter\" or  contains \"Nighthawk\" or  contains \"Packed.Generic.347\" or  contains \"PentestPowerShell\" or  contains \"Phobos\" or  contains \"PHP/BackDoor\" or  contains \"PowerSploit\" or  contains \"PowerSSH\" or  contains \"PshlSpy\" or  contains \"PSWTool\" or  contains \"PWCrack\" or  contains \"PWDump\" or  contains \"Ransom\" or  contains \"Rozena\" or  contains \"Ryzerlo\" or  contains \"Sbelt\" or  contains \"Seatbelt\" or  contains \"SecurityTool\" or  contains \"SharpDump\" or  contains \"Sliver\" or  contains \"Splinter\" or  contains \"Swrort\" or  contains \"Tescrypt\" or  contains \"TeslaCrypt\" or  contains \"Valyria\" or  contains \"Webshell\") and  not (( contains \"Keygen\" or  contains \"Crack\" or  contains \"anti_ransomware_service.exe\" or  contains \"cyber-protect-service.exe\") or Level = 4 or provider_name = \"Microsoft-Windows-RestartManager\")\n\n\n\n"}
{"prompt": "{I want to detect potential container discovery attempts using inode listing commands on endpoints.} \n\n\nThis prompt captures the essence of the query and its purpose: detecting suspicious activity related to container discovery through inode listings on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/ls\" and (action_process_image_command_line contains \" -*i\" and action_process_image_command_line contains \" -*d\") and action_process_image_command_line ~= \".*\\ \\/\")\n\n\n\n"}
{"prompt": " I want to see alerts about potential abuse of AgentExecutor PowerShell execution on endpoints. ", "response": "preset = xdr_process\n| filter ((action_process_image_path = \"\\\\AgentExecutor.exe\" or actor_process_file_original_name = \"AgentExecutor.exe\") and (action_process_image_command_line contains \" -powershell\" or action_process_image_command_line contains \" -remediationScript\"))\n\n\n\n"}
{"prompt": "I want to see all changes, additions, removals, and membership-related activities for high-privileged admin groups like \"Read-Only Domain Controllers\" and \"Denied RODC Password Replication Group\".", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.target.user.groups IN (\"cert publishers\", \"group policy creator owners\", \"read-only domain controllers\", \"schema admins\", \"denied rodc password replication group\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for suspicious access attempts to Azure AD Health service agent registry keys and sub-keys.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4656, 4663) and ObjectType = \"Key\" and ObjectName = \"\\\\REGISTRY\\\\MACHINE\\\\SOFTWARE\\\\Microsoft\\\\ADHealthAgent\") and  not ((ProcessName contains \"Microsoft.Identity.Health.Adfs.DiagnosticsAgent.exe\" or ProcessName contains \"Microsoft.Identity.Health.Adfs.InsightsService.exe\" or ProcessName contains \"Microsoft.Identity.Health.Adfs.MonitoringAgent.Startup.exe\" or ProcessName contains \"Microsoft.Identity.Health.Adfs.PshSurrogate.exe\" or ProcessName contains \"Microsoft.Identity.Health.Common.Clients.ResourceMonitor.exe\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious activity related to browsing data access on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\where\\.exe\" or actor_process_file_original_name = \"where.exe\") and (action_process_image_command_line contains \"places.sqlite\" or action_process_image_command_line contains \"cookies.sqlite\" or action_process_image_command_line contains \"formhistory.sqlite\" or action_process_image_command_line contains \"logins.json\" or action_process_image_command_line contains \"key4.db\" or action_process_image_command_line contains \"key3.db\" or action_process_image_command_line contains \"sessionstore.jsonlz4\" or action_process_image_command_line contains \"History\" or action_process_image_command_line contains \"Bookmarks\" or action_process_image_command_line contains \"Cookies\" or action_process_image_command_line contains \"Login Data\"))\n\n\n\n"}
{"prompt": "I want to find potential Cobalt Strike activity by looking for suspicious DNS queries, specifically those matching patterns like \"aaa\\.stage\\..\" or \".stage.123456.\"", "response": "datamodel\n| filter ((xdm.network.dns.dns_question.name ~= \"aaa\\.stage\\..*\" or xdm.network.dns.dns_question.name ~= \"post\\.1.*\") or xdm.network.dns.dns_question.name contains \".stage.123456.\")\n\n\n\n"}
{"prompt": "I want to see all CyberArk events where \"Administrator\" logged in, including the user who logged them in and the action taken.", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_src = xdm.target.user.username,\nuser_dst = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station != \"<ip>\" and device_ip != \"<ip>\"\n| filter user_dst in (\"Administrator\", \"administrator\") and user_src not in (\"skyboxlb\", null, \"\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to malicious processes that use Cmd.EXE to access Volume Shadow Copies.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"copy \" and action_process_image_command_line contains \"\\\\\\\\?\\\\GLOBALROOT\\\\Device\\\\HarddiskVolumeShadowCopy\")\n\n\n\n"}
{"prompt": "I want to find Cisco Catalyst switches that have had at least 15 port security violations within a 3-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 3m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter msg_id in (\"PORT_SECURITY-SP-2-PSECURE_VIOLATION\", \"PORT_SECURITY-2-PSECURE_VIOLATION\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\neth_src,\n_time\n| filter matched_events >= 15\n| alter aggregation_criteria = \"devicemacaddress\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 15)), 1)"}
{"prompt": "I want to see security group configuration changes made on AWS, excluding specific users and groups.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name != \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress),\ngroup_name = json_extract_scalar(requestParameters, \"$.groupName\")\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"AuthorizeSecurityGroupIngress\", \"CreateSecurityGroup\") and groupid not in (\"<group id>\", \"<group id>\") and groupid != null\n| filter target_username not contains \"<username>\" and account_id != \"<account id>\"\n| alter aggregation_criteria1 = \"ileventdesc\",\naggregation_criteria2 = \"groupid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where suspicious LDAP attributes like \"*\" are used with display names like primaryInternationalISDNNumber, otherFacsimileTelephoneNumber, or primaryTelexNumber.", "response": "preset = xdr_event_log\n| alter AttributeValue = regextract(to_json_string(action_evtlog_data_fields)->AttributeValue{}, \"\\\"(.*)\\\"\")\n| alter AttributeLDAPDisplayName = regextract(to_json_string(action_evtlog_data_fields)->AttributeLDAPDisplayName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5136 and AttributeValue contains \"*\" and AttributeLDAPDisplayName in (\"primaryInternationalISDNNumber\", \"otherFacsimileTelephoneNumber\", \"primaryTelexNumber\"))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious SAML activity on my AWS account.", "response": "dataset = amazon_aws_raw\n| filter ((eventSource = \"sts.amazonaws.com\" and eventName = \"AssumeRoleWithSAML\") or (eventSource = \"iam.amazonaws.com\" and eventName = \"UpdateSAMLProvider\"))\n\n\n\n"}
{"prompt": "{I want to see events related to the \"TropicTrooper Campaign November 2018\" threat, specifically process creations on endpoints where the command line contains \"abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc\".} \n\n\nLet me know if you have any other queries!", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"abCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCc\"\n\n\n\n"}
{"prompt": "I want to see if someone has enabled suspicious Windows features using PowerShell.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Enable-WindowsOptionalFeature\" and ScriptBlockText contains \"-Online\" and ScriptBlockText contains \"-FeatureName\") and (ScriptBlockText contains \"TelnetServer\" or ScriptBlockText contains \"Internet-Explorer-Optional-amd64\" or ScriptBlockText contains \"TFTP\" or ScriptBlockText contains \"SMB1Protocol\" or ScriptBlockText contains \"Client-ProjFS\" or ScriptBlockText contains \"Microsoft-Windows-Subsystem-Linux\"))\n\n\n\n"}
{"prompt": "I want to see all events related to executable files being created on endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 29\n\n\n\n"}
{"prompt": "I want to see Fortigate network config changes made by users, specifically those involving ping, access, enable, show, or traceroute commands.", "response": "datamodel dataset in (fortinet_fortigate1_raw, fortinet_fortigate_raw)\n| alter reporting_device_ip = coalesce(fortinet_fortigate1_raw._final_reporting_device_ip, fortinet_fortigate_raw._final_reporting_device_ip)\n| filter (reporting_device_ip in (\"<ip>\", \"<ip>\") and (xdm.event.description contains \"ping\" or xdm.event.description contains \"access\" or xdm.event.description contains \"enable\" or xdm.event.description contains \"show\" or xdm.event.description contains \"traceroute\")) and (xdm.source.user.username != null)"}
{"prompt": "I want to see alerts about processes creating Volume Shadow Copies using mklink commands on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"mklink\" and action_process_image_command_line contains \"HarddiskVolumeShadowCopy\")\n\n\n\n"}
{"prompt": "I want to find users who accessed multiple file storage or sharing category URLs within a single day, and have transferred over 10MB of data.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category ~= \"Storage\" and action contains \"allowed\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 20 and bytes_src >= 10000000"}
{"prompt": "I want to see events related to changes in group memberships for high-privileged groups like \"belaccountoperatorsbgmaccountoperators\", \"bosaccountoperators\", etc., including additions and removals of users. I'm particularly interested in new members added to these groups as it could indicate privilege escalation attempts.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| arrayexpand xdm.target.user.groups\n| join type = left\n(dataset = corporate_groups_static_list\n) as JT1 JT1.GROUP_NAME = xdm.target.user.groups\n| filter FEED_NAME IN (\"ad-loc-admin\", \"ad-pam-loc-admin\") or xdm.target.user.groups in (\"belaccountoperatorsbgmaccountoperators\", \"bosaccountoperators\", \"chiaccountoperators\", \"cryaccountoperators\", \"dlfaccountoperators\", \"dlsaccountoperators\", \"hezaccountoperators\", \"hjwaccountoperators\", \"htcaccountoperators\", \"itpaccountoperators\", \"ivlaccountoperators\", \"jptaccountoperators\", \"kecaccountoperators\", \"krkaccountoperators\", \"krmaccountoperators\", \"ktraccountoperators\", \"kvmaccountoperators\", \"lonaccountoperators\", \"mctaccountoperators\", \"melaccountoperators\", \"monaccountoperators\", \"mwcaccountoperators\", \"netaccountoperators\", \"njyaccountoperators\", \"phxaccountoperators\", \"rhlaccountoperators\", \"sasaccountoperators\", \"sfoaccountoperators\", \"sgiaccountoperators\", \"shlaccountoperators\", \"sjcaccountoperators\", \"tkyaccountoperators\", \"trnaccountoperators\", \"twraccountoperators\", \"akladmins\", \"beladmins\", \"bgmadmins\", \"bosadmins\", \"bpoadmins\", \"chiadmins\", \"cryadmins\", \"dlfadmins\", \"dlsadmins\", \"eqxadmins\", \"ghsadmins\", \"hezadmins\", \"hjwadmins\", \"htcadmins\", \"itpadmins\", \"ivladmins\", \"jptadmins\", \"kecadmins\", \"krkadmins\", \"krmadmins\", \"ktradmins\", \"kvmadmins\", \"lonadmins\", \"mctadmins\", \"meladmins\", \"mncadmins\", \"monadmins\", \"mwcadmins\", \"netadmins\", \"njyadmins\", \"phxadmins\", \"rhladmins\", \"sasadmins\", \"sfoadmins\", \"sgiadmins\", \"shladmins\", \"sjcadmins\", \"tkyadmins\", \"trnadmins\", \"twradmins\", \"ucpadmins\", \"zuradmins\", \"int admins\", \"bpoatlaccountoperators\", \"bposfoaccountoperators\", \"bponjyaccountoperators\", \"bpobosaccountoperators\", \"bpoaccountoperators\", \"bpotwraccountoperators\", \"qrkadmins\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter xdm.target.user.username = trim(arrayindex(regextract(xdm.event.description, \"Account Name:\\t\\tCN=([^,]+)\"), 0))\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts when there are more than 2500 outbound connection drops from my CheckPoint firewall within a 5-second window.", "response": "config case_sensitive = false\n| datamodel dataset = check_point_vpn_1_firewall_1_raw\n| bin _time span = 5s\n| filter xdm.observer.action ~= \"drop\" and xdm.source.ipv4 ~= \"(10\\.[0-9]{1,3}|172\\.(1[6-9]|2[0-9]|3[01])|192\\.168)\\.[0-9]{1,3}\\.[0-9]{1,3}\" and xdm.target.ipv4 !~= \"(10\\.[0-9]{1,3}|172\\.(1[6-9]|2[0-9]|3[01])|192\\.168)\\.[0-9]{1,3}\\.[0-9]{1,3}\"\n| alter result = null,\nuser_agent = null,\nos_edition = null,\norigin = check_point_vpn_1_firewall_1_raw.origin\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.target.ipv4) as dst_ip,\nvalues(xdm.source.port) as src_port,\nvalues(xdm.target.port) as dst_port,\nvalues(xdm.observer.action) as action,\nvalues(xdm.target.user.username) as username,\nvalues(check_point_vpn_1_firewall_1_raw.origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\nvalues(xdm.target.asn.as_name) as dst_org,\nvalues(xdm.source.host.hostname) as hostname,\ncount() as matched_events by _time,\nxdm.source.ipv4\n| filter matched_events >= 2500\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 2500)), 1)"}
{"prompt": "I want to see a list of XDR Collectors that haven't sent any logs in the last 4 hours, including their hostname, ID, and how many hours it's been since their last log event.", "response": "config case_sensitive = false\n| preset = metrics_view\n| filter _collector_type in (\"XDR Collector\") and _product in (\"Windows\", \"linux\")\n| join type = left\n(config case_sensitive = false\n| dataset in (microsoft_windows_raw, microsoft_dns_raw, microsoft_dhcp_raw, linux_linux_raw)\n| filter _collector_type in (\"XDR Collector\")\n| fields _collector_hostname, _collector_id\n| dedup _collector_hostname\n) as ms_coll ms_coll._collector_id = _collector_id\n| alter bin_time = _time\n| bin bin_time span = 4h\n| comp latest(_time) as Max_Time,\nlatest(last_seen) as Last_Seen,\nsum(total_event_count) as Last_Event_Count by bin_time,\n_collector_id,\n_collector_hostname,\n_collector_name,\n_collector_type,\n_vendor,\n_product\n| alter Hours_Since_Last_Event = timestamp_diff(current_time(), Last_Seen, \"HOUR\")\n| filter Last_Event_Count = 0 and Hours_Since_Last_Event >= 4\n| fields Max_Time, Last_Seen, Last_Event_Count, Hours_Since_Last_Event,\n_collector_id, _collector_hostname, _collector_name,\n_collector_type, _vendor, _product, *\n| view column order = populated"}
{"prompt": "I want to find instances of scheduled tasks on endpoints that are executing encoded payloads retrieved from the registry.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" or actor_process_file_original_name = \"schtasks.exe\") and action_process_image_command_line contains \"/Create\" and (action_process_image_command_line contains \"FromBase64String\" or action_process_image_command_line contains \"encodedcommand\") and (action_process_image_command_line contains \"Get-ItemProperty\" or action_process_image_command_line contains \" gp \") and (action_process_image_command_line contains \"HKCU:\" or action_process_image_command_line contains \"HKLM:\" or action_process_image_command_line contains \"registry::\" or action_process_image_command_line contains \"HKEY_\"))\n\n\n\n"}
{"prompt": "I want to see alerts and logs when an account is added to or removed from a group with administrative privileges.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id in (4728, 4729, 4730, 633, 632, 634)\n\n\n\n"}
{"prompt": "I want to detect malicious use of iexpress.exe to create self-extracting packages from potentially dangerous locations.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\iexpress\\.exe\" or actor_process_file_original_name = \"IEXPRESS.exe\") and action_process_image_command_line contains \" /n \" and (action_process_image_command_line ~= \".*\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see all file integrity events on servers tagged with PCI_FIM that are not from system accounts or specific usernames like \"<username>\".  This should include details like file name, path, user who triggered the event, and the server itself.", "response": "dataset = xdr_data\n| filter event_type = FILE and (event_sub_type = FILE_CREATE_NEW or event_sub_type = FILE_WRITE or event_sub_type = FILE_REMOVE or event_sub_type = FILE_RENAME)\n| filter action_file_extension in (\"dll\", \"exe\", \"sys\", \"bat\", \"ps1\", \"bin\", \"reg\", \"log\", \"cfg\") and action_file_path in (\"D:\\Intervoice\\Tomcat\\webapps\\*\", \"D:\\Program Files\\Intervoice\\StateControlEngine\\cfg\\*\", \"D:\\Program Files\\Intervoice\\Media Server for VOIP\\cfg\\*\", \"D:\\Program Files\\Intervoice\\Control Center Base\\cfg\\*\", \"D:\\Program Files\\Intervoice\\CTI Gateway\\*\", \"D:\\Intervoice\\Tomcat\\WebApps\\*\", \"D:\\Program Files\\Intervoice\\StateControlEngine\\logs\\*\", \"D:\\Program Files\\Intervoice\\Media Server for VOIP\\dat\\*\", \"D:\\Intervoice\\Administration_Tomcat\\logs\\*\", \"C:\\Windows\\System32\\*\", \"C:\\Windows\\win.ini\", \"C:\\Windows\\system.ini\", \"C:\\autoexec.bat\", \"C:\\boot.ini\", \"C:\\Windows\\regedit.exe\", \"C:\\Documents and Settings\\All Users\\Start Menu\\Programs\\Startup\\*\", \"C:\\Users\\Public\\All Users\\Microsoft\\Windows\\Start Menu\\Startup\\*\", \"%Program_files%\\aspect software\\*\", \"%windows%\\assembly\\*\", \"c:\\aspect\\*\", \"c:\\custer storage\\*\", \"c:\\program files(x86)\\aspect software\", \"c:\\program files(x86)\\microsoft sql server\\*\", \"e:\\impact360\\*\", \"c:\\verint\\dpa\\client\\data\\*\", \"%program files%\\verint\\dpa\\*\", \"/etc/*\", \"/bin/*\", \"/sbin/*\", \"/usr/sbin/*\", \"/usr/bin/*\", \"/usr/local/etc/*\", \"/usr/local/bin/*\", \"/usr/local/sbin/*\", \"/usr/local/etc/*\", \"/opt/*\", \"/var/opt/*\", \"/lib/*\", \"/usr/lib/*\", \"/var/lib/*\", \"/usr/local/lib/*\", \"/lib64/*\", \"/tmp/*\", \"/usr/local/tmp/*\", \"/var/tmp/*\", \"/dev/*\", \"HKEY_LOCAL_MACHINE\\Software\\Classes\\cmdfile\", \"HKEY_LOCAL_MACHINE\\Software\\Classes\\comfile\", \"HKEY_LOCAL_MACHINE\\Software\\Classes\\exefile\", \"HKEY_LOCAL_MACHINE\\Software\\Classes\\piffile\", \"HKEY_LOCAL_MACHINE\\Software\\Classes\\AllFilesystemObjects\", \"HKEY_LOCAL_MACHINE\\Software\\Classes\\Directory\", \"HKEY_LOCAL_MACHINE\\Software\\Classes\\Folder\", \"HKEY_LOCAL_MACHINE\\Software\\Classes\\Protocols\", \"HKEY_LOCAL_MACHINE\\Software\\Policies\", \"HKEY_LOCAL_MACHINE\\Security\", \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Services\", \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\Session Manager\\KnownDLLs\", \"HKEY_LOCAL_MACHINE\\System\\CurrentControlSet\\Control\\SecurePipeServers\\winreg\", \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\", \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\", \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\", \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\URL\", \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows\\CurrentVersion\\Policies\", \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Windows\", \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\", \"HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Active Setup\\Installed Components\", \"HKEY_LOCAL_MACHINE\\Security\\Policy\\Secrets\", \"HKEY_LOCAL_MACHINE\\Security\\SAM\\Domains\\Account\\Users \\Enum$\")\n| fields action_file_name, action_file_path, actor_effective_username,\nagent_ip_addresses, agent_hostname, event_sub_type,\nevent_type\n| join type = inner\n(dataset = endpoints\n) as devices devices.endpoint_name = agent_hostname\n| fields action_file_name, event_type, event_sub_type, action_file_path,\nactor_effective_username, ip_address, group_names,\nendpoint_type, endpoint_name\n| filter endpoint_type = TYPE_SERVER and group_names = \"PCI_FIM\"\n| dedup action_file_name\n| filter actor_effective_username != \"NT AUTHORITY\\SYSTEM\" and actor_effective_username != \"NT AUTHORITY\\NETWORK SERVICE\" and actor_effective_username != \"<username>\" and actor_effective_username != \"root\" and actor_effective_username != \"<username>\" and actor_effective_username != \"<username>\" and actor_effective_username != \"<username>\" and actor_effective_username != \"<username>\" and actor_effective_username != \"<username>\""}
{"prompt": " I want to see processes that might be using Invoke-Obfuscation CLIP+ Launcher because they have suspicious command lines containing \"cmd\", \"&&\", \"clipboard]\", and \"-f\". ", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"cmd\" and action_process_image_command_line contains \"&&\" and action_process_image_command_line contains \"clipboard]::\" and action_process_image_command_line contains \"-f\") and (action_process_image_command_line contains \"/c\" or action_process_image_command_line contains \"/r\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when MSPUB.EXE is used to download files from the internet.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\MSPUB\\.exe\" or actor_process_file_original_name = \"MSPUB.exe\") and (action_process_image_command_line contains \"ftp:\n\n\n\n"}
{"prompt": "I want to see successful VPN logins from users with SET accounts coming from countries outside of our business locations.", "response": "config case_sensitive = false\n| datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw, cisco_asa_raw)\n| alter xdm.target.user.upn = concat(xdm.target.user.username, \"<domain>\")\n| filter (xdm.source.ipv4 not in (\"<ip>\")) and ((xdm.event.original_event_type in (\"722051\")) or (xdm.event.original_event_type ~= \"39424\")) and (xdm.target.user.upn in (\"<emails>\") and xdm.source.location.country not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\"))"}
{"prompt": "I want to find suspicious binary loads related to the Windows Spooler Service.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\spoolsv\\.exe\" and (action_module_path ~= \".*\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\x64\\\\3\\\\.*\" or action_module_path ~= \".*\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\x64\\\\4\\\\.*\") and action_module_path ~= \".*\\.dll\")\n\n\n\n"}
{"prompt": "I want to see all network traffic related to Pulse Secure exploit CVE-2019-11510.", "response": "datamodel\n| filter xdm.network.http.url = \"**/dana/html5acc/guacamole/*\"\n\n\n\n"}
{"prompt": "I want to find potential instances of malicious software sideloading 7za.dll through Windows Event Logs.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\7za\\.dll\" and  not (((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\.*\") and (action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see which users are downloading significantly more data today than their average over the past 7 days.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and user_agent ~= \"powershell\"\n| comp sum(bytes_src) as current_day_download,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and user_agent ~= \"powershell\"\n| comp sum(bytes_src) as 7_days_download,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_download) as 7_days_download_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_download_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_download > multiply(7_days_download_avg, 1.35)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find events related to Forest Blizzard APT setting up a custom protocol handler DLL in the registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\CLSID\\\\{026CC6D7-34B2-33D5-B551-CA31EB6CE345}\\\\Server\" and (action_registry_value_name ~= \".*\\.dll\" or action_registry_data ~= \".*\\.dll\"))\n\n\n\n"}
{"prompt": "I want to see events related to suspicious scheduled task creations on my endpoints. This includes tasks that are created in specific directories like Temp folders or public areas, and those that use commands like regsvr32, rundll32, cmd.exe, powershell, etc.", "response": "preset = xdr_event_log\n| alter TaskContent = regextract(to_json_string(action_evtlog_data_fields)->TaskContent{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4698 and (TaskContent ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or TaskContent ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or TaskContent ~= \".*\\\\Users\\\\Public\\\\.*\" or TaskContent ~= \".*\\\\WINDOWS\\\\Temp\\\\.*\" or TaskContent ~= \".*C\\:\\\\Temp\\\\.*\" or TaskContent ~= \".*\\\\Desktop\\\\.*\" or TaskContent ~= \".*\\\\Downloads\\\\.*\" or TaskContent contains \"\\\\Temporary Internet\" or TaskContent ~= \".*C\\:\\\\ProgramData\\\\.*\" or TaskContent ~= \".*C\\:\\\\Perflogs\\\\.*\") and (TaskContent contains \"regsvr32\" or TaskContent contains \"rundll32\" or TaskContent contains \"cmd.exe</Command>\" or TaskContent contains \"cmd</Command>\" or TaskContent contains \"<Arguments>/c \" or TaskContent contains \"<Arguments>/k \" or TaskContent contains \"<Arguments>/r \" or TaskContent contains \"powershell\" or TaskContent contains \"pwsh\" or TaskContent contains \"mshta\" or TaskContent contains \"wscript\" or TaskContent contains \"cscript\" or TaskContent contains \"certutil\" or TaskContent contains \"bitsadmin\" or TaskContent contains \"bash.exe\" or TaskContent contains \"bash \" or TaskContent contains \"scrcons\" or TaskContent contains \"wmic \" or TaskContent contains \"wmic.exe\" or TaskContent contains \"forfiles\" or TaskContent contains \"scriptrunner\" or TaskContent contains \"hh.exe\"))\n\n\n\n"}
{"prompt": "I want to see all events where Windows Defender malware and PUA scanning is disabled.", "response": "datamodel\n| filter xdm.event.id = 5010\n\n\n\n"}
{"prompt": "{I want to see which RedCarpet users have accessed potentially malicious websites and how many times they did so.} \n\n\nLet me know if you need help with anything else!", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst not in (\"-\", \"Unauthenticated User\")\n| filter category ~= \"scam|spam|potentially unwanted software|suspicious|malicious|phishing|peer|remote|hacking|proxy\"\n| join type = left\n(dataset = redcarpet_users_list\n) as redcarpusers redcarpusers.username = user_dst\n| filter username != null\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(category) as category,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nvalues(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\ncount() as matched_events by user_dst,\nalias_host\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"ilaliashost\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see alerts about when new ElastiCache security groups are created on AWS.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"elasticache.amazonaws.com\" and eventName = \"CreateCacheSecurityGroup\")\n\n\n\n"}
{"prompt": "I want to see alerts for potential abuse of the Provlaunch.EXE binary being used as a proxy.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\provlaunch\\.exe\" and  not (((action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\notepad\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or (action_process_image_path ~= \".*\\:\\\\PerfLogs\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\\\AppData\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\System32\\\\Tasks\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Temp\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to detect potential Emotet activity using Rundll32 execution on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and (action_process_image_command_line ~= \".*\\,RunDLL\" or action_process_image_command_line ~= \".*\\,Control\\_RunDLL\")) and  not ((action_process_image_command_line ~= \".*\\.dll\\,Control\\_RunDLL\" or action_process_image_command_line ~= \".*\\.dll\\\"\\,Control\\_RunDLL\" or action_process_image_command_line ~= \".*\\.dll\\'\\,Control\\_RunDLL\") or actor_process_image_path ~= \".*\\\\tracker\\.exe\")\n\n\n\n"}
{"prompt": "I want to find instances where a user had two consecutive failed login attempts followed by a successful login.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id in (\"4625\", \"4624\") and xdm.source.user.username != null and xdm.target.user.username != null and xdm.target.user.username in (\"anjali.s01\", \"athimoolam_a\", \"balaji_m07\", \"jegadheesan.a\", \"biju_victordhasan\", \"manivannan_s06\", \"nagarajan.m\", \"paulraj_selvaraj01\", \"naveen.a03\", \"shobanbabu_yuvaraj\", \"renuga.chandrasekar\", \"swathi.b06\", \"sivagnanam.m\", \"anand_shekhar01\", \"balasubramaniam_r02\", \"banupriya_s03\", \"manoj_mahalingam\", \"raja_shanmugam\", \"ramkumar.r13\", \"saranraj_g01\", \"vasanth_m\", \"vigneshwaran.r\", \"bharathy_l\", \"amudambigai_p\", \"deepa.sy\", \"kannan.vijayan\", \"mohanraj_g03\", \"radha_rajendran02\", \"rajesh.mohan\", \"sathish_ms01\", \"senthilkumar_o\", \"sravanthi.c\", \"srivatsan.r\", \"sukhvinder.kaur\", \"venkatesh.ragupathy\", \"alagumuthu.mariappan\", \"bathula.krishnarjun\", \"ezhilarasi_m\", \"jayaganesh.j\", \"karthikeyan.b\", \"kishorekumar.raji\", \"lakshmi.perubhotla\", \"manoharan_p\", \"parthasaradhi_g\", \"sankara.rajasekaran\", \"sankaranarayanan.s\", \"sivaram\", \"sunidhi.yadav\", \"sunilkumar_g02\", \"yuvaraj.koppuravuri\", \"chella_priyak\", \"keerthana.rajan\", \"p.dhanusha\", \"priya_chandran02\", \"raj_kumar18\", \"rani_jayamoorthy\", \"swathikiran.m\", \"sravanthi.bandi\", \"sravanthi.hosdoday\", \"uma.batcha\", \"gowreswarir.r\", \"k.raghavendra\", \"piyush_kute\", \"prakash_c04\", \"ravikumar_satla\", \"siva_thirumaiyan\", \"varun_nidadavolu\", \"ajesh_s\", \"raghavendra_goliya\", \"parthiban_g\", \"siva_thirumaiyan\", \"deepak_veluchamy\", \"parthasarathy_pg\", \"satheesh_k\", \"abhijit_patil02\", \"panjabmahadev_yede\", \"parthasarathy_pg\", \"ajay_kadu\", \"nirmal_arumugam\", \"siva_vadagana\", \"yuvaraja_kuppan\", \"rajasekhar_bhogadi\", \"suneel.sah\", \"devaki.k\", \"guruprakash.u\", \"k.latha\", \"kiruthiga.rk\", \"monisha.sankar\", \"pittasairama.l\", \"prasanth.k\", \"santhosh.k19\", \"sasimohan.chandran\", \"swetha.rajan01\")\n| sort asc _time\n| bin _time span = 5m\n| alter pattern = if(xdm.event.id = \"4625\", \"E1\", \"E2\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, pattern\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by xdm.target.user.username,\nxdm.source.ipv4\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events contains \"E1,E1,E1,E2\"\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see information about unusual processes that are created by Bginfo.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\bginfo\\.exe\" or actor_process_image_path ~= \".*\\\\bginfo64\\.exe\")\n\n\n\n"}
{"prompt": "I want to detect processes that are suspiciously accessing modules loaded into memory, potentially indicating in-memory attacks like those used by SilentTrinity.", "response": "preset = xdr_event_log\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| filter ((CallTrace contains \"C:\\\\WINDOWS\\\\SYSTEM32\\\\ntdll.dll+\" and CallTrace contains \"|C:\\\\WINDOWS\\\\System32\\\\KERNELBASE.dll+\" and CallTrace contains \"|UNKNOWN(\" and CallTrace contains \")\") or ((CallTrace contains \"UNKNOWN(\" and CallTrace contains \")|UNKNOWN(\") and CallTrace ~= \".*\\)\") or (CallTrace contains \"UNKNOWN\" and GrantedAccess in (\"0x1F0FFF\", \"0x1F1FFF\", \"0x143A\", \"0x1410\", \"0x1010\", \"0x1F2FFF\", \"0x1F3FFF\", \"0x1FFFFF\"))) and  not (((SourceImage ~= \".*\\\\Windows\\\\System32\\\\sdiagnhost\\.exe\" or SourceImage ~= \".*\\\\procexp64\\.exe\" or SourceImage ~= \".*\\\\procexp\\.exe\" or SourceImage ~= \".*\\\\Microsoft\\ VS\\ Code\\\\Code\\.exe\" or SourceImage ~= \".*\\\\aurora\\-agent\\-64\\.exe\" or SourceImage ~= \".*\\\\aurora\\-agent\\.exe\" or SourceImage ~= \".*\\\\git\\\\usr\\\\bin\\\\sh\\.exe\" or SourceImage ~= \".*\\\\IDE\\\\devenv\\.exe\" or SourceImage ~= \".*\\\\GitHubDesktop\\\\Update\\.exe\" or SourceImage ~= \".*\\\\RuntimeBroker\\.exe\" or SourceImage ~= \".*\\\\backgroundTaskHost\\.exe\" or SourceImage ~= \".*\\\\GitHubDesktop\\.exe\") or (SourceImage ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or SourceImage ~= \"C\\:\\\\Program\\ Files\\\\.*\" or SourceImage ~= \"C\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework\\\\.*\\\\NGenTask\\.exe.*\" or SourceImage ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Visual\\ Studio\\\\.*\" or SourceImage ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Visual\\ Studio\\\\.*\" or SourceImage ~= \"C\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework.*\" or SourceImage ~= \"C\\:\\\\WINDOWS\\\\System32\\\\DriverStore\\\\.*\" or SourceImage ~= \"C\\:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\.*\") or SourceImage in (\"C:\\\\WINDOWS\\\\system32\\\\taskhostw.exe\", \"C:\\\\WINDOWS\\\\system32\\\\ctfmon.exe\", \"C:\\\\WINDOWS\\\\system32\\\\NhNotifSys.exe\", \"C:\\\\Windows\\\\ImmersiveControlPanel\\\\SystemSettings.exe\", \"C:\\\\Windows\\\\explorer.exe\") or TargetImage = \"C:\\\\Windows\\\\System32\\\\RuntimeBroker.exe\" or TargetImage ~= \".*\\\\Microsoft\\ VS\\ Code\\\\Code\\.exe\" or CallTrace contains \"|C:\\\\WINDOWS\\\\System32\\\\RPCRT4.dll+\") or (SourceImage = \"C:\\\\WINDOWS\\\\Explorer.EXE\" and TargetImage in (\"C:\\\\WINDOWS\\\\system32\\\\backgroundTaskHost.exe\", \"C:\\\\WINDOWS\\\\explorer.exe\")) or (SourceImage ~= \"C\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\Platform\\\\.*\" and SourceImage ~= \".*\\\\MsMpEng\\.exe\") or (SourceImage ~= \".*\\\\eclipse\\.exe\" and (CallTrace contains \"\\\\jre\\\\bin\\\\java.dll\" or CallTrace contains \"|C:\\\\Windows\\\\SYSTEM32\\\\windows.storage.dll+\" or CallTrace ~= \".*\\\\configuration\\\\org\\.eclipse\\.osgi\\\\.*\")) or (SourceImage = \"C:\\\\Windows\\\\system32\\\\OpenWith.exe\" and TargetImage = \"C:\\\\Windows\\\\Explorer.EXE\") or (SourceImage ~= \"C\\:\\\\Users\\\\.*\" and SourceImage ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\current\\\\Teams\\.exe\" and (TargetImage ~= \".*\\:\\\\Windows\\\\Explorer\\.EXE\" or TargetImage ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\Update\\.exe\" or TargetImage ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\current\\\\Teams\\.exe\" or TargetImage ~= \".*\\\\MsMpEng\\.exe\")) or (SourceImage = \"C:\\\\Windows\\\\System32\\\\WWAHost.exe\" and TargetImage = \"C:\\\\Windows\\\\System32\\\\svchost.exe\") or (SourceImage = \"C:\\\\WINDOWS\\\\system32\\\\sppsvc.exe\" and TargetImage = \"C:\\\\WINDOWS\\\\system32\\\\SppExtComObj.exe\"))\n\n\n\n"}
{"prompt": "I want to see Azure NSG configuration changes, including who made them, what they changed, and when it happened. Please filter for specific resource IDs.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/WRITE\", \"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"e71052a7-d2ad-4e43-ac28-7609a37a4ef7\", \"19053629-38ac-4f7a-bcbf-6effda51368e\", \"b1617c40-5fe7-4804-9138-161068eece0f\", \"a4909bd3-2023-4cd7-b521-d5bf29109761\", \"160421b8-c8e9-47bd-94ac-22a1e74353e0\", \"3bf1b93b-e895-498a-bb92-fa4c26c0da64\", \"918574c0-98eb-4eca-8c95-8d474abf8b10\", \"79d75b98-7df9-4f9c-af73-aeaa3a8b7c0a\", \"0254815d-161b-46a1-a419-9f2cf9324ae3\", \"a704c3a4-580c-40b7-9054-73d55b8234ae\", \"fc257d35-1522-4b2a-bbd8-29c8c4b47bd0\", \"e1dc9585-f94d-4f70-8165-b6ba1140af51\", \"4e6a7a01-59a1-4bd0-aa31-143f66640add\", \"5069f056-0890-4ee2-a5db-a5fa3584984a\", \"756ca836-d3cc-4966-a56a-a47fcade6b10\", \"3076e74d-719e-49a2-9c31-46f8a8adaf7f\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of Unvalidated Redirects and Forwards happening on IIS web servers.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| join type = left\n(dataset = device_group_static_list\n| filter TYPE ~= \"microsoft iis\"\n| fields IP\n) as device_group device_group.IP = xdm.target.ipv4\n| filter IP != null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.network.http.url ~= \"redirect\\.php\" and xdm.target.url ~= \"url=http:\n| filter xdm.target.ipv4 not in (\"<ip>\") and xdm.source.ipv4 not in (\"<ip>\")\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events where an attacker might be trying to disable User Account Control (UAC) notifications by changing the \"UACDisableNotify\" registry value.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Microsoft\\\\Security Center\\\\UACDisableNotify\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to see a list of client devices that haven't sent any XDR logs in the last 4 hours.", "response": "config case_sensitive = false\n| preset = metrics_view\n| filter _collector_type in (\"XDR Collector\") and _product in (\"Windows\", \"linux\")\n| join conflict_strategy = both type = inner\n(config case_sensitive = false\n| dataset = eu_client_devices_id_hn_ip\n) as eucdev eucdev.XDR_Collector_ID = _collector_id\n| alter bin_time = _time\n| bin bin_time span = 240M timeshift = 1699518518\n| comp latest(_time) as Last_Metrics_Poll_Time,\nlatest(last_seen) as Last_Seen_TimeStamp,\nsum(total_event_count) as Event_Count by bin_time,\nXDR_Collector_ID,\nXDR_Host_Name,\nXDR_Device_ClientName,\nXDR_Device_Type,\nXDR_Collector_IPAddress,\n_collector_name,\n_vendor,\n_product\n| alter Hours_Since_Last_Event = timestamp_diff(current_time(), Last_Seen_TimeStamp, \"HOUR\")\n| filter Event_Count = 0"}
{"prompt": "I want to see events related to deleting security solutions in Azure, including details about who initiated the deletion and which solution was deleted.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.SECURITY/SECURITYSOLUTIONS/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect suspicious PowerShell invocations on endpoints that use encoding, hidden windows, and non-interactive execution.", "response": "preset = xdr_event_log\n| filter (( contains \" -enc \" or  contains \" -EncodedCommand \") and ( contains \" -w hidden \" or  contains \" -window hidden \" or  contains \" -windowstyle hidden \") and ( contains \" -noni \" or  contains \" -noninteractive \"))\n\n\n\n"}
{"prompt": "I want to find events related to disabling AWS Config recording or channels.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"config.amazonaws.com\" and eventName in (\"DeleteDeliveryChannel\", \"StopConfigurationRecorder\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to processes trying to evade detection by using \"DumpStack.log\" files.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\DumpStack\\.log\" or action_process_image_command_line contains \" -o DumpStack.log\")\n\n\n\n"}
{"prompt": "I want to see any suspicious PowerShell module files that have been created on my system.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\WindowsPowerShell\\\\Modules\\\\.*\\\\\\.ps\" or xdm.target.file.filename ~= \".*\\\\WindowsPowerShell\\\\Modules\\\\.*\\\\\\.dll\")\n\n\n\n"}
{"prompt": "I want to see which user accounts were both created and deleted within an hour on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4720\", \"4726\") and microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.source.user.username != null and xdm.target.user.username != null\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| sort asc _time\n\n| alter pattern = if(xdm.event.id = \"4720\", \"E1\", \"E2\")\n| alter xdm.target.user.username = if(xdm.target.user.username ~= \"ITLINFOSYS\\n\", concat(\"n\", arrayindex(regextract(xdm.target.user.username, \"[a-zA-Z0-9._]+\"), -1)), if(xdm.target.user.username ~= \"ITLINFOSYS\\r\", concat(\"r\", arrayindex(regextract(xdm.target.user.username, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(xdm.target.user.username, \"[a-zA-Z0-9._-]+\"), -1))),\nerror_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, pattern\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by xdm.target.user.username\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events contains \"E1,E2\"\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see all events related to the Winnti Malware HK University Campaign, specifically those involving suspicious process creations.", "response": "preset = xdr_process\n| filter (((actor_process_image_path contains \"C:\\\\Windows\\\\Temp\" or actor_process_image_path contains \"\\\\hpqhvind.exe\") and action_process_image_path ~= \"C\\:\\\\ProgramData\\\\DRM.*\") or (actor_process_image_path ~= \"C\\:\\\\ProgramData\\\\DRM.*\" and action_process_image_path ~= \".*\\\\wmplayer\\.exe\") or (actor_process_image_path ~= \".*\\\\Test\\.exe\" and action_process_image_path ~= \".*\\\\wmplayer\\.exe\") or action_process_image_path = \"C:\\\\ProgramData\\\\DRM\\\\CLR\\\\CLR.exe\" or (actor_process_image_path ~= \"C\\:\\\\ProgramData\\\\DRM\\\\Windows.*\" and action_process_image_path ~= \".*\\\\SearchFilterHost\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see processes on macOS systems that are potentially related to network connections, like \"who\", \"w\", \"last\", \"lsof\", or \"netstat\".", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/who\" or action_process_image_path ~= \".*\\/w\" or action_process_image_path ~= \".*\\/last\" or action_process_image_path ~= \".*\\/lsof\" or action_process_image_path ~= \".*\\/netstat\")\n\n\n\n"}
{"prompt": "I want to detect suspicious changes made to the \"DisableFirstRunCustomize\" value in Internet Explorer.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Microsoft\\\\Internet\\ Explorer\\\\Main\\\\DisableFirstRunCustomize\" and (action_registry_value_name in (\"DWORD (0x00000001)\", \"DWORD (0x00000002)\") or action_registry_data in (\"DWORD (0x00000001)\", \"DWORD (0x00000002)\"))) and  not (actor_process_image_path in (\"C:\\\\Windows\\\\explorer.exe\", \"C:\\\\Windows\\\\System32\\\\ie4uinit.exe\"))\n\n\n\n"}
{"prompt": "I want to see all changes made to user accounts belonging to the finance group, including details like the type of change, the affected username, hostname, and timestamp.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4722\", \"4723\", \"4724\", \"4725\", \"4726\")\n| alter xdm.target.user.username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| join type = left\n(dataset = enterprise_admin_list\n) as ent_admin_src ent_admin_src.username = xdm.target.user.username\n| filter admin_type in (\"fin_user\")\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all alerts about Multifactor Authentication being denied on Microsoft Azure.", "response": "dataset = msft_azure_raw\n| alter properties_authenticationRequirement = json_extract_scalar(properties , \"$.authenticationRequirement\")\n| alter properties_status = json_extract_scalar(properties , \"$.status\")\n| filter (properties.authenticationRequirement = \"multiFactorAuthentication\" and properties.status contains \"MFA Denied\")\n\n\n\n"}
{"prompt": "I want to detect suspicious compressed file creation using the tar.exe utility.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\tar\\.exe\" or actor_process_file_original_name = \"bsdtar\") and (action_process_image_command_line contains \"-c\" or action_process_image_command_line contains \"-r\" or action_process_image_command_line contains \"-u\"))\n\n\n\n"}
{"prompt": "I want to find instances where Reg.exe is used to disable Local Security Authority (LSA) Process Protection Levels (PPL). ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and (action_process_image_command_line contains \"SYSTEM\\\\CurrentControlSet\\\\Control\\\\Lsa\" and (action_process_image_command_line contains \" add \" and action_process_image_command_line contains \" /d 0\" and action_process_image_command_line contains \" /v RunAsPPL \")))\n\n\n\n"}
{"prompt": "I want to see alerts about processes being created that use cmstp.exe.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\cmstp\\.exe\"\n\n\n\n"}
{"prompt": "I want to find suspicious process executions related to ManageEngine that use PowerShell or other tools for potential malware activity.", "response": "preset = xdr_process\n| filter ((actor_process_image_path contains \"manageengine\" or actor_process_image_path contains \"ServiceDesk\") and actor_process_image_path contains \"\\\\java\") and (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\") and ((action_process_image_command_line contains \" echo \" or action_process_image_command_line contains \"-dumpmode\" or action_process_image_command_line contains \"-ssh\" or action_process_image_command_line contains \".dmp\" or action_process_image_command_line contains \"add-MpPreference\" or action_process_image_command_line contains \"adscredentials\" or action_process_image_command_line contains \"bitsadmin\" or action_process_image_command_line contains \"certutil\" or action_process_image_command_line contains \"csvhost.exe\" or action_process_image_command_line contains \"DownloadFile\" or action_process_image_command_line contains \"DownloadString\" or action_process_image_command_line contains \"dsquery\" or action_process_image_command_line contains \"ekern.exe\" or action_process_image_command_line contains \"FromBase64String\" or action_process_image_command_line contains \"iex \" or action_process_image_command_line contains \"iex(\" or action_process_image_command_line contains \"Invoke-Expression\" or action_process_image_command_line contains \"Invoke-WebRequest\" or action_process_image_command_line contains \"localgroup administrators\" or action_process_image_command_line contains \"net group\" or action_process_image_command_line contains \"net user\" or action_process_image_command_line contains \"o365accountconfiguration\" or action_process_image_command_line contains \"query session\" or action_process_image_command_line contains \"samaccountname=\" or action_process_image_command_line contains \"set-MpPreference\" or action_process_image_command_line contains \"svhost.exe\" or action_process_image_command_line contains \"System.IO.Compression\" or action_process_image_command_line contains \"System.IO.MemoryStream\" or action_process_image_command_line contains \"usoprivate\" or action_process_image_command_line contains \"usoshared\" or action_process_image_command_line contains \"whoami\") or action_process_image_command_line ~= \"[\\-\\/\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd][Ee^]{1,2}[ncodema^]*\\s[A-Za-z0-9+\\/\\=]{15,}\")) or (action_process_image_command_line contains \"lsass\" and (action_process_image_command_line contains \"procdump\" or action_process_image_command_line contains \"tasklist\" or action_process_image_command_line contains \"findstr\")) or ((action_process_image_path ~= \".*\\\\wget\\.exe\" and action_process_image_command_line contains \"http\") or (action_process_image_path ~= \".*\\\\curl\\.exe\" and action_process_image_command_line contains \"http\") or (action_process_image_command_line contains \"E:jscript\" or action_process_image_command_line contains \"e:vbscript\") or (action_process_image_command_line contains \"localgroup Administrators\" and action_process_image_command_line contains \"/add\") or (action_process_image_command_line contains \"net\" and (action_process_image_command_line contains \"user\" and action_process_image_command_line contains \"/add\")) or ((action_process_image_command_line contains \"reg add\" and action_process_image_command_line contains \"DisableAntiSpyware\" and action_process_image_command_line contains \"\\\\Microsoft\\\\Windows Defender\") or (action_process_image_command_line contains \"reg add\" and action_process_image_command_line contains \"DisableRestrictedAdmin\" and action_process_image_command_line contains \"CurrentControlSet\\\\Control\\\\Lsa\")) or (action_process_image_command_line contains \"wmic\" and action_process_image_command_line contains \"process call create\") or (action_process_image_command_line contains \"wmic\" and action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"shadowcopy\") or (action_process_image_command_line contains \"vssadmin\" and action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"shadows\") or (action_process_image_command_line contains \"wbadmin\" and action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"catalog\"))) and  not ((action_process_image_command_line contains \"download.microsoft.com\" and action_process_image_command_line contains \"manageengine.com\" and action_process_image_command_line contains \"msiexec\"))\n\n\n\n"}
{"prompt": "I want to find potential instances of DLL sideloading where GUP.EXE loads libcurl.dll.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\gup\\.exe\" and action_module_path ~= \".*\\\\libcurl\\.dll\") and  not (actor_process_image_path ~= \".*\\\\Notepad\\+\\+\\\\updater\\\\GUP\\.exe\")\n\n\n\n"}
{"prompt": "I want to find security alerts related to common Ruby on Rails framework exceptions like authentication errors or bad requests.", "response": "datamodel\n| filter ( contains \"ActionController::InvalidAuthenticityToken\" or  contains \"ActionController::InvalidCrossOriginRequest\" or  contains \"ActionController::MethodNotAllowed\" or  contains \"ActionController::BadRequest\" or  contains \"ActionController::ParameterMissing\")\n\n\n\n"}
{"prompt": " I want to detect when SoundRecorder is being used to capture audio files. ", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\SoundRecorder\\.exe\" and action_process_image_command_line contains \"/FILE\")\n\n\n\n"}
{"prompt": "I want to see alerts related to administrative misuse of clearing audit logs on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"1102\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "{I want to see Cortex XQL results for suspicious activity related to LSASS memory dumps using the Comsvcs DLL.} \n\n\nThis prompt captures the essence of the query:\n\n* **Suspicious Activity:**  The query focuses on potential malicious actions.\n* **LSASS Memory Dumps:** The query specifically targets processes interacting with LSASS (Local Security Authority Subsystem Service), a crucial Windows component often targeted by attackers for credential theft.\n* **Comsvcs DLL:** This library is highlighted as being involved in the suspicious activity.\n\n\n\nLet me know if you'd like to explore other user prompts based on different XQL queries!", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and SourceImage ~= \".*\\\\rundll32\\.exe\" and CallTrace contains \"comsvcs.dll\")\n\n\n\n"}
{"prompt": "I want to detect attempts to access mailboxes using the Windows Mail App via PowerShell scripts.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"\\\\Comms\\\\Unistore\\\\data\"\n\n\n\n"}
{"prompt": "I want to see alerts about login attempts to disabled Azure accounts.", "response": "dataset = msft_azure_raw\n| alter properties_resultType = json_extract_scalar(properties , \"$.resultType\")\n| alter properties_resultDescription = json_extract_scalar(properties , \"$.resultDescription\")\n| filter (properties.resultType = 50057 and properties.resultDescription = \"User account is disabled. The account has been disabled by an administrator.\")\n\n\n\n"}
{"prompt": " I want to detect if an attacker has installed a root certificate using PowerShell on endpoints. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Move-Item\" and ScriptBlockText contains \"Cert:\\\\LocalMachine\\\\Root\") or (ScriptBlockText contains \"Import-Certificate\" and ScriptBlockText contains \"Cert:\\\\LocalMachine\\\\Root\"))\n\n\n\n"}
{"prompt": "I want to detect malicious PowerShell commandlets used for process creation.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Add-Exfiltration\" or action_process_image_command_line contains \"Add-Persistence\" or action_process_image_command_line contains \"Add-RegBackdoor\" or action_process_image_command_line contains \"Add-RemoteRegBackdoor\" or action_process_image_command_line contains \"Add-ScrnSaveBackdoor\" or action_process_image_command_line contains \"Check-VM\" or action_process_image_command_line contains \"ConvertTo-Rc4ByteStream\" or action_process_image_command_line contains \"Decrypt-Hash\" or action_process_image_command_line contains \"Disable-ADIDNSNode\" or action_process_image_command_line contains \"Disable-MachineAccount\" or action_process_image_command_line contains \"Do-Exfiltration\" or action_process_image_command_line contains \"Enable-ADIDNSNode\" or action_process_image_command_line contains \"Enable-MachineAccount\" or action_process_image_command_line contains \"Enabled-DuplicateToken\" or action_process_image_command_line contains \"Exploit-Jboss\" or action_process_image_command_line contains \"Export-ADR\" or action_process_image_command_line contains \"Export-ADRCSV\" or action_process_image_command_line contains \"Export-ADRExcel\" or action_process_image_command_line contains \"Export-ADRHTML\" or action_process_image_command_line contains \"Export-ADRJSON\" or action_process_image_command_line contains \"Export-ADRXML\" or action_process_image_command_line contains \"Find-Fruit\" or action_process_image_command_line contains \"Find-GPOLocation\" or action_process_image_command_line contains \"Find-TrustedDocuments\" or action_process_image_command_line contains \"Get-ADIDNS\" or action_process_image_command_line contains \"Get-ApplicationHost\" or action_process_image_command_line contains \"Get-ChromeDump\" or action_process_image_command_line contains \"Get-ClipboardContents\" or action_process_image_command_line contains \"Get-FoxDump\" or action_process_image_command_line contains \"Get-GPPPassword\" or action_process_image_command_line contains \"Get-IndexedItem\" or action_process_image_command_line contains \"Get-KerberosAESKey\" or action_process_image_command_line contains \"Get-Keystrokes\" or action_process_image_command_line contains \"Get-LSASecret\" or action_process_image_command_line contains \"Get-MachineAccountAttribute\" or action_process_image_command_line contains \"Get-MachineAccountCreator\" or action_process_image_command_line contains \"Get-PassHashes\" or action_process_image_command_line contains \"Get-RegAlwaysInstallElevated\" or action_process_image_command_line contains \"Get-RegAutoLogon\" or action_process_image_command_line contains \"Get-RemoteBootKey\" or action_process_image_command_line contains \"Get-RemoteCachedCredential\" or action_process_image_command_line contains \"Get-RemoteLocalAccountHash\" or action_process_image_command_line contains \"Get-RemoteLSAKey\" or action_process_image_command_line contains \"Get-RemoteMachineAccountHash\" or action_process_image_command_line contains \"Get-RemoteNLKMKey\" or action_process_image_command_line contains \"Get-RickAstley\" or action_process_image_command_line contains \"Get-Screenshot\" or action_process_image_command_line contains \"Get-SecurityPackages\" or action_process_image_command_line contains \"Get-ServiceFilePermission\" or action_process_image_command_line contains \"Get-ServicePermission\" or action_process_image_command_line contains \"Get-ServiceUnquoted\" or action_process_image_command_line contains \"Get-SiteListPassword\" or action_process_image_command_line contains \"Get-System\" or action_process_image_command_line contains \"Get-TimedScreenshot\" or action_process_image_command_line contains \"Get-UnattendedInstallFile\" or action_process_image_command_line contains \"Get-Unconstrained\" or action_process_image_command_line contains \"Get-USBKeystrokes\" or action_process_image_command_line contains \"Get-VaultCredential\" or action_process_image_command_line contains \"Get-VulnAutoRun\" or action_process_image_command_line contains \"Get-VulnSchTask\" or action_process_image_command_line contains \"Grant-ADIDNSPermission\" or action_process_image_command_line contains \"Gupt-Backdoor\" or action_process_image_command_line contains \"HTTP-Login\" or action_process_image_command_line contains \"Install-ServiceBinary\" or action_process_image_command_line contains \"Install-SSP\" or action_process_image_command_line contains \"Invoke-ACLScanner\" or action_process_image_command_line contains \"Invoke-ADRecon\" or action_process_image_command_line contains \"Invoke-ADSBackdoor\" or action_process_image_command_line contains \"Invoke-AgentSmith\" or action_process_image_command_line contains \"Invoke-AllChecks\" or action_process_image_command_line contains \"Invoke-ARPScan\" or action_process_image_command_line contains \"Invoke-AzureHound\" or action_process_image_command_line contains \"Invoke-BackdoorLNK\" or action_process_image_command_line contains \"Invoke-BadPotato\" or action_process_image_command_line contains \"Invoke-BetterSafetyKatz\" or action_process_image_command_line contains \"Invoke-BypassUAC\" or action_process_image_command_line contains \"Invoke-Carbuncle\" or action_process_image_command_line contains \"Invoke-Certify\" or action_process_image_command_line contains \"Invoke-ConPtyShell\" or action_process_image_command_line contains \"Invoke-CredentialInjection\" or action_process_image_command_line contains \"Invoke-DAFT\" or action_process_image_command_line contains \"Invoke-DCSync\" or action_process_image_command_line contains \"Invoke-DinvokeKatz\" or action_process_image_command_line contains \"Invoke-DllInjection\" or action_process_image_command_line contains \"Invoke-DNSUpdate\" or action_process_image_command_line contains \"Invoke-DomainPasswordSpray\" or action_process_image_command_line contains \"Invoke-DowngradeAccount\" or action_process_image_command_line contains \"Invoke-EgressCheck\" or action_process_image_command_line contains \"Invoke-Eyewitness\" or action_process_image_command_line contains \"Invoke-FakeLogonScreen\" or action_process_image_command_line contains \"Invoke-Farmer\" or action_process_image_command_line contains \"Invoke-Get-RBCD-Threaded\" or action_process_image_command_line contains \"Invoke-Gopher\" or action_process_image_command_line contains \"Invoke-Grouper\" or action_process_image_command_line contains \"Invoke-HandleKatz\" or action_process_image_command_line contains \"Invoke-ImpersonatedProcess\" or action_process_image_command_line contains \"Invoke-ImpersonateSystem\" or action_process_image_command_line contains \"Invoke-InteractiveSystemPowerShell\" or action_process_image_command_line contains \"Invoke-Internalmonologue\" or action_process_image_command_line contains \"Invoke-Inveigh\" or action_process_image_command_line contains \"Invoke-InveighRelay\" or action_process_image_command_line contains \"Invoke-KrbRelay\" or action_process_image_command_line contains \"Invoke-LdapSignCheck\" or action_process_image_command_line contains \"Invoke-Lockless\" or action_process_image_command_line contains \"Invoke-MalSCCM\" or action_process_image_command_line contains \"Invoke-Mimikatz\" or action_process_image_command_line contains \"Invoke-Mimikittenz\" or action_process_image_command_line contains \"Invoke-MITM6\" or action_process_image_command_line contains \"Invoke-NanoDump\" or action_process_image_command_line contains \"Invoke-NetRipper\" or action_process_image_command_line contains \"Invoke-Nightmare\" or action_process_image_command_line contains \"Invoke-NinjaCopy\" or action_process_image_command_line contains \"Invoke-OfficeScrape\" or action_process_image_command_line contains \"Invoke-OxidResolver\" or action_process_image_command_line contains \"Invoke-P0wnedshell\" or action_process_image_command_line contains \"Invoke-Paranoia\" or action_process_image_command_line contains \"Invoke-PortScan\" or action_process_image_command_line contains \"Invoke-PoshRatHttp\" or action_process_image_command_line contains \"Invoke-PostExfil\" or action_process_image_command_line contains \"Invoke-PowerDump\" or action_process_image_command_line contains \"Invoke-PowerShellTCP\" or action_process_image_command_line contains \"Invoke-PowerShellWMI\" or action_process_image_command_line contains \"Invoke-PPLDump\" or action_process_image_command_line contains \"Invoke-PsExec\" or action_process_image_command_line contains \"Invoke-PSInject\" or action_process_image_command_line contains \"Invoke-PsUaCme\" or action_process_image_command_line contains \"Invoke-ReflectivePEInjection\" or action_process_image_command_line contains \"Invoke-ReverseDNSLookup\" or action_process_image_command_line contains \"Invoke-Rubeus\" or action_process_image_command_line contains \"Invoke-RunAs\" or action_process_image_command_line contains \"Invoke-SafetyKatz\" or action_process_image_command_line contains \"Invoke-SauronEye\" or action_process_image_command_line contains \"Invoke-SCShell\" or action_process_image_command_line contains \"Invoke-Seatbelt\" or action_process_image_command_line contains \"Invoke-ServiceAbuse\" or action_process_image_command_line contains \"Invoke-ShadowSpray\" or action_process_image_command_line contains \"Invoke-Sharp\" or action_process_image_command_line contains \"Invoke-Shellcode\" or action_process_image_command_line contains \"Invoke-SMBScanner\" or action_process_image_command_line contains \"Invoke-Snaffler\" or action_process_image_command_line contains \"Invoke-Spoolsample\" or action_process_image_command_line contains \"Invoke-SpraySinglePassword\" or action_process_image_command_line contains \"Invoke-SSHCommand\" or action_process_image_command_line contains \"Invoke-StandIn\" or action_process_image_command_line contains \"Invoke-StickyNotesExtract\" or action_process_image_command_line contains \"Invoke-SystemCommand\" or action_process_image_command_line contains \"Invoke-Tasksbackdoor\" or action_process_image_command_line contains \"Invoke-Tater\" or action_process_image_command_line contains \"Invoke-Thunderfox\" or action_process_image_command_line contains \"Invoke-ThunderStruck\" or action_process_image_command_line contains \"Invoke-TokenManipulation\" or action_process_image_command_line contains \"Invoke-Tokenvator\" or action_process_image_command_line contains \"Invoke-TotalExec\" or action_process_image_command_line contains \"Invoke-UrbanBishop\" or action_process_image_command_line contains \"Invoke-UserHunter\" or action_process_image_command_line contains \"Invoke-VoiceTroll\" or action_process_image_command_line contains \"Invoke-Whisker\" or action_process_image_command_line contains \"Invoke-WinEnum\" or action_process_image_command_line contains \"Invoke-winPEAS\" or action_process_image_command_line contains \"Invoke-WireTap\" or action_process_image_command_line contains \"Invoke-WmiCommand\" or action_process_image_command_line contains \"Invoke-WMIExec\" or action_process_image_command_line contains \"Invoke-WScriptBypassUAC\" or action_process_image_command_line contains \"Invoke-Zerologon\" or action_process_image_command_line contains \"MailRaider\" or action_process_image_command_line contains \"New-ADIDNSNode\" or action_process_image_command_line contains \"New-DNSRecordArray\" or action_process_image_command_line contains \"New-HoneyHash\" or action_process_image_command_line contains \"New-InMemoryModule\" or action_process_image_command_line contains \"New-MachineAccount\" or action_process_image_command_line contains \"New-SOASerialNumberArray\" or action_process_image_command_line contains \"Out-Minidump\" or action_process_image_command_line contains \"Port-Scan\" or action_process_image_command_line contains \"PowerBreach\" or action_process_image_command_line contains \"powercat \" or action_process_image_command_line contains \"PowerUp\" or action_process_image_command_line contains \"PowerView\" or action_process_image_command_line contains \"Remove-ADIDNSNode\" or action_process_image_command_line contains \"Remove-MachineAccount\" or action_process_image_command_line contains \"Remove-Update\" or action_process_image_command_line contains \"Rename-ADIDNSNode\" or action_process_image_command_line contains \"Revoke-ADIDNSPermission\" or action_process_image_command_line contains \"Set-ADIDNSNode\" or action_process_image_command_line contains \"Set-MacAttribute\" or action_process_image_command_line contains \"Set-MachineAccountAttribute\" or action_process_image_command_line contains \"Set-Wallpaper\" or action_process_image_command_line contains \"Show-TargetScreen\" or action_process_image_command_line contains \"Start-CaptureServer\" or action_process_image_command_line contains \"Start-Dnscat2\" or action_process_image_command_line contains \"Start-WebcamRecorder\" or action_process_image_command_line contains \"VolumeShadowCopyTools\")\n\n\n\n"}
{"prompt": "I want to find instances of XORDump being executed on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\xordump\\.exe\" or (action_process_image_command_line contains \" -process lsass.exe \" or action_process_image_command_line contains \" -m comsvcs \" or action_process_image_command_line contains \" -m dbghelp \" or action_process_image_command_line contains \" -m dbgcore \"))\n\n\n\n"}
{"prompt": "I want to see events where an AppX package deployment was blocked by policy.", "response": "datamodel\n| filter xdm.event.id in (441, 442, 453, 454)\n\n\n\n"}
{"prompt": "I want to find events where the Dsacls.exe tool is used with potentially over permissive permissions.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\dsacls\\.exe\" or actor_process_file_original_name = \"DSACLS.EXE\") and action_process_image_command_line contains \" /G \" and (action_process_image_command_line contains \"GR\" or action_process_image_command_line contains \"GE\" or action_process_image_command_line contains \"GW\" or action_process_image_command_line contains \"GA\" or action_process_image_command_line contains \"WP\" or action_process_image_command_line contains \"WD\"))\n\n\n\n"}
{"prompt": "I want to see any Cisco commands that involve \"show history\", \"show history all\", or \"show logging\".", "response": "datamodel\n| filter ( contains \"show history\" or  contains \"show history all\" or  contains \"show logging\")\n\n\n\n"}
{"prompt": "I want to see when Broker VMs disconnect from the XSIAM console, including timestamps, type of management auditing, subtype of disconnect, and description.", "response": "config case_sensitive = false\n| dataset = management_auditing\n| filter management_auditing_type contains \"broker\" and subtype contains \"Disconnect\"\n| fields timestamp, management_auditing_type, subtype, description\n| sort desc timestamp\n| view column order = populated"}
{"prompt": "I want to detect any changes made to Network Security Groups (NSGs) in my Azure tenant.", "response": "dataset = microsoft_windows_raw\n| filter event_id = 1111 /**config case_sensitive = false\n|dataset = msft_azure_raw\n|filter tenantId IN (\"5eca477e-0f16-4c76-9597-c319851b389f\")\n|filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/WRITE\",\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/DELETE\")\n|alter username = json_extract_scalar(identity,\"$.claims.name\"), target_username = json_extract_scalar(properties,\"$.userPrincipalName\"), referenceid = arrayindex(split(resourceId,\"/\"),2), aliashost = arrayindex(split(resourceId,\"/\"),-1), protocol = json_extract_scalar(properties,\"$.eventProperties.protocol\")\n|fields username, target_username, operationName, referenceid, tenantId, resulttype, callerIpAddress, identity, aliashost, protocol, _time\n|alter aggregation_criteria = \"ilsourceuser\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)\n*/"}
{"prompt": "I want to see Cisco ASA connection termination records with event ID 734002 that are not related to the DfltAccessPolicy.", "response": "dataset = cisco_asa_raw\n| alter ASA_Event_ID = arrayindex(regextract(_raw_log, \"\\%ASA-\\d+\\-(\\d+)\\:\"), 0),\nASA_Src_UserName = arrayindex(regextract(_raw_log, \"DAP\\:\\sUser\\s([^\\,]+)\\,\\s\"), 0),\nASA_DAP = arrayindex(regextract(_raw_log, \"DAP\\srecords\\:\\s(.*)$\"), 0),\nASA_Src_IP = arrayindex(regextract(_raw_log, \"DAP\\:.*?\\,\\sAddr\\s(\\d+\\.\\d+\\.\\d+\\.\\d+)\\:\"), 0)\n| filter ASA_Event_ID = \"734002\" and ASA_DAP != \"DfltAccessPolicy\"\n| fields ASA_Event_ID, ASA_DAP, ASA_Src_UserName, ASA_Src_IP"}
{"prompt": "I want to find users who accessed multiple P2P URLs based on behavioral analysis.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category in (\"*Peer-to-Peer*\", \"*Peer2Peer*\") and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 5"}
{"prompt": "I want to find potential signs of persistence threats that involve Visual Studio Tools for Office using Windows Event Logs.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Software\\\\Microsoft\\\\Office\\\\Outlook\\\\Addins\\\\.*\" or action_registry_key_name ~= \".*\\\\Software\\\\Microsoft\\\\Office\\\\Word\\\\Addins\\\\.*\" or action_registry_key_name ~= \".*\\\\Software\\\\Microsoft\\\\Office\\\\Excel\\\\Addins\\\\.*\" or action_registry_key_name ~= \".*\\\\Software\\\\Microsoft\\\\Office\\\\Powerpoint\\\\Addins\\\\.*\" or action_registry_key_name ~= \".*\\\\Software\\\\Microsoft\\\\VSTO\\\\Security\\\\Inclusion\\\\.*\") and  not ((actor_process_image_path ~= \".*\\\\msiexec\\.exe\" or actor_process_image_path ~= \".*\\\\regsvr32\\.exe\") or (actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\integrator\\.exe\" or actor_process_image_path ~= \".*\\\\OfficeClickToRun\\.exe\" or actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\visio\\.exe\") or actor_process_image_path ~= \".*\\\\Teams\\.exe\" or (actor_process_image_path = \"C:\\\\Program Files\\\\AVG\\\\Antivirus\\\\RegSvr.exe\" and action_registry_key_name ~= \".*\\\\Microsoft\\\\Office\\\\Outlook\\\\Addins\\\\Antivirus\\.AsOutExt\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts for processes that mimic legitimate GoogleUpdate.exe behavior but aren't located in expected directories.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\GoogleUpdate\\.exe\" and action_process_image_path ~= \".*\\\\GoogleUpdate\\.exe\") and  not (((action_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Google\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Google\\\\.*\") or action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Google\\\\Update\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect if an app is querying DNS for domains commonly associated with remote access software.", "response": "datamodel\n| filter ((xdm.network.dns.dns_question.name ~= \".*agent\\.jumpcloud\\.com\" or xdm.network.dns.dns_question.name ~= \".*agentreporting\\.atera\\.com\" or xdm.network.dns.dns_question.name ~= \".*ammyy\\.com\" or xdm.network.dns.dns_question.name ~= \".*api\\.parsec\\.app\" or xdm.network.dns.dns_question.name ~= \".*api\\.playanext\\.com\" or xdm.network.dns.dns_question.name ~= \".*api\\.splashtop\\.com\" or xdm.network.dns.dns_question.name ~= \".*app\\.atera\\.com\" or xdm.network.dns.dns_question.name ~= \".*assist\\.zoho\\.com\" or xdm.network.dns.dns_question.name ~= \".*authentication\\.logmeininc\\.com\" or xdm.network.dns.dns_question.name ~= \".*beyondtrustcloud\\.com\" or xdm.network.dns.dns_question.name ~= \".*cdn\\.kaseya\\.net\" or xdm.network.dns.dns_question.name ~= \".*client\\.teamviewer\\.com\" or xdm.network.dns.dns_question.name ~= \".*comserver\\.corporate\\.beanywhere\\.com\" or xdm.network.dns.dns_question.name ~= \".*control\\.connectwise\\.com\" or xdm.network.dns.dns_question.name ~= \".*downloads\\.zohocdn\\.com\" or xdm.network.dns.dns_question.name ~= \".*dwservice\\.net\" or xdm.network.dns.dns_question.name ~= \".*express\\.gotoassist\\.com\" or xdm.network.dns.dns_question.name ~= \".*getgo\\.com\" or xdm.network.dns.dns_question.name ~= \".*integratedchat\\.teamviewer\\.com\" or xdm.network.dns.dns_question.name ~= \".*join\\.zoho\\.com\" or xdm.network.dns.dns_question.name ~= \".*kickstart\\.jumpcloud\\.com\" or xdm.network.dns.dns_question.name ~= \".*license\\.bomgar\\.com\" or xdm.network.dns.dns_question.name ~= \".*logmein\\-gateway\\.com\" or xdm.network.dns.dns_question.name ~= \".*logmein\\.com\" or xdm.network.dns.dns_question.name ~= \".*logmeincdn\\.http\\.internapcdn\\.net\" or xdm.network.dns.dns_question.name ~= \".*n\\-able\\.com\" or xdm.network.dns.dns_question.name ~= \".*net\\.anydesk\\.com\" or xdm.network.dns.dns_question.name ~= \".*netsupportsoftware\\.com\" or xdm.network.dns.dns_question.name ~= \".*parsecusercontent\\.com\" or xdm.network.dns.dns_question.name ~= \".*pubsub\\.atera\\.com\" or xdm.network.dns.dns_question.name ~= \".*relay\\.kaseya\\.net\" or xdm.network.dns.dns_question.name ~= \".*relay\\.screenconnect\\.com\" or xdm.network.dns.dns_question.name ~= \".*relay\\.splashtop\\.com\" or xdm.network.dns.dns_question.name ~= \".*remotedesktop\\-pa\\.googleapis\\.com\" or xdm.network.dns.dns_question.name ~= \".*remoteutilities\\.com\" or xdm.network.dns.dns_question.name ~= \".*secure\\.logmeinrescue\\.com\" or xdm.network.dns.dns_question.name ~= \".*services\\.vnc\\.com\" or xdm.network.dns.dns_question.name ~= \".*static\\.remotepc\\.com\" or xdm.network.dns.dns_question.name ~= \".*swi\\-rc\\.com\" or xdm.network.dns.dns_question.name ~= \".*swi\\-tc\\.com\" or xdm.network.dns.dns_question.name ~= \".*telemetry\\.servers\\.qetqo\\.com\" or xdm.network.dns.dns_question.name ~= \".*tmate\\.io\" or xdm.network.dns.dns_question.name ~= \".*zohoassist\\.com\") or (xdm.network.dns.dns_question.name ~= \".*\\.rustdesk\\.com\" and xdm.network.dns.dns_question.name ~= \"rs\\-.*\")) and  not ((xdm.target.process.name in (\"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\", \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\") or xdm.source.process.name in (\"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\", \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\")) or (xdm.target.process.name in (\"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\", \"C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe\") or xdm.source.process.name in (\"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\", \"C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe\")) or (xdm.target.process.name in (\"C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe\", \"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\") or xdm.source.process.name in (\"C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe\", \"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\")) or ((xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\.*\") or (xdm.target.process.name ~= \".*\\\\WindowsApps\\\\MicrosoftEdge\\.exe\" or xdm.source.process.name ~= \".*\\\\WindowsApps\\\\MicrosoftEdge\\.exe\") or (xdm.target.process.name in (\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\", \"C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\") or xdm.source.process.name in (\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\", \"C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\"))) or (((xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeCore\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\\\EdgeCore\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeCore\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\\\EdgeCore\\\\.*\")) and ((xdm.target.process.name ~= \".*\\\\msedge\\.exe\" or xdm.target.process.name ~= \".*\\\\msedgewebview2\\.exe\") or (xdm.source.process.name ~= \".*\\\\msedge\\.exe\" or xdm.source.process.name ~= \".*\\\\msedgewebview2\\.exe\"))) or (xdm.target.process.name ~= \".*\\\\safari\\.exe\" or xdm.source.process.name ~= \".*\\\\safari\\.exe\") or ((xdm.target.process.name ~= \".*\\\\MsMpEng\\.exe\" or xdm.target.process.name ~= \".*\\\\MsSense\\.exe\") or (xdm.source.process.name ~= \".*\\\\MsMpEng\\.exe\" or xdm.source.process.name ~= \".*\\\\MsSense\\.exe\")) or ((xdm.target.process.name ~= \".*\\\\brave\\.exe\" or xdm.source.process.name ~= \".*\\\\brave\\.exe\") and (xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\BraveSoftware\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\BraveSoftware\\\\.*\")) or ((xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\Maxthon\\\\.*\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\Maxthon\\\\.*\") and (xdm.target.process.name ~= \".*\\\\maxthon\\.exe\" or xdm.source.process.name ~= \".*\\\\maxthon\\.exe\")) or ((xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\Programs\\\\Opera\\\\.*\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\Programs\\\\Opera\\\\.*\") and (xdm.target.process.name ~= \".*\\\\opera\\.exe\" or xdm.source.process.name ~= \".*\\\\opera\\.exe\")) or (((xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\SeaMonkey\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\SeaMonkey\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\SeaMonkey\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\SeaMonkey\\\\.*\")) and (xdm.target.process.name ~= \".*\\\\seamonkey\\.exe\" or xdm.source.process.name ~= \".*\\\\seamonkey\\.exe\")) or ((xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\Vivaldi\\\\.*\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\Vivaldi\\\\.*\") and (xdm.target.process.name ~= \".*\\\\vivaldi\\.exe\" or xdm.source.process.name ~= \".*\\\\vivaldi\\.exe\")) or (((xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\Naver\\\\Naver\\ Whale\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Naver\\\\Naver\\ Whale\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\Naver\\\\Naver\\ Whale\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Naver\\\\Naver\\ Whale\\\\.*\")) and (xdm.target.process.name ~= \".*\\\\whale\\.exe\" or xdm.source.process.name ~= \".*\\\\whale\\.exe\")) or (xdm.target.process.name ~= \".*\\\\Tor\\ Browser\\\\.*\" or xdm.source.process.name ~= \".*\\\\Tor\\ Browser\\\\.*\") or (((xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\Waterfox\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Waterfox\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\Waterfox\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Waterfox\\\\.*\")) and (xdm.target.process.name ~= \".*\\\\Waterfox\\.exe\" or xdm.source.process.name ~= \".*\\\\Waterfox\\.exe\")) or ((xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\Programs\\\\midori\\-ng\\\\.*\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\Programs\\\\midori\\-ng\\\\.*\") and (xdm.target.process.name ~= \".*\\\\Midori\\ Next\\ Generation\\.exe\" or xdm.source.process.name ~= \".*\\\\Midori\\ Next\\ Generation\\.exe\")) or (((xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\SlimBrowser\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\SlimBrowser\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\SlimBrowser\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\SlimBrowser\\\\.*\")) and (xdm.target.process.name ~= \".*\\\\slimbrowser\\.exe\" or xdm.source.process.name ~= \".*\\\\slimbrowser\\.exe\")) or ((xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\Flock\\\\.*\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\Flock\\\\.*\") and (xdm.target.process.name ~= \".*\\\\Flock\\.exe\" or xdm.source.process.name ~= \".*\\\\Flock\\.exe\")) or ((xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\Phoebe\\\\.*\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\Phoebe\\\\.*\") and (xdm.target.process.name ~= \".*\\\\Phoebe\\.exe\" or xdm.source.process.name ~= \".*\\\\Phoebe\\.exe\")) or (((xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\Falkon\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Falkon\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\Falkon\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Falkon\\\\.*\")) and (xdm.target.process.name ~= \".*\\\\falkon\\.exe\" or xdm.source.process.name ~= \".*\\\\falkon\\.exe\")) or (((xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Avant\\ Browser\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\Avant\\ Browser\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Avant\\ Browser\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\Avant\\ Browser\\\\.*\")) and (xdm.target.process.name ~= \".*\\\\avant\\.exe\" or xdm.source.process.name ~= \".*\\\\avant\\.exe\")))\n\n\n\n"}
{"prompt": "I want to see all instances where an RDP file is created from potentially suspicious applications like web browsers or communication tools.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\brave\\.exe\" or xdm.target.process.name ~= \".*\\\\CCleaner\\ Browser\\\\Application\\\\CCleanerBrowser\\.exe\" or xdm.target.process.name ~= \".*\\\\chromium\\.exe\" or xdm.target.process.name ~= \".*\\\\firefox\\.exe\" or xdm.target.process.name ~= \".*\\\\Google\\\\Chrome\\\\Application\\\\chrome\\.exe\" or xdm.target.process.name ~= \".*\\\\iexplore\\.exe\" or xdm.target.process.name ~= \".*\\\\microsoftedge\\.exe\" or xdm.target.process.name ~= \".*\\\\msedge\\.exe\" or xdm.target.process.name ~= \".*\\\\Opera\\.exe\" or xdm.target.process.name ~= \".*\\\\Vivaldi\\.exe\" or xdm.target.process.name ~= \".*\\\\Whale\\.exe\" or xdm.target.process.name ~= \".*\\\\Outlook\\.exe\" or xdm.target.process.name ~= \".*\\\\RuntimeBroker\\.exe\" or xdm.target.process.name ~= \".*\\\\Thunderbird\\.exe\" or xdm.target.process.name ~= \".*\\\\Discord\\.exe\" or xdm.target.process.name ~= \".*\\\\Keybase\\.exe\" or xdm.target.process.name ~= \".*\\\\msteams\\.exe\" or xdm.target.process.name ~= \".*\\\\Slack\\.exe\" or xdm.target.process.name ~= \".*\\\\teams\\.exe\") or (xdm.source.process.name ~= \".*\\\\brave\\.exe\" or xdm.source.process.name ~= \".*\\\\CCleaner\\ Browser\\\\Application\\\\CCleanerBrowser\\.exe\" or xdm.source.process.name ~= \".*\\\\chromium\\.exe\" or xdm.source.process.name ~= \".*\\\\firefox\\.exe\" or xdm.source.process.name ~= \".*\\\\Google\\\\Chrome\\\\Application\\\\chrome\\.exe\" or xdm.source.process.name ~= \".*\\\\iexplore\\.exe\" or xdm.source.process.name ~= \".*\\\\microsoftedge\\.exe\" or xdm.source.process.name ~= \".*\\\\msedge\\.exe\" or xdm.source.process.name ~= \".*\\\\Opera\\.exe\" or xdm.source.process.name ~= \".*\\\\Vivaldi\\.exe\" or xdm.source.process.name ~= \".*\\\\Whale\\.exe\" or xdm.source.process.name ~= \".*\\\\Outlook\\.exe\" or xdm.source.process.name ~= \".*\\\\RuntimeBroker\\.exe\" or xdm.source.process.name ~= \".*\\\\Thunderbird\\.exe\" or xdm.source.process.name ~= \".*\\\\Discord\\.exe\" or xdm.source.process.name ~= \".*\\\\Keybase\\.exe\" or xdm.source.process.name ~= \".*\\\\msteams\\.exe\" or xdm.source.process.name ~= \".*\\\\Slack\\.exe\" or xdm.source.process.name ~= \".*\\\\teams\\.exe\")) and xdm.target.file.filename contains \".rdp\")\n\n\n\n"}
{"prompt": "I want to detect suspicious activity related to loading and unloading device drivers on my endpoints.", "response": "preset = xdr_event_log\n| alter PrivilegeList = regextract(to_json_string(action_evtlog_data_fields)->PrivilegeList{}, \"\\\"(.*)\\\"\")\n| alter Service = regextract(to_json_string(action_evtlog_data_fields)->Service{}, \"\\\"(.*)\\\"\")\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4673 and PrivilegeList = \"SeLoadDriverPrivilege\" and Service = \"-\") and  not (ProcessName in (\"C:\\\\Windows\\\\System32\\\\Dism.exe\", \"C:\\\\Windows\\\\System32\\\\rundll32.exe\", \"C:\\\\Windows\\\\System32\\\\fltMC.exe\", \"C:\\\\Windows\\\\HelpPane.exe\", \"C:\\\\Windows\\\\System32\\\\mmc.exe\", \"C:\\\\Windows\\\\System32\\\\svchost.exe\", \"C:\\\\Windows\\\\System32\\\\wimserv.exe\", \"C:\\\\Windows\\\\System32\\\\RuntimeBroker.exe\", \"C:\\\\Windows\\\\System32\\\\SystemSettingsBroker.exe\", \"C:\\\\Windows\\\\explorer.exe\") or (ProcessName ~= \".*\\\\procexp64\\.exe\" or ProcessName ~= \".*\\\\procexp\\.exe\" or ProcessName ~= \".*\\\\procmon64\\.exe\" or ProcessName ~= \".*\\\\procmon\\.exe\" or ProcessName ~= \".*\\\\Google\\\\Chrome\\\\Application\\\\chrome\\.exe\" or ProcessName ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\current\\\\Teams\\.exe\") or ProcessName ~= \"C\\:\\\\Program\\ Files\\\\WindowsApps\\\\Microsoft.*\")\n\n\n\n"}
{"prompt": "I want to see activity related to Ruby code being executed inline through commands.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\ruby\\.exe\" or actor_process_file_original_name = \"ruby.exe\") and action_process_image_command_line contains \" -e\")\n\n\n\n"}
{"prompt": "I want to see who is using Fortigate VPN on unmanaged devices.", "response": "config case_sensitive = false\n| datamodel dataset = fortinet_fortigate_raw\n| filter fortinet_fortigate_raw.ftntfgtlogid = \"0107045057\"\n| fields fortinet_fortigate_raw.duser, fortinet_fortigate_raw.ftntfgtname,\nxdm.source.ipv4, xdm.alert.subcategory\n| join type = left\n(config case_sensitive = false\n| dataset = endpoints\n| fields endpoint_name, endpoint_status\n) as endp endp.endpoint_name = fortinet_fortigate_raw.ftntfgtname\n| filter (endpoint_name in (null, \"\"\"\"\"\"))"}
{"prompt": " I want to see information about when ESXi system information was discovered on endpoints using ESXCLI. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/esxcli\" and action_process_image_command_line contains \"system\") and (action_process_image_command_line contains \" get\" or action_process_image_command_line contains \" list\"))\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious uses of the fsutil command, like deleting or configuring the USN journal.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\fsutil\\.exe\" or actor_process_file_original_name = \"fsutil.exe\") and (action_process_image_command_line contains \"deletejournal\" or action_process_image_command_line contains \"createjournal\" or action_process_image_command_line contains \"setZeroData\"))\n\n\n\n"}
{"prompt": "I want to find instances where an attacker is using /dev/tcp for malicious purposes.", "response": "datamodel\n| filter ( contains \"cat </dev/tcp/\" or  contains \"exec 3<>/dev/tcp/\" or  contains \"echo >/dev/tcp/\" or  contains \"bash -i >& /dev/tcp/\" or  contains \"sh -i >& /dev/udp/\" or  contains \"0<&196;exec 196<>/dev/tcp/\" or  contains \"exec 5<>/dev/tcp/\" or  contains \"(sh)0>/dev/tcp/\" or  contains \"bash -c 'bash -i >& /dev/tcp/\" or  contains \"echo -e '#!/bin/bash\\\\nbash -i >& /dev/tcp/\")\n\n\n\n"}
{"prompt": "I want to see alerts for users who have been locked out three times within an hour.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4740\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_domain\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.target.user.username\n| filter matched_events >= 3\n\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to see indicators of Cobalt Strike being used by an attacker, specifically looking for their Bloopers modules.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"Cmd.Exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") and (action_process_image_command_line contains \"Invoke-UserHunter\" or action_process_image_command_line contains \"Invoke-ShareFinder\" or action_process_image_command_line contains \"Invoke-Kerberoast\" or action_process_image_command_line contains \"Invoke-SMBAutoBrute\" or action_process_image_command_line contains \"Invoke-Nightmare\" or action_process_image_command_line contains \"zerologon\" or action_process_image_command_line contains \"av_query\"))\n\n\n\n"}
{"prompt": "I want to see all instances of DNS queries that target MEGA's user storage website.", "response": "datamodel\n| filter xdm.network.dns.dns_question.name contains \"userstorage.mega.co.nz\"\n\n\n\n"}
{"prompt": "I want to find URLs that look like they are downloading Ursnif malware. They should contain \".php?l=\" and \".cab\" and have a successful HTTP response code.", "response": "datamodel\n| filter ((xdm.network.http.url contains \"/\" and xdm.network.http.url contains \".php?l=\") and xdm.network.http.url ~= \".*\\.cab\" and xdm.network.http.response_code = 200)\n\n\n\n"}
{"prompt": "I want to find potential data exfiltration attempts using the curl.exe tool.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\curl\\.exe\" or action_process_signature_product = \"The curl executable\") and ((action_process_image_command_line contains \" --form\" or action_process_image_command_line contains \" --upload-file \" or action_process_image_command_line contains \" --data \" or action_process_image_command_line contains \" --data-\") or action_process_image_command_line ~= \"\\s\\-[FTd]\\s\")) and  not ((action_process_image_command_line contains \":\n\n\n\n"}
{"prompt": "I want to find instances of \"Small Sieve Malware\" that are detected by analyzing command lines on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line ~= \".*\\.exe\\ Platypus\"\n\n\n\n"}
{"prompt": "I want to see alerts for excessive denied traffic from SmartDefense over the last 5 minutes.", "response": "config case_sensitive = false\n| datamodel dataset = check_point_smartdefense_raw\n| bin _time span = 5m\n| filter xdm.observer.action ~= \"drop\" and xdm.source.is_internal_ip = false and check_point_smartdefense_raw._final_reporting_device_ip != \"<ip>\" and xdm.source.ipv4 !~= \"(34)\\.(96)\\.([0-9]|1[0-5])\\.([0-9]{1,3})|(34)\\.(127)\\.(19[2-9]|2[0-4][0-9]|25[0-5])\\.([0-9]{1,3})\"\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmzips dmzips.ip_address = xdm.target.ipv4\n| filter (ip_address != NULL or xdm.target.is_internal_ip = false)\n| alter result = null,\nuser_agent = null,\nos_edition = null\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.target.ipv4) as dst_ip,\nvalues(xdm.source.port) as src_port,\nvalues(xdm.target.port) as dst_port,\nvalues(xdm.observer.action) as action,\nvalues(xdm.target.host.hostname) as hostname,\nvalues(xdm.target.user.username) as username,\nvalues(check_point_smartdefense_raw.origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\ncount() as matched_events by _time,\nxdm.source.ipv4\n| filter matched_events >= 2000\n\n| alter aggregation_criteria = \"ilsourceip\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 2000)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": " I want to detect suspicious queries related to Veeam backups on endpoints. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sqlcmd\\.exe\" and (action_process_image_command_line contains \"VeeamBackup\" and action_process_image_command_line contains \"From \")) and (action_process_image_command_line contains \"BackupRepositories\" or action_process_image_command_line contains \"Backups\" or action_process_image_command_line contains \"Credentials\" or action_process_image_command_line contains \"HostCreds\" or action_process_image_command_line contains \"SmbFileShares\" or action_process_image_command_line contains \"Ssh_creds\" or action_process_image_command_line contains \"VSphereInfo\"))\n\n\n\n"}
{"prompt": "I want to see events where a headless browser (Chrome, Brave, Edge, Opera, or Vivaldi) downloads a web page.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\brave\\.exe\" or action_process_image_path ~= \".*\\\\chrome\\.exe\" or action_process_image_path ~= \".*\\\\msedge\\.exe\" or action_process_image_path ~= \".*\\\\opera\\.exe\" or action_process_image_path ~= \".*\\\\vivaldi\\.exe\") and (action_process_image_command_line contains \"--headless\" and action_process_image_command_line contains \"dump-dom\" and action_process_image_command_line contains \"http\"))\n\n\n\n"}
{"prompt": "I want to find potential instances of malicious processes accessing LSASS memory using whitelisted filenames like TrolleyExpress.exe or similar.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and (SourceImage ~= \".*\\\\TrolleyExpress\\.exe\" or SourceImage ~= \".*\\\\ProcessDump\\.exe\" or SourceImage ~= \".*\\\\dump64\\.exe\") and (GrantedAccess ~= \".*10\" or GrantedAccess ~= \".*30\" or GrantedAccess ~= \".*50\" or GrantedAccess ~= \".*70\" or GrantedAccess ~= \".*90\" or GrantedAccess ~= \".*B0\" or GrantedAccess ~= \".*D0\" or GrantedAccess ~= \".*F0\" or GrantedAccess ~= \".*18\" or GrantedAccess ~= \".*38\" or GrantedAccess ~= \".*58\" or GrantedAccess ~= \".*78\" or GrantedAccess ~= \".*98\" or GrantedAccess ~= \".*B8\" or GrantedAccess ~= \".*D8\" or GrantedAccess ~= \".*F8\" or GrantedAccess ~= \".*1A\" or GrantedAccess ~= \".*3A\" or GrantedAccess ~= \".*5A\" or GrantedAccess ~= \".*7A\" or GrantedAccess ~= \".*9A\" or GrantedAccess ~= \".*BA\" or GrantedAccess ~= \".*DA\" or GrantedAccess ~= \".*FA\" or GrantedAccess ~= \".*0x14C2\" or GrantedAccess ~= \".*FF\"))\n\n\n\n"}
{"prompt": "I want to see suspicious activity alerts from AWS GuardDuty, excluding those related to IAM user/instance credential exfiltration and EV_GuardDuty events. I also need to group the alerts by event type and log session ID, along with extracted username, IP address, group name, and group ID.", "response": "config case_sensitive = false\n| dataset = aws_guardduty_raw\n| filter _collector_name not contains \"EV_GuardDuty\"\n| filter Type != \"UnauthorizedAccess:IAMUser/InstanceCredentialExfiltration.OutsideAWS\"\n\n| alter target_username = trim(arrayindex(regextract(resource, \"UserName\\\":\\\"([^,]+)\"), 0), \"\\\"\"),\nipaddress = trim(arrayindex(regextract(Service, \"IpAddressV4\\\":\\\"([^,]+)\"), 0), \"\\\"\"),\ngroupname = regextract(resource, \"GroupName\\\":\\\"([^\\\"]+)\"),\ngroupid = regextract(resource, \"GroupId\\\":\\\"([^\\\"]+)\")\n| alter aggregation_criteria = \"ileventtype\",\naggregation_criteria1 = \"illogonsessionid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see if there are multiple failed remote login attempts from public IPs on our Unix servers.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"RSD-Unix-servers\", \"sdam_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"sshd\" and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol = \"ssh2\" and xdm.source.is_internal_ip = false and incidr(xdm.source.ipv4, \"169.254.0.0/16\") = false\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address as ip\n) as dmz_ips dmz_ips.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_ips incidr(xdm.source.ipv4, vpn_ips.cidr_range) = true\n| filter cidr_range = null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, linux_linux_raw._final_reporting_device_ip,\n_vendor, _product\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by device_ip\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to see Duo login events where users used bypass codes and were successful.", "response": "config case_sensitive = false\n| dataset = duo_duo_raw\n| filter factor contains \"bypass_code\" and result = \"success\""}
{"prompt": "I want to find instances of arbitrary shell command execution using the SettingContent-ms process on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \".SettingContent-ms\" and  not (action_process_image_command_line contains \"immersivecontrolpanel\")\n\n\n\n"}
{"prompt": "I want to see alerts about files that were blocked by AppLocker.", "response": "datamodel\n| filter xdm.event.id in (8004, 8007, 8022, 8025)\n\n\n\n"}
{"prompt": "I want to find processes that might be attempting a UAC bypass using NTFS reparse points.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line ~= \"\\\"C\\:\\\\Windows\\\\system32\\\\wusa\\.exe\\\"\\ \\ \\/quiet\\ C\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\update\\.msu\" and action_process_integrity_level in (\"High\", \"System\")) or (actor_process_image_command_line = \"\\\"C:\\\\Windows\\\\system32\\\\dism.exe\\\" /online /quiet /norestart /add-package /packagepath:\\\"C:\\\\Windows\\\\system32\\\\pe386\\\" /ignorecheck\" and action_process_integrity_level in (\"High\", \"System\") and (action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and action_process_image_command_line contains \"\\\\dismhost.exe {\") and action_process_image_path ~= \".*\\\\DismHost\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to potential script proxy execution using CL_Mutexverifiers.ps1.", "response": "preset = xdr_process\n| filter (((actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\") and action_process_image_path ~= \".*\\\\powershell\\.exe\" and action_process_image_command_line contains \" -nologo -windowstyle minimized -file \") and (action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential SmadHook.DLL sideloading based on suspicious image loads in the Windows Event Log.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\SmadHook32c\\.dll\" or action_module_path ~= \".*\\\\SmadHook64c\\.dll\") and  not ((actor_process_image_path in (\"C:\\\\Program Files (x86)\\\\SMADAV\\\\SmadavProtect32.exe\", \"C:\\\\Program Files (x86)\\\\SMADAV\\\\SmadavProtect64.exe\", \"C:\\\\Program Files\\\\SMADAV\\\\SmadavProtect32.exe\", \"C:\\\\Program Files\\\\SMADAV\\\\SmadavProtect64.exe\") and (action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\SMADAV\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\SMADAV\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to detect instances where an attacker might be using crontab to remove scheduled tasks on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*crontab\" and action_process_image_command_line contains \" -r\")\n\n\n\n"}
{"prompt": "I want to see all privileged user activity on IS systems across Linux devices.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"IS_Intranet\", \"IS_Linux_Azure_Infosys-Cloud\", \"IS_unix\", \"IS_Linux_Intranet\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type in (\"useradd\", \"userdel\", \"usermod\") and xdm.event.description !~= \"^new group\"\n| alter xdm.target.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"password\\s+changed\\s+for\\s+([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"changed\\s+password\\s+expiry\\s+for\\s+([\\w\\-\\.]+)\"), 0), if(xdm.event.type = \"useradd\", arrayindex(regextract(xdm.event.description, \"name=([^,]+)\"), 0)), arrayindex(regextract(xdm.event.description, \"[add|delete]+ \\'([^\\']+)\"), 0)),\nxdm.target.user.groups = coalesce(arrayindex(regextract(xdm.event.description, \"name=(\\w+)\"), 0), arrayindex(regextract(xdm.event.description, \"group \\'([^\\']+)\"), 0)),\nxdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), xdm.source.user.username),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter (xdm.source.user.username != null or xdm.target.user.username != null)\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, device_ip, _vendor, _product\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where important Windows event logs have been cleared on endpoints.", "response": "preset = xdr_event_log\n| alter Channel = regextract(to_json_string(action_evtlog_data_fields)->Channel{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 104 and provider_name = \"Microsoft-Windows-Eventlog\" and Channel in (\"Microsoft-Windows-PowerShell/Operational\", \"Microsoft-Windows-Sysmon/Operational\", \"PowerShellCore/Operational\", \"Security\", \"System\", \"Windows PowerShell\"))\n\n\n\n"}
{"prompt": "I want to detect instances where attackers are using the `query` command to exfiltrate data from Windows endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\query\\.exe\" and (action_process_image_command_line contains \"session >\" or action_process_image_command_line contains \"process >\"))\n\n\n\n"}
{"prompt": "I want to see alerts for unauthorized password changes on managed service accounts.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4723\")\n| alter target_uname = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<user>\", ltrim(xdm.target.user.username, \"<user>\\\\\"), xdm.target.user.username)))\n| join type = left\n(dataset = Epm_ServiceID_static_list\n| alter username_field = if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<user>\", ltrim(username, \"itlinfosys\\\\\"), username)))\n) as JT1 JT1.username_field = target_uname\n| filter username_field != null\n\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_uname,\ntarget_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see potential instances of Remote Desktop Tunneling on my endpoints based on suspicious command lines.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \":3389\" and (action_process_image_command_line contains \" -L \" or action_process_image_command_line contains \" -P \" or action_process_image_command_line contains \" -R \" or action_process_image_command_line contains \" -pw \" or action_process_image_command_line contains \" -ssh \"))\n\n\n\n"}
{"prompt": "I want to see a list of users who uploaded more than 50 million bytes today and whose daily upload is significantly higher than their average upload over the last 7 days.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|comcast-pde.cloud.databricks.com|sygdc.exconnect.hsbc.co.uk\"\n| comp sum(rbytes) as current_day_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|comcast-pde.cloud.databricks.com|sygdc.exconnect.hsbc.co.uk\"\n| comp sum(rbytes) as 7_days_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_upload) as 7_days_upload_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_upload > 50000000 and current_day_upload > multiply(7_days_upload_avg, 3.5)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to detect suspicious activity related to accessing .reg and .hive files by applications outside of common system locations.", "response": "datamodel\n| filter (xdm.target.file.path ~= \".*\\.hive\" or xdm.target.file.path ~= \".*\\.reg\") and  not (((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find alerts about PsExec/PAExec being used to escalate privileges to LOCAL SYSTEM.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \" -s cmd\" or action_process_image_command_line contains \" -s -i cmd\" or action_process_image_command_line contains \" -i -s cmd\" or action_process_image_command_line contains \" -s pwsh\" or action_process_image_command_line contains \" -s -i pwsh\" or action_process_image_command_line contains \" -i -s pwsh\" or action_process_image_command_line contains \" -s powershell\" or action_process_image_command_line contains \" -s -i powershell\" or action_process_image_command_line contains \" -i -s powershell\") and (action_process_image_command_line contains \"psexec\" or action_process_image_command_line contains \"paexec\" or action_process_image_command_line contains \"accepteula\"))\n\n\n\n"}
{"prompt": "I want to see all events related to user account creation and deletion on Windows systems, especially when performed by non-admins, to identify potential privilege escalation attempts.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4720\", \"4722\", \"4725\", \"4726\")\n| filter xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.target.user.username != NULL\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about when secrets have been modified or deleted in Azure Key Vault.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.KEYVAULT/VAULTS/SECRETS/WRITE\", \"MICROSOFT.KEYVAULT/VAULTS/SECRETS/DELETE\", \"MICROSOFT.KEYVAULT/VAULTS/SECRETS/BACKUP/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/SECRETS/PURGE/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/SECRETS/UPDATE/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/SECRETS/RECOVER/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/SECRETS/RESTORE/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/SECRETS/SETSECRET/ACTION\")\n\n\n\n"}
{"prompt": "I want to find instances where AnyDesk is creating temporary files, specifically those with names like \"user.conf\" or \"system.conf\"  located in its roaming folder.", "response": "datamodel\n| filter ((xdm.target.file.filename contains \"\\\\AppData\\\\Roaming\\\\AnyDesk\\\\user.conf\" or xdm.target.file.filename contains \"\\\\AppData\\\\Roaming\\\\AnyDesk\\\\system.conf\") and xdm.target.file.filename ~= \".*\\.temp\")\n\n\n\n"}
{"prompt": "I want to see events where PowerShell is used to test network connections on non-standard ports like 587 or 8088.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Test-NetConnection\" and ScriptBlockText contains \"-ComputerName \" and ScriptBlockText contains \"-port \") and  not ((ScriptBlockText contains \" 443 \" or ScriptBlockText contains \" 80 \"))\n\n\n\n"}
{"prompt": "I want to find events that indicate changes to system scripts autorun keys in the Windows registry.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\Software\\\\Policies\\\\Microsoft\\\\Windows\\\\System\\\\Scripts\" and (action_registry_key_name contains \"\\\\Startup\" or action_registry_key_name contains \"\\\\Shutdown\" or action_registry_key_name contains \"\\\\Logon\" or action_registry_key_name contains \"\\\\Logoff\") and  not ((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\"))\n\n\n\n"}
{"prompt": "I want to find instances of Regsvr32 being executed from remote shares on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_file_original_name = \"\\\\REGSVR32.EXE\") and action_process_image_command_line ~= \".*\\ \\\\\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see alerts about non-interactive PowerShell processes being spawned on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and  not ((actor_process_image_path ~= \".*\\:\\\\Windows\\\\explorer\\.exe\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\CompatTelRunner\\.exe\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\explorer\\.exe\") or actor_process_image_path = \":\\\\$WINDOWS.~BT\\\\Sources\\\\SetupHost.exe\") and  not ((actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Programs\\\\Microsoft\\ VS\\ Code\\\\Code\\.exe\" and actor_process_image_command_line contains \" --ms-enable-electron-run-as-node \") or (actor_process_image_path contains \":\\\\Program Files\\\\WindowsApps\\\\Microsoft.WindowsTerminal_\" and actor_process_image_path ~= \".*\\\\WindowsTerminal\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts for potential persistence attacks using netsh helper DLLs.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"netsh.exe\" or action_process_image_path ~= \".*\\\\netsh\\.exe\") and (action_process_image_command_line contains \"add\" and action_process_image_command_line contains \"helper\"))\n\n\n\n"}
{"prompt": "I want to see events related to suspicious printer port creations that might be exploiting CVE-2020-1048.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Add-PrinterPort -Name\" and (action_process_image_command_line contains \".exe\" or action_process_image_command_line contains \".dll\" or action_process_image_command_line contains \".bat\")) or action_process_image_command_line contains \"Generic / Text Only\"\n\n\n\n"}
{"prompt": "I want to see alerts for when processes like Teamviewer, WinVNC, or Anydesk start running on my network.", "response": "config case_sensitive = false\n| dataset = xdr_data\n| filter event_type = PROCESS and event_sub_type = PROCESS_START and action_process_image_name ~= \"Teamviewer|WinVNC|Anydesk\"\n| fields action_process_image_name, actor_effective_username,\nagent_hostname, agent_ip_addresses"}
{"prompt": "I want to find out which IP addresses have had at least three file upload attempts within a 5-minute window based on Cisco Firepower logs and mark those that haven't been scanned by IISVAS yet.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"file upload attempt\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\"\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.ipv4,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "{I want to see a list of users whose current day network activity is significantly higher than their average activity over the past 7 days.}  \n\n\nLet me know if you would like to refine this prompt further!", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and user_agent ~= \"^Microsoft\" and user_agent !~= \"Microsoft-Delivery-Optimization\"\n| comp count() as current_day_count,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and user_agent ~= \"^Microsoft\" and user_agent !~= \"Microsoft-Delivery-Optimization\"\n| comp count() as 7_days_count,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_count) as 7_days_count_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_count_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_count > multiply(7_days_count_avg, 3.50)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see details about route additions and deletions on CheckPoint gateways from Linux devices.", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| alter xdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), xdm.source.user.username),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.event.description ~= \"processing : set static-route|operation: delete object|operation: set object\"\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _vendor, _product, device_ip, _insert_time\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see activity related to APT31 Judgement Panda, which involves processes using specific command lines like \"ldifde -f -n eprod.ldf\" or files like \"\\\\aaaa\\\\procdump64.exe\".", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"ldifde\" and action_process_image_command_line contains \"-f -n\" and action_process_image_command_line contains \"eprod.ldf\") or ((action_process_image_command_line ~= \".*copy\\ \\\\\\\\.*\" and action_process_image_command_line contains \"c$\") and (action_process_image_command_line contains \"\\\\aaaa\\\\procdump64.exe\" or action_process_image_command_line contains \"\\\\aaaa\\\\netsess.exe\" or action_process_image_command_line contains \"\\\\aaaa\\\\7za.exe\" or action_process_image_command_line ~= \".*\\\\c\\$\\\\aaaa\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to detect suspicious login attempts from multiple users originating from the same source IP address using iRemote on Microsoft Azure.", "response": "dataset = msft_azure_ad_raw\n| bin _time span = 5m\n| alter result_code = to_integer(status -> errorCode),\nresult_desc = status -> failureReason\n| filter result_code != 0 and appDisplayName ~= \"iremote\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(userDisplayName) as username,\nvalues(userPrincipalName) as user_dst,\nvalues(result_code) as result_code,\nvalues(result_desc) as result_desc,\nvalues(appDisplayName) as user_agent,\ncount() as matched_events by _time,\nipAddress\n| filter array_length(username) >= 5\n| alter aggregation_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see all instances of successful ProxyShell attacks on Exchange servers.", "response": "datamodel\n| filter xdm.network.http.url contains \"/autodiscover.json\" and (xdm.network.http.url contains \"/powershell\" or xdm.network.http.url contains \"/mapi/nspi\" or xdm.network.http.url contains \"/EWS\" or xdm.network.http.url contains \"X-Rps-CAT\") and xdm.network.http.response_code in (200, 301)\n\n\n\n"}
{"prompt": "I want to see events related to creating policy assignments in Azure, specifically focusing on username, target username, operation name, resource ID, tenant ID, and protocol.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.AUTHORIZATION/POLICYASSIGNMENTS/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect attempts to bypass User Account Control (UAC) using the `wsreset` tool by analyzing registry events.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\AppX82a6gwre4fdg3bt635tn5ctqjf8msdd2\\\\Shell\\\\open\\\\command\"\n\n\n\n"}
{"prompt": "I want to detect potential sideloading of CCleanerDU.DLL from untrusted sources.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\CCleanerDU\\.dll\" and  not (((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\CCleaner\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\CCleaner\\\\.*\") and (actor_process_image_path ~= \".*\\\\CCleaner\\.exe\" or actor_process_image_path ~= \".*\\\\CCleaner64\\.exe\")))\n\n\n\n"}
{"prompt": "I want to find instances where reg.exe is used to modify the ImagePath value of existing services in the registry.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" and (action_process_image_command_line contains \"add \" and action_process_image_command_line ~= \".*SYSTEM\\\\CurrentControlSet\\\\Services\\\\.*\" and action_process_image_command_line contains \" ImagePath \")) and action_process_image_command_line contains \" -d \")\n\n\n\n"}
{"prompt": "I want to see alerts about processes running curl.exe on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\curl\\.exe\" or action_process_signature_product = \"The curl executable\")\n\n\n\n"}
{"prompt": "I want to find potential Python reverse shells on my endpoints based on command line arguments.", "response": "preset = xdr_process\n| filter (action_process_image_path contains \"python\" and (action_process_image_command_line contains \" -c \" and action_process_image_command_line contains \"import\" and action_process_image_command_line contains \"pty\" and action_process_image_command_line contains \"spawn(\" and action_process_image_command_line contains \".connect\"))\n\n\n\n"}
{"prompt": "I want to see all password reset attempts on our Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id = \"4724\" and xdm.source.user.username not in (\"_dcmpamwindows\", \"hydscoadm\") and xdm.target.user.username not in (\"cliusr\") and xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.target.user.username != null\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria1 = \"ilsourceuser\",\naggregation_criteria2 = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find files named \"code_tunnel.json\" on my system as this might indicate malicious activity using Visual Studio Code tunneling.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\code\\_tunnel\\.json\"\n\n\n\n"}
{"prompt": "I want to find instances where Mshta.exe is used to execute JavaScript code.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_file_original_name = \"MSHTA.EXE\") and action_process_image_command_line contains \"javascript\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to retrieving full LSASS dumps via registry settings.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\LocalDumps\\\\DumpType\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\Windows Error Reporting\\\\LocalDumps\\\\lsass.exe\\\\DumpType\") and (action_registry_value_name = \"DWORD (0x00000002)\" or action_registry_data = \"DWORD (0x00000002)\"))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious Wscript or Cscript executions running from drives other than C.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\") and (action_process_image_command_line contains \".js\" or action_process_image_command_line contains \".vbs\" or action_process_image_command_line contains \".vbe\") and action_process_image_command_line ~= \".*\\:\\\\.*\") and  not ((action_process_image_command_line ~= \".*\\ C\\:\\\\.*\" or action_process_image_command_line ~= \".*\\ \\'C\\:\\\\.*\" or action_process_image_command_line ~= \".*\\ \\\"C\\:\\\\.*\") or action_process_image_command_line contains \"%\" or action_process_image_command_line ~= \".*\\ \\\\\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see events where a process is loading a DLL using CertOC.EXE.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certoc\\.exe\" or actor_process_file_original_name = \"CertOC.exe\") and action_process_image_command_line contains \" -LoadDLL \")\n\n\n\n"}
{"prompt": "I want to find instances of malicious processes spawning under the guise of svchost.exe with \"termsvcs\" in the command line, excluding legitimate system processes like rdpclip.exe, csrss.exe, wininit.exe, and winlogon.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_command_line contains \"\\\\svchost.exe\" and actor_process_image_command_line contains \"termsvcs\") and  not ((action_process_image_path ~= \".*\\\\rdpclip\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\csrss\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\wininit\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\winlogon\\.exe\") or action_process_image_path = \"None\")\n\n\n\n"}
{"prompt": "I want to see events related to modifications or deletions of Azure Firewall Rule Collections.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.NETWORK/AZUREFIREWALLS/APPLICATIONRULECOLLECTIONS/WRITE\", \"MICROSOFT.NETWORK/AZUREFIREWALLS/APPLICATIONRULECOLLECTIONS/DELETE\", \"MICROSOFT.NETWORK/AZUREFIREWALLS/NATRULECOLLECTIONS/WRITE\", \"MICROSOFT.NETWORK/AZUREFIREWALLS/NATRULECOLLECTIONS/DELETE\", \"MICROSOFT.NETWORK/AZUREFIREWALLS/NETWORKRULECOLLECTIONS/WRITE\", \"MICROSOFT.NETWORK/AZUREFIREWALLS/NETWORKRULECOLLECTIONS/DELETE\")\n\n\n\n"}
{"prompt": "I want to see events where Windows Defender Virus Scanning is disabled.", "response": "datamodel\n| filter xdm.event.id = 5012\n\n\n\n"}
{"prompt": "I want to see if there are any connections from users located in OFAC countries that have a suspicious number of remote activities compared to their normal login behavior.", "response": "dataset = check_point_connectra_raw\n| filter duser != null and act != \"IP Changed\"\n| alter hostname = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), duser))\n| alter user_dst = if(user_dst ~= \"<org>\\n\", concat(\"n\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), if(user_dst ~= \"<org>\\r\", concat(\"r\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)))\n| iploc src loc_country\n| filter loc_country in (\"Belarus\", \"Hashemite kingdom of Jordan\", \"Myanmar\", \"Ivory Coast\", \"Cuba\", \"Congo\", \"Iran\", \"Iraq\", \"Liberia\", \"North Korea\", \"Sudan\", \"Syria\", \"Zimbabwe\", \"Bosnia\", \"Slovenia\", \"Serbia\", \"Montenegro\", \"Macedonia\", \"Bulgaria\", \"Albania\", \"Greece\", \"Pakistan\", \"Ukraine\", \"Russia\", \"Turkey\", \"Kazakhstan\", \"Nigeria\", \"Jordan\", \"Slovakia\")\n| comp count() as match_events,\nvalues(act) as action,\nvalues(hostname) as hostname by user_dst,\nloc_country\n| join type = left\n(dataset = CheckPoint_vpn_login_location\n| fields user_dst as username, login_country, login_times\n) as user_logins(user_logins.username = user_dst and user_logins.login_country = loc_country)\n| filter login_country = null or login_times <= 5"}
{"prompt": "I want to see events related to potentially suspicious ODBC driver registrations on Windows.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\ODBC\\\\ODBCINST\\.INI\\\\.*\" and (action_registry_key_name ~= \".*\\\\Driver\" or action_registry_key_name ~= \".*\\\\Setup\") and ((action_registry_value_name ~= \".*\\:\\\\PerfLogs\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\ProgramData\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_registry_value_name contains \":\\\\Windows\\\\Registration\\\\CRMLog\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\System32\\\\com\\\\dmp\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\System32\\\\FxsTmp\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\System32\\\\Microsoft\\\\Crypto\\\\RSA\\\\MachineKeys\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\System32\\\\spool\\\\PRINTERS\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\System32\\\\spool\\\\SERVERS\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\_Migrated\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\com\\\\dmp\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\FxsTmp\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\PLA\\\\System\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\Tracing\\\\.*\" or action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\\\AppData\\\\Roaming\\\\.*\") or (action_registry_data ~= \".*\\:\\\\PerfLogs\\\\.*\" or action_registry_data ~= \".*\\:\\\\ProgramData\\\\.*\" or action_registry_data ~= \".*\\:\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_registry_data contains \":\\\\Windows\\\\Registration\\\\CRMLog\" or action_registry_data ~= \".*\\:\\\\Windows\\\\System32\\\\com\\\\dmp\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\System32\\\\FxsTmp\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\System32\\\\Microsoft\\\\Crypto\\\\RSA\\\\MachineKeys\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\System32\\\\spool\\\\PRINTERS\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\System32\\\\spool\\\\SERVERS\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\_Migrated\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\com\\\\dmp\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\FxsTmp\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\PLA\\\\System\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\Tracing\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Roaming\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see events where a potentially suspicious process loads the dbghelp/dbgcore DLL.", "response": "preset = xdr_image_load\n| filter ((action_module_path ~= \".*\\\\dbghelp\\.dll\" or action_module_path ~= \".*\\\\dbgcore\\.dll\") and (actor_process_image_path ~= \".*\\\\bash\\.exe\" or actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\dnx\\.exe\" or actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\monitoringhost\\.exe\" or actor_process_image_path ~= \".*\\\\msbuild\\.exe\" or actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\regsvcs\\.exe\" or actor_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_image_path ~= \".*\\\\sc\\.exe\" or actor_process_image_path ~= \".*\\\\scriptrunner\\.exe\" or actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\wmic\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\")) and  not ((actor_process_image_command_line ~= \"C\\:\\\\WINDOWS\\\\WinSxS\\\\.*\" and actor_process_image_command_line ~= \".*\\\\TiWorker\\.exe\\ \\-Embedding\") or (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and (actor_process_image_command_line ~= \".*\\-k\\ LocalServiceNetworkRestricted\" or actor_process_image_command_line ~= \".*\\-k\\ WerSvcGroup\")) or (actor_process_image_path ~= \".*\\\\rundll32\\.exe\" and (actor_process_image_command_line contains \"/d srrstr.dll,ExecuteScheduledSPPCreation\" or actor_process_image_command_line contains \"aepdu.dll,AePduRunUpdate\" or actor_process_image_command_line contains \"shell32.dll,OpenAs_RunDL\" or actor_process_image_command_line contains \"Windows.Storage.ApplicationData.dll,CleanupTemporaryState\")))\n\n\n\n"}
{"prompt": "I want to find instances where attackers bypass UAC by abusing Winsat path parsing using file events.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and (xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\system32\\\\winsat\\.exe\" or xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\system32\\\\winmm\\.dll\"))\n\n\n\n"}
{"prompt": "I want to see all user logoff events from endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id in (4634, 4647)\n\n\n\n"}
{"prompt": "I want to find instances of the CVE-2019-14287 sudo privilege escalation exploit on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \" -u#\"\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to ntdll.dll being used with pipes.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"type %windir%\\\\system32\\\\ntdll.dll\" or action_process_image_command_line contains \"type %systemroot%\\\\system32\\\\ntdll.dll\" or action_process_image_command_line contains \"type c:\\\\windows\\\\system32\\\\ntdll.dll\" or action_process_image_command_line ~= \".*\\\\ntdll\\.dll\\ \\>\\ \\\\\\\\\\.\\\\pipe\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find PowerShell events where an obfuscated script is invoked using MSHTA to execute VBScript code.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter (Payload contains \"set\" and Payload contains \"&&\" and Payload contains \"mshta\" and Payload contains \"vbscript:createobject\" and Payload contains \".run\" and Payload contains \"(window.close)\")\n\n\n\n"}
{"prompt": "I want to find instances where multiple accounts were created quickly under the same user on a Windows system.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (4720)\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| filter SubjectUserName not contains \"$\" and TargetUserName not contains \"$\"\n| fields SubjectUserName, SubjectDomainName, TargetUserName,\nTargetDomainName, event_id, event_result, event_action,\nevent_data, _collector_name, _collector_type, _collector_hostname,\n_collector_ip_address, _collector_id\n| comp earliest(_time) as FirstTimestamp,\nlatest(_time) as LatestTimestamp,\nvalues(TargetUserName) as MultipleAccounts by SubjectUserName,\nTargetDomainName,\nevent_id,\nevent_result,\nevent_action,\n_collector_hostname addrawdata = true as ExtraInfo\n| filter array_length(MultipleAccounts) > 1 and event_result in (\"success\")"}
{"prompt": "I want to find instances where PowerShell is being executed using the sqlps.exe utility on endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\sqlps\\.exe\" or ((action_process_image_path ~= \".*\\\\sqlps\\.exe\" or actor_process_file_original_name = \"sqlps.exe\") and  not (actor_process_image_path ~= \".*\\\\sqlagent\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect when guest users are added to Azure Active Directory.", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Operation ~= \"Add user\"\n| alter role = json_extract_scalar(`Target`, \"$[2].ID\"),\nsource_user = json_extract_scalar(`Target`, \"$[3].ID\")\n| filter (role ~= \"Guest\")\n| fields UserId, source_user, ObjectId, ResultStatus, Operation,\n_time, CreationTime, role, `Target`\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"obj_name\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to see alerts about potential binary proxy execution using VSDiagnostics.EXE.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\VSDiagnostics\\.exe\" or actor_process_file_original_name = \"VSDiagnostics.exe\") and action_process_image_command_line contains \"start\" and (action_process_image_command_line contains \" /launch:\" or action_process_image_command_line contains \" -launch:\"))\n\n\n\n"}
{"prompt": "I want to find suspicious instances of the Advapi32.dll library being loaded by processes.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\advapi32\\.dll\" and  not ((actor_process_image_path ~= \"C\\:\\\\Windows\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\.*\") or (actor_process_image_path ~= \"C\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\platform\\\\.*\" and actor_process_image_path ~= \".*\\\\MpCmdRun\\.exe\") or (actor_process_image_path ~= \"C\\:\\\\Users\\\\.*\" and actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\.*\" and actor_process_image_path ~= \".*FileCoAuth\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find indicators of malicious PowerShell scripts that are using CL_Invocation.ps1 and the SyncInvoke function.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"CL_Invocation.ps1\" and ScriptBlockText contains \"SyncInvoke\")\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple SymantecWSS Botnet category URLs based on behavioral study data.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and category ~= \"Malicious Outbound Data/Botnets\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": " I want to see how many users have logged in from the same machine through VPN access within Verizon IP addresses and filter for cases where at least two distinct users are identified. ", "response": "dataset = check_point_connectra_raw\n| filter act = \"Log In\" and origin in (\"<ip>\") and duser != null and duser not in (\"VRZVPN_Monitoring\") and _final_reporting_device_ip != \"<ip>\"\n| alter host_name = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), duser))\n| alter user_dst = if(user_dst ~= \"<org>\\n\", concat(\"n\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), if(user_dst ~= \"<org>\\r\", concat(\"r\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)))\n| alter action = act,\nsource_port = spt,\ndest_port = dpt,\nhostname = host_name,\norigin = origin,\nsource_ip = src,\ndst_ip = host_ip,\nresult = outcome,\nuser_agent = requestClientApplication,\nos_edition = os_edition,\nproduct = _product\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestTime,\nvalues(source_ip) as src_ip,\nvalues(host_ip) as dst_ip,\nvalues(source_port) as src_port,\nvalues(dest_port) as dst_port,\nvalues(action) as action,\nvalues(user_dst) as user_dst,\nvalues(origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(product) as product,\ncount() as matched_events by host_name\n| filter array_length(user_dst) >= 2\n| alter aggregation_criteria = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find events where Msdt.exe loaded the sdiageng.dll library.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\msdt\\.exe\" and action_module_path ~= \".*\\\\sdiageng\\.dll\")\n\n\n\n"}
{"prompt": "I want to see all events related to applications being uninstalled on my endpoints.", "response": "preset = xdr_event_log\n| filter (provider_name = \"MsiInstaller\" and action_evtlog_event_id in (1034, 11724))\n\n\n\n"}
{"prompt": "I want to find instances of Sysmon channel reference deletion on endpoints.", "response": "preset = xdr_event_log\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter ObjectValueName = regextract(to_json_string(action_evtlog_data_fields)->ObjectValueName{}, \"\\\"(.*)\\\"\")\n| alter NewValue = regextract(to_json_string(action_evtlog_data_fields)->NewValue{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| filter ((action_evtlog_event_id = 4657 and (ObjectName contains \"WINEVT\\\\Publishers\\\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}\" or ObjectName contains \"WINEVT\\\\Channels\\\\Microsoft-Windows-Sysmon/Operational\") and ObjectValueName = \"Enabled\" and NewValue = 0) or (action_evtlog_event_id = 4663 and (ObjectName contains \"WINEVT\\\\Publishers\\\\{5770385f-c22a-43e0-bf4c-06f5698ffbd9}\" or ObjectName contains \"WINEVT\\\\Channels\\\\Microsoft-Windows-Sysmon/Operational\") and AccessMask = 65536))\n\n\n\n"}
{"prompt": "I want to detect instances where attackers are abusing Vim on Linux systems for malicious purposes, specifically using GTFOBin techniques.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\/vim\" or action_process_image_path ~= \".*\\/rvim\" or action_process_image_path ~= \".*\\/vimdiff\") and (action_process_image_command_line contains \" -c \" or action_process_image_command_line contains \" --cmd\")) and (action_process_image_command_line contains \":!/\" or action_process_image_command_line contains \":py \" or action_process_image_command_line contains \":lua \" or action_process_image_command_line contains \"/bin/sh\" or action_process_image_command_line contains \"/bin/bash\" or action_process_image_command_line contains \"/bin/dash\" or action_process_image_command_line contains \"/bin/zsh\" or action_process_image_command_line contains \"/bin/fish\"))\n\n\n\n"}
{"prompt": "I want to find instances of attackers using Invoke-Command to execute commands on remote hosts.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"invoke-command \" and ScriptBlockText contains \" -ComputerName \")\n\n\n\n"}
{"prompt": "I want to find potential privilege escalation attempts on endpoints using commands like \" -s cmd\", \"-s pwsh\", or \"-s powershell\" that don't explicitly mention tools like \"paexec\" or \"PsExec\".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" -s cmd\" or action_process_image_command_line contains \" -s -i cmd\" or action_process_image_command_line contains \" -i -s cmd\" or action_process_image_command_line contains \" -s pwsh\" or action_process_image_command_line contains \" -s -i pwsh\" or action_process_image_command_line contains \" -i -s pwsh\" or action_process_image_command_line contains \" -s powershell\" or action_process_image_command_line contains \" -s -i powershell\" or action_process_image_command_line contains \" -i -s powershell\") and  not ((action_process_image_command_line contains \"paexec\" or action_process_image_command_line contains \"PsExec\" or action_process_image_command_line contains \"accepteula\"))\n\n\n\n"}
{"prompt": "I want to see all failed attempts to add SID History to accounts on Domain Controllers and related servers.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4766\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.target.user.sam_account_name,\n_time, _insert_time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find SQL queries that might be malicious and involve actions like dropping tables, truncating data, or exporting information.", "response": "datamodel\n| filter ( contains \"drop\" or  contains \"truncate\" or  contains \"dump\" or  contains \"select \\\\\\*\")\n\n\n\n"}
{"prompt": "I want to find indicators of malicious activity related to Rasautou.exe being used for DLL execution.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rasautou\\.exe\" or actor_process_file_original_name = \"rasdlui.exe\") and (action_process_image_command_line contains \" -d \" and action_process_image_command_line contains \" -p \"))\n\n\n\n"}
{"prompt": "I want to find instances where the Findstr executable is used to launch a .lnk file.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\find\\.exe\" or action_process_image_path ~= \".*\\\\findstr\\.exe\") or actor_process_file_original_name in (\"FIND.EXE\", \"FINDSTR.EXE\")) and (action_process_image_command_line ~= \".*\\.lnk\" or action_process_image_command_line ~= \".*\\.lnk\\\"\" or action_process_image_command_line ~= \".*\\.lnk\\'\"))\n\n\n\n"}
{"prompt": " I want to find events that show remote file copy operations like using scp, rsync, or sftp. ", "response": "datamodel\n| filter ( contains \"scp \" or  contains \"rsync \" or  contains \"sftp \") and ( contains \"@\" or  contains \":\")\n\n\n\n"}
{"prompt": "I want to see events related to TeamViewer Desktop installations on Windows systems.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\TeamViewer\\_Desktop\\.exe\"\n\n\n\n"}
{"prompt": "I want to see events related to unauthorized password changes on privileged user accounts across my Unix servers.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"RSD-Unix-servers\", \"sdam_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"passwd\" and xdm.event.description ~= \"password changed\"\n| alter xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS,\nxdm.target.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"password\\s+changed\\s+for\\s+([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"changed\\s+password\\s+expiry\\s+for\\s+([\\w\\-\\.]+)\"), 0), if(xdm.event.type = \"useradd\", arrayindex(regextract(xdm.event.description, \"name=([^,]+)\"), 0))),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name, security_groups\n| filter security_groups contains \"UNIX_Group_R1\" or security_groups contains \"UNIX_Group_R2\"\n) as ad_users ad_users.sam_account_name = xdm.source.user.username\n| filter sam_account_name != null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, device_ip\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of Cobalt Strike BOF injection patterns using Windows event logs.", "response": "preset = xdr_event_log\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| filter (CallTrace ~= \"^C\\:\\\\Windows\\\\SYSTEM32\\\\ntdll\\.dll\\+[a-z0-9]{4,6}\\|C\\:\\\\Windows\\\\System32\\\\KERNELBASE\\.dll\\+[a-z0-9]{4,6}\\|UNKNOWN\\([A-Z0-9]{16}\\)$\" and GrantedAccess in (\"0x1028\", \"0x1fffff\"))\n\n\n\n"}
{"prompt": "I want to find potential suspicious command executions happening through the ScreenConnect client service.", "response": "preset = xdr_process\n| filter ((actor_process_image_command_line ~= \".*\\:\\\\Windows\\\\TEMP\\\\ScreenConnect\\\\.*\" and actor_process_image_command_line contains \"run.cmd\") and (action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\curl\\.exe\" or action_process_image_path ~= \".*\\\\dllhost\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\nltest\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\wevtutil\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see a list of Unix users who have failed authentication multiple times on our servers within the last hour.", "response": "datamodel dataset = linux_linux_raw\n| bin _time span = 1m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"RSD-Unix-servers\", \"sdam_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type in (\"su\", \"sudo\") and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.source.user.username not in (NULL, \"<user>\") and xdm.source.ipv4 not in (\"<ip>\")\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name, security_groups\n| filter security_groups contains \"UNIX_Group_R1\" or security_groups contains \"UNIX_Group_R2\"\n) as ad_users ad_users.sam_account_name = xdm.source.user.username\n| filter sam_account_name != null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _product, _vendor, linux_linux_raw._final_reporting_device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| comp count() as matched_events,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find users who have made excessive changes to mailbox permissions in Office365.", "response": "config case_sensitive = false\n| dataset = msft_o365_exchange_online_raw\n| filter Operation in (\"Add-MailboxFolderPermission\", \"Add-MailboxPermission\", \"Add-RecipientPermission\", \"Get-MailboxFolderPermission\", \"Get-RecipientPermission\", \"Remove-MailboxFolderPermission\", \"Remove-MailboxPermission\", \"Remove-MailboxPermission\", \"Set-MailboxFolderPermission\")\n| filter UserId != \"NT AUTHORITY\\SYSTEM(Microsoft.Exchange.ServiceHost)\"\n| comp count() as matched_events,\nvalues(Operation) as action by UserId\n| filter matched_events >= 5"}
{"prompt": "I want to see information about interface flapping events on Cisco Catalyst devices, excluding specific IP addresses.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, eth_src, _time, _vendor,\n_product, _insert_time\n| filter ((msg_id in (\"LINEPROTO-5-UPDOWN\", \"LINK-3-UPDOWN\") and device_ip not in (\"10.56.121.100\", \"10.56.121.52\", \"10.181.12.192\", \"10.181.12.193\")) or (xdm.event.description contains \"updown\" and device_ip not in (\"10.56.121.100\", \"10.56.121.52\", \"10.181.12.192\", \"10.181.12.193\")))\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see details about user creation, deletion, and modification events on Linux systems.", "response": "datamodel dataset = linux_linux_raw\n| filter (xdm.event.type in (\"userdel\", \"usermod\", \"groupmod\", \"gpasswd\", \"userdel\") and xdm.event.description ~= \"group\") or (xdm.event.type in (\"useradd\") and xdm.event.description ~= \"new user\")\n| alter xdm.target.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"password\\s+changed\\s+for\\s+([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"changed\\s+password\\s+expiry\\s+for\\s+([\\w\\-\\.]+)\"), 0), if(xdm.event.type = \"useradd\", arrayindex(regextract(xdm.event.description, \"name=([^,]+)\"), 0)), arrayindex(regextract(xdm.event.description, \"[add|delete]+ \\'([^\\']+)\"), 0)),\nxdm.target.user.groups = coalesce(arrayindex(regextract(xdm.event.description, \"name=(\\w+)\"), 0), arrayindex(regextract(xdm.event.description, \"group \\'([^\\']+)\"), 0), to_string(xdm.target.user.groups)),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, device_ip, _product, _vendor\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for suspicious uses of Procdump targeting the lsass process.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" -ma \" and action_process_image_command_line contains \" ls\")\n\n\n\n"}
{"prompt": "I want to find processes that are executed from paths mimicking the Recycle Bin folder like \"RECYCLERS\\.BIN\" or \"RECYCLER\\.BIN\".", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*RECYCLERS\\.BIN\\\\.*\" or action_process_image_path ~= \".*RECYCLER\\.BIN\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find out which Launch Agents or Daemons on my endpoints are being started, submitted, or loaded using launchctl.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/launchctl\" and (action_process_image_command_line contains \"submit\" or action_process_image_command_line contains \"load\" or action_process_image_command_line contains \"start\"))\n\n\n\n"}
{"prompt": "I want to find out when users are added to the Network admin group on Windows machines.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4728, 632)\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = arrayindex(regextract(message, \"Account Name:\\t\\tCN\\=([^\\,]+)\\,\"), 0),\nTargetGroupName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| filter SubjectUserName not contains \"$\" and TargetUserName not contains \"$\" and TargetUserName not in (null, NULL, \"\"\"\"\"\")\n| fields SubjectUserName, SubjectDomainName, TargetUserName,\nTargetDomainName, event_id, event_result, event_action,\nevent_data, _collector_name, _collector_type, _collector_hostname,\n_collector_ip_address, _collector_id, *\n| filter (TargetGroupName contains \"CNX_Network\" or TargetGroupName contains \"CNX-Network\") and (TargetGroupName not contains \"CNX_Network_RO\")\n"}
{"prompt": "I want to find events where PowerShell is mounting disk images.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Mount-DiskImage \" and ScriptBlockText contains \"-ImagePath \")\n\n\n\n"}
{"prompt": "I want to see all Windows event log entries related to user account creation and deletion events performed by users who are not administrators.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4722\", \"4725\", \"4720\", \"4726\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| filter xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.target.user.username != NULL\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_domain\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect if any of these drivers are loaded on my system:  ", "response": "datamodel\n| filter ((xdm.target.process.executable.filename ~= \".*\\\\wfshbr64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ktmutil7odm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ktes\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\a26363e7b02b13f2b8d697abb90cd5c3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kt2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\4748696211bd56c2d93c21cab91e82a5\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\malicious\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\a236e7d654cd932b7d11cb604629a2d0\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\spwizimgvt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\c94f405c5929cfcccc8ad00b42c95083\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fur\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\windbg\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\4118b86e490aed091b1a219dba45f332\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gmer64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\1fc7aeeff3ab19004d2e53eae8160ab1\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\poortry2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wintapix\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank6\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\6771b13a53b9c7449d4891e427735ea2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\blacklotus\\_driver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\air\\_system10\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dkrtk\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\7\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sense5ext\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ktgn\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ndislan\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nlslexicons0024uvn\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\be6318413160e589080df02bb3ca6e6a\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\_2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\e29f6311ae87542b3d693c1f38e4e3ad\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gftkyj64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\_4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\reddriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\834761775\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mlgbbiicaihflrnh\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mjj0ge\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank5\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\poortry1\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\msqpq\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mimidrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\e939448b28a4edc81f1f974cebf6e7d2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\prokiller64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nodedriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\_3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lctka\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kapchelper\\_x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\a9df5964635ef8bd567ae487c3d214c4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\_6\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ntbios\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\_5\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\pciecubed\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mimikatz\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nqrmq\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\poortry\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ntbios\\_2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fgme\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\telephonuafy\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\typelibde\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank1\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ef0e1725aaf0c6c972593f860531a2ea\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\5a4fe297c7d42539303137b6d75b150d\\.sys\") or (xdm.source.process.executable.filename ~= \".*\\\\wfshbr64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ktmutil7odm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ktes\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\a26363e7b02b13f2b8d697abb90cd5c3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kt2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\4748696211bd56c2d93c21cab91e82a5\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\malicious\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\a236e7d654cd932b7d11cb604629a2d0\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\spwizimgvt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\c94f405c5929cfcccc8ad00b42c95083\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fur\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\windbg\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\4118b86e490aed091b1a219dba45f332\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gmer64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\1fc7aeeff3ab19004d2e53eae8160ab1\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\poortry2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wintapix\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank6\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\6771b13a53b9c7449d4891e427735ea2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\blacklotus\\_driver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\air\\_system10\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dkrtk\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\7\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sense5ext\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ktgn\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ndislan\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nlslexicons0024uvn\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\be6318413160e589080df02bb3ca6e6a\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\_2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\e29f6311ae87542b3d693c1f38e4e3ad\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gftkyj64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\_4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\reddriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\834761775\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mlgbbiicaihflrnh\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mjj0ge\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank5\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\poortry1\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\msqpq\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mimidrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\e939448b28a4edc81f1f974cebf6e7d2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\prokiller64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nodedriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\_3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lctka\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kapchelper\\_x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\a9df5964635ef8bd567ae487c3d214c4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\_6\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ntbios\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\_5\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\pciecubed\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mimikatz\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nqrmq\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\poortry\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ntbios\\_2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fgme\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\telephonuafy\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\typelibde\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank1\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ef0e1725aaf0c6c972593f860531a2ea\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\5a4fe297c7d42539303137b6d75b150d\\.sys\"))\n\n\n\n"}
{"prompt": " I want to see alerts about potential BlackByte ransomware activity on my endpoints. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \"C\\:\\\\Users\\\\Public\\\\.*\" and action_process_image_command_line contains \" -single \") or (action_process_image_command_line contains \"del C:\\\\Windows\\\\System32\\\\Taskmgr.exe\" or action_process_image_command_line contains \";Set-Service -StartupType Disabled $\" or action_process_image_command_line contains \"powershell -command \\\"$x =[System.Text.Encoding]::Unicode.GetString([System.Convert]::FromBase64String(\" or action_process_image_command_line contains \" do start wordpad.exe /p \"))\n\n\n\n"}
{"prompt": "I want to see if multiple accounts are being locked out on my Windows system within a short time frame.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (4740) and _collector_type in (\"XDR Collector\")\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectUserSid = event_data -> SubjectUserSid,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| filter TargetUserName not in (null, NULL, \"\"\"\"\"\") and TargetUserName not contains \"$\"\n| comp min(_time) as FirstEventTime,\nmax(_time) as LatestEventTime,\nvalues(TargetUserName) as MultipleAccounts,\ncount() as MultipleEvents by SubjectUserName,\nevent_action,\nevent_result,\nevent_id,\n_collector_type,\n_collector_hostname\n| filter array_length(MultipleAccounts) >= 100"}
{"prompt": "I want to detect instances of the DarkSide ransomware based on its known command-line arguments and file paths.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"=[char][byte]('0x'+\" or action_process_image_command_line contains \" -work worker0 -path \") or (actor_process_image_command_line contains \"DllHost.exe /Processid:{3E5FC7F9-9A51-4367-9063-A120244FBEC7}\" and action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see Python exceptions related to SQL errors like DataError, IntegrityError, ProgrammingError, or OperationalError.", "response": "datamodel\n| filter ( contains \"DataError\" or  contains \"IntegrityError\" or  contains \"ProgrammingError\" or  contains \"OperationalError\")\n\n\n\n"}
{"prompt": "I want to find suspicious PowerShell scripts that might be running from the Windows Registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\" and ((action_registry_value_name contains \"powershell\" or action_registry_value_name contains \"pwsh \" or action_registry_value_name contains \"FromBase64String\" or action_registry_value_name contains \".DownloadFile(\" or action_registry_value_name contains \".DownloadString(\" or action_registry_value_name contains \" -w hidden \" or action_registry_value_name contains \" -w 1 \" or action_registry_value_name contains \"-windowstyle hidden\" or action_registry_value_name contains \"-window hidden\" or action_registry_value_name contains \" -nop \" or action_registry_value_name contains \" -encodedcommand \" or action_registry_value_name contains \"-ExecutionPolicy Bypass\" or action_registry_value_name contains \"Invoke-Expression\" or action_registry_value_name contains \"IEX (\" or action_registry_value_name contains \"Invoke-Command\" or action_registry_value_name contains \"ICM -\" or action_registry_value_name contains \"Invoke-WebRequest\" or action_registry_value_name contains \"IWR \" or action_registry_value_name contains \" -noni \" or action_registry_value_name contains \" -noninteractive \") or (action_registry_data contains \"powershell\" or action_registry_data contains \"pwsh \" or action_registry_data contains \"FromBase64String\" or action_registry_data contains \".DownloadFile(\" or action_registry_data contains \".DownloadString(\" or action_registry_data contains \" -w hidden \" or action_registry_data contains \" -w 1 \" or action_registry_data contains \"-windowstyle hidden\" or action_registry_data contains \"-window hidden\" or action_registry_data contains \" -nop \" or action_registry_data contains \" -encodedcommand \" or action_registry_data contains \"-ExecutionPolicy Bypass\" or action_registry_data contains \"Invoke-Expression\" or action_registry_data contains \"IEX (\" or action_registry_data contains \"Invoke-Command\" or action_registry_data contains \"ICM -\" or action_registry_data contains \"Invoke-WebRequest\" or action_registry_data contains \"IWR \" or action_registry_data contains \" -noni \" or action_registry_data contains \" -noninteractive \")))\n\n\n\n"}
{"prompt": "I want to see alerts from Microsoft Azure about unusual authentication interruptions like when device authentication is required or failed.", "response": "dataset = msft_azure_raw\n| alter properties_resultType = json_extract_scalar(properties , \"$.resultType\")\n| alter properties_resultDescription = json_extract_scalar(properties , \"$.resultDescription\")\n| filter ((properties.resultType = 50097 and properties.resultDescription = \"Device authentication is required\") or (properties.resultType = 50155 and properties.resultDescription = \"DeviceAuthenticationFailed\") or (properties.resultType = 50158 and properties.resultDescription = \"ExternalSecurityChallenge - External security challenge was not satisfied\"))\n\n\n\n"}
{"prompt": "I want to see processes that create ImagingDevices.exe but have unusual parent processes, like those related to WMI or SVCHOST.", "response": "preset = xdr_process\n| filter (((actor_process_image_path ~= \".*\\\\WmiPrvSE\\.exe\" or actor_process_image_path ~= \".*\\\\svchost\\.exe\" or actor_process_image_path ~= \".*\\\\dllhost\\.exe\") and action_process_image_path ~= \".*\\\\ImagingDevices\\.exe\") or actor_process_image_path ~= \".*\\\\ImagingDevices\\.exe\")\n\n\n\n"}
{"prompt": "I want to find instances where Wdigest UseLogonCredential is enabled in the registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*WDigest\\\\UseLogonCredential\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to be alerted when someone shares a Microsoft Office 365 file with everyone on SharePoint.", "response": "dataset = msft_o365_sharepoint_online_raw\n| filter Operation contains \"SharingSet\" and TargetUserOrGroupName in (\"Everyone except external users\")"}
{"prompt": "I want to find instances of DEWMODE Webshell Access activity based on specific HTTP URL patterns.", "response": "datamodel\n| filter ((xdm.network.http.url contains \"*dwn=\" and xdm.network.http.url contains \"&fn=\" and xdm.network.http.url contains \".html*\") or (xdm.network.http.url contains \"&dwn=\" and xdm.network.http.url contains \"*fn=\" and xdm.network.http.url contains \".html*\"))\n\n\n\n"}
{"prompt": "I want to find instances where an attacker uses explorer.exe to execute a cmd.exe process through a command line containing \"explorer.exe\".", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\explorer\\.exe\" and actor_process_image_path ~= \".*\\\\cmd\\.exe\" and action_process_image_command_line contains \"explorer.exe\")\n\n\n\n"}
{"prompt": "I want to see events related to PowerShell processes that potentially contain decryption capabilities.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"Get-ChildItem \" or action_process_image_command_line contains \"dir \" or action_process_image_command_line contains \"gci \" or action_process_image_command_line contains \"ls \") and (action_process_image_command_line contains \"Get-Content \" or action_process_image_command_line contains \"gc \" or action_process_image_command_line contains \"cat \" or action_process_image_command_line contains \"type \" or action_process_image_command_line contains \"ReadAllBytes\") and ((action_process_image_command_line contains \" ^| \" and action_process_image_command_line contains \"\\*.lnk\" and action_process_image_command_line contains \"-Recurse\" and action_process_image_command_line contains \"-Skip \") or (action_process_image_command_line contains \" -ExpandProperty \" and action_process_image_command_line contains \"\\*.lnk\" and action_process_image_command_line contains \"WriteAllBytes\" and action_process_image_command_line contains \" .length \")))\n\n\n\n"}
{"prompt": "I want to detect potential file system manipulation attempts by identifying processes using \"chmod\" on suspicious directories like /tmp/, /.Library/, /etc/, or /opt/.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/chmod\" and (action_process_image_command_line contains \"/tmp/\" or action_process_image_command_line contains \"/.Library/\" or action_process_image_command_line contains \"/etc/\" or action_process_image_command_line contains \"/opt/\"))\n\n\n\n"}
{"prompt": "I want to find potential abuse of AWS Cloud Email Service based on events related to sending and verifying email identities.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"ses.amazonaws.com\" and eventName = \"UpdateAccountSendingEnabled\") and (eventSource = \"ses.amazonaws.com\" and eventName = \"VerifyEmailIdentity\")\n\n\n\n"}
{"prompt": "I want to find instances where tunneling tools like httptunnel.exe, plink.exe, socat.exe, or stunnel.exe are executed on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\httptunnel\\.exe\" or action_process_image_path ~= \".*\\\\plink\\.exe\" or action_process_image_path ~= \".*\\\\socat\\.exe\" or action_process_image_path ~= \".*\\\\stunnel\\.exe\")\n\n\n\n"}
{"prompt": "I want to detect changes made to Amazon VPCs like creating, deleting, or modifying them.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name != \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName IN (\"Createvpc\", \"Deletevpc\", \"ModifyvpcAttribute\", \"AcceptvpcPeeringConnection\", \"CreatevpcPeeringConnection\", \"DeletevpcPeeringConnection\", \"RejectvpcPeeringConnection\", \"AttachClassicLinkvpc\", \"DetachClassicLinkvpc\", \"DisablevpcClassicLink\", \"EnablevpcClassicLink\") and account_id NOT IN (\"462352741814\")\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdescription\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find network connections made by processes on my system to domains associated with Cloudflared tunnels because this could indicate an attacker trying to establish a reverse shell or persistent access.", "response": "#N/A"}
{"prompt": "I want to see details about potential tampering events where the command \"stop*xagt\" was used, including information about the affected agents and the time difference between the observed action and the XDR report.", "response": "dataset = xdr_data\n| filter actor_process_command_line contains \"stop*xagt\"\n| fields agent_hostname as Hostname, action_file_path, actor_process_image_path as apip,\nactor_process_command_line as apcl, causality_actor_process_image_path as capip,\ncausality_actor_process_command_line as capcl, os_actor_process_image_path as osapip,\nos_actor_process_command_line as ospcl, _time as CXReportTime\n| dedup Hostname\n| join type = inner\n(dataset = host_inventory\n| arrayexpand services\n| alter Agent_Name = json_extract(services, \"$.display_name\"),\nAgent_Status = json_extract(services, \"$.started\"),\nAgent_State = json_extract(services, \"$.state\")\n| filter Agent_Name ~= \"(\\\"FireEye Endpoint Agent\\\")\"\n) as AC AC.host_name = Hostname\n| alter diff = timestamp_diff(CXReportTime, _time, \"MINUTE\")\n| fields CXReportTime, Hostname, Agent_Name, Agent_Status,\ndiff as OTimeDiff, apip, apcl, _time as ObservedTime,\ncapip, capcl, osapip, ospcl\n| sort asc OTimeDiff,\ndesc Hostname"}
{"prompt": "I want to find potentially malicious child processes spawned by regsvr32.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" and (action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\explorer\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\" or action_process_image_path ~= \".*\\\\nltest\\.exe\" or action_process_image_path ~= \".*\\\\notepad\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\reg\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\werfault\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\")) and  not ((action_process_image_path ~= \".*\\\\werfault\\.exe\" and action_process_image_command_line contains \" -u -p \"))\n\n\n\n"}
{"prompt": "I want to find suspicious privilege activity on my Windows systems, like when users enable and disable accounts unexpectedly.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4720\", \"4722\", \"4725\", \"4726\")\n| Filter xdm.source.user.username not in (\"<user>\") and xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\"\n| join type = left\n(dataset = device_group_static_list\n) as evhosts evhosts.HOSTNAME = xdm.source.host.hostname or evhosts.IP = microsoft_windows_raw._reporting_device_ip\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect if a user is creating AWS API keys for another user in my organization, as this could indicate a backdoor or unauthorized access.", "response": "dataset = amazon_aws_raw\n| alter userIdentity_arn = json_extract_scalar(userIdentity , \"$.arn\")\n| filter (eventSource = \"iam.amazonaws.com\" and eventName = \"CreateAccessKey\") and  not (userIdentity.arn contains \"responseElements.accessKey.userName\")\n\n\n\n"}
{"prompt": "I want to detect suspicious activities involving PowerShell and Bitsadmin jobs on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and action_process_image_command_line contains \"Start-BitsTransfer\")\n\n\n\n"}
{"prompt": "I want to see all events where Windows Defender restored a file from quarantine.", "response": "datamodel\n| filter xdm.event.id = 1009\n\n\n\n"}
{"prompt": "I want to see events related to CMSTP execution detected through registry changes.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\cmmgr32.exe\"\n\n\n\n"}
{"prompt": "I want to detect potential exploits related to CVE-2023-23397 through Outlook Task/Note reminders received on Windows.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Office\\\\.*\" and action_registry_key_name ~= \".*\\\\Outlook\\\\.*\") and (action_registry_key_name ~= \".*\\\\Tasks\\\\.*\" or action_registry_key_name ~= \".*\\\\Notes\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see events where a user has changed both their Duo country and base operating system across multiple devices.", "response": "dataset = duo_duo_raw\n| filter email not in (null, NULL, \"\"\"\"\"\")\n| alter Browser = access_device -> browser,\nBrowserVer = access_device -> browser_version,\nOS = access_device -> os,\nOSVer = access_device -> os_version,\nSrcIPAddress = access_device -> ip,\nSrcCountry = access_device -> location.country,\nSrcCity = access_device -> location.city,\nPhoneNumber = auth_device -> name,\nIntegration = application -> name,\nDuo_UserName = user -> name\n| filter OS not in (\"Android\", \"iOS\", null, NULL, \"\"\"\"\"\") and (reason != \"\"\"Trusted network\"\"\") and PhoneNumber not in (null, NULL, \"\"\"\"\"\")\n| fields access_device, Browser, BrowserVer, OS, OSVer,\nSrcIPAddress, SrcCountry, SrcCity, auth_device,\nemail, PhoneNumber, _collector_type, _collector_name,\n_final_reporting_device_ip, _reporting_device_ip,\napplication, Integration, user, adaptive_trust_assessments,\nDuo_UserName\n| comp min(_time) as FirstEventTime,\nmax(_time) as LatestEventTime,\nvalues(Browser) as MultipleBrowsers,\nValues(BrowserVer) as MultipleBrowserVers,\nvalues(SrcIPAddress) as MultipleSrcIPs,\nvalues(OS) as MultipleOS,\nvalues(OSVer) as MultipleOSVers,\nvalues(SrcCountry) as MultipleCountries,\nvalues(SrcCity) as MultipleCities,\ncount() as MultipleEvents by email,\nDuo_UserName,\nPhoneNumber,\nIntegration,\n_collector_name addrawdata = true as ActivityRawData\n| alter CorrelatioRuleName = \"Duo Country and Base OS changed\",\nTimeDiff_in_Hours = timestamp_diff(LatestEventTime, FirstEventTime, \"HOUR\")\n| filter array_length(MultipleOS) > 1 and array_length(MultipleCountries) > 1"}
{"prompt": "I want to find files named \"*.cmdline\" that might indicate dynamic C# compilation.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\.cmdline\"\n\n\n\n"}
{"prompt": "I want to see all login attempts where the target username was 'admin', 'administrator', or 'root'.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| filter target_username IN (\"admin\", \"administrator\", \"root\")\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where csrutil is used to disable System Integrity Protection (SIP) on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/csrutil\" and action_process_image_command_line contains \"disable\")\n\n\n\n"}
{"prompt": " I want to see logs of any changes made to the Privileged Security Admin Group on Windows systems, including when users are added or removed from the group. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.target.user.groups in (\"ind_mobilityadmins\", \"apac_mobility_admins\", \"apac_mobilityadmin\", \"aus_mobility_admins\", \"bbsr_mobility_admins\", \"chddlf_mobility_admins\", \"chdsez_mobility_admins\", \"ggn_mobility_admins\", \"hydsez_mobility_admins\", \"hydstp_mobility_admins\", \"ibpo_apac_mobility\", \"ibpo_ind_mobility\", \"isc_mobility_admins\", \"jpn_mobilityadmins\", \"jpr_mobility_admins\", \"kec_mobility_admins\", \"mcity_mobility_admins\", \"mngsez_mobility_admins\", \"mngstp_mobility_admins\", \"mys_mobility_admins\", \"prc_mobility_admins\", \"punsez_mobility_admins\", \"punstp_mobility_admins\", \"shl_mobility_admins\", \"tvmsez_mobility_admins\", \"tvmstp_mobility_admins\", \"ccdhems\", \"ibpo_chn_mobility\", \"ibpo_ggn_mobility\", \"ibpo_jpr_mobility\", \"ibpo_pun_mobility\", \"ibpo_blr_mobility\", \"us_mobility_admins\", \"america_mobilityadmin\", \"bbadmins_us_isc_l2\", \"bbadminsisc\", \"emea_mobilityadmin\", \"gsc1_mobilityadmin\", \"gsc2_mobilityadmin\", \"ibpoemea_mobilityadmin\", \"ibpous_mobilityadmin\", \"ilo_mobility_admins\", \"mex_mobility_admin\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect suspicious file creations within the ProgramData directory that might be indicators of the Forest Blizzard APT activity.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\Microsoft\\\\v.*\" or xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\Adobe\\\\v.*\" or xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\Comms\\\\v.*\" or xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\Intel\\\\v.*\" or xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\Kaspersky\\ Lab\\\\v.*\" or xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\Bitdefender\\\\v.*\" or xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\ESET\\\\v.*\" or xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\NVIDIA\\\\v.*\" or xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\UbiSoft\\\\v.*\" or xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\Steam\\\\v.*\") and (xdm.target.file.filename contains \"\\\\pnms003.inf_\" or xdm.target.file.filename contains \"\\\\pnms009.inf_\")) or (xdm.target.file.filename ~= \"C\\:\\\\ProgramData\\\\.*\" and ((xdm.target.file.filename ~= \".*\\.save\" or xdm.target.file.filename ~= \".*\\\\doit\\.bat\" or xdm.target.file.filename ~= \".*\\\\execute\\.bat\" or xdm.target.file.filename ~= \".*\\\\servtask\\.bat\") or (xdm.target.file.filename contains \"\\\\wayzgoose\" and xdm.target.file.filename ~= \".*\\.dll\")))\n\n\n\n"}
{"prompt": "I want to see events where processes are using common file types like .doc, .xlsx, or .pdf in their command line, especially if they're also listing directories with commands like \"dir /b /s\" or using FINDSTR with options like \"/e\" or \"/si\".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \".doc\" or action_process_image_command_line contains \".docx\" or action_process_image_command_line contains \".xls\" or action_process_image_command_line contains \".xlsx\" or action_process_image_command_line contains \".ppt\" or action_process_image_command_line contains \".pptx\" or action_process_image_command_line contains \".rtf\" or action_process_image_command_line contains \".pdf\" or action_process_image_command_line contains \".txt\") and ((action_process_image_command_line contains \"dir \" and action_process_image_command_line contains \" /b \" and action_process_image_command_line contains \" /s \") or (actor_process_file_original_name = \"FINDSTR.EXE\" and (action_process_image_command_line contains \" /e \" or action_process_image_command_line contains \" /si \")))\n\n\n\n"}
{"prompt": "I want to find out about ICMP flood attacks detected by Cisco ASA, Fortinet Fortigate, and SonicWall NS devices over the past 72 hours.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter (xdm.source.ipv4 not in (\"8.8.8.8\") and xdm.source.is_internal_ip = false) and xdm.network.ip_protocol = \"\"\"ICMP\"\"\" and xdm.source.sent_packets >= 60000 and xdm.event.duration >= 30000000000\n\n| bin bin_time span = 7200s timeshift = 1704153600\n\n\n| fields *\n"}
{"prompt": "I want to detect suspicious modifications to ClickOnce trust settings in the Windows registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\MICROSOFT\\\\\\.NETFramework\\\\Security\\\\TrustManager\\\\PromptingLevel\\\\.*\" and (action_registry_key_name ~= \".*\\\\Internet\" or action_registry_key_name ~= \".*\\\\LocalIntranet\" or action_registry_key_name ~= \".*\\\\MyComputer\" or action_registry_key_name ~= \".*\\\\TrustedSites\" or action_registry_key_name ~= \".*\\\\UntrustedSites\") and (action_registry_value_name = \"Enabled\" or action_registry_data = \"Enabled\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to PowerShell potentially creating startup shortcuts for malicious purposes.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\\\pwsh\\.exe\") or (xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\")) and xdm.target.file.filename ~= \".*\\\\start\\ menu\\\\programs\\\\startup\\\\.*\" and xdm.target.file.filename ~= \".*\\.lnk\")\n\n\n\n"}
{"prompt": "I want to detect processes that create suspicious service files by checking if their image path contains \"touch\" and command line includes \"-t\" followed by \".service\".", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/touch\" and action_process_image_command_line contains \" -t \" and action_process_image_command_line ~= \".*\\.service\")\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that use \"Compress-Archive\" to compress folders and files, storing the output in temporary locations like the TEMP folder.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Compress-Archive -Path*-DestinationPath $env:TEMP\" or ScriptBlockText ~= \".*Compress\\-Archive\\ \\-Path.*\\-DestinationPath.*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or ScriptBlockText ~= \".*Compress\\-Archive\\ \\-Path.*\\-DestinationPath.*\\:\\\\Windows\\\\Temp\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find instances of commands potentially using the WinPwn tool on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Offline_Winpwn\" or action_process_image_command_line contains \"WinPwn \" or action_process_image_command_line contains \"WinPwn.exe\" or action_process_image_command_line contains \"WinPwn.ps1\")\n\n\n\n"}
{"prompt": "I want to find events where cmdkey.exe is used with the \"-l\" flag, potentially indicating reconnaissance for cached credentials.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmdkey\\.exe\" or actor_process_file_original_name = \"cmdkey.exe\") and action_process_image_command_line contains \" -l\")\n\n\n\n"}
{"prompt": "I want to see all reports of suspicious activity from Okta that were submitted by end-users.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type = \"user.account.report_suspicious_activity_by_enduser\"\n\n\n\n"}
{"prompt": "I want to see information about AWS trails that were deleted, including the event time, ARN, source IP address, account ID, and principal ID.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| alter arn = message -> userIdentity.arn,\neventName = message -> eventName,\nsourceIPAddress = message -> sourceIPAddress,\nprincipalId = message -> userIdentity.principalId,\naccountId = message -> userIdentity.accountId,\ncreationDate = message -> userIdentity.sessionContext.attributes.creationDate,\neventTime = message -> eventTime\n| filter eventName = \"DeleteTrail\"\n| fields _vendor, _product, eventTime, eventName, arn,\nsourceIPAddress, accountId, principalId"}
{"prompt": "I want to find indicators of user accounts being hidden through registry modifications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Winlogon\\\\SpecialAccounts\\\\Userlist\\\\.*\" and action_registry_key_name ~= \".*\\$\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to see all GET requests that target '/SetupWizard.aspx/' on my network.", "response": "datamodel\n| filter xdm.network.http.url contains \"/SetupWizard.aspx/\"\n\n\n\n"}
{"prompt": "I want to see all network connections initiated by Eqnedt32.EXE.", "response": "preset = network_story\n| filter actor_process_image_path ~= \".*\\\\eqnedt32\\.exe\"\n\n\n\n"}
{"prompt": "I want to find suspicious changes to the \"DisableRestrictedAdmin\" registry value that could indicate an attempt to disable or enable RestrictedAdmin mode.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*System\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\DisableRestrictedAdmin\"\n\n\n\n"}
{"prompt": "I want to find any files with names containing \"ba9ea7344a4a5f591d6e5dc32a13494b\" in the AppData\\Local\\Temp folder.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\ba9ea7344a4a5f591d6e5dc32a13494b\\\\.*\"\n\n\n\n"}
{"prompt": "I want to see alerts about potential Dtrack RAT activity on my endpoints based on specific command line patterns.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"ping -n \" and action_process_image_command_line contains \" echo EEEE > \") or (action_process_image_command_line contains \"ipconfig /all\" and action_process_image_command_line contains \"\\\\temp\\\\res.ip\") or (action_process_image_command_line contains \"interface ip show config\" and action_process_image_command_line contains \"\\\\temp\\\\netsh.res\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious activity related to using \"schtasks\" and manipulating environment variables or folders like Temp, AppData, and Public.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\schtasks\\.exe\" and action_process_image_command_line contains \" /create \") and (action_process_image_command_line contains \":\\\\Perflogs\" or action_process_image_command_line contains \":\\\\Windows\\\\Temp\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or action_process_image_command_line contains \"\\\\Users\\\\Public\" or action_process_image_command_line contains \"%AppData%\" or action_process_image_command_line contains \"%Public%\")) or (actor_process_image_command_line ~= \".*\\\\svchost\\.exe\\ \\-k\\ netsvcs\\ \\-p\\ \\-s\\ Schedule\" and (action_process_image_command_line contains \":\\\\Perflogs\" or action_process_image_command_line contains \":\\\\Windows\\\\Temp\" or action_process_image_command_line contains \"\\\\Users\\\\Public\" or action_process_image_command_line contains \"%Public%\"))) and  not (((action_process_image_command_line contains \"update_task.xml\" or action_process_image_command_line contains \"/Create /TN TVInstallRestore /TR\") or actor_process_image_command_line contains \"unattended.ini\") or (action_process_image_command_line ~= \".*\\/Create\\ \\/Xml\\ \\\"C\\:\\\\Users\\\\.*\" and action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\\\\.CR.\" and action_process_image_command_line contains \"Avira_Security_Installation.xml\") or ((action_process_image_command_line contains \"/Create /F /TN\" and action_process_image_command_line contains \"/Xml \" and action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\\\\is-\" and action_process_image_command_line contains \"Avira_\") and (action_process_image_command_line contains \".tmp\\\\UpdateFallbackTask.xml\" or action_process_image_command_line contains \".tmp\\\\WatchdogServiceControlManagerTimeout.xml\" or action_process_image_command_line contains \".tmp\\\\SystrayAutostart.xml\" or action_process_image_command_line contains \".tmp\\\\MaintenanceTask.xml\")) or (action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and action_process_image_command_line contains \"/Create /TN \\\"klcp_update\\\" /XML \" and action_process_image_command_line contains \"\\\\klcp_update_task.xml\"))\n\n\n\n"}
{"prompt": "I want to see alerts for any abnormal password change activity where at least 500 events happened within 5 minutes.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4723\") and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.event.id\n| filter matched_events >= 500\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\naggregate_criteria = \"ildestinationuser\""}
{"prompt": "I want to find events related to the deactivation of the Windows Defrag scheduled task.", "response": "preset = xdr_event_log\n| alter TaskName = regextract(to_json_string(action_evtlog_data_fields)->TaskName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4701 and TaskName = \"\\\\Microsoft\\\\Windows\\\\Defrag\\\\ScheduledDefrag\")\n\n\n\n"}
{"prompt": "I want to find potential commandline obfuscation using unicode characters on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\") or (action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\") or (action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\") or (action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"))\n\n\n\n"}
{"prompt": "I want to find potential cases of ProcDump being used for evasion techniques.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"copy procdump\" or action_process_image_command_line contains \"move procdump\") or ((action_process_image_command_line contains \"copy \" and action_process_image_command_line contains \".dmp \") and (action_process_image_command_line contains \"2.dmp\" or action_process_image_command_line contains \"lsass\" or action_process_image_command_line contains \"out.dmp\")) or (action_process_image_command_line contains \"copy lsass.exe_\" or action_process_image_command_line contains \"move lsass.exe_\"))\n\n\n\n"}
{"prompt": "I want to set up an alert that triggers when there is any allowed traffic towards our DMZ segments on RDP port 3389 from sources outside our internal network.", "response": "config case_sensitive = false\n| datamodel dataset = check_point_vpn_1_firewall_1_raw\n| filter xdm.target.port in (3389) and xdm.source.ipv4 !~= \"(10\\.[0-9]{1,3}|172\\.(1[6-9]|2[0-9]|3[01])|192\\.168)\\.[0-9]{1,3}\\.[0-9]{1,3}\" and xdm.source.ipv4 not in (\"<ip>\") and xdm.observer.action = \"accept\"\n\n| alter aggregation_criteria = \"ilsourceip\",\nalertaggregation1 = \"ildestinationip\",\norigin = check_point_vpn_1_firewall_1_raw.origin"}
{"prompt": "I want to find Cisco Catalyst switches that have experienced multiple \"Exceeded ARPEntries\" events within a 5-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 5m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, eth_src, _time, _vendor,\n_product, _insert_time\n| filter msg_id in (\"ARP-4-ARPLEARNTHRES\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 2\n| alter aggregation_criteria = \"ibpmdeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 2)), 1)"}
{"prompt": "I want to detect if any Avalon users are logging into Office365 from countries outside of our allowed business regions.", "response": "dataset = msft_o365_azure_ad_raw\n| filter Workload = \"AzureActiveDirectory\"\n| filter Operation in (\"UserLoggedIn\") and ResultStatus = \"Success\"\n| iploc ActorIpAddress loc_country as IPtoCountry,\nloc_city as IPtoCity,\nloc_asn as IPtoASN,\nloc_continent as IPtoContinent\n| filter incidr(ActorIpAddress, \"<ip>\") = False and ActorIpAddress not in (\"<ip>\")\n| union (dataset in (Avalon_Users, wl_ip_cidrs, cnxbscn))\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter (IPtoCountry != NULL) and (IPtoCountry != countryname and UserId = `attacker user id`) and (ActorIpAddress != wl_ipv4 and incidr(ActorIpAddress, wl_cidr) = false)"}
{"prompt": "I want to see DNS queries made by clients for \".onion\" addresses.", "response": "datamodel\n| filter (xdm.event.id = 3008 and xdm.network.dns.dns_question.name contains \".onion\")\n\n\n\n"}
{"prompt": "I want to see all files deleted using SDelete whose filename starts with \"AAA\" or ends with \"ZZZ\", excluding any file named \"dictionary.alcatel-lucent.aaa\" within the Wireshark folder.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\.AAA\" or xdm.target.file.filename ~= \".*\\.ZZZ\") and  not (xdm.target.file.filename ~= \".*\\\\Wireshark\\\\radius\\\\dictionary\\.alcatel\\-lucent\\.aaa\")\n\n\n\n"}
{"prompt": "I want to find instances where Curl.exe is used with insecure connections.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\curl\\.exe\" or actor_process_file_original_name = \"curl.exe\") and (action_process_image_command_line ~= \"\\s\\-k\\s\" or action_process_image_command_line contains \"--insecure\"))\n\n\n\n"}
{"prompt": "I want to find instances of UAC bypass techniques that involve consent.exe and werfault.exe processes with elevated integrity levels.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\consent\\.exe\" and action_process_image_path ~= \".*\\\\werfault\\.exe\" and action_process_integrity_level in (\"High\", \"System\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious modifications to desktop.ini files.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\desktop\\.ini\" and  not (((xdm.target.process.name ~= \"C\\:\\\\Windows\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Windows\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\")) or ((xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\JetBrains\\\\Toolbox\\\\bin\\\\7z\\.exe\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\JetBrains\\\\Toolbox\\\\bin\\\\7z\\.exe\") and xdm.target.file.filename ~= \".*\\\\JetBrains\\\\apps\\\\.*\") or xdm.target.file.filename ~= \"C\\:\\\\\\$WINDOWS\\.\\~BT\\\\NewOS\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find indicators of persistence using the Hhctrl.ocx file on Windows systems through event logs.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\CLSID\\\\{52A2AAAE-085D-4187-97EA-8C30DB990436}\\\\InprocServer32\\\\(Default)\" and  not ((action_registry_value_name = \"C:\\\\Windows\\\\System32\\\\hhctrl.ocx\" or action_registry_data = \"C:\\\\Windows\\\\System32\\\\hhctrl.ocx\"))\n\n\n\n"}
{"prompt": "I want to find suspicious instances where the \"schtasks\" command is used with specific scheduling options like ONLOGON, ONSTART, ONCE, or ONIDLE, but not those that use elevated privileges.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" or actor_process_file_original_name = \"schtasks.exe\") and (action_process_image_command_line contains \" ONLOGON \" or action_process_image_command_line contains \" ONSTART \" or action_process_image_command_line contains \" ONCE \" or action_process_image_command_line contains \" ONIDLE \")) and  not ((action_process_image_command_line contains \"NT AUT\" or action_process_image_command_line contains \" SYSTEM\" or action_process_image_command_line contains \"HIGHEST\"))\n\n\n\n"}
{"prompt": "I want to see all account unlock events from Windows Event Logs where the username is not NULL, not \" _dcmpamwindows\" or \"hydscoadm\", and both the source and target usernames aren't ending with '$'.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4767\") and (xdm.source.user.username = \"NULL\" or xdm.source.user.username not in (\"_dcmpamwindows\", \"hydscoadm\")) and xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for when the VMware Xfer Utility is being used to sideload DLLs.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\VMwareXferlogs\\.exe\" and  not (action_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\VMware\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find suspicious child processes spawned by SQL Server instances on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\sqlservr\\.exe\" and (action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\netstat\\.exe\" or action_process_image_path ~= \".*\\\\nltest\\.exe\" or action_process_image_path ~= \".*\\\\ping\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\systeminfo\\.exe\" or action_process_image_path ~= \".*\\\\tasklist\\.exe\" or action_process_image_path ~= \".*\\\\wsl\\.exe\")) and  not ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ SQL\\ Server\\\\.*\" and actor_process_image_path ~= \".*DATEV\\_DBENGINE\\\\MSSQL\\\\Binn\\\\sqlservr\\.exe\" and action_process_image_path = \"C:\\\\Windows\\\\System32\\\\cmd.exe\" and action_process_image_command_line ~= \"\\\"C\\:\\\\Windows\\\\system32\\\\cmd\\.exe\\\"\\ .*\"))\n\n\n\n"}
{"prompt": "I want to see alerts for potential CommandLine Path Traversal attacks using Cmd.exe.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"cmd.exe\") and ((actor_process_image_command_line contains \"/c\" or actor_process_image_command_line contains \"/k\" or actor_process_image_command_line contains \"/r\") or (action_process_image_command_line contains \"/c\" or action_process_image_command_line contains \"/k\" or action_process_image_command_line contains \"/r\")) and (actor_process_image_command_line = \"/../../\" or action_process_image_command_line contains \"/../../\")) and  not (action_process_image_command_line contains \"\\\\Tasktop\\\\keycloak\\\\bin\\\\/../../jre\\\\bin\\\\java\")\n\n\n\n"}
{"prompt": "I want to detect instances of UltraViewer or similar software being used on endpoints.", "response": "preset = xdr_process\n| filter (action_process_signature_product = \"UltraViewer\" or action_process_signature_vendor = \"DucFabulous Co,ltd\" or actor_process_file_original_name = \"UltraViewer_Desktop.exe\")\n\n\n\n"}
{"prompt": "I want to find files named \"msiexec.exe\" that are dropped by the CVE-2021-44077 exploit.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\ManageEngine\\\\SupportCenterPlus\\\\bin\\\\msiexec\\.exe\"\n\n\n\n"}
{"prompt": "I want to detect when processes are created using \"whoami.exe\" with a username containing \"AUTHORI\" or \"AUTORI\", and if the process is executed as SYSTEM.", "response": "preset = xdr_process\n| filter ((action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\") and (actor_process_file_original_name = \"whoami.exe\" or action_process_image_path ~= \".*\\\\whoami\\.exe\"))\n\n\n\n"}
{"prompt": " I want to find instances where an attacker is using PowerShell to enumerate AD users based on specific UserAccountControl flags like \"Get-ADUser -Filter ... -band 4194304\". ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Get-ADUser\" and ScriptBlockText contains \"-Filter\" and ScriptBlockText contains \"useraccountcontrol\" and ScriptBlockText contains \"-band\" and ScriptBlockText contains \"4194304\")\n\n\n\n"}
{"prompt": "I want to find events where PowerShell executes batch or cmd scripts.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Start-Process\" and (ScriptBlockText contains \".cmd\" or ScriptBlockText contains \".bat\"))\n\n\n\n"}
{"prompt": "I want to find instances of suspicious PowerShell code on my endpoints that use base64 encoding and obfuscation techniques.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"IAAtAGIAeABvAHIAIAAwAHgA\" or action_process_image_command_line contains \"AALQBiAHgAbwByACAAMAB4A\" or action_process_image_command_line contains \"gAC0AYgB4AG8AcgAgADAAeA\" or action_process_image_command_line contains \"AC4ASQBuAHYAbwBrAGUAKAApACAAfAAg\" or action_process_image_command_line contains \"AuAEkAbgB2AG8AawBlACgAKQAgAHwAI\" or action_process_image_command_line contains \"ALgBJAG4AdgBvAGsAZQAoACkAIAB8AC\" or action_process_image_command_line contains \"AHsAMQB9AHsAMAB9ACIAIAAtAGYAI\" or action_process_image_command_line contains \"B7ADEAfQB7ADAAfQAiACAALQBmAC\" or action_process_image_command_line contains \"AewAxAH0AewAwAH0AIgAgAC0AZgAg\" or action_process_image_command_line contains \"AHsAMAB9AHsAMwB9ACIAIAAtAGYAI\" or action_process_image_command_line contains \"B7ADAAfQB7ADMAfQAiACAALQBmAC\" or action_process_image_command_line contains \"AewAwAH0AewAzAH0AIgAgAC0AZgAg\" or action_process_image_command_line contains \"AHsAMgB9AHsAMAB9ACIAIAAtAGYAI\" or action_process_image_command_line contains \"B7ADIAfQB7ADAAfQAiACAALQBmAC\" or action_process_image_command_line contains \"AewAyAH0AewAwAH0AIgAgAC0AZgAg\" or action_process_image_command_line contains \"AHsAMQB9AHsAMAB9ACcAIAAtAGYAI\" or action_process_image_command_line contains \"B7ADEAfQB7ADAAfQAnACAALQBmAC\" or action_process_image_command_line contains \"AewAxAH0AewAwAH0AJwAgAC0AZgAg\" or action_process_image_command_line contains \"AHsAMAB9AHsAMwB9ACcAIAAtAGYAI\" or action_process_image_command_line contains \"B7ADAAfQB7ADMAfQAnACAALQBmAC\" or action_process_image_command_line contains \"AewAwAH0AewAzAH0AJwAgAC0AZgAg\" or action_process_image_command_line contains \"AHsAMgB9AHsAMAB9ACcAIAAtAGYAI\" or action_process_image_command_line contains \"B7ADIAfQB7ADAAfQAnACAALQBmAC\" or action_process_image_command_line contains \"AewAyAH0AewAwAH0AJwAgAC0AZgAg\")\n\n\n\n"}
{"prompt": "I want to see instances where permissions are being granted to an account in Microsoft Azure.", "response": "dataset = msft_azure_raw\n| filter _raw_log contains \"Microsoft.Authorization/roleAssignments/write\"\n\n\n\n"}
{"prompt": "I want to detect suspicious PowerShell downloads from endpoints.", "response": "preset = xdr_event_log\n| filter _raw_log contains \"System.Net.WebClient\" and ( contains \".DownloadFile(\" or  contains \".DownloadString(\")\n\n\n\n"}
{"prompt": "I want to find potentially suspicious child processes spawned by GoogleUpdate.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\GoogleUpdate\\.exe\" and  not ((action_process_image_path contains \"\\\\Google\" or (action_process_image_path ~= \".*\\\\setup\\.exe\" or action_process_image_path ~= \".*chrome\\_updater\\.exe\" or action_process_image_path ~= \".*chrome\\_installer\\.exe\")) or action_process_image_path = \"None\")\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious network connections made by Werfault.exe that don't appear to be legitimate Windows updates.", "response": "preset = network_story\n| filter actor_process_image_path = \"werfault.exe\" and  not (causality_actor_process_image_path = \"svchost.exe\" and (action_local_ip in (\"104.42.151.234\", \"104.43.193.48\", \"52.255.188.83\", \"13.64.90.137\", \"168.61.161.212\", \"13.88.21.125\", \"40.88.32.150\", \"52.147.198.201\", \"52.239.207.100\", \"52.176.224.96\", \"2607:7700:0:24:0:1:287e:1894\", \"10.*\", \"192.168.*\", \"127.*\") or action_remote_ip in (\"104.42.151.234\", \"104.43.193.48\", \"52.255.188.83\", \"13.64.90.137\", \"168.61.161.212\", \"13.88.21.125\", \"40.88.32.150\", \"52.147.198.201\", \"52.239.207.100\", \"52.176.224.96\", \"2607:7700:0:24:0:1:287e:1894\", \"10.*\", \"192.168.*\", \"127.*\")) and (action_external_hostname contains \"*.windowsupdate.com\" or action_external_hostname contains \"*.microsoft.com\"))\n\n\n\n"}
{"prompt": "I want to find suspicious instances of MsiExec being embedded within processes like PowerShell or cmd.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") and (actor_process_image_command_line contains \"MsiExec.exe\" and actor_process_image_command_line contains \"-Embedding \")) and  not ((action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\cmd\\.exe\" and action_process_image_command_line ~= \".*C\\:\\\\Program\\ Files\\\\SplunkUniversalForwarder\\\\bin\\\\.*\") or (action_process_image_command_line contains \"\\\\DismFoDInstall.cmd\" or (actor_process_image_command_line contains \"\\\\MsiExec.exe -Embedding \" and actor_process_image_command_line contains \"Global\\\\MSI0000\")))\n\n\n\n"}
{"prompt": "I want to detect suspicious executions of DumpMinitool on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\DumpMinitool\\.exe\" or action_process_image_path ~= \".*\\\\DumpMinitool\\.x86\\.exe\" or action_process_image_path ~= \".*\\\\DumpMinitool\\.arm64\\.exe\") or actor_process_file_original_name in (\"DumpMinitool.exe\", \"DumpMinitool.x86.exe\", \"DumpMinitool.arm64.exe\")) and (( not ((action_process_image_path ~= \".*\\\\Microsoft\\ Visual\\ Studio\\\\.*\" or action_process_image_path ~= \".*\\\\Extensions\\\\.*\"))) or action_process_image_command_line contains \".txt\" or ((action_process_image_command_line contains \" Full\" or action_process_image_command_line contains \" Mini\" or action_process_image_command_line contains \" WithHeap\") and  not (action_process_image_command_line contains \"--dumpType\")))\n\n\n\n"}
{"prompt": "I want to find potential instances of Wazuh DLL sideloading on my Windows system.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\libwazuhshared\\.dll\" or action_module_path ~= \".*\\\\libwinpthread\\-1\\.dll\") and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\")) and  not (((action_module_path ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_module_path ~= \".*\\\\ProgramData\\\\.*\") and action_module_path ~= \".*\\\\mingw64\\\\bin\\\\libwinpthread\\-1\\.dll\"))\n\n\n\n"}
{"prompt": "I want to find instances where multiple user accounts are disabled on Windows systems within a short time frame.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (4725)\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| filter SubjectUserName not contains \"$\" and TargetUserName not contains \"$\"\n| fields SubjectUserName, SubjectDomainName, TargetUserName,\nTargetDomainName, event_id, event_result, event_action,\nevent_data\n| comp earliest(_time) as FirstTimestamp,\nlatest(_time) as LatestTimestamp,\nvalues(TargetUserName) as MultipleAccounts by SubjectUserName,\nTargetDomainName,\nevent_id,\nevent_result,\nevent_action addrawdata = true as ExtraInfo\n| filter array_length(MultipleAccounts) > 1 and event_result in (\"success\")"}
{"prompt": "I want to find evidence of deleted Exchange PowerShell cmdlet history logs.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"\\\\Logging\\\\CmdletInfra\\\\LocalPowerShell\\\\Cmdlet\\\\.*\" and xdm.target.file.filename contains \"_Cmdlet_\")\n\n\n\n"}
{"prompt": "I want to detect potential Wocao activity on my endpoints by looking for suspicious command line executions.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"checkadmin.exe 127.0.0.1 -all\" or action_process_image_command_line contains \"netsh advfirewall firewall add rule name=powershell dir=in\" or action_process_image_command_line contains \"cmd /c powershell.exe -ep bypass -file c:\\\\s.ps1\" or action_process_image_command_line contains \"/tn win32times /f\" or action_process_image_command_line contains \"create win32times binPath=\" or action_process_image_command_line contains \"\\\\c$\\\\windows\\\\system32\\\\devmgr.dll\" or action_process_image_command_line contains \" -exec bypass -enc JgAg\" or action_process_image_command_line contains \"type *keepass\\\\KeePass.config.xml\" or action_process_image_command_line contains \"iie.exe iie.txt\" or action_process_image_command_line ~= \".*reg\\ query\\ HKEY\\_CURRENT\\_USER\\\\Software\\\\.*\\\\PuTTY\\\\Sessions\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see information about successful account logins that happened through WMI on my endpoints.", "response": "preset = xdr_event_log\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4624 and ProcessName ~= \".*\\\\WmiPrvSE\\.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts about HackTool - SharPersist Execution activities on my endpoints, including process creations with specific command-line parameters.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\SharPersist\\.exe\" or action_process_signature_product = \"SharPersist\") or (action_process_image_command_line contains \" -t schtask -c \" or action_process_image_command_line contains \" -t startupfolder -c \") or (action_process_image_command_line contains \" -t reg -c \" and action_process_image_command_line contains \" -m add\") or (action_process_image_command_line contains \" -t service -c \" and action_process_image_command_line contains \" -m add\") or (action_process_image_command_line contains \" -t schtask -c \" and action_process_image_command_line contains \" -m add\"))\n\n\n\n"}
{"prompt": "I want to see alerts about changes made to system audit policies on Windows devices.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4719\")\n| alter username = regextract(xdm.event.description, \"Account Name:\\t([^\\n]+)\")\n| filter username !~= \"[a-zA-Z\\d]+\\$$\"\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, username, target_domain\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect suspicious PowerShell sessions initiated using sqltoolsps.exe on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\sqltoolsps\\.exe\" or actor_process_image_path ~= \".*\\\\sqltoolsps\\.exe\" or actor_process_file_original_name = \"\\\\sqltoolsps.exe\") and  not (actor_process_image_path ~= \".*\\\\smss\\.exe\")\n\n\n\n"}
{"prompt": "I want to see all Cisco local accounts mentioned in the Datamodel.", "response": "datamodel\n| filter ( contains \"username\" or  contains \"aaa\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to Visual Studio Code tunnels creating files remotely.", "response": "datamodel\n| filter ((xdm.target.process.name contains \"\\\\servers\\\\Stable-\" or xdm.source.process.name contains \"\\\\servers\\\\Stable-\") and (xdm.target.process.name ~= \".*\\\\server\\\\node\\.exe\" or xdm.source.process.name ~= \".*\\\\server\\\\node\\.exe\") and xdm.target.file.filename ~= \".*\\\\\\.vscode\\-server\\\\data\\\\User\\\\History\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect malicious activity related to adding keys to the SafeBoot registry via reg.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and action_process_image_command_line contains \"\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\SafeBoot\" and (action_process_image_command_line contains \" copy \" or action_process_image_command_line contains \" add \"))\n\n\n\n"}
{"prompt": "I want to find suspicious macOS processes that might be padding binaries.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/truncate\" and action_process_image_command_line contains \"-s +\") or (action_process_image_path ~= \".*\\/dd\" and (action_process_image_command_line contains \"if=/dev/zero\" or action_process_image_command_line contains \"if=/dev/random\" or action_process_image_command_line contains \"if=/dev/urandom\")))\n\n\n\n"}
{"prompt": "I want to see alerts about potential EfsPotato activity based on named pipe creations.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter (PipeName ~= \".*\\\\pipe\\\\.*\" or PipeName contains \"\\\\pipe\\\\srvsvc\") and  not (PipeName contains \"\\\\CtxShare\" or PipeName ~= \"\\\\pipe\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find potential SNAKE malware installation attempts on endpoints by looking for specific executable files like \"jpsetup.exe\" or \"jpinst.exe\".", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\jpsetup\\.exe\" or action_process_image_path ~= \".*\\\\jpinst\\.exe\") and  not (action_process_image_command_line in (\"jpinst.exe\", \"jpinst\", \"jpsetup.exe\", \"jpsetup\") or action_process_image_command_line = \"\" or action_process_image_command_line = \"None\")\n\n\n\n"}
{"prompt": "I want to see activity related to high privileged security admin groups on Windows systems, including additions and removals of users from those groups.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| Filter xdm.target.user.groups in (\"acl_appimp\", \"gscadmins\", \"dnsadmins\", \"acl_imc\", \"globalwe2kadmins\", \"wap_spfusage\", \"wap_spfprovider\", \"wap_spfadmins\", \"acl.mim\", \"uimadmin\", \"sharepointadsync\", \"integ-ism-voice\", \"integ-ism-netcon-core\", \"evckecadmins\", \"akaash_extended_team\", \"mim.grpmgmt\", \"o365_activesyncallow\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find files named \"PSEXEC-.*\" and ending with \".key\" that indicate potential lateral movement using PSExec.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\PSEXEC\\-.*\" and xdm.target.file.filename ~= \".*\\.key\")\n\n\n\n"}
{"prompt": "I want to find instances where malware uses WorkFolders.exe to execute other processes like control.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\control\\.exe\" and actor_process_image_path ~= \".*\\\\WorkFolders\\.exe\") and  not (action_process_image_path = \"C:\\\\Windows\\\\System32\\\\control.exe\")\n\n\n\n"}
{"prompt": "I want to find suspicious files that might be created by macros in Outlook but aren't directly from the Outlook process itself.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\Microsoft\\\\Outlook\\\\VbaProject\\.OTM\" and  not ((xdm.target.process.name ~= \".*\\\\outlook\\.exe\" or xdm.source.process.name ~= \".*\\\\outlook\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see changes made to user accounts, especially if they involve critical permissions or domain admin access. I need to focus on events with IDs 4720, 4722, and 4781, and I'm particularly interested in any changes made by users who are part of the 'Tier0Users' security group or have 'domain_admin_win_admin' privileges.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter xdm.target.user.username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| filter xdm.target.user.username not in (\"deepak_ammanath\") and xdm.event.id in (\"4720\", \"4722\", \"4781\")\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type = \"domain_admin_win_admin\" or security_groups contains \"Tier0Users\"\n| alter username = if(username ~= \"@ad.infosys.com\", rtrim(username, \"@ad.infosys.com\"), if(username ~= \"@infosys.com\", rtrim(username, \"@infosys.com\"), if(username ~= \"itlinfosys\", ltrim(username, \"itlinfosys\\\\\"), username)))\n) as ent_admin_dst ent_admin_dst.username = xdm.target.user.username or ent_admin_dst.sam_account_name = xdm.target.user.username\n| filter username != null or sam_account_name != null\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see activity related to Cobalt Strike DNS beaconing using the Datamodel.", "response": "datamodel\n| filter xdm.event.id = 3008 and ((xdm.network.dns.dns_question.name ~= \"aaa\\.stage\\..*\" or xdm.network.dns.dns_question.name ~= \"post\\.1.*\") or xdm.network.dns.dns_question.name contains \".stage.123456.\")\n\n\n\n"}
{"prompt": "I want to find instances of attackers hiding services using sc.exe with  Service DACL Abuse.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sc\\.exe\" or actor_process_file_original_name = \"sc.exe\") and (action_process_image_command_line contains \"sdset\" and action_process_image_command_line contains \"DCLCWPDTSD\"))\n\n\n\n"}
{"prompt": "I want to detect malicious modifications to WinSock2 registry keys related to Protocol and NameSpace catalogs.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\System\\\\CurrentControlSet\\\\Services\\\\WinSock2\\\\Parameters\" and (action_registry_key_name contains \"\\\\Protocol_Catalog9\\\\Catalog_Entries\" or action_registry_key_name contains \"\\\\NameSpace_Catalog5\\\\Catalog_Entries\") and  not (((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\") or actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\MsiExec.exe\" or actor_process_image_path = \"C:\\\\Windows\\\\syswow64\\\\MsiExec.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when the AspNetCompiler executable is running on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*C\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework\\\\.*\" or action_process_image_path ~= \".*C\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework64\\\\.*\") and action_process_image_path ~= \".*\\\\aspnet\\_compiler\\.exe\")\n\n\n\n"}
{"prompt": " I want to detect processes that might be trying to bypass User Account Control (UAC) using IEInstal and consent.exe, especially if they have high or system integrity levels and are located in temporary directories. ", "response": "preset = xdr_process\n| filter (action_process_integrity_level in (\"High\", \"System\") and actor_process_image_path ~= \".*\\\\ieinstal\\.exe\" and action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and action_process_image_path ~= \".*consent\\.exe\")\n\n\n\n"}
{"prompt": "I want to find suspicious processes on endpoints that obfuscate IP addresses through command-line arguments, particularly those using `ping.exe`, `arp.exe`, or unusual URL patterns.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\ping\\.exe\" or action_process_image_path ~= \".*\\\\arp\\.exe\") and ((action_process_image_command_line contains \" 0x\" or action_process_image_command_line contains \"\n\n\n\n"}
{"prompt": "I want to see all instances where a Swift application profile was modified, including the exact time of modification.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"profile modified\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see detections related to suspicious interactive AT job executions on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\at\\.exe\" and action_process_image_command_line contains \"interactive\")\n\n\n\n"}
{"prompt": "I want to find suspicious instances of LOLScript abuse where processes are registering VBS scripts.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or actor_process_file_original_name in (\"cscript.exe\", \"wscript.exe\")) and action_process_image_command_line contains \".vbs -register \")\n\n\n\n"}
{"prompt": "I want to see alerts related to Lazarus activity from April 2021, specifically those involving processes using commands like \"mshta\" and \".zip\", or suspicious interactions between wmiprvse.exe, mshta.exe, rundll32.exe, and user directories.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"mshta\" and action_process_image_command_line contains \".zip\") or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\wbem\\\\wmiprvse.exe\" and action_process_image_path = \"C:\\\\Windows\\\\System32\\\\mshta.exe\") or (actor_process_image_path ~= \".*\\:\\\\Users\\\\Public\\\\.*\" and action_process_image_path = \"C:\\\\Windows\\\\System32\\\\rundll32.exe\"))\n\n\n\n"}
{"prompt": "I want to see events where Sysmon crashes on endpoints.", "response": "preset = xdr_event_log\n| alter Caption = regextract(to_json_string(action_evtlog_data_fields)->Caption{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Application Popup\" and action_evtlog_event_id = 26 and Caption in (\"sysmon64.exe - Application Error\", \"sysmon.exe - Application Error\"))\n\n\n\n"}
{"prompt": "I want to find instances of WerFault.exe being created in folders outside of the typical System32, SysWOW64, and WinSxS locations.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\WerFault\\.exe\" or xdm.target.file.filename ~= \".*\\\\wer\\.dll\") and  not ((xdm.target.file.filename ~= \".*\\\\System32\\\\.*\" or xdm.target.file.filename ~= \".*\\\\SysWOW64\\\\.*\" or xdm.target.file.filename ~= \".*\\\\WinSxS\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find activities that involve port forwarding using SSH.EXE.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\ssh\\.exe\" and action_process_image_command_line contains \" -R \")\n\n\n\n"}
{"prompt": "I want to see alerts about potential Flash Player attacks where downloads come from suspicious locations that aren't Adobe's official website.", "response": "datamodel\n| filter (xdm.network.http.url contains \"/flash_install.php\" or xdm.network.http.url ~= \".*\\/install\\_flash\\_player\\.exe\") and  not (xdm.network.http.domain ~= \".*\\.adobe\\.com\")\n\n\n\n"}
{"prompt": "I want to see events related to processes running wsmprovhost.exe that are potentially part of remote PowerShell sessions using WinRM.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\wsmprovhost\\.exe\" or actor_process_image_path ~= \".*\\\\wsmprovhost\\.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential WMI lateral movement where WmiPrvSE spawns PowerShell.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\WmiPrvSE\\.exe\" and ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")))\n\n\n\n"}
{"prompt": "I want to find activities related to uninstalling Linux packages.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/yum\" and (action_process_image_command_line contains \"erase\" or action_process_image_command_line contains \"remove\")) or ((action_process_image_path ~= \".*\\/apt\" or action_process_image_path ~= \".*\\/apt\\-get\") and (action_process_image_command_line contains \"remove\" or action_process_image_command_line contains \"purge\")) or (action_process_image_path ~= \".*\\/dpkg\" and (action_process_image_command_line contains \"--remove \" or action_process_image_command_line contains \" -r \")) or (action_process_image_path ~= \".*\\/rpm\" and action_process_image_command_line contains \" -e \"))\n\n\n\n"}
{"prompt": "I want to see all O365 security holds that were created by users.", "response": "dataset = msft_o365_general_raw\n| filter operation in (\"HoldCreated\") and Workload in (\"SecurityComplianceCenter\") and UserId != NULL"}
{"prompt": "I want to see events related to modifications of Autorun keys under the \"CurrentVersion\" registry key, specifically those affecting Winlogon and other critical Windows startup settings.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\" and (action_registry_key_name contains \"\\\\Winlogon\\\\VmApplet\" or action_registry_key_name contains \"\\\\Winlogon\\\\Userinit\" or action_registry_key_name contains \"\\\\Winlogon\\\\Taskman\" or action_registry_key_name contains \"\\\\Winlogon\\\\Shell\" or action_registry_key_name contains \"\\\\Winlogon\\\\GpExtensions\" or action_registry_key_name contains \"\\\\Winlogon\\\\AppSetup\" or action_registry_key_name contains \"\\\\Winlogon\\\\AlternateShells\\\\AvailableShells\" or action_registry_key_name contains \"\\\\Windows\\\\IconServiceLib\" or action_registry_key_name contains \"\\\\Windows\\\\Appinit_Dlls\" or action_registry_key_name contains \"\\\\Image File Execution Options\" or action_registry_key_name contains \"\\\\Font Drivers\" or action_registry_key_name contains \"\\\\Drivers32\" or action_registry_key_name contains \"\\\\Windows\\\\Run\" or action_registry_key_name contains \"\\\\Windows\\\\Load\") and  not ((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\") or (action_registry_key_name ~= \".*\\\\Image\\ File\\ Execution\\ Options\\\\.*\" and (action_registry_key_name ~= \".*\\\\DisableExceptionChainValidation\" or action_registry_key_name ~= \".*\\\\MitigationOptions\")) or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\Temp\\\\.*\" and actor_process_image_path ~= \".*\\\\MicrosoftEdgeUpdate\\.exe\") or ((action_registry_key_name ~= \".*\\\\ClickToRunStore\\\\HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\.*\" or action_registry_key_name ~= \".*\\\\ClickToRun\\\\REGISTRY\\\\MACHINE\\\\Software\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\.*\") or actor_process_image_path in (\"C:\\\\Program Files\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe\", \"C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe\")) or ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\Updates\\\\.*\") and actor_process_image_path ~= \".*\\\\OfficeClickToRun\\.exe\") or (actor_process_image_path = \"C:\\\\Windows\\\\system32\\\\svchost.exe\" and (action_registry_key_name contains \"\\\\Winlogon\\\\GPExtensions\\\\{827D319E-6EAC-11D2-A4EA-00C04F79F83A}\\\\PreviousPolicyAreas\" or action_registry_key_name contains \"\\\\Winlogon\\\\GPExtensions\\\\{827D319E-6EAC-11D2-A4EA-00C04F79F83A}\\\\MaxNoGPOListChangesInterval\") and (action_registry_value_name in (\"DWORD (0x00000009)\", \"DWORD (0x000003c0)\") or action_registry_data in (\"DWORD (0x00000009)\", \"DWORD (0x000003c0)\"))) or (actor_process_image_path ~= \"C\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework.*\" and actor_process_image_path ~= \".*\\\\ngen\\.exe\") or (actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\StandaloneUpdater\\\\OneDriveSetup\\.exe\" and action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\Delete\\ Cached\\ Update\\ Binary\" and (action_registry_value_name ~= \"C\\:\\\\Windows\\\\system32\\\\cmd\\.exe\\ \\/q\\ \\/c\\ del\\ \\/q\\ \\\"C\\:\\\\Users\\\\.*\" or action_registry_data ~= \"C\\:\\\\Windows\\\\system32\\\\cmd\\.exe\\ \\/q\\ \\/c\\ del\\ \\/q\\ \\\"C\\:\\\\Users\\\\.*\") and (action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\Update\\\\OneDriveSetup\\.exe\\\"\" or action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\Update\\\\OneDriveSetup\\.exe\\\"\")))\n\n\n\n"}
{"prompt": "I want to see events related to high privilege admin activity role separation enabled on domain controllers, exchange servers, and other critical systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4897\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where the wsmprovhost.exe process on Windows remotely accesses the lsass.exe process, but without granting full control access.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and SourceImage ~= \".*\\:\\\\Windows\\\\system32\\\\wsmprovhost\\.exe\") and  not (GrantedAccess = \"0x80000000\")\n\n\n\n"}
{"prompt": "I want to see alerts related to potential PsExec remote executions detected on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"accepteula\" and action_process_image_command_line contains \" -u \" and action_process_image_command_line contains \" -p \" and action_process_image_command_line ~= \".*\\ \\\\\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see if there have been any attempts to exploit the PrintNightmare vulnerability.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\spoolsv\\.exe\" or xdm.source.process.name ~= \".*\\\\spoolsv\\.exe\") and xdm.target.file.filename ~= \".*C\\:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\x64\\\\3\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find potential malicious activity on macOS systems that uses the `find` command with suspicious permissions.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/find\" and (action_process_image_command_line contains \"-perm -4000\" or action_process_image_command_line contains \"-perm -2000\" or action_process_image_command_line contains \"-perm 0777\" or action_process_image_command_line contains \"-perm -222\" or action_process_image_command_line contains \"-perm -o w\" or action_process_image_command_line contains \"-perm -o x\" or action_process_image_command_line contains \"-perm -u=s\" or action_process_image_command_line contains \"-perm -g=s\"))\n\n\n\n"}
{"prompt": " I want to see alerts for accounts locked out due to multiple logon failures for Red Carpet users. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| join\n(dataset = redcarpet_users_list\n| fields username\n) as redcarpusers redcarpusers.username = xdm.source.user.username\n| filter xdm.event.id = \"6279\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestionationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts from Symantec EP that indicate virus signatures detected on machines, excluding those related to Chrome, Edge, or Firefox.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.alert.name ~= \"^Audit\"\n| filter to_integer(xdm.alert.original_threat_id) in (20566, 31959, 31960, 31999, 32111, 32431, 32526, 32552, 30843, 32841, 31551, 31842, 31880, 32037, 32078, 32085, 32104, 32421, 32432, 32438, 32444, 32459, 32460, 32463, 31234, 32470, 32476, 32481, 32519, 32520, 32521, 32536, 32541, 32543, 32570, 32571, 32607, 32884, 33049, 32551, 30864, 30279, 30617, 30582, 30835, 30847, 30852, 31175, 30913, 31843, 32540, 32912, 32721, 33211, 33602, 33413, 33545, 33271, 31402, 32619, 33038, 33331, 33112, 30162, 33358, 33090, 30021, 33119, 32346, 33183, 31031, 33534, 32969, 33328, 32363, 33332)\n| filter xdm.target.file.sha256 = null or uppercase(xdm.target.file.sha256) not in (\"35B1B7B689177B51F41BCD47F5EFED2495DED97DDB2E55B37E3F2492F22EAD1C\", \"13AF5FCA7C707AB559AF84EB538AF610E913EAF5886583752CB1F5485C02FF0C\")\n| filter lowercase(xdm.source.application.name) !~= \"chrome.exe$|edge.exe$|firefox.exe$\"\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1),\nfile_hash = xdm.target.file.sha256,\nusername = xdm.source.user.username,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nprocess = xdm.target.file.path,\nrisk_name = xdm.alert.name,\naction = xdm.observer.action\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\"),\ntime = _time,\naggregation_criteria = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see activity related to potential SysKey registry key access attempts on my endpoints.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4656, 4663) and ObjectType = \"key\" and (ObjectName ~= \".*lsa\\\\JD\" or ObjectName ~= \".*lsa\\\\GBG\" or ObjectName ~= \".*lsa\\\\Skew1\" or ObjectName ~= \".*lsa\\\\Data\"))\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious Kerberos TGT requests that might indicate an attacker leveraging stolen credentials after abusing Active Directory Certificate Services with PetitPotam.", "response": "preset = xdr_event_log\n| alter TargetUserName = regextract(to_json_string(action_evtlog_data_fields)->TargetUserName{}, \"\\\"(.*)\\\"\")\n| alter CertThumbprint = regextract(to_json_string(action_evtlog_data_fields)->CertThumbprint{}, \"\\\"(.*)\\\"\")\n| alter IpAddress = regextract(to_json_string(action_evtlog_data_fields)->IpAddress{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4768 and TargetUserName ~= \".*\\$\" and CertThumbprint contains \"*\") and  not (IpAddress = \"::1\" or CertThumbprint = \"\")\n\n\n\n"}
{"prompt": "I want to see activity related to potential Command and Control communication using domains like addatamarket.net, ans7tv.net, and others listed in the query.", "response": "datamodel\n| filter (xdm.network.http.domain contains \"addatamarket.net\" or xdm.network.http.domain contains \"ans7tv.net\" or xdm.network.http.domain contains \"anstv.net\" or xdm.network.http.domain contains \"backuprabbit.com\" or xdm.network.http.domain contains \"businessvideonews.com\" or xdm.network.http.domain contains \"cloudsponcer.com\" or xdm.network.http.domain contains \"datamarketplace.net\" or xdm.network.http.domain contains \"growthtransport.com\" or xdm.network.http.domain contains \"mobilegamerstats.com\" or xdm.network.http.domain contains \"snoweeanalytics.com\" or xdm.network.http.domain contains \"tagclick-cdn.com\" or xdm.network.http.domain contains \"topographyupdates.com\" or xdm.network.http.domain contains \"unlimitedteacup.com\" or xdm.network.http.domain contains \"virtuallaughing.com\" or xdm.network.http.domain contains \"web-trackers.com\")\n\n\n\n"}
{"prompt": "I want to find instances where an Azure Kubernetes CronJob is running in Azure Cloud.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter ((properties.operationName ~= \"MICROSOFT\\.KUBERNETES\\/CONNECTEDCLUSTERS\\/BATCH.*\" or properties.operationName ~= \"MICROSOFT\\.CONTAINERSERVICE\\/MANAGEDCLUSTERS\\/BATCH.*\") and (properties.operationName ~= \".*\\/CRONJOBS\\/WRITE\" or properties.operationName ~= \".*\\/JOBS\\/WRITE\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when Azure Network Firewall Policies are modified or deleted.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.NETWORK/FIREWALLPOLICIES/WRITE\", \"MICROSOFT.NETWORK/FIREWALLPOLICIES/JOIN/ACTION\", \"MICROSOFT.NETWORK/FIREWALLPOLICIES/CERTIFICATES/ACTION\", \"MICROSOFT.NETWORK/FIREWALLPOLICIES/DELETE\")\n\n\n\n"}
{"prompt": "I want to see events where PowerShell modules are imported from suspicious directories like the Temp folder, AppData, or Public.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*Import\\-Module\\ \\\"\\$Env\\:Temp\\\\.*\" or action_process_image_command_line ~= \".*Import\\-Module\\ \\'\\$Env\\:Temp\\\\.*\" or action_process_image_command_line ~= \".*Import\\-Module\\ \\$Env\\:Temp\\\\.*\" or action_process_image_command_line ~= \".*Import\\-Module\\ \\\"\\$Env\\:Appdata\\\\.*\" or action_process_image_command_line ~= \".*Import\\-Module\\ \\'\\$Env\\:Appdata\\\\.*\" or action_process_image_command_line ~= \".*Import\\-Module\\ \\$Env\\:Appdata\\\\.*\" or action_process_image_command_line ~= \".*Import\\-Module\\ C\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*ipmo\\ \\\"\\$Env\\:Temp\\\\.*\" or action_process_image_command_line ~= \".*ipmo\\ \\'\\$Env\\:Temp\\\\.*\" or action_process_image_command_line ~= \".*ipmo\\ \\$Env\\:Temp\\\\.*\" or action_process_image_command_line ~= \".*ipmo\\ \\\"\\$Env\\:Appdata\\\\.*\" or action_process_image_command_line ~= \".*ipmo\\ \\'\\$Env\\:Appdata\\\\.*\" or action_process_image_command_line ~= \".*ipmo\\ \\$Env\\:Appdata\\\\.*\" or action_process_image_command_line ~= \".*ipmo\\ C\\:\\\\Users\\\\Public\\\\.*\")\n\n\n\n"}
{"prompt": " I want to detect potential Adwind RAT/JRAT activity on my endpoints by looking for suspicious command lines involving Oracle, Java, .exe files, or specific \"Retrive\" and .vbs scripts.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"\\\\AppData\\\\Roaming\\\\Oracle\" and action_process_image_command_line contains \"\\\\java\" and action_process_image_command_line contains \".exe \") or (action_process_image_command_line contains \"cscript.exe\" and action_process_image_command_line contains \"Retrive\" and action_process_image_command_line contains \".vbs \"))\n\n\n\n"}
{"prompt": "{I want to find alerts related to the exploitation of CVE-2021-26814 in Wazuh.} \n\n\nLet me know if you need help with any other prompts!", "response": "datamodel\n| filter xdm.network.http.url contains \"/manager/files*path=etc/lists/../../../../..\"\n\n\n\n"}
{"prompt": "I want to see alerts for successful Overpass the Hash attempts detected on endpoints.", "response": "preset = xdr_event_log\n| alter LogonType = regextract(to_json_string(action_evtlog_data_fields)->LogonType{}, \"\\\"(.*)\\\"\")\n| alter LogonProcessName = regextract(to_json_string(action_evtlog_data_fields)->LogonProcessName{}, \"\\\"(.*)\\\"\")\n| alter AuthenticationPackageName = regextract(to_json_string(action_evtlog_data_fields)->AuthenticationPackageName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4624 and LogonType = 9 and LogonProcessName = \"seclogo\" and AuthenticationPackageName = \"Negotiate\")\n\n\n\n"}
{"prompt": "I want to find instances of Visual Studio Code Tunnel Shell Execution using Cortex XQL.", "response": "preset = xdr_process\n| filter (actor_process_image_path contains \"\\\\servers\\\\Stable-\" and actor_process_image_path ~= \".*\\\\server\\\\node\\.exe\" and actor_process_image_command_line contains \".vscode-server\") and (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and action_process_image_command_line contains \"\\\\terminal\\\\browser\\\\media\\\\shellIntegration.ps1\") or (action_process_image_path ~= \".*\\\\wsl\\.exe\" or action_process_image_path ~= \".*\\\\bash\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when Regedit is run by TrustedInstaller or ProcessHacker.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\regedit\\.exe\" and (actor_process_image_path ~= \".*\\\\TrustedInstaller\\.exe\" or actor_process_image_path ~= \".*\\\\ProcessHacker\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find events related to malicious named pipes that contain \"RemCom\" and are associated with potentially unwanted applications.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter PipeName contains \"\\\\RemCom\"\n\n\n\n"}
{"prompt": "I want to find users who have suddenly spiked in activity compared to their average activity over the past week.", "response": "dataset = symantec_ep_raw\n| filter _raw_log ~= \",Intrusion\\sURL:\"\n| alter username = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0))\n| filter username not in (\"SYSTEM\", null, \"None\")\n| filter subtract(to_integer(format_timestamp(\"%d\", current_time())), to_integer(format_timestamp(\"%d\", _time))) = 0\n| alter day = extract_time(_time, \"DAYOFWEEK\")\n| comp count() as current_day_count by day,\nusername\n| join type = left conflict_strategy = both\n(dataset = symantec_ep_raw\n| filter _raw_log ~= \",Intrusion\\sURL:\"\n| alter username = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0))\n| filter username not in (\"SYSTEM\", null, \"None\")\n| alter day = extract_time(_time, \"DAYOFWEEK\")\n| comp count() as 7_days_count by day,\nusername\n| comp avg(7_days_count) as 7_days_count_avg by username addrawdata = true as avg_raw\n| alter user = username\n| fields user, 7_days_count_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = username\n| filter current_day_count > multiply(7_days_count_avg, 1.5)"}
{"prompt": "I want to see events where a privileged admin modifies a group type on Windows systems. I need details like the username, groups modified, and any error codes or failure reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4764\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where the SyncAppvPublishingServer process is executing arbitrary PowerShell code.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\SyncAppvPublishingServer\\.exe\" or actor_process_file_original_name = \"syncappvpublishingserver.exe\") and action_process_image_command_line contains \"\\\"n; \")\n\n\n\n"}
{"prompt": "I want to find instances where a Python-based tool is accessing lsass.exe and potentially dumping credentials by examining Windows event logs.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and (CallTrace contains \"_ctypes.pyd+\" and CallTrace contains \":\\\\Windows\\\\System32\\\\KERNELBASE.dll+\" and CallTrace contains \":\\\\Windows\\\\SYSTEM32\\\\ntdll.dll+\") and (CallTrace contains \"python27.dll+\" or CallTrace contains \"python3*.dll+\") and GrantedAccess = \"0x1FFFFF\")\n\n\n\n"}
{"prompt": "I want to find instances of suspicious scheduled tasks being created via XML files that might be masquerading as legitimate processes.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" or actor_process_file_original_name = \"schtasks.exe\") and (action_process_image_command_line contains \"/create\" or action_process_image_command_line contains \"-create\") and (action_process_image_command_line contains \"/xml\" or action_process_image_command_line contains \"-xml\")) and  not (action_process_image_command_line contains \".xml\" or action_process_integrity_level = \"System\" or (actor_process_image_path ~= \".*\\\\rundll32\\.exe\" and (actor_process_image_command_line contains \":\\\\WINDOWS\\\\Installer\\\\MSI\" and actor_process_image_command_line contains \".tmp,zzzzInvokeManagedCustomActionOutOfProc\"))) and  not ((actor_process_image_path ~= \".*\\:\\\\ProgramData\\\\OEM\\\\UpgradeTool\\\\CareCenter\\_.*\\\\BUnzip\\\\Setup\\_msi\\.exe\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Axis\\ Communications\\\\AXIS\\ Camera\\ Station\\\\SetupActions\\.exe\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Axis\\ Communications\\\\AXIS\\ Device\\ Manager\\\\AdmSetupActions\\.exe\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Zemana\\\\AntiMalware\\\\AntiMalware\\.exe\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Dell\\\\SupportAssist\\\\pcdrcui\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see events related to malicious use of Rundll32.exe for privilege escalation, specifically when it uses command line arguments with \"-sta\", \"-localserver\", \"{\" and \"}\"", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and ((action_process_image_command_line contains \"-sta \" or action_process_image_command_line contains \"-localserver \") and (action_process_image_command_line contains \"{\" and action_process_image_command_line contains \"}\")))\n\n\n\n"}
{"prompt": " I want to detect instances of Invoke-Obfuscation being used to execute obfuscated IEX commands on endpoints. ", "response": "preset = xdr_event_log\n| filter (action_evtlog_event_id = 7045 and (actor_process_image_path ~= \"\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\[\" or actor_process_image_path ~= \"\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\[\" or actor_process_image_path ~= \"\\$env\\:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env\\:Public\\[\" or actor_process_image_path ~= \"\\$env\\:ComSpec\\[(\\s*\\d{1,3}\\s*\\,){2}\" or actor_process_image_path ~= \"\\\\*mdr\\*W\\s*\\)\\.Name\" or actor_process_image_path ~= \"\\$VerbosePreference\\.ToString\\(\" or actor_process_image_path ~= \"String\\]\\s*\\$VerbosePreference\"))\n\n\n\n"}
{"prompt": "I want to find suspicious writes to the Windows System32 Tasks folder that might indicate malware persistence.", "response": "datamodel\n| filter (xdm.target.file.filename contains \"\\\\Windows\\\\System32\\\\Tasks\" and ((xdm.target.process.name ~= \".*\\\\AppData\\\\.*\" or xdm.target.process.name contains \"C:\\\\PerfLogs\" or xdm.target.process.name contains \"\\\\Windows\\\\System32\\\\config\\\\systemprofile\") or (xdm.source.process.name ~= \".*\\\\AppData\\\\.*\" or xdm.source.process.name contains \"C:\\\\PerfLogs\" or xdm.source.process.name contains \"\\\\Windows\\\\System32\\\\config\\\\systemprofile\")))\n\n\n\n"}
{"prompt": "I want to find potential instances of the CVE-2023-36884 exploit being used, specifically focusing on file downloads as indicated by certain URLs.", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and (xdm.network.http.url contains \"/ex001.url\" or xdm.network.http.url contains \"/file001.search-ms\" or xdm.network.http.url contains \"/file001.url\" or xdm.network.http.url contains \"/file001.vbs\" or xdm.network.http.url contains \"/file1.mht\" or xdm.network.http.url contains \"/o2010.asp\" or xdm.network.http.url contains \"/redir_obj.html\" or xdm.network.http.url contains \"/RFile.asp\" or xdm.network.http.url contains \"/zip_k.asp\" or xdm.network.http.url contains \"/zip_k2.asp\" or xdm.network.http.url contains \"/zip_k3.asp\"))\n\n\n\n"}
{"prompt": "I want to see events where a process called \"scrcons.exe\" is creating child processes using common scripting tools or system utilities like svchost, dllhost, powershell, wscript, etc.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\scrcons\\.exe\" and (action_process_image_path ~= \".*\\\\svchost\\.exe\" or action_process_image_path ~= \".*\\\\dllhost\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\msiexec\\.exe\" or action_process_image_path ~= \".*\\\\msbuild\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to attackers creating remote tasks via the ATSVC named pipe.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| alter Accesses = regextract(to_json_string(action_evtlog_data_fields)->Accesses{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName = \"\\\\\\\\\\*\\\\IPC$\" and RelativeTargetName = \"atsvc\" and Accesses contains \"WriteData\")\n\n\n\n"}
{"prompt": "I want to find events related to Procdump executions on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\procdump\\.exe\" or action_process_image_path ~= \".*\\\\procdump64\\.exe\")\n\n\n\n"}
{"prompt": "I want to find processes that are executing commands from alternate data streams.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"txt:\" and (((action_process_image_command_line contains \"type \" and action_process_image_command_line contains \" > \") or (action_process_image_command_line contains \"makecab \" and action_process_image_command_line contains \".cab\") or (action_process_image_command_line contains \"reg \" and action_process_image_command_line contains \" export \") or (action_process_image_command_line contains \"regedit \" and action_process_image_command_line contains \" /E \") or (action_process_image_command_line contains \"esentutl \" and action_process_image_command_line contains \" /y \" and action_process_image_command_line contains \" /d \" and action_process_image_command_line contains \" /o \")))\n\n\n\n"}
{"prompt": "I want to see alerts from the Clearswift Email DLP Fingerprint Policy that mention \"Fingerprint_Block_CNX_Conv\" in their raw logs.", "response": "config case_sensitive = false\n| datamodel dataset = clearswift_dlp_raw\n| filter clearswift_dlp_raw._raw_log contains \"Fingerprint_Block_CNX_Conv\""}
{"prompt": "I want to see a report of Cisco Catalyst devices that have had at least three instances of telnet or SNMP unauthorized access attempts within a two minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 2m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to detect instances of the \"Invoke-Obfuscation CLIP+ Launcher\" PowerShell module that uses obfuscation techniques involving CLIP and clipboard data.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter Payload ~= \"cmd.{0,5}(?\\:\\/c|\\/r).+clip(?\\:\\.exe)?.{0,4}\\&\\&.+clipboard]\\:\\:\\(\\s\\\\\\\"\\{\\d\\}.+\\-f.+\\\"\"\n\n\n\n"}
{"prompt": "I want to see alerts for potential malicious activity using the Regsvr32 tool that includes the \"-i\" flag but not the \"-n\" flag.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\regsvr32\\.exe\" and action_process_image_command_line contains \" -i:\") and  not (action_process_image_command_line contains \" -n \")\n\n\n\n"}
{"prompt": "I want to detect instances where an attacker uses `net use` and a command execution chain to download and run malicious files from an internet-hosted WebDAV share.", "response": "preset = xdr_process\n| filter ((action_process_image_path contains \"\\\\cmd.exe\" or actor_process_file_original_name = \"Cmd.EXE\") and (action_process_image_command_line contains \" net use http\" and action_process_image_command_line contains \"& start /b \" and action_process_image_command_line ~= \".*\\\\DavWWWRoot\\\\.*\") and (action_process_image_command_line contains \".exe \" or action_process_image_command_line contains \".dll \" or action_process_image_command_line contains \".bat \" or action_process_image_command_line contains \".vbs \" or action_process_image_command_line contains \".ps1 \"))\n\n\n\n"}
{"prompt": "I want to see alerts for new processes created through Taskmgr.exe that aren't legitimate uses like mmc.exe, resmon.exe, or Taskmgr.exe itself.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\taskmgr\\.exe\" and  not ((action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\mmc\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\resmon\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\Taskmgr\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see all instances of mailbox permissions being removed by administrators in Office365. I need details like who made the change, which mailbox was affected, and what access rights were revoked.", "response": "config case_sensitive = false\n| datamodel dataset = msft_admin_audit_raw\n| filter xdm.observer.action in (\"Remove-Mailbox\")\n| alter parameter_length = array_length(split(xdm.event.description, \" \")),\nparameter_values = split(xdm.event.operation, \" \")\n| alter mailbox = arrayindex(split(xdm.target.user.username, \"/\"), -1),\nMailboxAccessGivenTo = if(parameter_length = 3, arrayindex(parameter_values, 1), arrayindex(parameter_values, 3)),\naccessrights = if(parameter_length = 3, arrayindex(parameter_values, 0), arrayindex(parameter_values, 2)),\nlog_src_name = \"AdminAudit\",\nserver_name = msft_admin_audit_raw._collector_hostname\n| fields xdm.target.user.username, xdm.source.user.username,\nxdm.observer.action, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.event.id, xdm.event.description, xdm.event.operation,\nxdm.event.operation_sub_type, xdm.observer.type,\nxdm.event.is_completed, xdm.logon.is_elevated, MailboxAccessGivenTo,\nmailbox, accessrights, _time, _insert_time, log_src_name,\nserver_name, msft_admin_audit_raw.rundate\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential cases of malicious appverifUI.DLL sideloading on Windows systems.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\appverifUI\\.dll\" and  not ((actor_process_image_path in (\"C:\\\\Windows\\\\SysWOW64\\\\appverif.exe\", \"C:\\\\Windows\\\\System32\\\\appverif.exe\") and (action_module_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find instances of AddInUtil.exe being executed with unusual paths for AddInRoot or PipelineRoot.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\addinutil\\.exe\" or actor_process_file_original_name = \"AddInUtil.exe\") and (action_process_image_command_line contains \"-AddInRoot:\" or action_process_image_command_line contains \"-PipelineRoot:\")) and  not ((action_process_image_command_line contains \"-AddInRoot:\\\"C:\\\\Program Files (x86)\\\\Common Files\\\\Microsoft Shared\\\\VSTA\" or action_process_image_command_line contains \"-AddInRoot:C:\\\\Program Files (x86)\\\\Common Files\\\\Microsoft Shared\\\\VSTA\" or action_process_image_command_line contains \"-PipelineRoot:\\\"C:\\\\Program Files (x86)\\\\Common Files\\\\Microsoft Shared\\\\VSTA\" or action_process_image_command_line contains \"-PipelineRoot:C:\\\\Program Files (x86)\\\\Common Files\\\\Microsoft Shared\\\\VSTA\"))\n\n\n\n"}
{"prompt": "I want to see login events on Unix servers where users log in directly without using PAM, including specific details like usernames, IP addresses, and timestamps.", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| alter xdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), xdm.source.user.username),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.event.type in (\"sshd\") and xdm.event.outcome in (XDM_CONST.OUTCOME_SUCCESS) and xdm.source.user.username != null and (xdm.source.user.username in (\"<users>\") and xdm.source.ipv4 not in (\"<ip>')) OR(user_dst.toLowerCase() IN ('<user>') AND ip_src NOT IN ('<ip>\")) or (xdm.source.user.username in (\"<user>\") and xdm.source.ipv4 not in (\"<ip>\") and xdm.target.host.hostname not in (\"<hosts>\"))\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _vendor, _product, _insert_time, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\naggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential Ruby reverse shell activity on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path contains \"ruby\" and (action_process_image_command_line contains \" -e\" and action_process_image_command_line contains \"rsocket\" and action_process_image_command_line contains \"TCPSocket\") and (action_process_image_command_line contains \" ash\" or action_process_image_command_line contains \" bash\" or action_process_image_command_line contains \" bsh\" or action_process_image_command_line contains \" csh\" or action_process_image_command_line contains \" ksh\" or action_process_image_command_line contains \" pdksh\" or action_process_image_command_line contains \" sh\" or action_process_image_command_line contains \" tcsh\"))\n\n\n\n"}
{"prompt": "I want to see files dropped by potential exploits of CVE-2023-36884, specifically those located in common Office Recent and user directories.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\Roaming\\\\Microsoft\\\\Office\\\\Recent\\\\.*\" and xdm.target.file.filename ~= \".*\\\\file001\\.url\")\n\n\n\n"}
{"prompt": "I want to see alerts for Kerberos replay attacks detected on my Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4649\")\n| filter xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username != NULL\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see failed and successful login attempts from Cisco ASA devices that originated from non-business countries within the last 10 hours.", "response": "datamodel dataset = cisco_asa_raw\n| filter xdm.event.original_event_type in (\"113005\", \"722051\")\n| iploc xdm.source.ipv4 loc_country as SrcCountry,\nloc_city as SrcCity,\nloc_asn as SrcASN,\nloc_asn_org as SrcASN_ORG,\nloc_region as SrcRegion\n| alter FailureAttempt = if(xdm.event.original_event_type in (\"113005\"), xdm.event.outcome_reason),\nSuccessfulAttempt = if(xdm.event.original_event_type in (\"722051\"), xdm.event.outcome_reason)\n| comp earliest(_time) as FirstTimestamp,\nlatest(_time) as LatestTimestamp,\ncount_distinct(xdm.source.ipv4) as Multiple_UNIQ_SourcesIPs,\ncount_distinct(SrcCountry) as Multiple_UNIQ_SrcCountries,\ncount(FailureAttempt) as FailureAttemptCount,\ncount(SuccessfulAttempt) as SuccessfulAttemptCount,\ncount(xdm.event.original_event_type) as EventsCount,\ncount_distinct(xdm.event.original_event_type) as UniqEventCount by xdm.source.user.username,\nxdm.source.ipv4,\nxdm.event.outcome_reason,\nxdm.event.original_event_type,\nSrcCountry\n\n\n| filter UniqEventCount > 1 and FailureAttemptCount >= 2 and SuccessfulAttemptCount >= 1"}
{"prompt": "I want to see alerts about malicious PowerShell scripts attempting to load assemblies using CL_LoadAssembly.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"LoadAssemblyFromPath \" or action_process_image_command_line contains \"LoadAssemblyFromNS \")\n\n\n\n"}
{"prompt": "I want to see events related to potential exploitation of CVE-2023-36874 using fake Wermgr execution on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name in (\"Cmd.Exe\", \"powershell_ise.EXE\", \"powershell.exe\") and action_process_image_path ~= \".*\\\\wermgr\\.exe\")\n\n\n\n"}
{"prompt": "I want to find suspicious ASPX file drops by Exchange web services.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\w3wp\\.exe\" or xdm.source.process.name ~= \".*\\\\w3wp\\.exe\") and xdm.target.process.command_line contains \"MSExchange\" and (xdm.target.file.filename ~= \".*FrontEnd\\\\HttpProxy\\\\.*\" or xdm.target.file.filename ~= \".*\\\\inetpub\\\\wwwroot\\\\aspnet\\_client\\\\.*\")) and (xdm.target.file.filename ~= \".*\\.aspx\" or xdm.target.file.filename ~= \".*\\.asp\" or xdm.target.file.filename ~= \".*\\.ashx\"))\n\n\n\n"}
{"prompt": "I want to find instances where an executable named \"bitsadmin\" downloads files with suspicious extensions like .7z, .asax, or .asp.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or actor_process_file_original_name = \"bitsadmin.exe\") and (action_process_image_command_line contains \" /transfer \" or action_process_image_command_line contains \" /create \" or action_process_image_command_line contains \" /addfile \") and (action_process_image_command_line contains \".7z\" or action_process_image_command_line contains \".asax\" or action_process_image_command_line contains \".ashx\" or action_process_image_command_line contains \".asmx\" or action_process_image_command_line contains \".asp\" or action_process_image_command_line contains \".aspx\" or action_process_image_command_line contains \".bat\" or action_process_image_command_line contains \".cfm\" or action_process_image_command_line contains \".cgi\" or action_process_image_command_line contains \".chm\" or action_process_image_command_line contains \".cmd\" or action_process_image_command_line contains \".dll\" or action_process_image_command_line contains \".gif\" or action_process_image_command_line contains \".jpeg\" or action_process_image_command_line contains \".jpg\" or action_process_image_command_line contains \".jsp\" or action_process_image_command_line contains \".jspx\" or action_process_image_command_line contains \".log\" or action_process_image_command_line contains \".png\" or action_process_image_command_line contains \".ps1\" or action_process_image_command_line contains \".psm1\" or action_process_image_command_line contains \".rar\" or action_process_image_command_line contains \".scf\" or action_process_image_command_line contains \".sct\" or action_process_image_command_line contains \".txt\" or action_process_image_command_line contains \".vbe\" or action_process_image_command_line contains \".vbs\" or action_process_image_command_line contains \".war\" or action_process_image_command_line contains \".wsf\" or action_process_image_command_line contains \".wsh\" or action_process_image_command_line contains \".xll\" or action_process_image_command_line contains \".zip\"))\n\n\n\n"}
{"prompt": "I want to find instances of VisualUiaVerifyNative.exe being used on endpoints as it might indicate evasion techniques.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\VisualUiaVerifyNative\\.exe\" or actor_process_file_original_name = \"VisualUiaVerifyNative.exe\")\n\n\n\n"}
{"prompt": "I want to find macOS processes that are using OSACompile with the -x and -e flags.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"osacompile\" and action_process_image_command_line contains \" -x \" and action_process_image_command_line contains \" -e \")\n\n\n\n"}
{"prompt": "I want to find events where RazerInstaller.exe is running with System privileges and isn't located in the expected Windows Installer directory.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\RazerInstaller\\.exe\" and action_process_integrity_level = \"System\") and  not (action_process_image_path ~= \"C\\:\\\\Windows\\\\Installer\\\\Razer\\\\Installer\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see Duo login alerts when there are multiple failed and successful login attempts from different countries using different devices and browsers.", "response": "dataset = duo_duo_raw\n| filter email not in (null, NULL, \"\"\"\"\"\") and result in (\"success\", \"denied\") and eventtype in (\"authentication\")\n| alter Duo_User_Name = user -> name,\nSrc_IP_Address = access_device -> ip,\nDevice_Trust_Level = adaptive_trust_assessments -> remember_me.trust_level,\nPhoneNumber = auth_device -> name,\nAccDev_Country = access_device -> location.country,\nAccDev_State = access_device -> location.state,\nAccDev_City = access_device -> location.city,\nAccDev_OS = access_device -> os,\nAccDev_OS_Ver = access_device -> os_version,\nAccDev_Browser = access_device -> browser,\nAccDev_Browser_ver = access_device -> browser_version,\nIntegration = application -> name\n| union (dataset = wl_ip_cidrs)\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter (Src_IP_Address != wl_ipv4 and incidr(Src_IP_Address, wl_cidr) = false) and incidr(Src_IP_Address, \"<ip>\") = False and Src_IP_Address not in (\"0.0.0.0\", null, NULL, \"\"\"\"\"\") and AccDev_Country not in (null, NULL, \"\"\"\"\"\")\n| alter AccDevLocationCN = replace(AccDev_Country, \"\\\"\", \"\"),\nDuoUserName = replace(Duo_User_Name, \"\\\"\", \"\"),\nAuth_Success = if(result in (\"success\"), \"success\"),\nAuth_Failed = if(result in (\"denied\"), \"denied\")\n| fields email, Duo_User_Name, Src_IP_Address, Device_Trust_Level,\nIntegration, PhoneNumber, AccDev_Country, AccDev_City,\nAccDev_State, AccDev_OS, AccDev_OS_Ver, AccDev_Browser,\nAccDev_Browser_ver, result, reason, eventtype,\naccess_device, Auth_Failed, Auth_Success, _collector_name,\n_collector_type\n| comp min(_time) as FirstEventTime,\nmax(_time) as LatestEventTime,\ncount(Auth_Failed) as FailureCount,\ncount(Auth_Success) as SuccessCount,\ncount_distinct(result) as Distinct_Results,\ncount_distinct(Src_IP_Address) as Distinct_IPs,\nvalues(Src_IP_Address) as Multiple_IPs,\ncount_distinct(AccDev_Country) as Distinct_Countries,\nvalues(AccDev_Country) as Multiple_Countries,\nvalues(AccDev_OS) as Multiple_OS,\nvalues(AccDev_Browser) as Multiple_Browser,\nvalues(access_device) as Activity_Events by email,\nDuo_User_Name,\nIntegration,\n_product,\n_vendor,\n_collector_name,\n_collector_type addrawdata = true as Activity_Events_Data\n| filter FailureCount > 1 and (Distinct_Results > 1 and Distinct_Countries > 1 and Distinct_IPs > 1) and array_length(Multiple_Countries) >= 2"}
{"prompt": "I want to see a list of successful VPN logins from countries outside our usual business locations, including the username, IP address, and whether it was on a Cisco ASA or Fortinet Fortigate.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw)\n| alter IP = if(_product = \"Fortigate\", xdm.target.ipv4, xdm.source.ipv4)\n| alter Country_DM = if(_product = \"Fortigate\", xdm.target.location.country, xdm.source.location.country)\n| alter Username = if(_product = \"Fortigate\", xdm.target.user.username, xdm.source.user.username)\n| iploc IP loc_country as Country_iploc\n| alter Country = if(Country_DM = null, Country_iploc, Country_DM)\n| filter Country not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Dominican Republic\", \"Denmark\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\")\n| filter (xdm.event.original_event_type contains \"722051\") or (xdm.event.original_event_type contains \"39424\")\n| fields Country, Username, IP, _product\n| view column order = populated"}
{"prompt": "I want to find malicious registry entries that might be abusing Windows telemetry for persistence.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\AppCompatFlags\\\\TelemetryController\\\\.*\" and ((action_registry_value_name ~= \".*\\.sh\" or action_registry_value_name ~= \".*\\.exe\" or action_registry_value_name ~= \".*\\.dll\" or action_registry_value_name ~= \".*\\.bin\" or action_registry_value_name ~= \".*\\.bat\" or action_registry_value_name ~= \".*\\.cmd\" or action_registry_value_name ~= \".*\\.js\" or action_registry_value_name ~= \".*\\.ps\" or action_registry_value_name ~= \".*\\.vb\" or action_registry_value_name ~= \".*\\.jar\" or action_registry_value_name ~= \".*\\.hta\" or action_registry_value_name ~= \".*\\.msi\" or action_registry_value_name ~= \".*\\.vbs\") or (action_registry_data ~= \".*\\.sh\" or action_registry_data ~= \".*\\.exe\" or action_registry_data ~= \".*\\.dll\" or action_registry_data ~= \".*\\.bin\" or action_registry_data ~= \".*\\.bat\" or action_registry_data ~= \".*\\.cmd\" or action_registry_data ~= \".*\\.js\" or action_registry_data ~= \".*\\.ps\" or action_registry_data ~= \".*\\.vb\" or action_registry_data ~= \".*\\.jar\" or action_registry_data ~= \".*\\.hta\" or action_registry_data ~= \".*\\.msi\" or action_registry_data ~= \".*\\.vbs\")))\n\n\n\n"}
{"prompt": "I want to see Azure activity logs that show guest users being invited to our tenant by non-approved invitees.", "response": "dataset = msft_azure_raw\n| alter properties_category = json_extract_scalar(properties , \"$.category\")\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| alter properties_initiatedBy = json_extract_scalar(properties , \"$.initiatedBy\")\n| filter (properties.category = \"UserManagement\" and properties.operationName = \"Invite external user\") and  not (properties.initiatedBy contains \"<approved guest inviter use OR for multiple>\")\n\n\n\n"}
{"prompt": "I want to find instances of non-admin users creating or deleting security groups on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4764\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"PAM_windows\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see AWS SecurityHub findings related to evasion techniques.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"securityhub.amazonaws.com\" and eventName in (\"BatchUpdateFindings\", \"DeleteInsight\", \"UpdateFindings\", \"UpdateInsight\"))\n\n\n\n"}
{"prompt": "I want to find events where PowerShell is used to add the OpenSSH capability to Windows.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Add-WindowsCapability \" and ScriptBlockText contains \"-Name OpenSSH.\")\n\n\n\n"}
{"prompt": "I want to detect potential PowerShell execution from a DLL instead of a regular PowerShell process.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\InstallUtil\\.exe\" or action_process_image_path ~= \".*\\\\RegAsm\\.exe\" or action_process_image_path ~= \".*\\\\RegSvcs\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\") or actor_process_file_original_name in (\"InstallUtil.exe\", \"RegAsm.exe\", \"RegSvcs.exe\", \"REGSVR32.EXE\", \"RUNDLL32.EXE\")) and (action_process_image_command_line contains \"Default.GetString\" or action_process_image_command_line contains \"DownloadString\" or action_process_image_command_line contains \"FromBase64String\" or action_process_image_command_line contains \"ICM \" or action_process_image_command_line contains \"IEX \" or action_process_image_command_line contains \"Invoke-Command\" or action_process_image_command_line contains \"Invoke-Expression\"))\n\n\n\n"}
{"prompt": "I want to find instances where someone has disabled Windows Security Center notifications by modifying registry settings.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*Windows\\\\CurrentVersion\\\\ImmersiveShell\\\\UseActionCenterExperience\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to find instances where AutoIt3.exe is executed from suspicious processes, potentially indicating a DarkGate infection.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\Autoit3\\.exe\" or actor_process_file_original_name = \"AutoIt3.exe\") and (actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\KeyScramblerLogon\\.exe\" or actor_process_image_path ~= \".*\\\\msiexec\\.exe\")) and  not ((action_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\AutoIt3\\\\AutoIt3\\.exe\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\AutoIt3\\\\AutoIt3\\.exe\"))\n\n\n\n"}
{"prompt": " I want to find instances where users simultaneously access both LAN and VPN connectivity, which suggests potential password sharing or compromise. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| sort asc _time\n| bin _time span = 5m\n| filter xdm.event.id in (\"4624\")\n| filter xdm.source.user.username not in (\"ANONYMOUS LOGON\") and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\"\n| join type = left\n(dataset = enterprise_platform_static_list\n| fields ip_address, platform_type\n| filter platform_type not in (\"ad_ip\", \"exchange_ip\", \"is_ip\")\n) as ent_platform ent_platform.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset in (enterprise_admin_list)\n| filter admin_type = \"fin_user\"\n) as ent_admin_dst ent_admin_dst.username = xdm.source.user.username\n| filter username != null\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_ips incidr(xdm.source.ipv4, vpn_ips.cidr_range)\n| alter pattern = if(cidr_range != null, \"E1\", \"E2\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, pattern\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\nlist(pattern) as pattern_events,\ncount() as matched_events by xdm.target.user.username,\n_time\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events ~= \"E1,E2\"\n| alter aggregation_criteria = \"ilsourceip\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 500)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see if IMEWDBLD.EXE is initiating any network connections.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (Initiated = \"true\" and actor_process_image_path ~= \".*\\\\IMEWDBLD\\.exe\")\n\n\n\n"}
{"prompt": " I want to see events related to CobaltStrike using malformed User Agents in malleable profiles. ", "response": "datamodel\n| filter (xdm.network.http.browser in (\"Mozilla/4.0 (compatible; MSIE 6.0;Windows NT 5.1)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.1; WOW64; Trident/4.0; SLCC2; .NET CLR 3.0.30729; .NET4.0C; .NET4.0E )\", \"Mozilla/5.0 (Windows; U; MSIE 7.0; Windows NT 5.2) Java/1.5.0_08\") or xdm.network.http.browser ~= \".*\\;\\ MANM\\;\\ MANM\\)\")\n\n\n\n"}
{"prompt": "I want to see events related to attackers bypassing PowerShell restrictions using SyncAppvPublishingServer.exe.", "response": "preset = xdr_event_log\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter ContextInfo contains \"SyncAppvPublishingServer.exe\"\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to VMwareToolBoxCmd.EXE that might be used for persistence by attackers.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\VMwareToolBoxCmd\\.exe\" or actor_process_file_original_name = \"toolbox-cmd.exe\") and (action_process_image_command_line contains \" script \" and action_process_image_command_line contains \" set \") and (action_process_image_command_line ~= \".*\\:\\\\PerfLogs\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\"))\n\n\n\n"}
{"prompt": "I want to see alerts when there are more than two proxy authentication connection retry attempts on Cisco Catalyst routers within a six-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 6m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"AP-1-AUTH_PROXY_RETRIES_EXCEEDED\", \"AP-1-AUTH_PROXY_RETRIES_EXCEEDED:01\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 2\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 2)), 1)"}
{"prompt": "I want to see detections related to base64 decoding on macOS endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path = \"/usr/bin/base64\" and action_process_image_command_line contains \"-d\")\n\n\n\n"}
{"prompt": "I want to find instances of malware using MSDT.EXE with diagcab files on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\msdt\\.exe\" or actor_process_file_original_name = \"msdt.exe\") and (action_process_image_command_line contains \" /cab\" or action_process_image_command_line contains \" -cab\"))\n\n\n\n"}
{"prompt": "I want to find events where an attacker is changing the user agent with Invoke-WebRequest.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Invoke-WebRequest\" and ScriptBlockText contains \"-UserAgent \")\n\n\n\n"}
{"prompt": "I want to see alerts about when someone stops a Windows service using sc.exe.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"sc.exe\" or action_process_image_path ~= \".*\\\\sc\\.exe\") and action_process_image_command_line contains \" stop \")\n\n\n\n"}
{"prompt": "I want to see alerts for processes using createdump.exe that might be malicious, especially if they have specific command line arguments like -u, --full, -f, --name, or .dmp.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\createdump\\.exe\" or actor_process_file_original_name = \"FX_VER_INTERNALNAME_STR\") and (action_process_image_command_line contains \" -u \" or action_process_image_command_line contains \" --full \" or action_process_image_command_line contains \" -f \" or action_process_image_command_line contains \" --name \" or action_process_image_command_line contains \".dmp \"))\n\n\n\n"}
{"prompt": "I want to see PowerShell events that use the \"Get-Clipboard\" command and extract the clipboard content.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter Payload contains \"Get-Clipboard\"\n\n\n\n"}
{"prompt": "I want to find potential backdoors created by users in Active Directory using event logs.", "response": "preset = xdr_event_log\n| alter AllowedToDelegateTo = regextract(to_json_string(action_evtlog_data_fields)->AllowedToDelegateTo{}, \"\\\"(.*)\\\"\")\n| alter AttributeLDAPDisplayName = regextract(to_json_string(action_evtlog_data_fields)->AttributeLDAPDisplayName{}, \"\\\"(.*)\\\"\")\n| alter ObjectClass = regextract(to_json_string(action_evtlog_data_fields)->ObjectClass{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4738 and  not (AllowedToDelegateTo in (\"\", \"-\") or AllowedToDelegateTo = \"None\")) or ((action_evtlog_event_id = 5136 and AttributeLDAPDisplayName = \"msDS-AllowedToDelegateTo\") or (action_evtlog_event_id = 5136 and ObjectClass = \"user\" and AttributeLDAPDisplayName = \"servicePrincipalName\") or (action_evtlog_event_id = 5136 and AttributeLDAPDisplayName = \"msDS-AllowedToActOnBehalfOfOtherIdentity\"))\n\n\n\n"}
{"prompt": "I want to see processes that launch an interactive bash shell and exhibit suspicious behavior like importing files, using base64 encoding, or interacting with tools like nc/netcat.", "response": "preset = xdr_process\n| filter actor_process_image_command_line = \"bash -i\" and ((action_process_image_command_line contains \"-c import \" or action_process_image_command_line contains \"base64\" or action_process_image_command_line contains \"pty.spawn\") or (action_process_image_path ~= \".*whoami\" or action_process_image_path ~= \".*iptables\" or action_process_image_path ~= \".*\\/ncat\" or action_process_image_path ~= \".*\\/nc\" or action_process_image_path ~= \".*\\/netcat\"))\n\n\n\n"}
{"prompt": "I want to find multiple authorization failures from Cisco ACS logs within a 5-minute window.", "response": "config case_sensitive = false\n\n| datamodel dataset = cisco_acs_raw\n| sort asc _time\n| bin _time span = 5m\n\n| alter device_ip = cisco_acs_raw._final_reporting_device_ip\n| filter xdm.event.id IN (\"11023\", \"11026\", \"11025\", \"13025\", \"15039\", \"3010\", \"3304\", \"5403\", \"5407\", \"5408\", \"5409\", \"5410\", \"5417\", \"5422\", \"5423\", \"5434\", \"5436\", \"11019\", \"11024\", \"11225\", \"13000\", \"51004\") AND xdm.source.user.username != NULL AND xdm.source.ipv4 NOT IN (\"<ip>\")\n| alter server_name = arrayindex(regextract(cisco_acs_raw._raw_log, \"\\d+\\:\\d+\\:\\d+\\s([^\\s]+)\"), 0),\nec_activity = \"Logon\",\nec_subject = \"User\",\nevent_type = arrayindex(regextract(cisco_acs_raw._raw_log, \"Type=([^\\\\,]+)\"), 0),\nreference_id = arrayindex(regextract(cisco_acs_raw._raw_log, \"<\\d+>\\w+\\s*\\d+\\s\\d+:\\d+:\\d+\\s[\\S]+\\s\\w+\\s(\\d+)\"), 0)\n| fields xdm.observer.action, server_name, xdm.event.type,\nxdm.source.ipv4, xdm.target.ipv4, xdm.source.port,\nxdm.target.port, xdm.source.user.username, _product,\n_vendor, device_ip, ec_activity, ec_subject, event_type,\nxdm.intermediate.ipv4, xdm.network.session_id, xdm.event.description,\nxdm.event.id, xdm.network.application_protocol, xdm.alert.description,\nxdm.event.outcome, xdm.source.ipv4, _time, xdm.source.host.hostname,\nxdm.target.host.hostname, reference_id\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.source.user.username,\nxdm.source.ipv4,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria1 = \"ildestinationuser\",\naggregation_criteria2 = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to see alerts about excessive SSH traffic coming from external IPs to our DMZ servers over the last 5 minutes.", "response": "config case_sensitive = false\n| datamodel dataset = check_point_vpn_1_firewall_1_raw\n| bin _time span = 5m\n| iploc xdm.source.ipv4 loc_asn_org\n| filter xdm.target.port = 22 and xdm.observer.action = \"accept\" and xdm.source.is_internal_ip = false and loc_asn_org !~= \"<org>\" and xdm.source.ipv4 not in (\"<ip>\") and xdm.source.ipv4 !~= \"103\\.75\\.173\\.[0-9]{1,3}\" and check_point_vpn_1_firewall_1_raw._final_reporting_device_ip != \"<ip>\"\n| alter result = null,\nuser_agent = null,\nos_edition = null\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.target.ipv4) as dst_ip,\nvalues(xdm.source.port) as src_port,\nvalues(xdm.target.port) as dst_port,\nvalues(xdm.observer.action) as action,\nvalues(xdm.target.user.username) as username,\nvalues(xdm.target.host.hostname) as hostname,\nvalues(check_point_vpn_1_firewall_1_raw.origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\ncount() as matched_events by _time,\nxdm.source.ipv4\n| filter matched_events >= 5\n\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances where Volume Snapshot functionality is disabled on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\Services\\\\VSS\\\\Diag\" and action_process_image_command_line contains \"/d Disabled\")\n\n\n\n"}
{"prompt": "I want to see events related to changes in PAM access management, including group modifications and user additions/removals.  I'm particularly interested in cases where users are added to high-privilege groups, as this could indicate a privilege escalation attempt.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.target.user.groups ~= \"^pam\" and xdm.target.user.groups not in (\"pampers_all\", \"pampers_qa_chd\") and xdm.target.user.groups != null\n| alter xdm.target.user.username = trim(arrayindex(regextract(xdm.event.description, \"Account Name:\\t\\tCN=([^,]+)\"), 0))\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of potential credential dumping via WER by identifying processes that match specific criteria like the use of \"WerFault.exe\" and unusual command line arguments.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\Werfault\\.exe\" or actor_process_file_original_name = \"WerFault.exe\") and ((actor_effective_username contains \"AUTHORI\" or actor_effective_username contains \"AUTORI\") and (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\") and (action_process_image_command_line contains \" -u -p \" and action_process_image_command_line contains \" -ip \" and action_process_image_command_line contains \" -s \"))) and  not (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\lsass.exe\")\n\n\n\n"}
{"prompt": "I want to detect attempts to disable internal Windows tools and features through registry modifications.", "response": "preset = xdr_registry\n| filter (((action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\StartMenuLogOff\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\DisableChangePassword\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\DisableLockWorkstation\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\DisableRegistryTools\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\DisableTaskmgr\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\NoDispBackgroundPage\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\NoDispCPL\" or action_registry_key_name ~= \".*SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\Explorer\\\\DisableNotificationCenter\" or action_registry_key_name ~= \".*SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\System\\\\DisableCMD\") and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\")) or ((action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\ConsentPromptBehaviorAdmin\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\shutdownwithoutlogon\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\PushNotifications\\\\ToastEnabled\" or action_registry_key_name ~= \".*SYSTEM\\\\CurrentControlSet\\\\Control\\\\Storage\\\\Write\\ Protection\" or action_registry_key_name ~= \".*SYSTEM\\\\CurrentControlSet\\\\Control\\\\StorageDevicePolicies\\\\WriteProtect\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\")))\n\n\n\n"}
{"prompt": "I want to find instances of Trust Access Disable For VBApplications, which is an evasion technique that modifies registry settings related to VBOM access.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Security\\\\AccessVBOM\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to detect PowerShell commands that use Expand-Archive for decompression.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter Payload contains \"Expand-Archive\"\n\n\n\n"}
{"prompt": "I want to see alerts for any modifications or deletions made to Azure Key Vaults.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.KEYVAULT/VAULTS/WRITE\", \"MICROSOFT.KEYVAULT/VAULTS/DELETE\", \"MICROSOFT.KEYVAULT/VAULTS/DEPLOY/ACTION\", \"MICROSOFT.KEYVAULT/VAULTS/ACCESSPOLICIES/WRITE\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to Azure Browser SSO abuse on my Windows machines.", "response": "preset = xdr_image_load\n| filter action_module_path = \"C:\\\\Windows\\\\System32\\\\MicrosoftAccountTokenProvider.dll\" and  not (((actor_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\") and actor_process_image_path ~= \".*\\\\BackgroundTaskHost\\.exe\")) and  not (((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Visual\\ Studio\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Visual\\ Studio\\\\.*\") and actor_process_image_path ~= \".*\\\\IDE\\\\devenv\\.exe\") or actor_process_image_path in (\"C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe\", \"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\") or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\.*\" or actor_process_image_path ~= \".*\\\\WindowsApps\\\\MicrosoftEdge\\.exe\" or actor_process_image_path in (\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\", \"C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\")) or ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeCore\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\\\EdgeCore\\\\.*\") and (actor_process_image_path ~= \".*\\\\msedge\\.exe\" or actor_process_image_path ~= \".*\\\\msedgewebview2\\.exe\")) or actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\OneDrive\\.exe\" or actor_process_image_path = \"None\")\n\n\n\n"}
{"prompt": "I want to find users who are downloading unusually large amounts of data today compared to their average weekly download.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and host_dst !~= \"microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|youtube.com|ttech.service-now.com|supportportal.simcorp.com|anchor-ressol-dev.crm11.dynamics.com.mcas.ms\"\n| comp sum(bytes_src) as current_day_download,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and host_dst !~= \"microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|youtube.com|ttech.service-now.com|supportportal.simcorp.com|anchor-ressol-dev.crm11.dynamics.com.mcas.ms\"\n| alter day = extract_time(_time, \"DAYOFWEEK\")\n| comp sum(bytes_src) as 7_days_download,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_download) as 7_days_download_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter 7_days_download_avg > 90000000 and current_day_download > multiply(7_days_download_avg, 3)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find PowerShell scripts that create SMB mappings using QUIC transport.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"New-SmbMapping\" and ScriptBlockText contains \"-TransportType QUIC\")\n\n\n\n"}
{"prompt": "I want to see if there have been unusually high numbers of password resets on my Windows machines within the last 5 minutes.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4724\") and xdm.target.user.username != \"CLIUSR\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip\n| comp earliest(_time) as FirstEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.source.user.username\n| filter matched_events >= 500\n| alter aggregation_criteria = \"ilsourceuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 500)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances of hidden local user accounts being created on Windows systems through registry events.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SAM\\\\SAM\\\\Domains\\\\Account\\\\Users\\\\Names\\\\.*\" and action_registry_key_name ~= \".*\\$\" and actor_process_image_path ~= \".*\\\\lsass\\.exe\")\n\n\n\n"}
{"prompt": "I want to see a list of events where there have been at least 100 account lockouts within a short timeframe, along with details about each event and the source host.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4740\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.event.id\n| filter matched_events >= 100\n| alter aggregation_criteria = \"ibpmhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see all access denied events for high profile users logging into the Infosys network, especially those with error code 0xc000015b or event ID 4825.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| filter ((xdm.event.id IN (\"4625\") and xdm.logon.type = \"RemoteInteractive\" and error_code = \"0xc000015b\") or xdm.event.id IN (\"4825\"))\n| alter target_username = if(xdm.event.id IN (\"4825\"), arrayindex(regextract(xdm.event.description, \"User Name:\\t([^\\n]+)\"), 0), xdm.target.user.username)\n| alter target_username = if(target_username ~= \"@ad.infosys.com\", rtrim(target_username, \"@ad.infosys.com\"), if(target_username ~= \"@infosys.com\", rtrim(target_username, \"@infosys.com\"), if(target_username ~= \"itlinfosys\", ltrim(target_username, \"itlinfosys\\\\\"), target_username)))\n| alter xdm.source.ipv4 = if(xdm.source.ipv4 = null, trim(arrayindex(regextract(xdm.event.description, \"Client Address:\\s([^\\n]+)\"), 0)), xdm.source.ipv4)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_username\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type in (\"av_admin\", \"azure_cloud_admin\", \"bluecoat_admin\", \"byod_admin\", \"dmz_owner\", \"firewall_admin\", \"ilms_admin\", \"is_fusion_admin\", \"isg_qualys_admin\", \"nas_l1_admin\", \"nas_l1_l2_admin\", \"nas_l1_l2_l3_admin\", \"nas_l1_l3_admin\", \"nas_l2_admin\", \"nas_l2_l3_admin\", \"nas_l3_admin\", \"netscaler_admin\", \"netw,k_admin\", \"netw,k_ipt_admin\", \"nips_admin\", \"sccm_admin\", \"securid_admin\", \"sharepoint_admin\", \"unixr1_admin\", \"unixr2_admin\", \"win_accop\", \"win_admin\", \"win_admin_accop\", \"tier1_admin\") or security_groups contains \"tier1users\"\n) as ent_admin_dst ent_admin_dst.username = target_username or ent_admin_dst.sam_account_name = target_username\n| Filter username != null\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see information about processes on endpoints that use ESXCLI to retrieve network configurations.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/esxcli\" and action_process_image_command_line contains \"network\") and (action_process_image_command_line contains \" get\" or action_process_image_command_line contains \" list\"))\n\n\n\n"}
{"prompt": "I want to see Azure security rule deletions that happened recently, including details about who deleted them and what rules were affected.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see network connections initiated by Office applications using unusual ports.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (Initiated = \"true\" and (actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\wordview\\.exe\")) and  not ((action_local_port in (53, 80, 139, 443, 445) or action_remote_port in (53, 80, 139, 443, 445)) or (actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\.*\" and actor_process_image_path ~= \".*\\\\OUTLOOK\\.EXE\" and (action_local_port in (465, 587, 993, 995) or action_remote_port in (465, 587, 993, 995))))\n\n\n\n"}
{"prompt": "I want to see all instances where Python initiated a network connection, excluding connections made between local processes or those initiated by conda updates or Jupyter Notebook.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (Initiated = \"true\" and actor_process_image_path contains \"python\") and  not (((action_local_ip = \"127.0.0.1\" or action_remote_ip = \"127.0.0.1\") and (action_local_ip = \"127.0.0.1\" or action_remote_ip = \"127.0.0.1\"))) and  not ((causality_actor_process_image_path = \"C:\\\\ProgramData\\\\Anaconda3\\\\Scripts\\\\conda.exe\" and (actor_process_image_command_line contains \":\\\\ProgramData\\\\Anaconda3\\\\Scripts\\\\conda-script.py\" and actor_process_image_command_line contains \"update\")) or (causality_actor_process_image_path = \"C:\\\\ProgramData\\\\Anaconda3\\\\python.exe\" and actor_process_image_command_line contains \"C:\\\\ProgramData\\\\Anaconda3\\\\Scripts\\\\jupyter-notebook-script.py\"))\n\n\n\n"}
{"prompt": "I want to find instances of malicious files being downloaded using Bitsadmin to unusual locations on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or actor_process_file_original_name = \"bitsadmin.exe\") and (action_process_image_command_line contains \" /transfer \" or action_process_image_command_line contains \" /create \" or action_process_image_command_line contains \" /addfile \") and (action_process_image_command_line contains \"%AppData%\" or action_process_image_command_line contains \"%temp%\" or action_process_image_command_line contains \"%tmp%\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see events where the Windows Eventlog has been cleared on endpoints, excluding common log channels like PowerShell and Security.", "response": "preset = xdr_event_log\n| alter Channel = regextract(to_json_string(action_evtlog_data_fields)->Channel{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 104 and provider_name = \"Microsoft-Windows-Eventlog\") and  not (Channel in (\"Microsoft-Windows-PowerShell/Operational\", \"Microsoft-Windows-Sysmon/Operational\", \"PowerShellCore/Operational\", \"Security\", \"System\", \"Windows PowerShell\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to processes using lodctr.exe to rebuild performance counter values.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\lodctr\\.exe\" and actor_process_file_original_name = \"LODCTR.EXE\") and action_process_image_command_line contains \" -r\")\n\n\n\n"}
{"prompt": "I want to see changes made to SOX AD groups, including the action taken, username involved, and target group name.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter _collector_type = \"XDR Collector\"\n| filter event_id in (4728, 4729, 632, 633)\n| alter TargetGroupName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName,\nSubjectUserName = event_data -> SubjectUserName,\nAction = regextract(message, \"(.*)\\n\\nSubject:\"),\nTargetUserName = User -> name\n| alter Username = concat(TargetDomainName, \"\\\", TargetGroupName)\n| filter Username in (\"NA\\SEC_Server_Admin_Access\", \"NA\\Global Service Accounts\", \"NA\\SEC_Server_Admin_NA\", \"NA\\SEC_APS_SA\", \"NA\\CVG_eStart_Production_Support\", \"NA\\Domain Admins\", \"NA\\ML.BI.DBAs\", \"NA\\Sec_EDW_Prod_Suppt\", \"NA\\Sec_EDW_Dev\", \"NA\\DCS_OSG_NBU\", \"NA\\SEC_SOX_Compliance\", \"NA\\NA-DBA\", \"CONVERGYS\\Elevated_Server Managers\", \"\\Domain Admins\", \"\\Server Team India\", \"\\CNX_GRP_IND_RTASQLUSERS\", \"\\SEC.Global.Windows.Server.Admin\", \"\\grp_sec_rakija_operators\", \"\\Cnx_Grp_Ind_MTP_Payroll_APIServer_Access\", \"\\SQLDBAGLOBAL\", \"\\Amer Server Admins\", \"\\Grp_US_Sec_Aps_SA\", \"\\grp_sec_jpsupport\", \"\\grp_usa_it_manage_computers\", \"\\SGP-SAGE-Admin\", \"\\emea_serverteam\", \"\\MIG_na_Sec_EDW_Prod_Suppt\", \"\\seg_grp_bi_sql_admins\", \"\\Sec_UDW_Dev\", \"\\Sec_UDW_Prod_Support\", \"\\grp_cnx_all_it_Bomgar\", \"\\grp_cnx_can_it_operations_admin\", \"\\grp_cnx_usa_az_it_system_admin\", \"\\grp_cnx_usa_sc_gvl_backup_admin\", \"\\US Network Server Team\", \"\\emea-bmc-svc\") and SubjectUserName !~= \"\\$$\"\n| fields Action, Username, SubjectUserName, TargetUserName"}
{"prompt": "I want to see details about CyberArk Safe Changes for specific reference IDs, excluding activity from IP address 10.64.103.83.", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_src = xdm.target.user.username,\nuser_dst = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station != \"10.64.103.83\" and device_ip not in (\"10.64.103.83\")\n| filter reference_id in (142, 145, 148, 149, 150, 185, 183, 181)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where the \"rmdir\" command is used on endpoints to potentially delete directories and cover tracks.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and action_process_image_command_line contains \"rmdir\" and (action_process_image_command_line contains \"/s\" or action_process_image_command_line contains \"/q\"))\n\n\n\n"}
{"prompt": "I want to see detections of processes copying files to or from admin shares or Sysvol folders.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\\\\\*$\" or action_process_image_command_line ~= \".*\\\\Sysvol\\\\.*\") and (((action_process_image_path ~= \".*\\\\robocopy\\.exe\" or action_process_image_path ~= \".*\\\\xcopy\\.exe\") or actor_process_file_original_name in (\"robocopy.exe\", \"XCOPY.EXE\")) or ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and action_process_image_command_line contains \"copy\") or (((action_process_image_path contains \"\\\\powershell.exe\" or action_process_image_path contains \"\\\\pwsh.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"copy-item\" or action_process_image_command_line contains \"copy \" or action_process_image_command_line contains \"cpi \" or action_process_image_command_line contains \" cp \" or action_process_image_command_line contains \"move \" or action_process_image_command_line contains \"move-item\" or action_process_image_command_line contains \" mi \" or action_process_image_command_line contains \" mv \")))\n\n\n\n"}
{"prompt": "I want to detect attempts to deny service access by tampering with security descriptors using sc.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sc\\.exe\" or actor_process_file_original_name = \"sc.exe\") and (action_process_image_command_line contains \"sdset\" and action_process_image_command_line contains \"D;\") and (action_process_image_command_line contains \";IU\" or action_process_image_command_line contains \";SU\" or action_process_image_command_line contains \";BA\" or action_process_image_command_line contains \";SY\" or action_process_image_command_line contains \";WD\"))\n\n\n\n"}
{"prompt": " I want to see PowerShell scripts that have been installed as services on my endpoints. ", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \"powershell\" or actor_process_image_path contains \"pwsh\"))\n\n\n\n"}
{"prompt": " I want to see alerts when there are 10 or more object deletions by admins within a 5 minute window, specifically those not from known internal accounts like 'localhost', 'fwadmin', etc., and who belong to the \"INTEG-Nsec-PRVDR1\" security group. ", "response": "config case_sensitive = false\n| dataset in (check_point_smartconsole_raw, check_point_smartview_tracker_raw, check_point_query_database_raw, check_point_smartdashboard_raw, check_point_license_mgmt_raw, check_point_cli_raw, check_point_web_ui_raw, check_point_web_api_raw)\n| bin _time span = 5m\n| filter operation = \"Delete Object\" and administrator not in (\"localhost\", \"fwadmin\", \"smartupdate\", \"system\") and _final_reporting_device_ip != \"10.67.122.132\"\n| join\n(preset = ad_users\n| fields security_identifier, full_user_name, security_group_list,\ndisplay_name, sam_account_name, member_of\n) as cieusers administrator = cieusers.sam_account_name\n| filter security_group_list contains \"INTEG-Nsec-PRVDR1\" or member_of contains \"INTEG-Nsec-PRVDR1\"\n| alter user_agent = null,\nos_edition = null,\nsrc_port = null,\ndst_port = null,\nhostname = arrayindex(regextract(originsicname, \"o\\=([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(src_port) as src_port,\nvalues(dst_port) as dst_port,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(hostname) as hostname,\nvalues(additional_info) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\ncount() as matched_events by _time,\nadministrator\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find potential exploitation indicators for CVE-2023-27997 in Frotigate weblogs.", "response": "datamodel\n| filter ((xdm.network.http.method in (\"GET\", \"POST\") and (xdm.network.http.url contains \"/remote/hostcheck_validate\" or xdm.network.http.url contains \"/remote/logincheck\")) and _raw_log contains \"enc=\")\n\n\n\n"}
{"prompt": "I want to find instances where an unsigned image has been loaded into the LSASS process.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\lsass\\.exe\" and actor_process_signature_status = \"false\")\n\n\n\n"}
{"prompt": "I want to monitor for potential malicious use of Wuauclt.exe by checking for specific command line arguments that indicate Lolbas execution.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"wuauclt.exe\" and action_process_image_command_line contains \"/UpdateDeploymentProvider\" and action_process_image_command_line contains \"/Runhandlercomserver\") and  not ((action_process_image_command_line contains \"wuaueng.dll\" or action_process_image_command_line contains \"UpdateDeploymentProvider.dll /ClassId\"))\n\n\n\n"}
{"prompt": "I want to find instances where NTDS.DIT is created by processes that aren't typical system or application processes.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\ntds\\.dit\" and ((xdm.source.process.name ~= \".*\\\\cscript\\.exe\" or xdm.source.process.name ~= \".*\\\\httpd\\.exe\" or xdm.source.process.name ~= \".*\\\\nginx\\.exe\" or xdm.source.process.name ~= \".*\\\\php\\-cgi\\.exe\" or xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\" or xdm.source.process.name ~= \".*\\\\w3wp\\.exe\" or xdm.source.process.name ~= \".*\\\\wscript\\.exe\") or (xdm.source.process.name contains \"\\\\apache\" or xdm.source.process.name contains \"\\\\tomcat\" or xdm.source.process.name ~= \".*\\\\AppData\\\\.*\" or xdm.source.process.name ~= \".*\\\\Temp\\\\.*\" or xdm.source.process.name ~= \".*\\\\Public\\\\.*\" or xdm.source.process.name ~= \".*\\\\PerfLogs\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see events where processes modify Group Policy settings using reg.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and action_process_image_command_line contains \"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\System\" and (action_process_image_command_line contains \"GroupPolicyRefreshTimeDC\" or action_process_image_command_line contains \"GroupPolicyRefreshTimeOffsetDC\" or action_process_image_command_line contains \"GroupPolicyRefreshTime\" or action_process_image_command_line contains \"GroupPolicyRefreshTimeOffset\" or action_process_image_command_line contains \"EnableSmartScreen\" or action_process_image_command_line contains \"ShellSmartScreenLevel\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential DLL sideloading using Coregen.exe based on Windows Event Log data.", "response": "preset = xdr_image_load\n| filter actor_process_image_path ~= \".*\\\\coregen\\.exe\" and  not ((action_module_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Silverlight\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Silverlight\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts about when guest accounts are enabled on macOS systems using sysadminctl.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/sysadminctl\" and (action_process_image_command_line contains \" -guestAccount\" and action_process_image_command_line contains \" on\"))\n\n\n\n"}
{"prompt": "I want to see alerts about Azure account lockouts.", "response": "dataset = msft_azure_raw\n| alter properties_resultType = json_extract_scalar(properties , \"$.resultType\")\n| filter properties.resultType = 50053\n\n\n\n"}
{"prompt": "I want to see alerts for SecurityXploded activity on my endpoints, specifically looking for process creation with signatures from that tool or any files named \"PasswordDump.exe\".", "response": "preset = xdr_process\n| filter (action_process_signature_vendor = \"SecurityXploded\" or action_process_image_path ~= \".*PasswordDump\\.exe\" or actor_process_file_original_name ~= \".*PasswordDump\\.exe\")\n\n\n\n"}
{"prompt": "I want to see all events where Windows Defender deleted malware history.", "response": "datamodel\n| filter xdm.event.id = 1013\n\n\n\n"}
{"prompt": "I want to see detections for processes on endpoints that access credentials from macOS Keychain using commands like \"find-certificate\", \"export\", \"dump-keychain\", or \"login-keychain\".", "response": "preset = xdr_process\n| filter ((action_process_image_path = \"/usr/bin/security\" and (action_process_image_command_line contains \"find-certificate\" or action_process_image_command_line contains \" export \")) or (action_process_image_command_line contains \" dump-keychain \" or action_process_image_command_line contains \" login-keychain \"))\n\n\n\n"}
{"prompt": "I want to find alerts about Atlassian Bitbucket Command Injection attacks using archive APIs.", "response": "datamodel\n| filter (xdm.network.http.url contains \"/rest/api/latest/projects/\" and xdm.network.http.url contains \"prefix=\" and xdm.network.http.url contains \"%00--exec\")\n\n\n\n"}
{"prompt": " I want to detect suspicious downloads happening via Certutil.exe that use URLs. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_file_original_name = \"CertUtil.exe\") and (action_process_image_command_line contains \"urlcache \" or action_process_image_command_line contains \"verifyctl \") and action_process_image_command_line contains \"http\")\n\n\n\n"}
{"prompt": "I want to see events where users log in from unmanaged VPN connections, specifically focusing on instances where they use home editions of operating systems.", "response": "dataset = check_point_connectra_raw\n| filter act != \"Log In\" and lowercase(os_edition) contains \"home\" and duser != null and _final_reporting_device_ip != \"<ip>\"\n| alter hostname = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), duser))\n| alter user_dst = if(user_dst ~= \"<org>\\n\", concat(\"n\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), if(user_dst ~= \"<org>\\r\", concat(\"r\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)))\n| alter action = act,\nsource_port = spt,\ndest_port = dpt,\norigin = origin,\nsource_ip = src,\ndest_ip = host_ip,\nresult = outcome,\nuser_agent = requestClientApplication,\nos_edition = os_edition,\nproduct = _product,\ntime = _time,\naggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to Advanced IP Scanner on Windows.", "response": "datamodel\n| filter xdm.target.file.filename contains \"\\\\AppData\\\\Local\\\\Temp\\\\Advanced IP Scanner 2\"\n\n\n\n"}
{"prompt": "I want to find instances of suspicious Esentutl activity on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" /vss \" and action_process_image_command_line contains \" /y \")\n\n\n\n"}
{"prompt": "I want to find events where users or processes are trying to list out shared SMB drives.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"get-smbshare\"\n\n\n\n"}
{"prompt": "I want to find malicious processes that use MSHTA for obfuscation and execute VBScript code.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"set\" and action_process_image_command_line contains \"&&\" and action_process_image_command_line contains \"mshta\" and action_process_image_command_line contains \"vbscript:createobject\" and action_process_image_command_line contains \".run\" and action_process_image_command_line contains \"(window.close)\")\n\n\n\n"}
{"prompt": "I want to see events related to Windows Defender Real-time Protection being disabled.", "response": "datamodel\n| filter xdm.event.id = 5001\n\n\n\n"}
{"prompt": "I want to see if any new root certificates have been installed on endpoints using CertMgr.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\CertMgr\\.exe\" or actor_process_file_original_name = \"CERTMGT.EXE\") and (action_process_image_command_line contains \"/add\" and action_process_image_command_line contains \"root\"))\n\n\n\n"}
{"prompt": "I want to see events related to processes that might be trying to bypass User Account Control (UAC) by using the TrustedPath mechanism.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*C\\:\\\\Windows\\ \\\\System32\\\\.*\"\n\n\n\n"}
{"prompt": " I want to see events where Rundll32 is executed without any command-line parameters. ", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*\\\\rundll32\\.exe\" or action_process_image_command_line ~= \".*\\\\rundll32\\.exe\\\"\" or action_process_image_command_line ~= \".*\\\\rundll32\") and  not ((actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\.*\" or actor_process_image_path ~= \".*\\\\Microsoft\\\\Edge\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see details about AWS Admin Get Emergency Access Token events from Amazon AWS.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| alter arn = message -> userIdentity.arn,\neventName = message -> eventName,\nsourceIPAddress = message -> sourceIPAddress,\nprincipalId = message -> userIdentity.principalId,\naccountId = message -> userIdentity.accountId,\ncreationDate = message -> userIdentity.sessionContext.attributes.creationDate,\neventTime = message -> eventTime\n| filter eventName = \"AdminGetEmergencyAccessToken\"\n| fields _vendor, _product, creationDate, eventTime, eventName,\narn, sourceIPAddress, accountId, principalId"}
{"prompt": "I want to detect PowerShell commands used to add firewall rules with an \"Allow\" action.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"New-NetFirewallRule \" and action_process_image_command_line contains \" -Action \" and action_process_image_command_line contains \"allow\"))\n\n\n\n"}
{"prompt": "I want to find potential Dridex activity based on process creation patterns.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\svchost\\.exe\" and (action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\")) and  not (actor_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\")) or ((actor_process_image_path ~= \".*\\\\excel\\.exe\" and action_process_image_path ~= \".*\\\\regsvr32\\.exe\" and (action_process_image_command_line contains \" -s \" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\")) and  not (action_process_image_command_line contains \".dll\")) or (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and ((action_process_image_path ~= \".*\\\\whoami\\.exe\" and action_process_image_command_line contains \" /all\") or ((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") and action_process_image_command_line contains \" view\")))\n\n\n\n"}
{"prompt": "I want to find indicators of an attack that bypasses User Account Control (UAC) by modifying registry settings related to the Event Viewer application.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\_Classes\\\\mscfile\\\\shell\\\\open\\\\command\\\\\\(Default\\)\" and  not ((action_registry_value_name ~= \"\\%SystemRoot\\%\\\\system32\\\\mmc\\.exe\\ \\\"\\%1\\\"\\ \\%.*\" or action_registry_data ~= \"\\%SystemRoot\\%\\\\system32\\\\mmc\\.exe\\ \\\"\\%1\\\"\\ \\%.*\"))\n\n\n\n"}
{"prompt": "I want to see all critical changes made by administrators during out-of-office hours, including event details, usernames, and affected systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"5139\", \"4741\", \"4720\", \"4756\", \"4761\", \"4732\", \"4628\")\n| alter target_username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| join type = left\n(dataset = enterprise_admin_list\n| filter admin_type = \"domain_admin_win_admin\"\n| alter enterprise_username = if(username ~= \"@ad.infosys.com\", rtrim(username, \"@ad.infosys.com\"), if(username ~= \"@infosys.com\", rtrim(username, \"@infosys.com\"), if(username ~= \"itlinfosys\", ltrim(username, \"itlinfosys\\\\\"), username)))\n) as enterprise_admin enterprise_admin.enterprise_username = target_username\n| filter enterprise_username != null\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential instances of arbitrary command execution using Msdt.exe on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\msdt\\.exe\" or actor_process_file_original_name = \"msdt.exe\") and (action_process_image_command_line contains \"IT_BrowseForFile=\" or (action_process_image_command_line contains \" PCWDiagnostic\" and action_process_image_command_line contains \" -af \"))\n\n\n\n"}
{"prompt": "I want to see instances of files named \"teamviewer\", \"winvnc\", or \"anydesk\" being executed from restricted folders in XDR data.", "response": "config case_sensitive = false\n| dataset = palo_alto_networks_cortex_xdr_raw\n| filter cefName = \"Execution From a Restricted Folder\"\n| filter cs1 contains \"teamviewer\" or cs1 contains \"winvnc\" or cs1 contains \"anydesk\"\n| fields suser as sourceUserName, cs1 as fileName, shost as sourceHostName,\nsrc as sourceIp"}
{"prompt": "I want to detect instances of the Wocao malware activity on endpoints. This involves identifying events where the TargetUserName is similar to \"Administr\" and the CallerProcessName contains \"checkadmin.exe\".", "response": "preset = xdr_event_log\n| alter TargetUserName = regextract(to_json_string(action_evtlog_data_fields)->TargetUserName{}, \"\\\"(.*)\\\"\")\n| alter CallerProcessName = regextract(to_json_string(action_evtlog_data_fields)->CallerProcessName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4799 and TargetUserName ~= \"Administr.*\" and CallerProcessName ~= \".*\\\\checkadmin\\.exe\")\n\n\n\n"}
{"prompt": "I want to see all VPN logins from countries outside of our business locations.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw, cisco_asa_raw)\n| filter xdm.event.original_event_type in (\"722051\", \"0101039424\")\n| alter Source_IP_Address = if(_product = \"Fortigate\", xdm.target.ipv4, _product = \"ASA\", xdm.source.ipv4),\nSource_Location_Country = if(_product = \"Fortigate\", xdm.target.location.country, _product = \"ASA\", xdm.source.location.country),\nSource_UserName = if(_product = \"Fortigate\", xdm.target.user.username, _product = \"ASA\", xdm.source.user.username),\nProduct_BVM_Hostname = coalesce(fortinet_fortigate_raw._broker_device_name, fortinet_fortigate1_raw._broker_device_name, cisco_asa_raw._broker_device_name),\nProduct_BVM_IPAddress = coalesce(fortinet_fortigate_raw._broker_ip_address, fortinet_fortigate1_raw._broker_ip_address, cisco_asa_raw._broker_ip_address),\nProduct_Reporting_DeviceIP = coalesce(fortinet_fortigate_raw._final_reporting_device_ip, fortinet_fortigate1_raw._final_reporting_device_ip, cisco_asa_raw._final_reporting_device_ip)\n| iploc Source_IP_Address loc_country as Src_Country\n| alter Source_Location_Country = if(Source_Location_Country not in (null, \"\"\"\"\"\", NULL), Source_Location_Country, Src_Country)\n| filter (Source_IP_Address != \"<ip>\") and Source_Location_Country not in (NULL, null, \"\"\"\"\"\")\n| filter Source_Location_Country not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\")\n| fields Source_UserName, xdm.event.original_event_type,\nxdm.event.description, Source_IP_Address, Source_Location_Country,\nSrc_Country, xdm.alert.subcategory, xdm.event.outcome_reason,\n_vendor, _product, Product_BVM_Hostname, Product_BVM_IPAddress,\nProduct_Reporting_DeviceIP"}
{"prompt": "I want to see instances of processes directly modifying Autorun keys in the registry.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" and action_process_image_command_line contains \"add\") and (action_process_image_command_line contains \"\\\\software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\" or action_process_image_command_line contains \"\\\\software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Userinit\" or action_process_image_command_line contains \"\\\\software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\Shell\" or action_process_image_command_line contains \"\\\\software\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Windows\" or action_process_image_command_line contains \"\\\\software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\User Shell Folders\" or action_process_image_command_line contains \"\\\\system\\\\CurrentControlSet\\\\Control\\\\SafeBoot\\\\AlternateShell\"))\n\n\n\n"}
{"prompt": "I want to find instances where objects are deleted on my CheckPoint firewall by users who aren't administrators.", "response": "config case_sensitive = false\n| dataset in (check_point_smartconsole_raw)\n| filter operation = \"Delete Object\" and lowercase(administrator) not in (\"<user>\")\n| alter user_agent = null,\nos_edition = null,\nsrc_port = null,\ndst_port = null,\nhostname = arrayindex(regextract(originsicname, \"o\\=([^\\,]+)\"), 0),\nFirstEventTime = _time,\nLatestEventTime = _time,\nsource_ip = src,\ndst_ip = origin,\naction = operation,\norigin = origin,\nresult = null,\nproduct = _product\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "{I want to detect suspicious instances of the LiveKd driver being created by processes that aren't the expected livekd.exe or livek64.exe.} \n\n\nLet me know if you need help with other prompts!", "response": "datamodel\n| filter xdm.target.file.filename = \"C:\\\\Windows\\\\System32\\\\drivers\\\\LiveKdD.SYS\" and  not (((xdm.target.process.name ~= \".*\\\\livekd\\.exe\" or xdm.target.process.name ~= \".*\\\\livek64\\.exe\") or (xdm.source.process.name ~= \".*\\\\livekd\\.exe\" or xdm.source.process.name ~= \".*\\\\livek64\\.exe\")))\n\n\n\n"}
{"prompt": "I want to see firewall configuration changes made from external IP addresses on our Fortigate devices, excluding those from our internal 10.0.0.0/8 network. I'm especially interested in events related to specific event types and processes, as well as the device name if it's \"New Avalon\".", "response": "datamodel dataset = fortinet_fortigate_raw\n| alter xdm.source.ipv4 = arrayindex(regextract(xdm.source.process.name, \"(\\d+\\.\\d+\\.\\d+\\.\\d+)\"), 0)\n| filter incidr(xdm.source.ipv4, \"10.0.0.0/8\") = false\n| filter xdm.event.original_event_type in (\"0100032102\", \"0100032104\", \"0100032099\") and xdm.source.process.name != \"jsconsole\"\n| alter Desc_String = if(fortinet_fortigate_raw._broker_device_name contains \"NEWAVLON\", \"New Avalon\", \".\")\n| fields xdm.source.ipv4, xdm.target.ipv4, xdm.event.original_event_type,\nxdm.source.process.name, fortinet_fortigate_raw._final_reporting_device_ip,\nxdm.target.user.username, *\n"}
{"prompt": "I want to detect if DeviceEnroller.exe is being used to potentially sideload malicious DLL files through the PhoneDeepLink parameter.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\deviceenroller\\.exe\" or actor_process_file_original_name = \"deviceenroller.exe\") and action_process_image_command_line contains \"/PhoneDeepLink\")\n\n\n\n"}
{"prompt": "I want to find suspicious modifications made to registry keys under the Wow6432Node folder related to autorun and shell extensions.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\Software\\\\Wow6432Node\\\\Classes\" and (action_registry_key_name contains \"\\\\Folder\\\\ShellEx\\\\ExtShellFolderViews\" or action_registry_key_name contains \"\\\\Folder\\\\ShellEx\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\Folder\\\\ShellEx\\\\ColumnHandlers\" or action_registry_key_name contains \"\\\\Directory\\\\Shellex\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\Directory\\\\Shellex\\\\CopyHookHandlers\" or action_registry_key_name contains \"\\\\CLSID\\\\{AC757296-3522-4E11-9862-C17BE5A1767E}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{ABE3B9A4-257D-4B97-BD1A-294AF496222E}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{7ED96837-96F0-4812-B211-F13C24117ED3}\\\\Instance\" or action_registry_key_name contains \"\\\\CLSID\\\\{083863F1-70DE-11d0-BD40-00A0C911CE86}\\\\Instance\" or action_registry_key_name contains \"\\\\AllFileSystemObjects\\\\ShellEx\\\\DragDropHandlers\" or action_registry_key_name contains \"\\\\ShellEx\\\\PropertySheetHandlers\" or action_registry_key_name contains \"\\\\ShellEx\\\\ContextMenuHandlers\") and  not ((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\"))\n\n\n\n"}
{"prompt": "I want to see if there are any potential Baby Shark malware activities on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"powershell.exe mshta.exe http\" and action_process_image_command_line contains \".hta\") or (action_process_image_command_line contains \"reg query \\\"HKEY_CURRENT_USER\\\\Software\\\\Microsoft\\\\Terminal Server Client\\\\Default\\\"\" or action_process_image_command_line contains \"cmd.exe /c taskkill /im cmd.exe\" or action_process_image_command_line contains \"(New-Object System.Net.WebClient).UploadFile('http\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential exploitation attempts of the CVE-2023-22518 vulnerability in Confluence.", "response": "preset = xdr_process\n| filter (((actor_process_image_path ~= \".*\\\\tomcat8\\.exe\" or actor_process_image_path ~= \".*\\\\tomcat9\\.exe\" or actor_process_image_path ~= \".*\\\\tomcat10\\.exe\") and actor_process_image_command_line contains \"confluence\") and ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\") or actor_process_file_original_name in (\"Cmd.Exe\", \"PowerShell.EXE\")))\n\n\n\n"}
{"prompt": "I want to detect instances where Regsvr32 is executed from suspicious locations on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_file_original_name = \"REGSVR32.EXE\") and ((action_process_image_command_line ~= \".*\\:\\\\PerfLogs\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line contains \"\\\\Windows\\\\Registration\\\\CRMLog\" or action_process_image_command_line ~= \".*\\\\Windows\\\\System32\\\\com\\\\dmp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\System32\\\\FxsTmp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\System32\\\\Microsoft\\\\Crypto\\\\RSA\\\\MachineKeys\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\System32\\\\spool\\\\PRINTERS\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\System32\\\\spool\\\\SERVERS\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\System32\\\\Tasks\\_Migrated\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\System32\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\SysWOW64\\\\com\\\\dmp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\SysWOW64\\\\FxsTmp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\PLA\\\\System\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Tracing\\\\.*\") or ((action_process_image_command_line ~= \".*\\ \\\"C\\:\\\\.*\" or action_process_image_command_line ~= \".*\\ C\\:\\\\.*\" or action_process_image_command_line ~= \".*\\ \\'C\\:\\\\.*\" or action_process_image_command_line ~= \".*D\\:\\\\.*\") and  not ((action_process_image_command_line ~= \".*C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Program\\ Files\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" or action_process_image_command_line ~= \".*\\ C\\:\\\\Windows\\\\.*\" or action_process_image_command_line ~= \".*\\ \\\"C\\:\\\\Windows\\\\.*\" or action_process_image_command_line ~= \".*\\ \\'C\\:\\\\Windows\\\\.*\")))) and  not (action_process_image_command_line = \"\" or action_process_image_command_line = \"None\")\n\n\n\n"}
{"prompt": "I want to find instances of code injection exploiting the ld.so preload mechanism.", "response": "datamodel\n| filter _raw_log contains \"/etc/ld.so.preload\"\n\n\n\n"}
{"prompt": "I want to find out if any PowerShell scripts are executing \"Start-NetEventSession\" which could indicate network sniffing for things like credentials.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Start-NetEventSession\"\n\n\n\n"}
{"prompt": "I want to detect activity from users accessing websites with .onion domains through our web gateway.", "response": "dataset in (zscaler_nssweblog_raw)\n| alter user_agent = replace(arrayindex(regextract(_raw_json, \"cs\\(User\\-Agent\\)\\\"\\: ([^\\,]+)\"), 0), \"\\\"\", \"\"),\nalias_host = json_extract_scalar(_raw_json, \"$.x-client-device-name\"),\nresult = json_extract_scalar(_raw_json, \"$.cs-method\"),\nrbytes = json_extract_scalar(_raw_json, \"$.cs-bytes\"),\ngroups = json_extract_scalar(_raw_json, \"$.cs-auth-groups\"),\nbytes_src = json_extract_scalar(_raw_json, \"$.sc-bytes\")\n| fields suser, dhost, devicehostname, cat as category,\ncs3, act, dst, src, request, requestContext,\nrequestClientApplication, contenttype, deviceowner,\nrequestMethod, reason, fileType, user_agent, alias_host,\nresult, rbytes, groups, bytes_src\n| filter dhost ~= \"[a-zA-Z\\d]+(.onion)$\"\n| alter aggregation_criteria1 = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see activity related to changes made to AWS Network ACLs, including creations, deletions, and modifications of rules.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = json_extract_scalar(requestParameters, \"$.groupId\"),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"CreateNetworkAcl\", \"CreateNetworkAclEntry\", \"DeleteNetworkAcl\", \"DeleteNetworkAclEntry\", \"ReplaceNetworkAclEntry\", \"ReplaceNetworkAclAssociation\")\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see processes that are Java child processes and use suspicious shell commands in their command line.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\/java\" and (action_process_image_command_line contains \"/bin/sh\" or action_process_image_command_line contains \"bash\" or action_process_image_command_line contains \"dash\" or action_process_image_command_line contains \"ksh\" or action_process_image_command_line contains \"zsh\" or action_process_image_command_line contains \"csh\" or action_process_image_command_line contains \"fish\" or action_process_image_command_line contains \"curl\" or action_process_image_command_line contains \"wget\" or action_process_image_command_line contains \"python\"))\n\n\n\n"}
{"prompt": "I want to see events where svchost.exe spawns rundll32.exe with command arguments related to WebDav, potentially indicating exfiltration or exploitation of CVE-2023-23397.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and actor_process_image_command_line contains \"-s WebClient\" and action_process_image_path ~= \".*\\\\rundll32\\.exe\" and action_process_image_command_line contains \"C:\\\\windows\\\\system32\\\\davclnt.dll,DavSetCookie\" and action_process_image_command_line ~= \"\\:\\/\\/\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\") and  not ((action_process_image_command_line contains \":\n\n\n\n"}
{"prompt": "I want to find potential instances of EventLog file location tampering on Windows systems.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SYSTEM\\\\CurrentControlSet\\\\Services\\\\EventLog\\\\.*\" and action_registry_key_name ~= \".*\\\\File\") and  not ((action_registry_value_name ~= \".*\\\\System32\\\\Winevt\\\\Logs\\\\.*\" or action_registry_data ~= \".*\\\\System32\\\\Winevt\\\\Logs\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts about attempts to uninstall Raccine.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"taskkill \" and action_process_image_command_line contains \"RaccineSettings.exe\") or (action_process_image_command_line contains \"reg.exe\" and action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"Raccine Tray\") or (action_process_image_command_line contains \"schtasks\" and action_process_image_command_line contains \"/DELETE\" and action_process_image_command_line contains \"Raccine Rules Updater\"))\n\n\n\n"}
{"prompt": "I want to see alerts about unusual network connections initiated by certutil.exe, especially those using common ports like 80, 135, 443, and 445.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (actor_process_image_path ~= \".*\\\\certutil\\.exe\" and Initiated = \"true\" and (action_local_port in (80, 135, 443, 445) or action_remote_port in (80, 135, 443, 445)))\n\n\n\n"}
{"prompt": "I want to find instances where an attacker might be tampering with Windows Defender settings using the reg.exe command.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and (action_process_image_command_line ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\ Defender\\\\.*\" or action_process_image_command_line contains \"SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows Defender Security Center\" or action_process_image_command_line ~= \".*SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\ Defender\\\\.*\")) and (((action_process_image_command_line contains \" add \" and action_process_image_command_line contains \"d 0\") and (action_process_image_command_line contains \"DisallowExploitProtectionOverride\" or action_process_image_command_line contains \"EnableControlledFolderAccess\" or action_process_image_command_line contains \"MpEnablePus\" or action_process_image_command_line contains \"PUAProtection\" or action_process_image_command_line contains \"SpynetReporting\" or action_process_image_command_line contains \"SubmitSamplesConsent\" or action_process_image_command_line contains \"TamperProtection\")) or ((action_process_image_command_line contains \" add \" and action_process_image_command_line contains \"d 1\") and (action_process_image_command_line contains \"DisableAntiSpyware\" or action_process_image_command_line contains \"DisableAntiSpywareRealtimeProtection\" or action_process_image_command_line contains \"DisableAntiVirus\" or action_process_image_command_line contains \"DisableArchiveScanning\" or action_process_image_command_line contains \"DisableBehaviorMonitoring\" or action_process_image_command_line contains \"DisableBlockAtFirstSeen\" or action_process_image_command_line contains \"DisableConfig\" or action_process_image_command_line contains \"DisableEnhancedNotifications\" or action_process_image_command_line contains \"DisableIntrusionPreventionSystem\" or action_process_image_command_line contains \"DisableIOAVProtection\" or action_process_image_command_line contains \"DisableOnAccessProtection\" or action_process_image_command_line contains \"DisablePrivacyMode\" or action_process_image_command_line contains \"DisableRealtimeMonitoring\" or action_process_image_command_line contains \"DisableRoutinelyTakingAction\" or action_process_image_command_line contains \"DisableScanOnRealtimeEnable\" or action_process_image_command_line contains \"DisableScriptScanning\" or action_process_image_command_line contains \"Notification_Suppress\" or action_process_image_command_line contains \"SignatureDisableUpdateOnStartupWithoutEngine\")))\n\n\n\n"}
{"prompt": "I want to see alerts for potential credential dumping activity detected through process access requests to LSASS.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and (GrantedAccess contains \"0x1038\" or GrantedAccess contains \"0x1438\" or GrantedAccess contains \"0x143a\" or GrantedAccess contains \"0x1fffff\") and (CallTrace contains \"dbgcore.dll\" or CallTrace contains \"dbghelp.dll\" or CallTrace contains \"kernel32.dll\" or CallTrace contains \"kernelbase.dll\" or CallTrace contains \"ntdll.dll\")) and  not ((action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\")) and  not (((CallTrace ~= \".*\\:\\\\Windows\\\\Temp\\\\asgard2\\-agent\\\\.*\" and CallTrace contains \"\\\\thor\\\\thor64.exe+\" and CallTrace contains \"|UNKNOWN(\") and GrantedAccess = \"0x103800\") or SourceImage ~= \".*\\:\\\\Windows\\\\Sysmon64\\.exe\")\n\n\n\n"}
{"prompt": "I want to detect suspicious processes that are running splwow64.exe without any command-line parameters.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\splwow64\\.exe\" and action_process_image_command_line ~= \".*splwow64\\.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts about attempts to set the DSRM administrator password on my domain controllers.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4794\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts when there are 2500 dropped inbound connections followed by one successful connection from the same source IP within 5 seconds.", "response": "config case_sensitive = false\n| datamodel dataset = check_point_vpn_1_firewall_1_raw\n| sort asc _time\n| bin _time span = 5s\n| filter xdm.observer.action in (\"Drop\", \"Reject\", \"Block\") and xdm.source.ipv4 !~= \"(10\\.[0-9]{1,3}|172\\.(1[6-9]|2[0-9]|3[01])|192\\.168)\\.[0-9]{1,3}\\.[0-9]{1,3}\"\n| alter result = null,\nuser_agent = null,\nos_edition = null,\norigin = check_point_vpn_1_firewall_1_raw.origin\n| comp earliest(_time) as D_FirstEventTime,\nlatest(_time) as D_LatestEventTime,\nvalues(xdm.target.ipv4) as dst_ip,\nvalues(xdm.source.port) as src_port,\nvalues(xdm.target.port) as dst_port,\nvalues(xdm.observer.action) as action,\nvalues(xdm.target.user.username) as username,\nvalues(check_point_vpn_1_firewall_1_raw.origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\nvalues(xdm.source.host.hostname) as hostname,\ncount() as matched_events by _time,\nxdm.source.ipv4\n| filter matched_events = 2500\n| join type = left conflict_strategy = both\n(datamodel dataset = check_point_vpn_1_firewall_1_raw\n| bin _time span = 5s\n| filter xdm.observer.action in (\"Accept\", \"Allow\") and xdm.source.ipv4 !~= \"(10\\.[0-9]{1,3}|172\\.(1[6-9]|2[0-9]|3[01])|192\\.168)\\.[0-9]{1,3}\\.[0-9]{1,3}\"\n| comp earliest(_time) as S_FirstEventTime,\nlatest(_time) as S_LatestEventTime by _time,\nxdm.source.ipv4\n| alter source_ip = xdm.source.ipv4\n| fields source_ip, S_LatestEventTime\n) as successfull_connection successfull_connection.source_ip = xdm.source.ipv4 and successfull_connection.S_LatestEventTime >= D_LatestEventTime\n| filter source_ip != null\n| alter aggregation_criteria = \"idcsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", D_FirstEventTime)"}
{"prompt": "I want to see instances of PsExec being used from suspicious locations on endpoints, specifically when it connects to the \"\\\\PSEXESVC\" pipe.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| alter Image = regextract(to_json_string(action_evtlog_data_fields)->Image{}, \"\\\"(.*)\\\"\")\n| filter (PipeName = \"\\\\PSEXESVC\" and (Image ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or Image ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or Image ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or Image ~= \".*\\\\Desktop\\\\.*\" or Image ~= \".*\\\\Downloads\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts about users being added to high privilege groups like vspusers, mdm_intune_user_exception, and mdm_intune_users on Windows systems. This should include details like the user's name, the group they were added to, the timestamp, and the source host.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.target.user.groups in (\"vspusers\", \"mdm_intune_user_exception\", \"mdm_intune_users\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see details about CyberArk Safe Changes activities on specific IPs and with reference IDs 142, 145, 148, 149, 150, 185, 183, and 181. ", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_dst = xdm.target.user.username,\nuser_src = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station = \"10.64.103.83\" or device_ip in (\"10.64.103.83\", \"10.82.34.113\")\n| filter reference_id in (142, 145, 148, 149, 150, 185, 183, 181)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for failed login attempts on Duo service accounts where the reason is \"%%2313\" and the username contains any of the following: <user>, <user>, <user>, <user>, <user>, <user>, <user>, <user>, <user>, <user>, <user>, <user>.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| alter SourceDomainName = json_extract_scalar(event_data, \"$.SubjectDomainName\"),\nTargetUserName = json_extract_scalar(event_data, \"$.TargetUserName\"),\nreason = json_extract_scalar(event_data, \"$.FailureReason\"),\nSourceIPAddress = json_extract_scalar(event_data, \"$.IpAddress\"),\nWorkstationName = json_extract_scalar(event_data, \"$.WorkstationName\")\n| filter event_id in (4625)\n| filter reason = \"%%2313\"\n| filter TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\""}
{"prompt": "I want to find instances of the Confluence CVE-2019-3398 exploit where HTTP POST requests are made to URLs containing \"/upload.action\" and \"filename=../../../../\".", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and (xdm.network.http.url contains \"/upload.action\" and xdm.network.http.url contains \"filename=../../../../\"))\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is potentially being used to create persistence through modifying user profiles with \"Add-Content\" and executing commands like Invoke-Expression, Invoke-WebRequest, or Start-Process.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Add-Content $profile\" and (ScriptBlockText contains \"-Value \\\"IEX \" or ScriptBlockText contains \"-Value \\\"Invoke-Expression\" or ScriptBlockText contains \"-Value \\\"Invoke-WebRequest\" or ScriptBlockText contains \"-Value \\\"Start-Process\" or ScriptBlockText contains \"-Value 'IEX \" or ScriptBlockText contains \"-Value 'Invoke-Expression\" or ScriptBlockText contains \"-Value 'Invoke-WebRequest\" or ScriptBlockText contains \"-Value 'Start-Process\"))\n\n\n\n"}
{"prompt": "I want to find potential exploitation attempts related to CVE-2023-36884 that use specific URL patterns with GET requests.", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and xdm.network.http.url ~= \"\\.(zip|asp|htm|url|xml|chm|mht|vbs|search\\-ms)\\?d\\=[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\")\n\n\n\n"}
{"prompt": "I want to detect potential Mimikatz activity targeting the LSASS process on my endpoints.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and GrantedAccess in (\"0x1410\", \"0x1010\", \"0x410\")) and  not (((SourceImage ~= \"C\\:\\\\Program\\ Files\\\\WindowsApps\\\\.*\" or SourceImage ~= \"C\\:\\\\Windows\\\\System32\\\\.*\") and SourceImage ~= \".*\\\\GamingServices\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious processes on endpoints that try to execute files that don't exist.", "response": "preset = xdr_process\n| filter  not (action_process_image_path ~= \".*\\\\.*\") and  not (action_process_image_path = \"None\" or action_process_image_path in (\"-\", \"\") or (action_process_image_path in (\"System\", \"Registry\", \"MemCompression\", \"vmmem\") or action_process_image_command_line in (\"Registry\", \"MemCompression\", \"vmmem\")))\n\n\n\n"}
{"prompt": "I want to find users whose Duo login activity shows changes in reported country.", "response": "dataset = duo_duo_raw\n| filter email not in (null, NULL, \"\"\"\"\"\")\n| alter Browser = access_device -> browser,\nBrowserVer = access_device -> browser_version,\nOS = access_device -> os,\nOSVer = access_device -> os_version,\nSrcIPAddress = access_device -> ip,\nSrcCountry = access_device -> location.country,\nSrcCity = access_device -> location.city,\nPhoneNumber = auth_device -> name,\nIntegration = application -> name,\nDuo_UserName = user -> name\n| filter OS not in (\"Android\", \"iOS\", null, NULL, \"\"\"\"\"\") and (reason != \"\"\"Trusted network\"\"\") and PhoneNumber not in (null, NULL, \"\"\"\"\"\")\n| fields access_device, Browser, BrowserVer, OS, OSVer,\nSrcIPAddress, SrcCountry, SrcCity, auth_device,\nemail, PhoneNumber, _collector_type, _collector_name,\n_final_reporting_device_ip, _reporting_device_ip,\napplication, Integration, user, adaptive_trust_assessments,\nDuo_UserName, result, reason, eventtype\n| comp min(_time) as FirstEventTime,\nmax(_time) as LatestEventTime,\nvalues(Browser) as MultipleBrowsers,\nValues(BrowserVer) as MultipleBrowserVers,\nvalues(SrcIPAddress) as MultipleSrcIPs,\nvalues(OS) as MultipleOS,\nvalues(OSVer) as MultipleOSVers,\nvalues(SrcCountry) as MultipleCountries,\nvalues(SrcCity) as MultipleCities,\ncount() as MultipleEvents by email,\nDuo_UserName,\nPhoneNumber,\nIntegration,\n_collector_name,\nresult,\nreason,\neventtype addrawdata = true as ActivityRawData\n| alter CorrelatioRuleName = \"Duo Country changed\",\nTimeDiff_in_Minutes = timestamp_diff(LatestEventTime, FirstEventTime, \"MINUTE\")\n| filter array_length(MultipleCountries) > 1"}
{"prompt": "I want to find cases where an application has been modified by an owner or admin and bulk access has been granted over the past few days. I need details about the modifications, who made them, and who was granted access.", "response": "config case_sensitive = false\n| dataset IN (cams_Camssiem_audit_raw, cams_Camssiem_raw)\n| filter txtProvActionStatus = \"Modify\" and txtRemarks not contains \"sox audit\"\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_dst, company_name as companyname1\n) as JT1 JT1.companyname1 = trim(EmpNo)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_src, company_name as companyname2\n) as JT2 JT2.companyname2 = trim(Access_Provided_By)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as fullname, company_name as companyname3\n) as JT3 JT3.companyname3 = trim(txtDelegatedEmpNo)\n| fields empno, user_dst, access_provided_by, user_src,\ntxtDelegatedEmpNo, fullname, _vendor, txtRemarks,\ncontext1, txtFileName, ContextValue1, intWorkFlowStage,\n_vendor, context6, intAppRoleId, flgSynchronized,\nrole, IntAppID, txtProvActionStatus\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by access_provided_by,\nIntAppID,\n_time\n| filter matched_events >= 15 and array_length(empno) >= 15\n| alter aggregation_criteria = \"ileventuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 15)), 1)"}
{"prompt": "I want to find out which users are receiving the most spam emails over a short period of time.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter eventType in (\"Spam\")\n| alter headerTo_array = headerTo -> []\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\"),\nfile_details = json_extract(details, \"$.fileInfo\")\n| filter headerTo_string ~= \"<domain>\"\n| comp count() as matched_events,\nvalues(eventType) as eventType,\nvalues(headerFrom) as headerFrom,\nfirst(file_details) as file_details,\nvalues(embeddedUrls) as embeddedUrls by headerTo_string\n| alter file_details = arrayindex(file_details -> [], 0)\n| alter file_name = json_extract_scalar(file_details, \"$.fileName\"),\nfile_hash = json_extract_scalar(file_details, \"$.fileSha256\"),\nthreat_name = json_extract_scalar(file_details, \"$.threatName\")\n| filter matched_events >= 10"}
{"prompt": "I want to detect suspicious processes that are starting NT Virtual DOS Machine or CSRStub.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\ntvdm\\.exe\" or action_process_image_path ~= \".*\\\\csrstub\\.exe\")\n\n\n\n"}
{"prompt": "I want to see if any scheduled tasks are using uncommon LOLBIN executables like calc.exe, cscript.exe, mshta.exe, etc.", "response": "datamodel\n| filter (xdm.event.id = 129 and (xdm.target.process.executable.path ~= \".*\\\\calc\\.exe\" or xdm.target.process.executable.path ~= \".*\\\\cscript\\.exe\" or xdm.target.process.executable.path ~= \".*\\\\mshta\\.exe\" or xdm.target.process.executable.path ~= \".*\\\\mspaint\\.exe\" or xdm.target.process.executable.path ~= \".*\\\\notepad\\.exe\" or xdm.target.process.executable.path ~= \".*\\\\regsvr32\\.exe\" or xdm.target.process.executable.path ~= \".*\\\\wscript\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find detections of remote thread creation in the \"mstsc.exe\" process that originate from potentially suspicious locations like temporary folders or system directories.", "response": "datamodel\n| filter (xdm.target.process.name ~= \".*\\\\mstsc\\.exe\" and (xdm.source.process.name ~= \".*\\:\\\\Temp\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\PerfLogs\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find Cisco Catalyst devices that have experienced three or more HSRP state changes within a one minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 1m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter msg_id in (\"HSRP-5-STATECHANGE\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to find potential attempts to exploit CVE-2021-42287 by attackers clearing the ServicePrincipalName attribute on computer objects.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Microsoft-Windows-Directory-Services-SAM\" and action_evtlog_event_id in (16990, 16991))\n\n\n\n"}
{"prompt": "I want to see all O365 admin activities related to setting SafeLink policies or rules, including actions like adding to blacklists or whitelists.", "response": "dataset = msft_o365_exchange_online_raw\n| filter Operation contains \"Set-SafeLink\"\n"}
{"prompt": "I want to find events where UAC bypass is attempted using a .NET code profiler on MMC, specifically looking for files with names like \"C:\\Users\\*.*\\AppData\\Local\\Temp\\pe386\\.dll\".", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\pe386\\.dll\")\n\n\n\n"}
{"prompt": "I want to see alerts for privileged password reset activity on O365 accounts from Azure AD.", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Operation ~= \"Reset user password\"\n| alter source_user = json_extract_scalar(`Target`, \"$[3].ID\")\n| fields UserId, source_user, ObjectId, ResultStatus, Operation,\n_time, CreationTime, `Target`\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to see alerts about attempts to set the Directory Services Restore Mode administrator password on my Windows devices.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4794\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of malware that try to change the Fax DLL using registry modifications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Software\\\\Microsoft\\\\Fax\\\\Device\\ Providers\\\\.*\" and action_registry_key_name contains \"\\\\ImageName\") and  not ((action_registry_value_name = \"%systemroot%\\\\system32\\\\fxst30.dll\" or action_registry_data = \"%systemroot%\\\\system32\\\\fxst30.dll\"))\n\n\n\n"}
{"prompt": "I want to see alerts about attempts to set the Directory Services Restore Mode (DSRM) administrator password on my Windows devices.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4794\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see if any processes on endpoints are using commands commonly associated with Turla Group lateral movement.", "response": "preset = xdr_process\n| filter action_process_image_command_line in (\"net use \\\\\\\\%DomainController%\\\\C$ \\\"P@ssw0rd\\\" *\", \"dir c:\\\\*.doc* /s\", \"dir %TEMP%\\\\*.exe\")\n\n\n\n"}
{"prompt": "I want to find any configurations on Cisco devices that involve HTTP/HTTPS servers, Kron policies or occurrences, access lists, or archive settings.", "response": "datamodel\n| filter ( contains \"ip http server\" or  contains \"ip https server\" or  contains \"kron policy-list\" or  contains \"kron occurrence\" or  contains \"policy-list\" or  contains \"access-list\" or  contains \"ip access-group\" or  contains \"archive maximum\")\n\n\n\n"}
{"prompt": "I want to see alerts about new processes being created by wmic.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wmic\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and (action_process_image_command_line contains \"process\" and action_process_image_command_line contains \"call\" and action_process_image_command_line contains \"create\"))\n\n\n\n"}
{"prompt": "I want to find instances where JavaScript files are created inside the DriverStore directory.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\DriverStore\\\\FileRepository\\\\.*\" and xdm.target.file.filename ~= \".*\\\\\\.js\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to CLR logs creation on Windows systems.", "response": "datamodel\n| filter ((xdm.target.file.filename contains \"\\\\AppData\\\\Local\\\\Microsoft\\\\CLR\" and xdm.target.file.filename ~= \".*\\\\UsageLogs\\\\.*\") and (xdm.target.file.filename contains \"mshta\" or xdm.target.file.filename contains \"cscript\" or xdm.target.file.filename contains \"wscript\" or xdm.target.file.filename contains \"regsvr32\" or xdm.target.file.filename contains \"wmic\" or xdm.target.file.filename contains \"rundll32\" or xdm.target.file.filename contains \"svchost\"))\n\n\n\n"}
{"prompt": "I want to find instances of potential Arcadyan router exploits based on HTTP requests containing specific URLs and patterns.", "response": "datamodel\n| filter (xdm.network.http.url contains \"..%2f\" or (xdm.network.http.url contains \"..%2f\" and xdm.network.http.url contains \"apply_abstract.cgi\")) and (xdm.network.http.url contains \"/images/\" or xdm.network.http.url contains \"/js/\" or xdm.network.http.url contains \"/css/\" or xdm.network.http.url contains \"/setup_top_login.htm\" or xdm.network.http.url contains \"/login.html\" or xdm.network.http.url contains \"/loginerror.html\" or xdm.network.http.url contains \"/loginexclude.html\" or xdm.network.http.url contains \"/loginlock.html\")\n\n\n\n"}
{"prompt": "I want to see alerts for suspected Kerberos replay attacks detected on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4649\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| filter xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username != NULL\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where Msiexec.exe initiates a network connection over ports 80 or 443.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (Initiated = \"true\" and actor_process_image_path ~= \".*\\\\msiexec\\.exe\" and (action_local_port in (80, 443) or action_remote_port in (80, 443)))\n\n\n\n"}
{"prompt": "I want to detect potential Plink evasions where the executable name is not \"plink.exe\" and the command line includes specific arguments.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name = \"Plink\" or (action_process_image_command_line contains \" -l forward\" and action_process_image_command_line contains \" -P \" and action_process_image_command_line contains \" -R \")) and  not (action_process_image_path ~= \".*\\\\plink\\.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious Django framework exceptions.", "response": "datamodel\n| filter ( contains \"SuspiciousOperation\" or  contains \"DisallowedHost\" or  contains \"DisallowedModelAdminLookup\" or  contains \"DisallowedModelAdminToField\" or  contains \"DisallowedRedirect\" or  contains \"InvalidSessionKey\" or  contains \"RequestDataTooBig\" or  contains \"SuspiciousFileOperation\" or  contains \"SuspiciousMultipartForm\" or  contains \"SuspiciousSession\" or  contains \"TooManyFieldsSent\" or  contains \"PermissionDenied\")\n\n\n\n"}
{"prompt": "I want to find users whose current day count of security events is significantly higher than their average over the past week.", "response": "dataset = symantec_ep_raw\n| filter _raw_log ~= \",Risk\\sname:\"\n| alter username = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0)),\nalert_name = to_string(arrayindex(regextract(_raw_log, \"Risk name:\\s([^,]+),\"), 0)),\nfile_path = to_string(arrayindex(regextract(_raw_log, \"File path:\\s([^,]+),\"), 0)),\nhost_name = to_string(arrayindex(regextract(_raw_log, \"Source Computer Name:\\s([^,]+),\"), 0))\n| filter username not in (\"SYSTEM\", null, \"None\")\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter day = extract_time(_time, \"DAYOFWEEK\"),\ncategory = if(alert_name ~= \"^System Infected\", alert_name, to_string(arrayindex(regextract(_raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(alert_name ~= \"^System Infected\", alert_name, to_string(arrayindex(regextract(_raw_log, \"Source:\\s([^,]+),\"), 0))),\nevent_type = to_string(arrayindex(regextract(_raw_log, \"Category type:\\s([^,]+),\"), 0)),\nrequested_action = arrayindex(regextract(_raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(_raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(_raw_log, \"IP Address:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(_raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(file_path, \"\\\"), -1),\nfile_hash = arrayindex(regextract(_raw_log, \"Application hash:\\s([^,]+),\"), 0),\nusername = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0)),\nsrc_ip = arrayindex(regextract(_raw_log, \"Source Computer IP:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\ndst_ip = arrayindex(regextract(_raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\naction = to_string(arrayindex(regextract(_raw_log, \"Actual action:\\s([^,]+),\"), 0))\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(file_path, file_name, \"\")\n| comp count() as current_day_count,\nvalues(action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(alert_name) as risk_name,\nvalues(file_path) as process,\nvalues(directory) as directory,\nvalues(file_name) as file_name,\nvalues(file_extension) as file_extension,\nvalues(aliashost) as aliashost,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(src_ip) as src_ips,\nvalues(dst_ip) as dst_ips,\nvalues(event_type) as event_type,\nvalues(host_name) as host_name,\nvalues(file_hash) as file_hash by day,\nusername\n| join type = left conflict_strategy = both\n(dataset = symantec_ep_raw\n| filter _raw_log ~= \",Risk\\sname:\"\n| alter username = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0)),\nalert_name = to_string(arrayindex(regextract(_raw_log, \"Risk name:\\s([^,]+),\"), 0)),\nfile_path = to_string(arrayindex(regextract(_raw_log, \"File path:\\s([^,]+),\"), 0)),\nhost_name = to_string(arrayindex(regextract(_raw_log, \"Source Computer Name:\\s([^,]+),\"), 0))\n| filter username not in (\"SYSTEM\", null, \"None\")\n| alter day = extract_time(_time, \"DAYOFWEEK\"),\ncategory = if(alert_name ~= \"^System Infected\", alert_name, to_string(arrayindex(regextract(_raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(alert_name ~= \"^System Infected\", alert_name, to_string(arrayindex(regextract(_raw_log, \"Source:\\s([^,]+),\"), 0))),\nevent_type = to_string(arrayindex(regextract(_raw_log, \"Category type:\\s([^,]+),\"), 0)),\nrequested_action = arrayindex(regextract(_raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(_raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(_raw_log, \"IP Address:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(_raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(file_path, \"\\\"), -1),\nfile_hash = arrayindex(regextract(_raw_log, \"Application hash:\\s([^,]+),\"), 0),\nusername = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0)),\nsrc_ip = arrayindex(regextract(_raw_log, \"Source Computer IP:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\ndst_ip = arrayindex(regextract(_raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\naction = to_string(arrayindex(regextract(_raw_log, \"Actual action:\\s([^,]+),\"), 0))\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(file_path, file_name, \"\")\n| comp count() as 7_days_count,\nvalues(action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(alert_name) as risk_name,\nvalues(file_path) as process,\nvalues(directory) as directory,\nvalues(file_name) as file_name,\nvalues(file_extension) as file_extension,\nvalues(aliashost) as aliashost,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(src_ip) as src_ips,\nvalues(dst_ip) as dst_ips,\nvalues(event_type) as event_type,\nvalues(host_name) as host_name,\nvalues(file_hash) as file_hash by day,\nusername\n| comp avg(7_days_count) as 7_days_count_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(requested_action)) as requested_action,\nvalues(to_string(secondary_action)) as secondary_action,\nvalues(to_string(ip_address)) as ip_address,\nvalues(to_string(risk_name)) as risk_name,\nvalues(to_string(process)) as process,\nvalues(to_string(directory)) as directory,\nvalues(to_string(file_name)) as file_name,\nvalues(to_string(file_extension)) as file_extension,\nvalues(to_string(aliashost)) as aliashost,\nvalues(to_string(category)) as category,\nvalues(to_string(event_desc)) as event_desc,\nvalues(to_string(src_ips)) as src_ips,\nvalues(to_string(dst_ips)) as dst_ips,\nvalues(to_string(event_type)) as event_type,\nvalues(to_string(host_name)) as host_name,\nvalues(to_string(file_hash)) as file_hash by username addrawdata = true as avg_raw\n| alter user = username\n| fields user, 7_days_count_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = username\n| filter current_day_count > multiply(7_days_count_avg, 1.35)"}
{"prompt": "I want to find suspicious registry changes related to adding port monitors, which could indicate persistence threats.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Control\\\\Print\\\\Monitors\\\\.*\" and (action_registry_value_name ~= \".*\\.dll\" or action_registry_data ~= \".*\\.dll\")) and  not ((actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\spoolsv.exe\" and action_registry_key_name contains \"\\\\Control\\\\Print\\\\Monitors\\\\CutePDF Writer Monitor v4.0\\\\Driver\" and (action_registry_value_name = \"cpwmon64_v40.dll\" or action_registry_data = \"cpwmon64_v40.dll\") and (actor_effective_username contains \"AUTHORI\" or actor_effective_username contains \"AUTORI\")) or action_registry_key_name contains \"\\\\Control\\\\Print\\\\Monitors\\\\MONVNC\\\\Driver\" or (action_registry_key_name ~= \".*Control\\\\Print\\\\Environments\\\\.*\" and action_registry_key_name ~= \".*\\\\Drivers\\\\.*\" and action_registry_key_name contains \"\\\\VNC Printer\"))\n\n\n\n"}
{"prompt": "I want to find instances where a file named \"C:\\\\program.exe\" is created.", "response": "datamodel\n| filter xdm.target.file.filename = \"C:\\\\program.exe\"\n\n\n\n"}
{"prompt": "I want to detect attempts to compress data and lock it with a password for potential exfiltration using WINZIP on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"winzip.exe\" or action_process_image_command_line contains \"winzip64.exe\") and action_process_image_command_line contains \"-s\\\"\" and (action_process_image_command_line contains \" -min \" or action_process_image_command_line contains \" -a \"))\n\n\n\n"}
{"prompt": " I want to see all instances of processes being created with \"nohup\" in their path on endpoints. ", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\/nohup\"\n\n\n\n"}
{"prompt": "I want to find instances where Python is being used to execute inline commands.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"python.exe\" or (action_process_image_path ~= \".*python\\.exe\" or action_process_image_path ~= \".*python3\\.exe\" or action_process_image_path ~= \".*python2\\.exe\")) and action_process_image_command_line contains \" -c\") and  not ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Python.*\" and actor_process_image_path ~= \".*\\\\python\\.exe\" and actor_process_image_command_line contains \"-E -s -m ensurepip -U --default-pip\") or actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Programs\\\\Microsoft\\ VS\\ Code\\\\Code\\.exe\")\n\n\n\n"}
{"prompt": "I want to see events where a DLL containing \"clr.dll\" is loaded by Microsoft Office applications like Excel, Word, or PowerPoint.", "response": "preset = xdr_image_load\n| filter ((actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\mspub\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\" or actor_process_image_path ~= \".*\\\\onenote\\.exe\" or actor_process_image_path ~= \".*\\\\onenoteim\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\winword\\.exe\") and action_module_path contains \"\\\\clr.dll\")\n\n\n\n"}
{"prompt": "I want to see all communications between internal hosts and any of the IP addresses listed as suspicious.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw)\n| filter (xdm.observer.type in (\"utm:ssl\", \"event:vpn\") or xdm.event.description ~= \"vpn|VPN\") and (xdm.source.ipv4 in (\"<IP>\"))"}
{"prompt": "I want to find suspicious changes to screensavers made by reg.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\reg\\.exe\" and (action_process_image_command_line contains \"HKEY_CURRENT_USER\\\\Control Panel\\\\Desktop\" or action_process_image_command_line contains \"HKCU\\\\Control Panel\\\\Desktop\")) and ((action_process_image_command_line contains \"/v ScreenSaveActive\" and action_process_image_command_line contains \"/t REG_SZ\" and action_process_image_command_line contains \"/d 1\" and action_process_image_command_line contains \"/f\") or (action_process_image_command_line contains \"/v ScreenSaveTimeout\" and action_process_image_command_line contains \"/t REG_SZ\" and action_process_image_command_line contains \"/d \" and action_process_image_command_line contains \"/f\") or (action_process_image_command_line contains \"/v ScreenSaverIsSecure\" and action_process_image_command_line contains \"/t REG_SZ\" and action_process_image_command_line contains \"/d 0\" and action_process_image_command_line contains \"/f\") or (action_process_image_command_line contains \"/v SCRNSAVE.EXE\" and action_process_image_command_line contains \"/t REG_SZ\" and action_process_image_command_line contains \"/d \" and action_process_image_command_line contains \".scr\" and action_process_image_command_line contains \"/f\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential ransomware activity that uses LegalNotice messages in the Windows registry.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\LegalNoticeCaption\" or action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\LegalNoticeText\") and ((action_registry_value_name contains \"encrypted\" or action_registry_value_name contains \"Unlock-Password\" or action_registry_value_name contains \"paying\") or (action_registry_data contains \"encrypted\" or action_registry_data contains \"Unlock-Password\" or action_registry_data contains \"paying\")))\n\n\n\n"}
{"prompt": "I want to find suspicious log entries that mention entering promiscuous mode, deactivating services, oversized packets, or imuxsock dropping messages.", "response": "datamodel\n| filter ( contains \"entered promiscuous mode\" or  contains \"Deactivating service\" or  contains \"Oversized packet received from\" or  contains \"imuxsock begins to drop messages\")\n\n\n\n"}
{"prompt": "I want to see if any RDP connections are being used to connect to HTTP or HTTPS ports.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and Initiated = \"true\" and (action_local_port = 3389 or action_remote_port = 3389) and (action_local_port in (80, 443) or action_remote_port in (80, 443)))\n\n\n\n"}
{"prompt": "I want to detect malicious activities related to EDA techniques like process manipulation, remote control commands, DNS tunneling, and session hijacking.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"System.Diagnostics.Process\" and ScriptBlockText contains \"Stop-Computer\" and ScriptBlockText contains \"Restart-Computer\" and ScriptBlockText contains \"Exception in execution\" and ScriptBlockText contains \"$cmdargs\" and ScriptBlockText contains \"Close-Dnscat2Tunnel\") and (ScriptBlockText contains \"set type=$LookupType`nserver\" and ScriptBlockText contains \"$Command | nslookup 2>&1 | Out-String\" and ScriptBlockText contains \"New-RandomDNSField\" and ScriptBlockText contains \"[Convert]::ToString($SYNOptions, 16)\" and ScriptBlockText contains \"$Session.Dead = $True\" and ScriptBlockText contains \"$Session[\\\"Driver\\\"] -eq\")\n\n\n\n"}
{"prompt": "I want to see alerts related to processes using reg.exe to query software information like version numbers.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\reg\\.exe\" and (action_process_image_command_line contains \"query\" and action_process_image_command_line ~= \".*\\\\software\\\\.*\" and action_process_image_command_line contains \"/v\" and action_process_image_command_line contains \"svcversion\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to potential exploitation attempts of CVE-2021-26857 on my endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\UMWorkerProcess\\.exe\" and  not ((action_process_image_path ~= \".*wermgr\\.exe\" or action_process_image_path ~= \".*WerFault\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see which applications have had bulk access deprovisioned by looking at records in the Camssiem and pan_dss_raw datasets where the provActionStatus is \"Delete\".  I also want to know who provided access, who deprovisioned it, and how many times this has happened for each application.", "response": "config case_sensitive = false\n| dataset IN (cams_Camssiem_audit_raw, cams_Camssiem_raw)\n| filter txtProvActionStatus = \"Delete\"\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_dst, company_name as companyname1\n) as JT1 JT1.companyname1 = trim(EmpNo)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as user_src, company_name as companyname2\n) as JT2 JT2.companyname2 = trim(Access_Provided_By)\n\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name as fullname, company_name as companyname3\n) as JT3 JT3.companyname3 = trim(txtDelegatedEmpNo)\n| fields empno, user_dst, access_provided_by, user_src,\ntxtDelegatedEmpNo, fullname, _vendor, txtRemarks,\ncontext1, txtFileName, ContextValue1, intWorkFlowStage,\n_vendor, context6, intAppRoleId, flgSynchronized,\nrole, IntAppID, txtProvActionStatus\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by access_provided_by,\nIntAppID,\n_time\n| filter matched_events >= 15 and array_length(empno) >= 15\n| alter aggregation_criteria = \"ileventuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 15)), 1)"}
{"prompt": "I want to find potential persistence methods that use the \"Microsoft Compatibility Appraiser\" task scheduled via schtasks.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" or actor_process_file_original_name = \"schtasks.exe\") and (action_process_image_command_line contains \"run \" and action_process_image_command_line contains \"\\\\Application Experience\\\\Microsoft Compatibility Appraiser\"))\n\n\n\n"}
{"prompt": "I want to detect attempts to uninstall the Crowdstrike Falcon Sensor.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\WindowsSensor.exe\" and action_process_image_command_line contains \" /uninstall\" and action_process_image_command_line contains \" /quiet\")\n\n\n\n"}
{"prompt": "I want to see DNS indicators for DPRK threat actors communicating via Command and Control using domains like \"connection.lockscreen.kro.kr\" and \"updating.dothome.co.kr.\"", "response": "datamodel\n| filter xdm.network.dns.dns_question.name in (\"connection.lockscreen.kro.kr\", \"updating.dothome.co.kr\")\n\n\n\n"}
{"prompt": "I want to find suspicious processes that might be using Invoke-Obfuscation to execute obfuscated IEX commands.", "response": "datamodel\n| filter (xdm.target.process.executable.path ~= \"\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\[\" or xdm.target.process.executable.path ~= \"\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\[\" or xdm.target.process.executable.path ~= \"\\$env\\:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env\\:Public\\[\" or xdm.target.process.executable.path ~= \"\\$env\\:ComSpec\\[(\\s*\\d{1,3}\\s*\\,){2}\" or xdm.target.process.executable.path ~= \"\\\\*mdr\\*W\\s*\\)\\.Name\" or xdm.target.process.executable.path ~= \"\\$VerbosePreference\\.ToString\\(\" or xdm.target.process.executable.path ~= \"String\\]\\s*\\$VerbosePreference\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity where wget.exe downloads files from an IP address and saves them to common locations on the system.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wget\\.exe\" or actor_process_file_original_name = \"wget.exe\") and action_process_image_command_line ~= \"\\:\\/\\/[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\" and action_process_image_command_line contains \"http\" and (action_process_image_command_line ~= \"\\s\\-O\\s\" or action_process_image_command_line contains \"--output-document\") and ((action_process_image_command_line ~= \".*\\:\\\\PerfLogs\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Help\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line contains \"\\\\Temporary Internet\") or (action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Favorites\\\\.*\") or (action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Favourites\\\\.*\") or (action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Contacts\\\\.*\") or (action_process_image_command_line ~= \".*\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Pictures\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see all instances where the Privilege Escalation policy was modified on a computer.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4739\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of suspicious CustomShellHost executions on my endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\CustomShellHost\\.exe\" and  not (action_process_image_path = \"C:\\\\Windows\\\\explorer.exe\")\n\n\n\n"}
{"prompt": "I want to detect instances of Invoke-Obfuscation being used to obfuscate IEX invocations on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName ~= \"\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\[\" or ServiceFileName ~= \"\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\[\" or ServiceFileName ~= \"\\$env\\:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env\\:Public\\[\" or ServiceFileName ~= \"\\$env\\:ComSpec\\[(\\s*\\d{1,3}\\s*\\,){2}\" or ServiceFileName ~= \"\\\\*mdr\\*W\\s*\\)\\.Name\" or ServiceFileName ~= \"\\$VerbosePreference\\.ToString\\(\" or ServiceFileName ~= \"String\\]\\s*\\$VerbosePreference\"))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious instances of `rundll32.exe` being used with control panel files.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\System32\\\\control\\.exe\" and (action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\")) and  not (action_process_image_command_line contains \"Shell32.dll\")\n\n\n\n"}
{"prompt": "I want to analyze Windows security logs and understand common error codes and failure reasons for logon events. I need information like usernames, device IPs, event types, and the specific reason for any failures.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"1102\")\n| alter srchostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps(wingrps.host_name = srchostname or wingrps.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE in (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| filter xdm.source.user.username not in (\"issvcdbmgmt\", \"isfimhdemail\", \"isscmadma\", \"isedocdev\", \"isedoctst\", \"isedocuat\", \"isedocprd\", \"isinfyplsdev\", \"isinfyplstst\", \"isinfyplsuat\", \"isinfyplsprd\", \"isgimsuat\", \"isenexttst\", \"isenextuat\", \"isenextprd\", \"ishmyplstst\", \"ishmyplsuat\", \"ishmyplsprd\", \"issbtstfarmadm\", \"issbtstsvcadm\", \"issbtstappadm1\", \"issbtstappadm2\", \"issbtstappadm3\", \"issbprdfarmadm\", \"issbprdsvcadm\", \"issbprdappadm1\", \"issbprdappadm2\", \"issbprdappadm3\", \"iststsvcadmas\", \"isiotgadmprd\", \"ispvadmtst\", \"ispltstfarmadm\", \"ispltstsvcadm\", \"ispltstappadm1\", \"ispltstappadm2\", \"ispltstappadm3\", \"ispltstappadm4\", \"ispltstappadm5\", \"issbtstfarmadm\", \"issbtstsvcadm\", \"issbtstappadm1\", \"issbtstappadm2\", \"issbtstappadm3\", \"isrmstst\", \"isrmsuat\", \"isrmsprd\", \"ispvadmprd\", \"istoltst\", \"istoluat\", \"istolprd\", \"isitmstst\", \"isitmsprd\", \"isitmsuat\", \"isplprdfarmadm\", \"isplprdsvcadm\", \"isplprdappadm1\", \"isplprdappadm2\", \"isplprdappadm3\", \"issbprdfarmadm\", \"issbprdsvcadm\", \"issbprdappadm1\", \"issbprdappadm2\", \"issbprdappadm2\", \"csbadm\", \"sapservicecsb\", \"isftstst\", \"isftsuat\", \"isftsprd\", \"isbztpwbtst\", \"isbztpwbuat\", \"isbztpwbprd\", \"cs1adm\", \"sapservicecs1\", \"isctxhyptstadm\", \"isamsdev\", \"isamstst\", \"isamsuat\", \"isamsprd\", \"isicpdev\", \"isicptst\", \"isicpuat\", \"isicpprd\", \"isgblpaydev\", \"isgblpaytst\", \"isgblpayuat\", \"isgblpayprd\", \"isgblpayprd\", \"isfpitmsuat\", \"isbztismdev\", \"isbztismtst\", \"isbztismsvt\", \"isbztismuat\", \"isbztismprd\", \"ispmtstfarmadm\", \"ispmtstsvcadm\", \"ispmtstappadm1\", \"ispmtstappadm2\", \"ispmtstappadm3\", \"ispmprdfarmadm\", \"ispmprdsvcadm\", \"ispmprdappadm1\", \"ispmprdappadm2\", \"ispmprdappadm3\", \"ismsvtwsadm\", \"ismsvtwsadmin\", \"isccwtst\", \"isepmmon\", \"istmcmadm\", \"iscls1admuat\", \"iscls1admauat\", \"iscls2admuat\", \"iscls2admauat\", \"iscls3admuat\", \"iscls3admauat\", \"iscls4admuat\", \"iscls4admauat\", \"isxnetadmt\", \"isxnetadmat\", \"isprimetst\", \"isprimeuat\", \"isprimeprd\", \"isprdsvcadm\", \"isprdsvcadma\", \"is_servicerobot\", \"isdsedev\", \"isdsetst\", \"isdseuat\", \"isdseprd\", \"isbzreltst\", \"isbzrelprd\", \"iscls1sbadm\", \"isinfptladm\", \"issapprdsvcadm\", \"issapprdsvcadma\", \"isdbtmpsvcacct\", \"ispfsagdev\", \"ispfsagtst\", \"ispfsaguat\", \"ispfsagprd\", \"isdespatchtst\", \"isdespatchuat\", \"isdespatchprd\", \"isinfydirtst\", \"isinfydiruat\", \"isinfydirprd\", \"issvc_ucp\", \"isctxpocxadm\", \"isdespatchdev\", \"iswlsphoenixtst\", \"iswarbtcprd\", \"issiemusr\", \"isspstst\", \"isspsprd\", \"isomsdev\", \"isbztadmtest\", \"isitvdev\", \"ishmyplsdev\", \"isedsplsdev\", \"iscpsdbdev\", \"isimasadm\", \"isinfydirdev\", \"issmtst\", \"isnpsdev\", \"isnpstst\", \"isnpsuat\", \"isnpsprd\", \"isdevrptadm\", \"isadmpswd\", \"isscndev\", \"iststrptadm\", \"isprdrptadm\", \"isspportalsuperreade\", \"istfsadmtest\", \"istfsadmtst\", \"isbiadmtst\", \"isbiadmprd\", \"isprojadmsrv\", \"iscareerdev\", \"iscareertst\", \"iscareeruat\", \"iscareerprd\", \"isglsdev\", \"istmsdev\", \"ispdcdev\", \"ispdctst\", \"ispdcuat\", \"ispdcprd\", \"iswladmtst\", \"isbresdev\", \"isbrestst\", \"isbresuat\", \"isbresprd\", \"isattenddev\", \"isspportalsuperread\", \"isbzreldev\", \"isbzreluat\", \"isspssadmdev\", \"isindtdev\", \"isspssadmtst\", \"isspssadmtprd\", \"ispmsdev\", \"ispmstst\", \"ispmsuat\", \"ispmsprd\", \"isewbtst\", \"isewbuat\", \"isewbprd\", \"issaperecsoa\", \"isdbevtmgmt\", \"isewbdev\", \"auth_scan\", \"isadbtst\", \"isadbprd\", \"isadbdev\", \"isphtstfarmadm\", \"isphprdfarmadm\", \"isopalisadm\", \"iserosterdev\", \"isgsdpngdev\", \"isgsdpngtst\", \"isgsdpnguat\", \"isgsdpngprd\", \"sapservice\", \"adm\", \"issapdevmgr\", \"issapbonwdmgr\", \"sapservice\", \"adm\", \"isbpctstadm\", \"issaptstmgr\", \"iststsvcadm\", \"isbossosvcaccttst\", \"isssmq\", \"isintsuperreader\", \"isintsuperuser\", \"isscedev\", \"ispbsdev\", \"islpadev\", \"islpatst\", \"islpauat\", \"islpaprd\", \"va_auth_scan\", \"isphadmt\", \"isuatsvcadm\", \"ispmtstappadm4\", \"ispmtstappadm5\", \"ispmprdappadm4\", \"ispmprdappadm5\", \"isphtstsvcadm\", \"isphtstappadm1\", \"isphtstappadm2\", \"isphtstappadm3\", \"isphtstappadm4\", \"isphtstappadm5\", \"isphprdsvcadm\", \"isphprdappadm1\", \"isphprdappadm2\", \"isphprdappadm3\", \"isphprdappadm4\", \"isphprdappadm5\", \"issbtstappadm4\", \"issbtstappadm5\", \"issbprdappadm4\", \"issbprdappadm5\", \"ismphadmsvt\", \"isspldev\", \"isintwsadm\", \"issiemweb\", \"istimesheetdev\", \"istimesheettst\", \"istimesheetuat\", \"istimesheetprd\", \"isuatsvcadma\", \"isdmststfarmadm\", \"isdmststsvcadm\", \"isdmststappadm1\", \"isdmststappadm2\", \"isdmststappadm3\", \"isdmststappadm4\", \"isdmststappadm5\", \"isdmsprdfarmadm\", \"isdmsprdsvcadm\", \"isdmsprdappadm1\", \"isdmsprdappadm2\", \"isdmsprdappadm3\", \"isdmsprdappadm4\", \"isdmsprdappadm5\", \"isdrbztadm\", \"issapprdwsvcadma\", \"issapprdwsvcadm\", \"issapprdwsvcadma\", \"isphadm\", \"isbztipmtst\", \"isbztipmuat\", \"isbztipmprd\", \"isfinschdev\", \"isfinschtst\", \"isfinschuat\", \"isfinschprd\", \"isstapdev\", \"isstaptst\", \"isstapuat\", \"isstapprd\", \"isfusionadm\", \"isiftsvcadm\", \"isiftsvcadma\", \"isdsmadm\", \"isspstst\", \"isspssvt\", \"isenbappsvc\", \"islogarchadm\", \"islogarchadma\", \"istfsmsdadmt1\", \"iscpsradbtst\", \"issapdmssrmp\", \"soladm\", \"sapservicesol\", \"ismyworksprd\", \"ismyworkstst\", \"ismyworksdev\", \"ismyworksuat\", \"isbpsdev\", \"isbpstst\", \"isbpsuat\", \"isbpsprd\", \"ismsdtstappadm1\", \"ismsdtstappadm2\", \"ismsdtstsvcadm1\", \"ismsdtstsvcadm2\", \"ismsdtstdepadm1\", \"ismsdtstdepadm2\", \"ismsdtstdbadm1\", \"ismsdtstdbadm2\", \"ismsduatappadm1\", \"ismsduatappadm2\", \"ismsduatsvcadm1\", \"ismsduatsvcadm2\", \"ismsduatdepadm1\", \"ismsduatdepadm2\", \"ismsduatdbadm1\", \"ismsduatdbadm2\", \"ismsdtstfarmadm1\", \"ismsduatfarmadm1\", \"nwdadm\", \"nwqadm\", \"nwpadm\", \"sapservicenwd\", \"sapservicenwq\", \"sapservicenwp\", \"gwqadm\", \"gwpadm\", \"sapservicegwq\", \"sapservicegwp\", \"ismsdprdappadm1\", \"ismsdprdappadm2\", \"ismsdprdsvcadm1\", \"ismsdprdsvcadm2\", \"ismsdprddepadm1\", \"ismsdprddepadm2\", \"ismsdprdfarmadm1\", \"istablpoc\", \"isngptst\", \"isngpuat\", \"isngpprd\", \"isuatbtcadm\", \"isuatwsadma\", \"ispdwlogpars\", \"isipmssotst\", \"isdmsdevfarmadm\", \"isdmsdevsvcadm\", \"isdmsdevappadm1\", \"isdmsdevappadm2\", \"isdmsdevappadm3\", \"isdmsdevappadm4\", \"isdmsdevappadm5\", \"issvc_vcntr\", \"issvc_sql\", \"isucp_wdsdeploy\", \"issvc_srm\", \"issvc_ucpdcntr\", \"isucpadmin\", \"isucpnetworkadmin\", \"isucpserveradmin\", \"isucpstorageadmin\", \"isucp_administrator\", \"ispmtstfarmadm\", \"isfimhdapppoolsvc\", \"isscappadm\", \"waronsite\", \"isctxadm\", \"isfadmprd\", \"iswcfadmprd\", \"isscmadm\", \"isscappadm\", \"akash_thakur01\", \"amit_kumar207\", \"amit_tikkiwal\", \"kannanbalamurali_k\", \"mallika_b\", \"priyank_aeron\", \"saptaparni_sarkar\", \"satish.kongara\", \"shivangi_singh09\", \"shivanshu\", \"sushrita_sahoo\", \"vimento_vincent\", \"vipindas_v01\", \"iststbtcadm\", \"islogarchadm\", \"islogarchadma\", \"islogarchdbadm\", \"uswinfprdschdadm\", \"useinfprdschdadm\", \"euninfprdschdadm\", \"swapnil.tripathi\", \"islogarchadm\", \"islogarchadma\", \"istfsmngra\", \"islogarchdbadm\", \"issbprdfarmadm\", \"issbtstfarmadm\", \"isdmsadmin\", \"isdmststfarmadm\", \"isdmsdevfarmadm\", \"isspsprd\", \"isspstst\", \"isspschdev\", \"ispmprdfarmadm\", \"ispmtstfarmadm\", \"uswinfprdschdadm\", \"uswinftstschdadm\", \"useinfprdschdadm\", \"euninftstschdadm\", \"euninfprdschdadm\", \"iswwjobadma\", \"isintlogarchadm\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_domain\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see detections for processes that are likely using AdFind for malicious purposes.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"domainlist\" or action_process_image_command_line contains \"trustdmp\" or action_process_image_command_line contains \"dcmodes\" or action_process_image_command_line contains \"adinfo\" or action_process_image_command_line contains \" dclist \" or action_process_image_command_line contains \"computer_pwdnotreqd\" or action_process_image_command_line contains \"objectcategory=\" or action_process_image_command_line contains \"-subnets -f\" or action_process_image_command_line contains \"name=\\\"Domain Admins\\\"\" or action_process_image_command_line contains \"-sc u:\" or action_process_image_command_line contains \"domainncs\" or action_process_image_command_line contains \"dompol\" or action_process_image_command_line contains \" oudmp \" or action_process_image_command_line contains \"subnetdmp\" or action_process_image_command_line contains \"gpodmp\" or action_process_image_command_line contains \"fspdmp\" or action_process_image_command_line contains \"users_noexpire\" or action_process_image_command_line contains \"computers_active\" or action_process_image_command_line contains \"computers_pwdnotreqd\")\n\n\n\n"}
{"prompt": "I want to detect PowerShell scripts that use Invoke-Obfuscation and obfuscate code via stdin.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter Payload ~= \"(?i)(set).*\\&\\&\\s?set.*(environment|invoke|\\$?\\{?input).*\\&\\&.*\\\"\"\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell or Cmd are launched with elevated privileges from unexpected locations.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\", \"Cmd.Exe\")) and ((action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\") and action_process_logon_id = \"0x3e7\")) and  not ((actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\ProgramData\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\WinSxS\\\\.*\") or actor_process_image_path = \"None\" or actor_process_image_path = \"\") and  not ((actor_process_image_path ~= \".*\\:\\\\ManageEngine\\\\ADManager\\ Plus\\\\pgsql\\\\bin\\\\postgres\\.exe\" and action_process_image_path ~= \".*\\\\cmd\\.exe\") or (action_process_image_command_line contains \":\\\\WINDOWS\\\\system32\\\\cmd.exe /c \\\"\" and action_process_cwd ~= \".*\\:\\\\WINDOWS\\\\Temp\\\\asgard2\\-agent\\\\.*\") or (actor_process_image_path ~= \".*\\:\\\\IBM\\\\SpectrumProtect\\\\webserver\\\\scripts\\\\.*\" and action_process_image_command_line ~= \".*\\:\\\\IBM\\\\SpectrumProtect\\\\webserver\\\\scripts\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see events where cmd.exe creates a text file on a user's desktop.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\cmd\\.exe\" or xdm.source.process.name ~= \".*\\\\cmd\\.exe\") and (xdm.target.file.filename ~= \".*\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\Desktop\\\\.*\") and xdm.target.file.filename ~= \".*\\.txt\")\n\n\n\n"}
{"prompt": "I want to find instances of Amazon VPC changes detected by CloudTrail logs where either the source or target user is \"root\".", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n\n| filter eventName IN (\"Createvpc\", \"Deletevpc\", \"ModifyvpcAttribute\", \"AcceptvpcPeeringConnection\", \"CreatevpcPeeringConnection\", \"DeletevpcPeeringConnection\", \"RejectvpcPeeringConnection\", \"AttachClassicLinkvpc\", \"DetachClassicLinkvpc\", \"DisablevpcClassicLink\", \"EnablevpcClassicLink\")\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = json_extract_scalar(requestParameters, \"$.groupId\"),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username1 = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username2 = json_extract_scalar(userIdentity, \"$.userName\"),\ntarget_username3 = trim(json_extract(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"\\\"\")\n| filter target_username1 = \"root\" or target_username2 = \"root\" or target_username3 = \"root\" or source_username = \"root\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all instances where mailbox permissions were viewed in Office 365, even if no specific changes were made.  I need this information to identify potential security risks and follow up with our Exchange administrators.", "response": "config case_sensitive = false\n| dataset = msft_o365_exchange_online_raw\n| filter Operation IN (\"Get-MailboxFolderPermission\", \"Get-MailboxPermission\", \"Get-RecipientPermission\", \"Get-AdPermission\")\n| alter arraycount = array_length(regextract(Parameters, \"Name\"))\n| alter permission = if(arraycount = 1, json_extract_scalar(parameters, \"$[0].Value\"), if(arraycount = 2, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\")), if(arraycount = 3, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\"), \",\", json_extract_scalar(parameters, \"$[2].Value\")), if(arraycount = 4, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\"), \",\", json_extract_scalar(parameters, \"$[2].Value\"), \",\", json_extract_scalar(parameters, \"$[3].Value\"))))))\n| alter username = arrayindex(split(UserId, \"@\"), 0)\n| join type = left\n(dataset = pan_dss_raw\n| filter security_groups contains \"Tier0Users\" or security_groups contains \"Tier1Users\"\n) as enterprise_admin enterprise_admin.sam_account_name = username\n| filter sam_account_name = null\n| fields Operation, MailboxOwnerUPN, UserId, ObjectId,\npermission, Parameters, ResultStatus, _time, CreationTime,\nusername\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to see CloudTrail activity in AWS that involves changes like creating, updating, deleting trails, or starting/stopping logging. I'm particularly interested in events where \"root\" is involved as either the source or target user.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n\n| filter eventName IN (\"CreateTrail\", \"UpdateTrail\", \"DeleteTrail\", \"StartLogging\", \"StopLogging\")\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = json_extract_scalar(requestParameters, \"$.groupId\"),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username1 = json_extract_scalar(userIdentity, \"$.type\"),\ntarget_username2 = json_extract_scalar(userIdentity, \"$.userName\"),\ntarget_username3 = trim(json_extract(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"\\\"\")\n| filter target_username1 = \"root\" or target_username2 = \"root\" or target_username3 = \"root\" or source_username = \"root\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all messages disposed of in my Swift application.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.description contains \"message disposed\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find new PowerShell instances created on endpoints.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter PipeName ~= \"\\\\PSHost.*\"\n\n\n\n"}
{"prompt": "I want to find instances where requests target URIs ending with \".class\" in my network traffic logs.", "response": "datamodel\n| filter xdm.network.http.url ~= \".*\\.class\"\n\n\n\n"}
{"prompt": "I want to find potential PowerShell reverse shell connections based on processes using specific command lines.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\") or (action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\")) and (action_process_image_command_line contains \" Net.Sockets.TCPClient\" and action_process_image_command_line contains \".GetStream(\" and action_process_image_command_line contains \".Write(\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when someone gets elevated permissions to manage all Azure subscriptions.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName = \"MICROSOFT.AUTHORIZATION/ELEVATEACCESS/ACTION\"\n\n\n\n"}
{"prompt": "I want to find instances where scheduled tasks are being deleted that involve important system functions like BitLocker, ExploitGuard, System Restore, Windows Update Orchestrator, Windows Defender, Windows Backup, or WindowsUpdate.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \"/delete\" and action_process_image_command_line contains \"/tn\") and (action_process_image_command_line contains \"\\\\Windows\\\\BitLocker\" or action_process_image_command_line contains \"\\\\Windows\\\\ExploitGuard\" or action_process_image_command_line contains \"\\\\Windows\\\\SystemRestore\\\\SR\" or action_process_image_command_line ~= \".*\\\\Windows\\\\UpdateOrchestrator\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Windows\\ Defender\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\WindowsBackup\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\WindowsUpdate\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to common Spring Framework exceptions like AccessDeniedException or MissingCsrfTokenException.", "response": "datamodel\n| filter ( contains \"AccessDeniedException\" or  contains \"CsrfException\" or  contains \"InvalidCsrfTokenException\" or  contains \"MissingCsrfTokenException\" or  contains \"CookieTheftException\" or  contains \"InvalidCookieException\" or  contains \"RequestRejectedException\")\n\n\n\n"}
{"prompt": "I want to find instances where WMIC is being used to check if remote services are running on other devices.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\WMIC\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and (action_process_image_command_line contains \"/node:\" and action_process_image_command_line contains \"service\"))\n\n\n\n"}
{"prompt": "I want to detect attempts to hide system information and controls from users by modifying registry settings.", "response": "preset = xdr_registry\n| filter (((action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\HideClock\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\HideSCAHealth\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\HideSCANetwork\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\HideSCAPower\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\HideSCAVolume\") and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\")) or ((action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\ShowInfoTip\" or action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\ShowCompColor\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\")))\n\n\n\n"}
{"prompt": "I want to see all files that could potentially be LSASS process memory dumps.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*\\\\lsass\\.dmp\" or xdm.target.file.filename ~= \".*\\\\lsass\\.zip\" or xdm.target.file.filename ~= \".*\\\\lsass\\.rar\" or xdm.target.file.filename ~= \".*\\\\Andrew\\.dmp\" or xdm.target.file.filename ~= \".*\\\\Coredump\\.dmp\" or xdm.target.file.filename ~= \".*\\\\NotLSASS\\.zip\" or xdm.target.file.filename ~= \".*\\\\PPLBlade\\.dmp\") or (xdm.target.file.filename contains \"\\\\lsass_2\" or xdm.target.file.filename contains \"\\\\lsassdump\" or xdm.target.file.filename contains \"\\\\lsassdmp\") or (xdm.target.file.filename contains \"\\\\lsass\" and xdm.target.file.filename contains \".dmp\") or (xdm.target.file.filename contains \"SQLDmpr\" and xdm.target.file.filename ~= \".*\\.mdmp\") or (xdm.target.file.filename ~= \"nanodump.*\" and xdm.target.file.filename ~= \".*\\.dmp\"))\n\n\n\n"}
{"prompt": "I want to find potential persistence attempts that involve tampering with existing Windows services.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"sc \" and action_process_image_command_line contains \"config \" and action_process_image_command_line contains \"binpath=\") or (action_process_image_command_line contains \"sc \" and action_process_image_command_line contains \"failure\" and action_process_image_command_line contains \"command=\")) or (((action_process_image_command_line contains \"reg \" and action_process_image_command_line contains \"add \" and action_process_image_command_line contains \"FailureCommand\") or (action_process_image_command_line contains \"reg \" and action_process_image_command_line contains \"add \" and action_process_image_command_line contains \"ImagePath\")) and (action_process_image_command_line contains \".sh\" or action_process_image_command_line contains \".exe\" or action_process_image_command_line contains \".dll\" or action_process_image_command_line contains \".bin$\" or action_process_image_command_line contains \".bat\" or action_process_image_command_line contains \".cmd\" or action_process_image_command_line contains \".js\" or action_process_image_command_line contains \".msh$\" or action_process_image_command_line contains \".reg$\" or action_process_image_command_line contains \".scr\" or action_process_image_command_line contains \".ps\" or action_process_image_command_line contains \".vb\" or action_process_image_command_line contains \".jar\" or action_process_image_command_line contains \".pl\"))\n\n\n\n"}
{"prompt": "I want to check if any of these VPN extension names might be related to running Chrome extensions through the registry.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"Software\\\\Wow6432Node\\\\Google\\\\Chrome\\\\Extensions\" and action_registry_key_name ~= \".*update\\_url\") and (action_registry_key_name contains \"fdcgdnkidjaadafnichfpabhfomcebme\" or action_registry_key_name contains \"fcfhplploccackoneaefokcmbjfbkenj\" or action_registry_key_name contains \"bihmplhobchoageeokmgbdihknkjbknd\" or action_registry_key_name contains \"gkojfkhlekighikafcpjkiklfbnlmeio\" or action_registry_key_name contains \"jajilbjjinjmgcibalaakngmkilboobh\" or action_registry_key_name contains \"gjknjjomckknofjidppipffbpoekiipm\" or action_registry_key_name contains \"nabbmpekekjknlbkgpodfndbodhijjem\" or action_registry_key_name contains \"kpiecbcckbofpmkkkdibbllpinceiihk\" or action_registry_key_name contains \"nlbejmccbhkncgokjcmghpfloaajcffj\" or action_registry_key_name contains \"omghfjlpggmjjaagoclmmobgdodcjboh\" or action_registry_key_name contains \"bibjcjfmgapbfoljiojpipaooddpkpai\" or action_registry_key_name contains \"mpcaainmfjjigeicjnlkdfajbioopjko\" or action_registry_key_name contains \"jljopmgdobloagejpohpldgkiellmfnc\" or action_registry_key_name contains \"lochiccbgeohimldjooaakjllnafhaid\" or action_registry_key_name contains \"nhnfcgpcbfclhfafjlooihdfghaeinfc\" or action_registry_key_name contains \"ookhnhpkphagefgdiemllfajmkdkcaim\" or action_registry_key_name contains \"namfblliamklmeodpcelkokjbffgmeoo\" or action_registry_key_name contains \"nbcojefnccbanplpoffopkoepjmhgdgh\" or action_registry_key_name contains \"majdfhpaihoncoakbjgbdhglocklcgno\" or action_registry_key_name contains \"lnfdmdhmfbimhhpaeocncdlhiodoblbd\" or action_registry_key_name contains \"eppiocemhmnlbhjplcgkofciiegomcon\" or action_registry_key_name contains \"cocfojppfigjeefejbpfmedgjbpchcng\" or action_registry_key_name contains \"foiopecknacmiihiocgdjgbjokkpkohc\" or action_registry_key_name contains \"hhdobjgopfphlmjbmnpglhfcgppchgje\" or action_registry_key_name contains \"jgbaghohigdbgbolncodkdlpenhcmcge\" or action_registry_key_name contains \"inligpkjkhbpifecbdjhmdpcfhnlelja\" or action_registry_key_name contains \"higioemojdadgdbhbbbkfbebbdlfjbip\" or action_registry_key_name contains \"hipncndjamdcmphkgngojegjblibadbe\" or action_registry_key_name contains \"iolonopooapdagdemdoaihahlfkncfgg\" or action_registry_key_name contains \"nhfjkakglbnnpkpldhjmpmmfefifedcj\" or action_registry_key_name contains \"jpgljfpmoofbmlieejglhonfofmahini\" or action_registry_key_name contains \"fgddmllnllkalaagkghckoinaemmogpe\" or action_registry_key_name contains \"ejkaocphofnobjdedneohbbiilggdlbi\" or action_registry_key_name contains \"keodbianoliadkoelloecbhllnpiocoi\" or action_registry_key_name contains \"hoapmlpnmpaehilehggglehfdlnoegck\" or action_registry_key_name contains \"poeojclicodamonabcabmapamjkkmnnk\" or action_registry_key_name contains \"dfkdflfgjdajbhocmfjolpjbebdkcjog\" or action_registry_key_name contains \"kcdahmgmaagjhocpipbodaokikjkampi\" or action_registry_key_name contains \"klnkiajpmpkkkgpgbogmcgfjhdoljacg\" or action_registry_key_name contains \"lneaocagcijjdpkcabeanfpdbmapcjjg\" or action_registry_key_name contains \"pgfpignfckbloagkfnamnolkeaecfgfh\" or action_registry_key_name contains \"jplnlifepflhkbkgonidnobkakhmpnmh\" or action_registry_key_name contains \"jliodmnojccaloajphkingdnpljdhdok\" or action_registry_key_name contains \"hnmpcagpplmpfojmgmnngilcnanddlhb\" or action_registry_key_name contains \"ffbkglfijbcbgblgflchnbphjdllaogb\" or action_registry_key_name contains \"kcndmbbelllkmioekdagahekgimemejo\" or action_registry_key_name contains \"jdgilggpfmjpbodmhndmhojklgfdlhob\" or action_registry_key_name contains \"bihhflimonbpcfagfadcnbbdngpopnjb\" or action_registry_key_name contains \"ppajinakbfocjfnijggfndbdmjggcmde\" or action_registry_key_name contains \"oofgbpoabipfcfjapgnbbjjaenockbdp\" or action_registry_key_name contains \"bhnhkdgoefpmekcgnccpnhjfdgicfebm\" or action_registry_key_name contains \"knmmpciebaoojcpjjoeonlcjacjopcpf\" or action_registry_key_name contains \"dhadilbmmjiooceioladdphemaliiobo\" or action_registry_key_name contains \"jedieiamjmoflcknjdjhpieklepfglin\" or action_registry_key_name contains \"mhngpdlhojliikfknhfaglpnddniijfh\" or action_registry_key_name contains \"omdakjcmkglenbhjadbccaookpfjihpa\" or action_registry_key_name contains \"npgimkapccfidfkfoklhpkgmhgfejhbj\" or action_registry_key_name contains \"akeehkgglkmpapdnanoochpfmeghfdln\" or action_registry_key_name contains \"gbmdmipapolaohpinhblmcnpmmlgfgje\" or action_registry_key_name contains \"aigmfoeogfnljhnofglledbhhfegannp\" or action_registry_key_name contains \"cgojmfochfikphincbhokimmmjenhhgk\" or action_registry_key_name contains \"ficajfeojakddincjafebjmfiefcmanc\" or action_registry_key_name contains \"ifnaibldjfdmaipaddffmgcmekjhiloa\" or action_registry_key_name contains \"jbnmpdkcfkochpanomnkhnafobppmccn\" or action_registry_key_name contains \"apcfdffemoinopelidncddjbhkiblecc\" or action_registry_key_name contains \"mjolnodfokkkaichkcjipfgblbfgojpa\" or action_registry_key_name contains \"oifjbnnafapeiknapihcmpeodaeblbkn\" or action_registry_key_name contains \"plpmggfglncceinmilojdkiijhmajkjh\" or action_registry_key_name contains \"mjnbclmflcpookeapghfhapeffmpodij\" or action_registry_key_name contains \"bblcccknbdbplgmdjnnikffefhdlobhp\" or action_registry_key_name contains \"aojlhgbkmkahabcmcpifbolnoichfeep\" or action_registry_key_name contains \"lcmammnjlbmlbcaniggmlejfjpjagiia\" or action_registry_key_name contains \"knajdeaocbpmfghhmijicidfcmdgbdpm\" or action_registry_key_name contains \"bdlcnpceagnkjnjlbbbcepohejbheilk\" or action_registry_key_name contains \"edknjdjielmpdlnllkdmaghlbpnmjmgb\" or action_registry_key_name contains \"eidnihaadmmancegllknfbliaijfmkgo\" or action_registry_key_name contains \"ckiahbcmlmkpfiijecbpflfahoimklke\" or action_registry_key_name contains \"macdlemfnignjhclfcfichcdhiomgjjb\" or action_registry_key_name contains \"chioafkonnhbpajpengbalkececleldf\" or action_registry_key_name contains \"amnoibeflfphhplmckdbiajkjaoomgnj\" or action_registry_key_name contains \"llbhddikeonkpbhpncnhialfbpnilcnc\" or action_registry_key_name contains \"pcienlhnoficegnepejpfiklggkioccm\" or action_registry_key_name contains \"iocnglnmfkgfedpcemdflhkchokkfeii\" or action_registry_key_name contains \"igahhbkcppaollcjeaaoapkijbnphfhb\" or action_registry_key_name contains \"njpmifchgidinihmijhcfpbdmglecdlb\" or action_registry_key_name contains \"ggackgngljinccllcmbgnpgpllcjepgc\" or action_registry_key_name contains \"kchocjcihdgkoplngjemhpplmmloanja\" or action_registry_key_name contains \"bnijmipndnicefcdbhgcjoognndbgkep\" or action_registry_key_name contains \"lklekjodgannjcccdlbicoamibgbdnmi\" or action_registry_key_name contains \"dbdbnchagbkhknegmhgikkleoogjcfge\" or action_registry_key_name contains \"egblhcjfjmbjajhjhpmnlekffgaemgfh\" or action_registry_key_name contains \"ehbhfpfdkmhcpaehaooegfdflljcnfec\" or action_registry_key_name contains \"bkkgdjpomdnfemhhkalfkogckjdkcjkg\" or action_registry_key_name contains \"almalgbpmcfpdaopimbdchdliminoign\" or action_registry_key_name contains \"akkbkhnikoeojlhiiomohpdnkhbkhieh\" or action_registry_key_name contains \"gbfgfbopcfokdpkdigfmoeaajfmpkbnh\" or action_registry_key_name contains \"bniikohfmajhdcffljgfeiklcbgffppl\" or action_registry_key_name contains \"lejgfmmlngaigdmmikblappdafcmkndb\" or action_registry_key_name contains \"ffhhkmlgedgcliajaedapkdfigdobcif\" or action_registry_key_name contains \"gcknhkkoolaabfmlnjonogaaifnjlfnp\" or action_registry_key_name contains \"pooljnboifbodgifngpppfklhifechoe\" or action_registry_key_name contains \"fjoaledfpmneenckfbpdfhkmimnjocfa\" or action_registry_key_name contains \"aakchaleigkohafkfjfjbblobjifikek\" or action_registry_key_name contains \"dpplabbmogkhghncfbfdeeokoefdjegm\" or action_registry_key_name contains \"padekgcemlokbadohgkifijomclgjgif\" or action_registry_key_name contains \"bfidboloedlamgdmenmlbipfnccokknp\"))\n\n\n\n"}
{"prompt": "I want to find suspicious processes that might be using RunAs-like flags to escalate privileges.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \" -u system \" or action_process_image_command_line contains \" --user system \" or action_process_image_command_line contains \" -u NT\" or action_process_image_command_line contains \" -u \\\"NT\" or action_process_image_command_line contains \" -u 'NT\" or action_process_image_command_line contains \" --system \" or action_process_image_command_line contains \" -u administrator \") and (action_process_image_command_line contains \" -c cmd\" or action_process_image_command_line contains \" -c \\\"cmd\" or action_process_image_command_line contains \" -c powershell\" or action_process_image_command_line contains \" -c \\\"powershell\" or action_process_image_command_line contains \" --command cmd\" or action_process_image_command_line contains \" --command powershell\" or action_process_image_command_line contains \" -c whoami\" or action_process_image_command_line contains \" -c wscript\" or action_process_image_command_line contains \" -c cscript\"))\n\n\n\n"}
{"prompt": "I want to see events where PowerShell policies are changed to an insecure level, excluding those related to Chocolatey installation.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Set-ExecutionPolicy\" and (ScriptBlockText contains \"Unrestricted\" or ScriptBlockText contains \"bypass\")) and  not ((ScriptBlockText contains \"(New-Object System.Net.WebClient).DownloadString('https:\n\n\n\n"}
{"prompt": "{I want to find all successful Office 365 login events that originated from a known malicious IP address.} \n\n\nThis prompt captures the essence of the query while using natural language.", "response": "dataset = msft_o365_azure_ad_raw\n| filter Workload = \"AzureActiveDirectory\"\n| filter Operation in (\"UserLoggedIn\")\n| filter UserId != NULL\n| iploc ActorIpAddress loc_country as IPtoCountry,\nloc_city as IPtoCity,\nloc_asn as IPtoASN,\nloc_continent as IPtoContinent\n| filter ActorIpAddress in (\"<IP>\")"}
{"prompt": "I want to find instances where Cmdl32 is used with the \"/vpn\" and \"/lan\" flags, as this could indicate an attempt to download files.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmdl32\\.exe\" or actor_process_file_original_name = \"CMDL32.EXE\") and (action_process_image_command_line contains \"/vpn\" and action_process_image_command_line contains \"/lan\"))\n\n\n\n"}
{"prompt": "I want to detect malicious code execution using the TAEF framework by looking for instances of \"te.exe\" being used.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\te\\.exe\" or actor_process_image_path ~= \".*\\\\te\\.exe\" or actor_process_file_original_name = \"\\\\te.exe\")\n\n\n\n"}
{"prompt": "I want to find instances where the SCX RunAsProvider ExecuteScript is used to execute a UNIX/Linux script from /etc/opt/microsoft/scx/conf/tmpdir/, potentially indicating privilege escalation.", "response": "preset = xdr_process\n| filter (action_process_username = \"root\" and action_process_logon_id = 0 and action_process_cwd = \"/var/opt/microsoft/scx/tmp\" and action_process_image_command_line contains \"/etc/opt/microsoft/scx/conf/tmpdir/scx\")\n\n\n\n"}
{"prompt": "I want to see which users have had over 100 account unlock events within a short period.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4767\") and xdm.source.user.username NOT IN (\"BPMSCCMADMIN\")\n\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.user.username\n| filter matched_events >= 100\n\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 100)), 1)"}
{"prompt": "I want to see alerts about potential malicious activity involving Regini.EXE modifying registry settings on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\regini\\.exe\" or actor_process_file_original_name = \"REGINI.EXE\") and  not (action_process_image_command_line ~= \"\\:[^\\ \\\\]\")\n\n\n\n"}
{"prompt": "I want to detect instances of new services being created using PowerShell on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"New-Service\" and action_process_image_command_line contains \"-BinaryPathName\")\n\n\n\n"}
{"prompt": "I want to detect suspicious activities related to Mimikatz using specific keywords and file names.", "response": "datamodel\n| filter ( contains \"dpapi::masterkey\" or  contains \"eo.oe.kiwi\" or  contains \"event::clear\" or  contains \"event::drop\" or  contains \"gentilkiwi.com\" or  contains \"kerberos::golden\" or  contains \"kerberos::ptc\" or  contains \"kerberos::ptt\" or  contains \"kerberos::tgt\" or  contains \"Kiwi Legit Printer\" or  contains \"lsadump::\" or  contains \"mimidrv.sys\" or  contains \"\\\\mimilib.dll\" or  contains \"misc::printnightmare\" or  contains \"misc::shadowcopies\" or  contains \"misc::skeleton\" or  contains \"privilege::backup\" or  contains \"privilege::debug\" or  contains \"privilege::driver\" or  contains \"sekurlsa::\") and  not (xdm.event.id = 15)\n\n\n\n"}
{"prompt": "I want to find instances where ScreenConnect was used to transfer files.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"ScreenConnect\" and action_evtlog_event_id = 201 and Data contains \"Transferred files with action\")\n\n\n\n"}
{"prompt": "I want to see files named \"debug.bin\" located in the Temp folder that are related to SafetyKatz.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\Temp\\\\debug\\.bin\"\n\n\n\n"}
{"prompt": "I want to see alerts for when DeviceCredentialDeployment.exe is being executed on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\DeviceCredentialDeployment\\.exe\"\n\n\n\n"}
{"prompt": "I want to find instances of Qakbot using Rundll32 exports for malicious purposes on my endpoints.", "response": "preset = xdr_process\n| filter (((actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\curl\\.exe\" or actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") and action_process_image_path ~= \".*\\\\rundll32\\.exe\" and (action_process_image_command_line ~= \".*\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\")) and (action_process_image_command_line ~= \".*aslr\" or action_process_image_command_line ~= \".*bind\" or action_process_image_command_line ~= \".*DrawThemeIcon\" or action_process_image_command_line ~= \".*GG10\" or action_process_image_command_line ~= \".*GL70\" or action_process_image_command_line ~= \".*jhbvygftr\" or action_process_image_command_line ~= \".*kjhbhkjvydrt\" or action_process_image_command_line ~= \".*LS88\" or action_process_image_command_line ~= \".*Motd\" or action_process_image_command_line ~= \".*N115\" or action_process_image_command_line ~= \".*next\" or action_process_image_command_line ~= \".*Nikn\" or action_process_image_command_line ~= \".*print\" or action_process_image_command_line ~= \".*qqqb\" or action_process_image_command_line ~= \".*qqqq\" or action_process_image_command_line ~= \".*RS32\" or action_process_image_command_line ~= \".*Test\" or action_process_image_command_line ~= \".*Time\" or action_process_image_command_line ~= \".*Updt\" or action_process_image_command_line ~= \".*vips\" or action_process_image_command_line ~= \".*Wind\" or action_process_image_command_line ~= \".*WW50\" or action_process_image_command_line ~= \".*X555\" or action_process_image_command_line ~= \".*XL55\" or action_process_image_command_line ~= \".*xlAutoOpen\" or action_process_image_command_line ~= \".*XS88\"))\n\n\n\n"}
{"prompt": "I want to see all events where PowerShell is used to disable Internet Explorer security features.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \" -name IEHarden \" and action_process_image_command_line contains \" -value 0 \") or (action_process_image_command_line contains \" -name DEPOff \" and action_process_image_command_line contains \" -value 1 \") or (action_process_image_command_line contains \" -name DisableFirstRunCustomize \" and action_process_image_command_line contains \" -value 2 \"))\n\n\n\n"}
{"prompt": "I want to find instances where users download files larger than 5MB using PowerShell, based on Symantec SWG data.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and user_agent ~= \"powershell\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as total_bytes_download,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter total_bytes_download >= 5000000\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see alerts when an unusually high number of ARP address resolution protocol entries are seen on my Cisco Catalyst network devices within a 5-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 5m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"ARP-4-ARPLEARNTHRES\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": " I want to see Cortex XQL queries that identify potential POWERTRASH script executions based on specific PowerShell techniques like using DeflateStream, MemoryStream, FromBase64String, GetDelegateForFunctionPointer, Invoke(), and GlobalAssemblyCache.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"IO.Compression.DeflateStream\" and ScriptBlockText contains \"IO.MemoryStream\" and ScriptBlockText contains \"::FromBase64String\" and ScriptBlockText contains \"GetDelegateForFunctionPointer\" and ScriptBlockText contains \".Invoke()\" and ScriptBlockText contains \"GlobalAssemblyCache\")\n\n\n\n"}
{"prompt": "I want to find indicators of attackers using common Windows tools with bad opsec defaults, like rundll32.exe or WerFault.exe without proper arguments.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\WerFault\\.exe\" and action_process_image_command_line ~= \".*WerFault\\.exe\") or (action_process_image_path ~= \".*\\\\rundll32\\.exe\" and action_process_image_command_line ~= \".*rundll32\\.exe\") or (action_process_image_path ~= \".*\\\\regsvcs\\.exe\" and action_process_image_command_line ~= \".*regsvcs\\.exe\") or (action_process_image_path ~= \".*\\\\regasm\\.exe\" and action_process_image_command_line ~= \".*regasm\\.exe\") or (action_process_image_path ~= \".*\\\\regsvr32\\.exe\" and action_process_image_command_line ~= \".*regsvr32\\.exe\")) and  not ((actor_process_image_path ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_path contains \"\\\\AppData\\\\Local\\\\Microsoft\\\\EdgeUpdate\\\\Install\\\\{\")) and  not (((actor_process_image_path ~= \".*\\:\\\\Users\\\\.*\" and actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Google\\\\Chrome\\\\Application\\\\.*\") and actor_process_image_path ~= \".*\\\\Installer\\\\setup\\.exe\" and actor_process_image_command_line contains \"--uninstall --channel=stable\" and action_process_image_path ~= \".*\\\\rundll32\\.exe\" and action_process_image_command_line ~= \".*rundll32\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when the Kerberos Policy is changed on Windows systems, especially if it's done by a non-privileged user.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4713\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where the Aruba Network Service might be vulnerable to DLL sideloading attacks.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\arubanetsvc\\.exe\" and (action_module_path ~= \".*\\\\wtsapi32\\.dll\" or action_module_path ~= \".*\\\\msvcr100\\.dll\" or action_module_path ~= \".*\\\\msvcp100\\.dll\" or action_module_path ~= \".*\\\\dbghelp\\.dll\" or action_module_path ~= \".*\\\\dbgcore\\.dll\" or action_module_path ~= \".*\\\\wininet\\.dll\" or action_module_path ~= \".*\\\\iphlpapi\\.dll\" or action_module_path ~= \".*\\\\version\\.dll\" or action_module_path ~= \".*\\\\cryptsp\\.dll\" or action_module_path ~= \".*\\\\cryptbase\\.dll\" or action_module_path ~= \".*\\\\wldp\\.dll\" or action_module_path ~= \".*\\\\profapi\\.dll\" or action_module_path ~= \".*\\\\sspicli\\.dll\" or action_module_path ~= \".*\\\\winsta\\.dll\" or action_module_path ~= \".*\\\\dpapi\\.dll\")) and  not ((action_module_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_module_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances where the BITSadmin browser is connecting to domains with uncommon top-level domains (TLDs) other than .com, .net, .org, .scdn.co, or .sfx.ms.", "response": "datamodel\n| filter xdm.network.http.browser ~= \"Microsoft\\ BITS\\/.*\" and  not ((xdm.network.http.domain ~= \".*\\.com\" or xdm.network.http.domain ~= \".*\\.net\" or xdm.network.http.domain ~= \".*\\.org\" or xdm.network.http.domain ~= \".*\\.scdn\\.co\" or xdm.network.http.domain ~= \".*\\.sfx\\.ms\"))\n\n\n\n"}
{"prompt": " I want to find malware URLs accessed by more than 10 users within a 24 hour period from Symantec EP data. ", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type = \"Security\"\n| filter xdm.target.url != null\n| comp values(xdm.alert.name) as alert_name,\nvalues(xdm.event.description) as alert_desc,\nvalues(xdm.observer.action) as action,\nvalues(xdm.event.type) as event_type,\nvalues(xdm.source.user.username) as users,\nvalues(xdm.source.ipv4) as host_src,\nvalues(xdm.target.ipv4) as host_dst by xdm.target.url\n| filter array_length(users) >= 10"}
{"prompt": "I want to find threats related to UAC bypass techniques that use DismHost.exe.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*C\\:\\\\Users\\\\.*\" and actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and actor_process_image_path contains \"\\\\DismHost.exe\") and action_process_integrity_level in (\"High\", \"System\"))\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious executions of Diskshadow using the \"/s\" flag on endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"diskshadow.exe\" or action_process_image_path ~= \".*\\\\diskshadow\\.exe\") and (action_process_image_command_line contains \"-s \" or action_process_image_command_line contains \"/s \"))\n\n\n\n"}
{"prompt": "I want to see events related to suspicious ASPX or ASP file writes involving the MSExchangeMailboxReplication process.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\MSExchangeMailboxReplication\\.exe\" or xdm.source.process.name ~= \".*\\\\MSExchangeMailboxReplication\\.exe\") and (xdm.target.file.filename ~= \".*\\.aspx\" or xdm.target.file.filename ~= \".*\\.asp\"))\n\n\n\n"}
{"prompt": "I want to see events where PowerShell is being used to exclude files or processes from Defender protection.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"Add-MpPreference \" or action_process_image_command_line contains \"Set-MpPreference \") and (action_process_image_command_line contains \" -ExclusionPath \" or action_process_image_command_line contains \" -ExclusionExtension \" or action_process_image_command_line contains \" -ExclusionProcess \" or action_process_image_command_line contains \" -ExclusionIpAddress \"))\n\n\n\n"}
{"prompt": "I want to see scheduled tasks that are being modified on system folders through GPOs, specifically looking for write access or \"%%4417\" access.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| alter Accesses = regextract(to_json_string(action_evtlog_data_fields)->Accesses{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName = \"\\\\\\\\\\*\\\\SYSVOL\" and RelativeTargetName ~= \".*ScheduledTasks\\.xml\" and (Accesses contains \"WriteData\" or Accesses contains \"%%4417\"))\n\n\n\n"}
{"prompt": "I want to see all events where a Windows service terminated with an error.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7023)\n\n\n\n"}
{"prompt": " I want to see a list of users whose daily uploads are more than 135% of their 7-day average upload, including their IP addresses and web pages visited.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and user_agent ~= \"powershell\"\n| comp sum(rbytes) as current_day_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and user_agent ~= \"powershell\"\n| comp sum(rbytes) as 7_days_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_upload) as 7_days_upload_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_upload_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_upload > multiply(7_days_upload_avg, 1.35)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find instances of malicious base64 encoded PowerShell keywords hidden in command lines executed on endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and action_process_image_command_line contains \" hidden \" and (action_process_image_command_line contains \"AGkAdABzAGEAZABtAGkAbgAgAC8AdAByAGEAbgBzAGYAZQByA\" or action_process_image_command_line contains \"aXRzYWRtaW4gL3RyYW5zZmVy\" or action_process_image_command_line contains \"IAaQB0AHMAYQBkAG0AaQBuACAALwB0AHIAYQBuAHMAZgBlAHIA\" or action_process_image_command_line contains \"JpdHNhZG1pbiAvdHJhbnNmZX\" or action_process_image_command_line contains \"YgBpAHQAcwBhAGQAbQBpAG4AIAAvAHQAcgBhAG4AcwBmAGUAcg\" or action_process_image_command_line contains \"Yml0c2FkbWluIC90cmFuc2Zlc\" or action_process_image_command_line contains \"AGMAaAB1AG4AawBfAHMAaQB6AGUA\" or action_process_image_command_line contains \"JABjAGgAdQBuAGsAXwBzAGkAegBlA\" or action_process_image_command_line contains \"JGNodW5rX3Npem\" or action_process_image_command_line contains \"QAYwBoAHUAbgBrAF8AcwBpAHoAZQ\" or action_process_image_command_line contains \"RjaHVua19zaXpl\" or action_process_image_command_line contains \"Y2h1bmtfc2l6Z\" or action_process_image_command_line contains \"AE8ALgBDAG8AbQBwAHIAZQBzAHMAaQBvAG4A\" or action_process_image_command_line contains \"kATwAuAEMAbwBtAHAAcgBlAHMAcwBpAG8Abg\" or action_process_image_command_line contains \"lPLkNvbXByZXNzaW9u\" or action_process_image_command_line contains \"SQBPAC4AQwBvAG0AcAByAGUAcwBzAGkAbwBuA\" or action_process_image_command_line contains \"SU8uQ29tcHJlc3Npb2\" or action_process_image_command_line contains \"Ty5Db21wcmVzc2lvb\" or action_process_image_command_line contains \"AE8ALgBNAGUAbQBvAHIAeQBTAHQAcgBlAGEAbQ\" or action_process_image_command_line contains \"kATwAuAE0AZQBtAG8AcgB5AFMAdAByAGUAYQBtA\" or action_process_image_command_line contains \"lPLk1lbW9yeVN0cmVhb\" or action_process_image_command_line contains \"SQBPAC4ATQBlAG0AbwByAHkAUwB0AHIAZQBhAG0A\" or action_process_image_command_line contains \"SU8uTWVtb3J5U3RyZWFt\" or action_process_image_command_line contains \"Ty5NZW1vcnlTdHJlYW\" or action_process_image_command_line contains \"4ARwBlAHQAQwBoAHUAbgBrA\" or action_process_image_command_line contains \"5HZXRDaHVua\" or action_process_image_command_line contains \"AEcAZQB0AEMAaAB1AG4Aaw\" or action_process_image_command_line contains \"LgBHAGUAdABDAGgAdQBuAGsA\" or action_process_image_command_line contains \"LkdldENodW5r\" or action_process_image_command_line contains \"R2V0Q2h1bm\" or action_process_image_command_line contains \"AEgAUgBFAEEARABfAEkATgBGAE8ANgA0A\" or action_process_image_command_line contains \"QASABSAEUAQQBEAF8ASQBOAEYATwA2ADQA\" or action_process_image_command_line contains \"RIUkVBRF9JTkZPNj\" or action_process_image_command_line contains \"SFJFQURfSU5GTzY0\" or action_process_image_command_line contains \"VABIAFIARQBBAEQAXwBJAE4ARgBPADYANA\" or action_process_image_command_line contains \"VEhSRUFEX0lORk82N\" or action_process_image_command_line contains \"AHIAZQBhAHQAZQBSAGUAbQBvAHQAZQBUAGgAcgBlAGEAZA\" or action_process_image_command_line contains \"cmVhdGVSZW1vdGVUaHJlYW\" or action_process_image_command_line contains \"MAcgBlAGEAdABlAFIAZQBtAG8AdABlAFQAaAByAGUAYQBkA\" or action_process_image_command_line contains \"NyZWF0ZVJlbW90ZVRocmVhZ\" or action_process_image_command_line contains \"Q3JlYXRlUmVtb3RlVGhyZWFk\" or action_process_image_command_line contains \"QwByAGUAYQB0AGUAUgBlAG0AbwB0AGUAVABoAHIAZQBhAGQA\" or action_process_image_command_line contains \"0AZQBtAG0AbwB2AGUA\" or action_process_image_command_line contains \"1lbW1vdm\" or action_process_image_command_line contains \"AGUAbQBtAG8AdgBlA\" or action_process_image_command_line contains \"bQBlAG0AbQBvAHYAZQ\" or action_process_image_command_line contains \"bWVtbW92Z\" or action_process_image_command_line contains \"ZW1tb3Zl\"))\n\n\n\n"}
{"prompt": "I want to see instances where svchost.exe has suspicious access granted with an unknown call trace and isn't related to Visual Studio build processes.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\:\\\\Windows\\\\System32\\\\svchost\\.exe\" and GrantedAccess = \"0x1F3FFF\" and CallTrace contains \"UNKNOWN\") and  not ((SourceImage ~= \".*\\:\\\\Program\\ Files\\\\Microsoft\\ Visual\\ Studio\\\\.*\" and SourceImage ~= \".*\\\\MSBuild\\\\Current\\\\Bin\\\\MSBuild\\.exe\" and (CallTrace contains \"Microsoft.Build.ni.dll\" or CallTrace contains \"System.ni.dll\")))\n\n\n\n"}
{"prompt": "I want to see events where the \"fltMC.exe\" process is used to unload the Sysmon driver.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\fltMC\\.exe\" or actor_process_file_original_name = \"fltMC.exe\") and (action_process_image_command_line contains \"unload\" and action_process_image_command_line contains \"sysmon\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential binary proxy execution using cdb.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cdb\\.exe\" or actor_process_file_original_name = \"CDB.Exe\") and (action_process_image_command_line contains \" -c \" or action_process_image_command_line contains \" -cf \"))\n\n\n\n"}
{"prompt": "I want to see activity related to suspicious executions of Dump64.exe on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\dump64\\.exe\" and  not (action_process_image_path contains \"\\\\Installer\\\\Feedback\\\\dump64.exe\")) or (action_process_image_path ~= \".*\\\\dump64\\.exe\" and (action_process_image_command_line contains \" -ma \" or action_process_image_command_line contains \"accepteula\"))\n\n\n\n"}
{"prompt": "I want to detect potential exploitation attempts of the CVE-2023-22518 vulnerability in Confluence, specifically focusing on suspicious child processes running on Linux systems.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\/java\" and actor_process_image_command_line contains \"confluence\") and (action_process_image_path ~= \".*\\/bash\" or action_process_image_path ~= \".*\\/curl\" or action_process_image_path ~= \".*\\/echo\" or action_process_image_path ~= \".*\\/wget\")) and  not (action_process_image_command_line contains \"ulimit -u\")\n\n\n\n"}
{"prompt": "I want to see events related to Hydra password brute force attempts on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"-u \" and action_process_image_command_line contains \"-p \") and (action_process_image_command_line contains \"^USER^\" or action_process_image_command_line contains \"^PASS^\"))\n\n\n\n"}
{"prompt": "I want to find web server logs that show signs of Server Side Template Injection attempts.", "response": "datamodel\n| filter xdm.network.http.method = \"GET\" and ( contains \"={{\" or  contains \"=%7B%7B\" or  contains \"=${\" or  contains \"=$%7B\" or  contains \"=<%=\" or  contains \"=%3C%25=\" or  contains \"=@(\" or  contains \"freemarker.template.utility.Execute\" or  contains \".getClass().forName('javax.script.ScriptEngineManager')\" or  contains \"T(org.apache.commons.io.IOUtils)\") and  not (xdm.network.http.response_code = 404)\n\n\n\n"}
{"prompt": "I want to find potential attempts to exploit CVE-2023-25157 in GeoServer through SQL injection.", "response": "datamodel\n| filter ((xdm.network.http.method = \"GET\" and (xdm.network.http.url contains \"/geoserver/ows\" and xdm.network.http.url contains \"CQL_FILTER=\") and (xdm.network.http.url contains \"PropertyIsLike\" or xdm.network.http.url contains \"strEndsWith\" or xdm.network.http.url contains \"strStartsWith\" or xdm.network.http.url contains \"FeatureId\" or xdm.network.http.url contains \"jsonArrayContains\" or xdm.network.http.url contains \"DWithin\")) and (xdm.network.http.url contains \"+--\" or xdm.network.http.url contains \"+AS+\" or xdm.network.http.url contains \"+OR+\" or xdm.network.http.url contains \"FROM\" or xdm.network.http.url contains \"ORDER+BY\" or xdm.network.http.url contains \"SELECT\" or xdm.network.http.url contains \"sleep%28\" or xdm.network.http.url contains \"substring%28\" or xdm.network.http.url contains \"UNION\" or xdm.network.http.url contains \"WHERE\"))\n\n\n\n"}
{"prompt": "I want to detect instances of PowerShell scripts attempting to modify file timestamps (timestomping) on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \".CreationTime =\" or ScriptBlockText contains \".LastWriteTime =\" or ScriptBlockText contains \".LastAccessTime =\" or ScriptBlockText contains \"[IO.File]::SetCreationTime\" or ScriptBlockText contains \"[IO.File]::SetLastAccessTime\" or ScriptBlockText contains \"[IO.File]::SetLastWriteTime\")\n\n\n\n"}
{"prompt": "I want to see events related to LSASS memory dump files being created.", "response": "datamodel\n| filter (xdm.target.file.filename contains \"lsass\" and xdm.target.file.filename ~= \".*dmp\")\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious Runscripthelper.exe processes that are using \"surfacecheck\" in their command line.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\Runscripthelper\\.exe\" and action_process_image_command_line contains \"surfacecheck\")\n\n\n\n"}
{"prompt": "I want to find events related to changes in Office security settings, like Trusted Documents and VBA warnings.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Security\\\\Trusted\\ Documents\\\\TrustRecords\" or action_registry_key_name ~= \".*\\\\Security\\\\AccessVBOM\" or action_registry_key_name ~= \".*\\\\Security\\\\VBAWarnings\")\n\n\n\n"}
{"prompt": "I want to see events where PowerShell is launched with suspicious parameters related to window style hiding or execution policy bypass.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \" -windowstyle h \" or action_process_image_command_line contains \" -windowstyl h\" or action_process_image_command_line contains \" -windowsty h\" or action_process_image_command_line contains \" -windowst h\" or action_process_image_command_line contains \" -windows h\" or action_process_image_command_line contains \" -windo h\" or action_process_image_command_line contains \" -wind h\" or action_process_image_command_line contains \" -win h\" or action_process_image_command_line contains \" -wi h\" or action_process_image_command_line contains \" -win h \" or action_process_image_command_line contains \" -win hi \" or action_process_image_command_line contains \" -win hid \" or action_process_image_command_line contains \" -win hidd \" or action_process_image_command_line contains \" -win hidde \" or action_process_image_command_line contains \" -NoPr \" or action_process_image_command_line contains \" -NoPro \" or action_process_image_command_line contains \" -NoProf \" or action_process_image_command_line contains \" -NoProfi \" or action_process_image_command_line contains \" -NoProfil \" or action_process_image_command_line contains \" -nonin \" or action_process_image_command_line contains \" -nonint \" or action_process_image_command_line contains \" -noninte \" or action_process_image_command_line contains \" -noninter \" or action_process_image_command_line contains \" -nonintera \" or action_process_image_command_line contains \" -noninterac \" or action_process_image_command_line contains \" -noninteract \" or action_process_image_command_line contains \" -noninteracti \" or action_process_image_command_line contains \" -noninteractiv \" or action_process_image_command_line contains \" -ec \" or action_process_image_command_line contains \" -encodedComman \" or action_process_image_command_line contains \" -encodedComma \" or action_process_image_command_line contains \" -encodedComm \" or action_process_image_command_line contains \" -encodedCom \" or action_process_image_command_line contains \" -encodedCo \" or action_process_image_command_line contains \" -encodedC \" or action_process_image_command_line contains \" -encoded \" or action_process_image_command_line contains \" -encode \" or action_process_image_command_line contains \" -encod \" or action_process_image_command_line contains \" -enco \" or action_process_image_command_line contains \" -en \" or action_process_image_command_line contains \" -executionpolic \" or action_process_image_command_line contains \" -executionpoli \" or action_process_image_command_line contains \" -executionpol \" or action_process_image_command_line contains \" -executionpo \" or action_process_image_command_line contains \" -executionp \" or action_process_image_command_line contains \" -execution bypass\" or action_process_image_command_line contains \" -executio bypass\" or action_process_image_command_line contains \" -executi bypass\" or action_process_image_command_line contains \" -execut bypass\" or action_process_image_command_line contains \" -execu bypass\" or action_process_image_command_line contains \" -exec bypass\" or action_process_image_command_line contains \" -exe bypass\" or action_process_image_command_line contains \" -ex bypass\" or action_process_image_command_line contains \" -ep bypass\" or action_process_image_command_line contains \" /windowstyle h \" or action_process_image_command_line contains \" /windowstyl h\" or action_process_image_command_line contains \" /windowsty h\" or action_process_image_command_line contains \" /windowst h\" or action_process_image_command_line contains \" /windows h\" or action_process_image_command_line contains \" /windo h\" or action_process_image_command_line contains \" /wind h\" or action_process_image_command_line contains \" /win h\" or action_process_image_command_line contains \" /wi h\" or action_process_image_command_line contains \" /win h \" or action_process_image_command_line contains \" /win hi \" or action_process_image_command_line contains \" /win hid \" or action_process_image_command_line contains \" /win hidd \" or action_process_image_command_line contains \" /win hidde \" or action_process_image_command_line contains \" /NoPr \" or action_process_image_command_line contains \" /NoPro \" or action_process_image_command_line contains \" /NoProf \" or action_process_image_command_line contains \" /NoProfi \" or action_process_image_command_line contains \" /NoProfil \" or action_process_image_command_line contains \" /nonin \" or action_process_image_command_line contains \" /nonint \" or action_process_image_command_line contains \" /noninte \" or action_process_image_command_line contains \" /noninter \" or action_process_image_command_line contains \" /nonintera \" or action_process_image_command_line contains \" /noninterac \" or action_process_image_command_line contains \" /noninteract \" or action_process_image_command_line contains \" /noninteracti \" or action_process_image_command_line contains \" /noninteractiv \" or action_process_image_command_line contains \" /ec \" or action_process_image_command_line contains \" /encodedComman \" or action_process_image_command_line contains \" /encodedComma \" or action_process_image_command_line contains \" /encodedComm \" or action_process_image_command_line contains \" /encodedCom \" or action_process_image_command_line contains \" /encodedCo \" or action_process_image_command_line contains \" /encodedC \" or action_process_image_command_line contains \" /encoded \" or action_process_image_command_line contains \" /encode \" or action_process_image_command_line contains \" /encod \" or action_process_image_command_line contains \" /enco \" or action_process_image_command_line contains \" /en \" or action_process_image_command_line contains \" /executionpolic \" or action_process_image_command_line contains \" /executionpoli \" or action_process_image_command_line contains \" /executionpol \" or action_process_image_command_line contains \" /executionpo \" or action_process_image_command_line contains \" /executionp \" or action_process_image_command_line contains \" /execution bypass\" or action_process_image_command_line contains \" /executio bypass\" or action_process_image_command_line contains \" /executi bypass\" or action_process_image_command_line contains \" /execut bypass\" or action_process_image_command_line contains \" /execu bypass\" or action_process_image_command_line contains \" /exec bypass\" or action_process_image_command_line contains \" /exe bypass\" or action_process_image_command_line contains \" /ex bypass\" or action_process_image_command_line contains \" /ep bypass\"))\n\n\n\n"}
{"prompt": "I want to find instances where a Windows system logged Event ID 521 only once within a one-minute window.", "response": "dataset = microsoft_windows_raw\n| filter _collector_type in (\"XDR Collector\")\n| alter bin_time = _time\n| bin bin_time span = 1M\n| alter Username = user -> name,\nUsertype = user -> type,\nUserdomain = user -> domain,\nUseridentifier = user -> identifier,\nErrorStatusCode = event_data -> param1,\nErrorcode = event_data -> param2,\nErrortrackcount = to_integer(event_data -> param3)\n| fields message, keywords, event_action, event_result,\n_collector_hostname, _collector_ip_address, _product,\n_vendor, host_name, Username, Userdomain, Usertype,\nUseridentifier, ErrorStatusCode, Errorcode, Errortrackcount,\nevent_id, bin_time, _collector_hostname\n| comp earliest(_time) as First_Timestamp,\nlatest(_time) as Latest_Timestamp,\ncount_distinct(event_id) as Uniq_EventIDs,\nvalues(to_string(event_id)) as Multiple_Events by _collector_hostname,\nbin_time\n| alter MEVS = arraystring(Multiple_Events, \"|\")\n| filter (Uniq_EventIDs = 1) and (MEVS contains \"521\" and array_length(arrayfilter(Multiple_Events, \"@element\" = \"521\")) > 0)"}
{"prompt": "I want to see alerts for potential Goofy Guineapig backdoor activity based on suspicious command lines.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"choice /t %d /d y /n >nul\"\n\n\n\n"}
{"prompt": "I want to create a rule that alerts me when there are three or more login attempts from TOR nodes on my Cisco ACS within a 30-minute period.", "response": "/*config case_sensitive = false\n| datamodel dataset = cisco_acs_raw\n| sort asc _time| bin _time span = 5m\n| alter device_ip = cisco_acs_raw._final_reporting_device_ip\n| filter device_ip IN (\"<ip>\")\n|comp earliest(_time) as FirstEventTime, latest(_time) as LatestEventTime, values(xdm.event.id) as event_id, values(xdm.event.description) as event_description, values(xdm.target.ipv4) as dst_ip, values(xdm.source.host.hostname) as shost, values(xdm.target.host.hostname) as dhost, count() as matched_events by xdm.source.user.username, xdm.source.ipv4, _time\n\n|alter aggregation_criteria1 = \"ildestinationuser\", aggregation_criteria2 = \"ildeviceip\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)*/\ndatamodel dataset = microsoft_windows_raw\n| filter xdm.event.id = \"1111\""}
{"prompt": "I want to detect malicious actors setting custom DLL paths using WAB.EXE through registry changes.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\Software\\\\Microsoft\\\\WAB\\\\DLLPath\" and  not ((action_registry_value_name = \"%CommonProgramFiles%\\\\System\\\\wab32.dll\" or action_registry_data = \"%CommonProgramFiles%\\\\System\\\\wab32.dll\"))\n\n\n\n"}
{"prompt": "I want to see all instances where a Swift application has a signature field that is empty.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"lau signature field is empty\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to see processes on endpoints that are potentially trying to access history files like .bash_history or .zsh_history. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/cat\" or action_process_image_path ~= \".*\\/head\" or action_process_image_path ~= \".*\\/tail\" or action_process_image_path ~= \".*\\/more\") and ((action_process_image_command_line contains \"/.bash_history\" or action_process_image_command_line contains \"/.zsh_history\") or (action_process_image_command_line ~= \".*\\_history\" or action_process_image_command_line ~= \".*\\.history\" or action_process_image_command_line ~= \".*zhistory\")))\n\n\n\n"}
{"prompt": "I want to see information about potential Metasploit or Impacket service installations via SMB PsExec on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| alter ServiceStartType = regextract(to_json_string(action_evtlog_data_fields)->ServiceStartType{}, \"\\\"(.*)\\\"\")\n| alter ServiceType = regextract(to_json_string(action_evtlog_data_fields)->ServiceType{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and ServiceFileName ~= \"^\\%systemroot\\%\\\\[a-zA-Z]{8}\\.exe$\" and ServiceName ~= \"(^[a-zA-Z]{4}$)|(^[a-zA-Z]{8}$)|(^[a-zA-Z]{16}$)\" and ServiceStartType = 3 and ServiceType = \"0x10\") and  not (ServiceName = \"PSEXESVC\")\n\n\n\n"}
{"prompt": "I want to see events related to TA505 Dropper Load Pattern, specifically instances where \"wmiprvse.exe\" is used and either \"mshta.exe\" is launched or a file named \"mshta.exe\" is involved.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\wmiprvse\\.exe\" and (action_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_file_original_name = \"mshta.exe\"))\n\n\n\n"}
{"prompt": "I want to see communication data from Cisco ASA, Fortigate, and Netskope that involves any domains listed as phishy by RSA.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw, Netskope_Netskope_raw)\n| union (dataset = RSA_Phishy_Domains)\n| filter (xdm.network.http.url ~= Domains or (xdm.target.domain ~= Domains or xdm.target.url ~= Domains))\n| fields *\n| view column order = populated"}
{"prompt": "I want to see all events related to changes made to enterprise admin groups like adding, removing or changing members.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4727\", \"4735\", \"4730\", \"4728\", \"4729\", \"4754\", \"4755\", \"4758\", \"4756\", \"4757\") and xdm.target.user.groups in (\"domain admins\", \"enterprise admins\", \"emsg\", \"administrators\", \"enterprise messaging & systems group\", \"tier0users\")\n\n| alter xdm.target.user.username = if(xdm.target.user.username ~= \"ITLINFOSYS\\n\", concat(\"n\", arrayindex(regextract(xdm.target.user.username, \"[a-zA-Z0-9._]+\"), -1)), if(xdm.target.user.username ~= \"ITLINFOSYS\\r\", concat(\"r\", arrayindex(regextract(xdm.target.user.username, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(xdm.target.user.username, \"[a-zA-Z0-9._-]+\"), -1)))\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter xdm.target.user.username = trim(arrayindex(regextract(xdm.event.description, \"Account Name:\\t\\tCN=([^,]+)\"), 0))\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| filter xdm.target.user.username contains \"ecorporate_group\" or xdm.target.user.username contains \"enterprise messaging & systems group\" or xdm.target.user.username contains \"administrators\"\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events that show someone has disabled system restore on a Windows machine.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"\\\\Policies\\\\Microsoft\\\\Windows NT\\\\SystemRestore\" or action_registry_key_name contains \"\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\SystemRestore\") and (action_registry_key_name ~= \".*DisableConfig\" or action_registry_key_name ~= \".*DisableSR\") and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to find instances of process injection using MavInject based on its command line containing \"/INJECTRUNNING\".", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \" /INJECTRUNNING \"\n\n\n\n"}
{"prompt": "I want to find events related to potential persistence through modifications to the Application Shim database.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\AppCompatFlags\\\\InstalledSDB\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\AppCompatFlags\\\\Custom\\\\.*\") and  not ((action_registry_value_name = \"\" or action_registry_data = \"\"))\n\n\n\n"}
{"prompt": "I want to detect when an attacker is setting files as system files using the Attrib.exe command.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\attrib\\.exe\" or actor_process_file_original_name = \"ATTRIB.EXE\") and action_process_image_command_line contains \" +s \")\n\n\n\n"}
{"prompt": "I want to find suspicious changes to the Winlogon registry key that might indicate KamiKakaBot activity, specifically looking for unusual values related to shell execution and environment variables.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Winlogon\\\\Shell\" and ((action_registry_value_name contains \"-nop -w h\" or action_registry_data contains \"-nop -w h\") and (action_registry_value_name contains \"$env\" or action_registry_data contains \"$env\") and (action_registry_value_name contains \"explorer.exe\" or action_registry_data contains \"explorer.exe\") and (action_registry_value_name contains \"Start-Process\" or action_registry_data contains \"Start-Process\")))\n\n\n\n"}
{"prompt": "I want to see events related to malicious access attempts of the wceaux.dll file on endpoints.", "response": "preset = xdr_event_log\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4656, 4658, 4660, 4663) and ObjectName ~= \".*\\\\wceaux\\.dll\")\n\n\n\n"}
{"prompt": "I want to detect potential AMSI bypass attempts using NULL bits in PowerShell processes on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"if(0){{{0}}}' -f $(0 -as [char]) +\" or action_process_image_command_line contains \"#<NULL>\")\n\n\n\n"}
{"prompt": "I want to see a list of network device configuration changes made by users like \"failsafe\" or \"admin\", including details about the device hostname, IP address, and location.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, cisco_catalyst_raw)\n| alter xdm.source.user.username = if(xdm.source.user.username contains \"User '\", arrayindex(regextract(xdm.source.user.username, \"User\\s\\'([^\\']+)\\'\"), 0), xdm.source.user.username),\nNetwork_Admin = coalesce(xdm.source.user.username, xdm.target.user.username)\n| filter (xdm.event.original_event_type in (\"111008\", \"111010\", \"0100032102\", \"0100032104\", \"0100032099\")) and (Network_Admin in (\"failsafe\", \"misadmin\", \"englocal\", \"cnxnet1\", \"ph_network_team_local\", \"avalon.disaster\", \"admin\", \"indiaadmin\"))\n| alter Product_BVM_Hostname = coalesce(cisco_catalyst_raw._broker_device_name, fortinet_fortigate_raw._broker_device_name, cisco_catalyst_raw._broker_device_name),\nProduct_BVM_IPAddress = coalesce(cisco_catalyst_raw._broker_ip_address, fortinet_fortigate_raw._broker_ip_address, cisco_catalyst_raw._broker_ip_address),\nProduct_Reporting_DeviceIP = coalesce(cisco_catalyst_raw._final_reporting_device_ip, fortinet_fortigate_raw._final_reporting_device_ip, cisco_asa_raw._final_reporting_device_ip)\n| alter Desc_String = if(Product_BVM_Hostname contains \"NEWAVLON\", \"New Avalon\", \".\")\n| join conflict_strategy = left type = left\n(dataset = BB_Network_Local_admin_Emails\n) as nwadm nwadm.BVM_IP = Product_BVM_IPAddress\n| filter Product_BVM_Hostname not in (\"\"\"\"\"\", NULL, null)\n| fields Network_Admin, _vendor, _product, Product_BVM_Hostname,\nProduct_BVM_IPAddress, Product_Reporting_DeviceIP,\nxdm.observer.name, xdm.observer.unique_identifier,\nxdm.event.original_event_type, xdm.event.description,\nLocation, Site, BVM_IP, `Email ID`, Desc_String"}
{"prompt": "I want to see when PowerShell modules are created on Windows.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\\\pwsh\\.exe\") or (xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\")) and (xdm.target.file.filename ~= \".*\\\\WindowsPowerShell\\\\Modules\\\\.*\" or xdm.target.file.filename ~= \".*\\\\PowerShell\\\\7\\\\Modules\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see XQL queries that detect attempts to modify Group Policy settings through PowerShell scripts.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\Windows\\\\System\" and (ScriptBlockText contains \"GroupPolicyRefreshTimeDC\" or ScriptBlockText contains \"GroupPolicyRefreshTimeOffsetDC\" or ScriptBlockText contains \"GroupPolicyRefreshTime\" or ScriptBlockText contains \"GroupPolicyRefreshTimeOffset\" or ScriptBlockText contains \"EnableSmartScreen\" or ScriptBlockText contains \"ShellSmartScreenLevel\"))\n\n\n\n"}
{"prompt": "I want to see Symantec WSS events flagged as malicious or Malnet, including details about the user, event description, and target URL.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Security\") and xdm.alert.name ~= \"^audit|^web attack|^malicious Site|^system infected|^os attack|^attack\"\n| alter server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer\\: ([^\\,]+)\"), 0)\n| alter category = xdm.alert.name,\nusername = xdm.source.user.username\n| alter event_desc = xdm.alert.description,\nevent_type = xdm.event.description,\ntarget_url = xdm.target.url,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nhostname = coalesce(xdm.target.host.hostname, xdm.source.host.hostname)\n| comp earliest(_time) as FirstAVEventTime,\nlatest(_time) as LatestAVEventTime,\nvalues(server_name) as server_name,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(event_type) as event_type,\nvalues(src_ip) as src_ip,\nvalues(dst_ip) as dst_ip,\nvalues(target_url) as target_url by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nhostname\n| join type = left\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| alter user_dst = if(user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", \"\"\"non-interactive-user\"\"\", null, \"\"\"\"\"\"), if(user_dst ~= \"<user>\\n\", concat(\"n\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), if(user_dst ~= \"<user>\\r\", concat(\"r\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1))), user_dst)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by ip_src,\nuser_dst,\nalias_host\n) as proxyevents(proxyevents.ip_src = xdm.target.ipv4 or proxyevents.alias_host = hostname or proxyevents.user_dst = xdm.source.user.sam_account_name)\n| filter (ip_src != null or user_dst != null or alias_host != null) and category ~= \"malnets\""}
{"prompt": " I want to see activity related to the HAFNIUM Exchange Exploitation Activity. ", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"attrib\" and action_process_image_command_line contains \" +h \" and action_process_image_command_line contains \" +s \" and action_process_image_command_line contains \" +r \" and action_process_image_command_line contains \".aspx\") or (action_process_image_path ~= \".*\\\\ProgramData\\\\VSPerfMon\\\\.*\" or (action_process_image_command_line contains \"schtasks\" and action_process_image_command_line contains \"VSPerfMon\")) or (action_process_image_path ~= \".*Opera\\_browser\\.exe\" and (actor_process_image_path ~= \".*\\\\services\\.exe\" or actor_process_image_path ~= \".*\\\\svchost\\.exe\")) or action_process_image_path ~= \".*Users\\\\Public\\\\opera\\\\Opera\\_browser\\.exe\" or (action_process_image_command_line contains \"vssadmin list shadows\" and action_process_image_command_line contains \"Temp\\\\__output\") or (action_process_image_path ~= \".*\\\\makecab\\.exe\" and (action_process_image_command_line ~= \".*inetpub\\\\wwwroot\\\\.*\" and action_process_image_command_line contains \".dmp.zip\")) or (action_process_image_path ~= \".*\\\\makecab\\.exe\" and (action_process_image_command_line ~= \".*Microsoft\\\\Exchange\\ Server\\\\.*\" or action_process_image_command_line contains \"compressionmemory\" or action_process_image_command_line contains \".gif\")) or (action_process_image_command_line contains \" -t7z \" and action_process_image_command_line contains \"C:\\\\Programdata\\\\pst\" and action_process_image_command_line contains \"\\\\it.zip\") or (action_process_image_command_line contains \"\\\\comsvcs.dll\" and action_process_image_command_line contains \"Minidump\" and action_process_image_command_line contains \"full \" and action_process_image_command_line contains \"\\\\inetpub\\\\wwwroot\") or (action_process_image_command_line contains \"Windows\\\\Temp\\\\xx.bat\" or action_process_image_command_line contains \"Windows\\\\WwanSvcdcs\" or action_process_image_command_line contains \"Windows\\\\Temp\\\\cw.exe\"))\n\n\n\n"}
{"prompt": "I want to see all instances of \"Reception Profile Interrupted\" events from Swift applications.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"Reception Profile Interrupted\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find users who have accessed multiple Zscaler URLs classified as \"hacking\" based on behavioral analysis.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category ~= \"hacking\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 5"}
{"prompt": "I want to detect potential malicious activity related to compromised 3CXDesktopApp using proxy connections to specific domains.", "response": "datamodel\n| filter (xdm.network.http.domain contains \"akamaicontainer.com\" or xdm.network.http.domain contains \"akamaitechcloudservices.com\" or xdm.network.http.domain contains \"azuredeploystore.com\" or xdm.network.http.domain contains \"azureonlinecloud.com\" or xdm.network.http.domain contains \"azureonlinestorage.com\" or xdm.network.http.domain contains \"dunamistrd.com\" or xdm.network.http.domain contains \"glcloudservice.com\" or xdm.network.http.domain contains \"journalide.org\" or xdm.network.http.domain contains \"msedgepackageinfo.com\" or xdm.network.http.domain contains \"msstorageazure.com\" or xdm.network.http.domain contains \"msstorageboxes.com\" or xdm.network.http.domain contains \"officeaddons.com\" or xdm.network.http.domain contains \"officestoragebox.com\" or xdm.network.http.domain contains \"pbxcloudeservices.com\" or xdm.network.http.domain contains \"pbxphonenetwork.com\" or xdm.network.http.domain contains \"pbxsources.com\" or xdm.network.http.domain contains \"qwepoi123098.com\" or xdm.network.http.domain contains \"sbmsa.wiki\" or xdm.network.http.domain contains \"sourceslabs.com\" or xdm.network.http.domain contains \"visualstudiofactory.com\" or xdm.network.http.domain contains \"zacharryblogs.com\")\n\n\n\n"}
{"prompt": "I want to find processes on endpoints that are potentially being misused for malicious purposes by using chown and chmod commands to setuid or setgid.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"chown root\" and (action_process_image_command_line contains \" chmod u+s\" or action_process_image_command_line contains \" chmod g+s\"))\n\n\n\n"}
{"prompt": "I want to find instances where users are using tttracer.exe on endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\tttracer\\.exe\"\n\n\n\n"}
{"prompt": "I want to see failed login attempts that might indicate a brute force attack.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4625\")\n| alter logon_type = arrayindex(regextract(xdm.event.description, \"Logon Type:\\t\\t\\t([^\\n]+)\"), 0)\n| filter logon_type IN (\"2\", \"10\")\n| filter xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.target.user.username != NULL\n| sort asc _time\n| bin _time span = 2m\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| alter target_username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| join type = left\n(dataset = enterprise_admin_list\n| filter admin_type = \"domain_admin_win_admin\"\n| alter enterprise_username = if(username ~= \"@ad.infosys.com\", rtrim(username, \"@ad.infosys.com\"), if(username ~= \"@infosys.com\", rtrim(username, \"@infosys.com\"), if(username ~= \"itlinfosys\", ltrim(username, \"itlinfosys\\\\\"), username)))\n) as enterprise_admin enterprise_admin.enterprise_username = target_username\n| filter enterprise_username = null\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.target.user.username,\n_time\n| filter matched_events >= 5\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to see all processes on endpoints that are potentially running SEASPY malware, specifically those using the image paths \"BarracudaMailService\", \"resize2fstab\", or \"resize_reisertab\".", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/BarracudaMailService\" or action_process_image_path ~= \".*\\/resize2fstab\" or action_process_image_path ~= \".*\\/resize\\_reisertab\")\n\n\n\n"}
{"prompt": "I want to find users who have attempted password resets more than 5 times within a single hour using the ADSSP tool.", "response": "config case_sensitive = false\n| dataset = manage_engine_adssp_raw\n| filter _raw_log contains \"\\\"productName\\\":\\\"ADSSP\\\"}\"\n| alter json_message = arrayindex(regextract(_raw_log, \"\\d+\\.\\d+\\.\\d+\\.\\d+\\s(.*)\"), 0) -> {}\n| alter STATUS = json_message -> message.STATUS,\nbin_time = _time\n| bin bin_time span = 1H\n| filter json_message contains \"Reset Password Attempt\" and STATUS not in (\"Success\")\n| alter json_message = replace(replace(json_message, \"LOGIN NAME\", \"LOGIN_NAME\"), \"DOMAIN NAME\", \"DOMAIN_NAME\")\n| alter Login_Name = json_message -> message.LOGIN_NAME,\nACCESS_MODE = json_message -> message.ACCESS_MODE,\nIP = json_message -> message.IP,\nHOST = json_message -> message.HOST,\nDOMAIN_NAME = json_message -> message.DOMAIN_NAME,\nDATE_TIME = json_message -> message.DATE_TIME,\nACTION_NAME = json_message -> message.ACTION_NAME\n| filter ACTION_NAME in (\"Self Reset Password\")\n| comp earliest(_time) as First_Evt_TS,\nlatest(_time) as Latest_Evt_TS,\ncount(ACTION_NAME) as Event_Counts by Login_Name,\nbin_time\n| alter Time_Diff_in_Minutes = timestamp_diff(Latest_Evt_TS, First_Evt_TS, \"MINUTE\")\n| filter Event_Counts >= 5"}
{"prompt": "I want to see all events related to DHCP Server errors where the CallOut DLL failed to load.", "response": "preset = xdr_event_log\n| filter (action_evtlog_event_id in (1031, 1032, 1034) and provider_name = \"Microsoft-Windows-DHCP-Server\")\n\n\n\n"}
{"prompt": "I want to see all instances where Cisco VPN was connected on an Android or iPhone device.", "response": "datamodel dataset = cisco_asa_raw\n| filter xdm.event.original_event_type in (\"722055\") and (xdm.source.user_agent contains \"Android\" or xdm.source.user_agent contains \"iPhone\")"}
{"prompt": "I want to see alerts about attempts to add SID History to an account that failed.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4766\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all the operations performed by each user, including the target username, operation name, reference ID, tenant ID, result type, caller IP address, identity, alias host, protocol, and the time of the operation.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/WRITE\", \"MICROSOFT.OPERATIONALINSIGHTS/WORKSPACES/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to potential exploits of CVE_2021_34484 or CVE_2022_21919 on my endpoints.", "response": "preset = xdr_event_log\n| filter (action_evtlog_event_id = 1511 and provider_name = \"Microsoft-Windows-User Profiles Service\")\n\n\n\n"}
{"prompt": "I want to see when Atera Agent was installed on endpoints.", "response": "preset = xdr_event_log\n| alter Message = regextract(to_json_string(action_evtlog_data_fields)->Message{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 1033 and provider_name = \"MsiInstaller\" and Message contains \"AteraAgent\")\n\n\n\n"}
{"prompt": "I want to detect if the \"hh.exe\" process is initiating HTTP network connections to ports 80 or 443, which could be a sign of malicious activity related to Follina exploit.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (actor_process_image_path ~= \".*\\\\hh\\.exe\" and Initiated = \"true\" and (action_local_port in (80, 443) or action_remote_port in (80, 443)))\n\n\n\n"}
{"prompt": "I want to find events where PowerShell is creating a new local user account.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"New-LocalUser\"\n\n\n\n"}
{"prompt": "I want to detect if an attacker is trying to disable UAC prompts on the secure desktop.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\PromptOnSecureDesktop\" and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that use the Get-ADUser cmdlet with wildcard filters and potentially export Active Directory user information.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Get-ADUser \" and ScriptBlockText contains \" -Filter \\*\") and (ScriptBlockText contains \" > \" or ScriptBlockText contains \" | Select \" or ScriptBlockText contains \"Out-File\" or ScriptBlockText contains \"Set-Content\" or ScriptBlockText contains \"Add-Content\"))\n\n\n\n"}
{"prompt": "I want to see alerts about unauthorized access to mailboxes where someone other than the owner accessed the inbox folder.", "response": "config case_sensitive = false\n| dataset = msft_o365_exchange_online_raw\n| filter LogonType = 2\n| alter xdm.LogonType = if(LogonType = 2, \"Delegated\", \"\"),\nfolderpath = json_extract_scalar(Item, \"$.ParentFolder.Path\"),\nsubject = json_extract_scalar(Item, \"$.Subject\")\n| filter folderpath contains \"inbox\"\n| alter MailboxOwnerUPN1 = if(MailboxOwnerUPN ~= \"<domain>\", rtrim(MailboxOwnerUPN, \"<domain>\"), if(MailboxOwnerUPN ~= \"<domain>\", rtrim(MailboxOwnerUPN, \"<domain>\"), if(MailboxOwnerUPN ~= \"<user id>\", ltrim(MailboxOwnerUPN, \"<user id>\\\\\\\\\"), MailboxOwnerUPN)))\n| alter UserId1 = if(UserId ~= \"@<domain>\", rtrim(UserId, \"<domain>\"), if(UserId ~= \"<domain>\", rtrim(UserId, \"<domain>\"), if(UserId ~= \"<user id>\", ltrim(UserId, \"<user id>\\\\\\\\\"), UserId)))\n| filter UserId1 != MailboxOwnerUPN1\n| join type = left\n(dataset IN (enterprise_admin_list)\n| filter admin_type = \"fin_user\" and username != \"\"\n| alter enterprise_username_field = if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<user id>\", ltrim(username, \"<user id>\\\\\\\\\"), username)))\n) as JT1 JT1.enterprise_username_field = MailboxOwnerUPN1\n| join type = left\n(dataset IN (redcarpet_users_list)\n| alter redcarpet_username_field = if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<username>\", ltrim(username, \"<username>\\\\\\\\\"), username)))\n| filter redcarpet_username_field != \"\"\n| dedup redcarpet_username_field\n) as JT2 JT2.redcarpet_username_field = MailboxOwnerUPN1\n| filter enterprise_username_field != null or redcarpet_username_field != null\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to see a list of malicious domains and IPs detected by Cisco ASA, Fortinet Fortigate, Duo Security, Cloudflare WAF, Linux systems, Microsoft Windows, DNS, Netskope, Workday, and Cisco Umbrella.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw, duo_duo_raw, cloudflare_waf_raw, linux_linux_raw, microsoft_windows_raw, microsoft_dns_raw, Netskope_Netskope_raw, workday_workday_raw, cisco_umbrella_raw)\n| union fe_ip_cidr_md_iocs\n| filter ((ioc_type = \"ipv4\" and (xdm.source.ipv4 ~= ioc_value or xdm.target.ipv4 ~= ioc_value)) or (ioc_type = \"cidr\" and (incidr(xdm.source.ipv4, ioc_value) = true or incidr(xdm.target.ipv4, ioc_value) = true)) or (ioc_type = \"domain\" and (xdm.network.http.url ~= ioc_value or xdm.network.http.domain ~= ioc_value)))"}
{"prompt": "I want to find suspicious network connections where the binary is regsrv32, rundll32, or dllhost, but there's no command line provided.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (Initiated = \"true\" and (actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_image_path ~= \".*\\\\dllhost\\.exe\") and (actor_process_image_command_line ~= \".*\\\\regsvr32\\.exe\" or actor_process_image_command_line ~= \".*\\\\rundll32\\.exe\" or actor_process_image_command_line ~= \".*\\\\dllhost\\.exe\")) and  not (actor_process_image_command_line = \"\" or actor_process_image_command_line = \"None\")\n\n\n\n"}
{"prompt": "I want to find network traffic related to the TerraMaster TOS CVE-2020-28188 exploit.", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and (xdm.network.http.url contains \"/include/makecvs.php\" and xdm.network.http.url contains \"*Event=\")) and (xdm.network.http.url contains \"curl\" or xdm.network.http.url contains \"wget\" or xdm.network.http.url contains \".py\" or xdm.network.http.url contains \".sh\" or xdm.network.http.url contains \"chmod\" or xdm.network.http.url contains \"_GET\")\n\n\n\n"}
{"prompt": "I want to find vulnerabilities related to ADCS Certificate Template configurations on my endpoints.", "response": "preset = xdr_event_log\n| alter TemplateContent = regextract(to_json_string(action_evtlog_data_fields)->TemplateContent{}, \"\\\"(.*)\\\"\")\n| alter NewTemplateContent = regextract(to_json_string(action_evtlog_data_fields)->NewTemplateContent{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4898 and TemplateContent contains \"CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT\") or (action_evtlog_event_id = 4899 and NewTemplateContent contains \"CT_FLAG_ENROLLEE_SUPPLIES_SUBJECT\")\n\n\n\n"}
{"prompt": "I want to detect suspicious creation of system DLL files that are not typically found on a system.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\System32\\\\TSMSISrv\\.dll\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\System32\\\\TSVIPSrv\\.dll\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\System32\\\\wbem\\\\wbemcomn\\.dll\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\System32\\\\WLBSCTRL\\.dll\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\System32\\\\wow64log\\.dll\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\System32\\\\WptsExtensions\\.dll\" or xdm.target.file.filename ~= \".*\\\\SprintCSP\\.dll\")\n\n\n\n"}
{"prompt": "I want to find unusual server access events, like when users log in at odd hours, new users connect to servers, or new machines initiate connections.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter timestamp_diff(current_time(), _time, \"minute\") > 10\n| filter task in (\"Logon\", \"Credential Validation\", \"Logon\", \"Special Logon\")\n| alter TargetUserName = event_data -> TargetUserName,\nWorkstationName = event_data -> WorkstationName\n| filter TargetUserName != \"*$\"\n| fields TargetUserName, WorkstationName, event_id, event_data\n| comp values(TargetUserName) as users by WorkstationName\n| join type = inner conflict_strategy = both\n(dataset = microsoft_windows_raw\n| filter timestamp_diff(current_time(), _time, \"minute\") < 11\n| filter task in (\"Logon\", \"Credential Validation\", \"Logon\", \"Special Logon\")\n| alter TargetUserName = event_data -> TargetUserName,\nWorkstationName = event_data -> WorkstationName\n| filter TargetUserName != \"*$\"\n| fields TargetUserName, WorkstationName, event_id,\nevent_data\n| dedup TargetUserName,\nWorkstationName,\nevent_id\n) as last_10 last_10.WorkstationName = WorkstationName\n| filter if(users = TargetUserName, TRUE, FALSE) = False\n| filter WorkstationName ~= \"^.{6}S\""}
{"prompt": "I want to see all instances where mailbox permissions were removed by administrators in Office 365.  I need details on the user account affected, the specific permissions removed, and when these changes occurred.", "response": "config case_sensitive = false\n| dataset = msft_o365_exchange_online_raw\n| filter Operation IN (\"Remove-Mailbox\")\n| filter userid not contains \"NT AUTHORITY\\SYSTEM\" and ObjectId not contains \"auxauditmailbox\"\n| alter arraycount = array_length(regextract(Parameters, \"Name\"))\n| alter permission = if(arraycount = 1, json_extract_scalar(parameters, \"$[0].Value\"), if(arraycount = 2, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\")), if(arraycount = 3, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\"), \",\", json_extract_scalar(parameters, \"$[2].Value\")), if(arraycount = 4, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\"), \",\", json_extract_scalar(parameters, \"$[2].Value\"), \",\", json_extract_scalar(parameters, \"$[3].Value\"))))))\n| fields Operation, MailboxOwnerUPN, UserId, ObjectId,\npermission, Parameters, ResultStatus, _time, CreationTime\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"obj_name\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to detect suspicious PowerShell or cmd executions using Pester scripts for help commands.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \"Pester\" and action_process_image_command_line contains \"Get-Help\")) or ((action_process_image_path ~= \".*\\\\cmd\\.exe\" and (action_process_image_command_line contains \"pester\" and action_process_image_command_line contains \";\")) and (action_process_image_command_line contains \"help\" or action_process_image_command_line contains \"?\"))\n\n\n\n"}
{"prompt": "I want to see alerts about any changes made to \"IS High Privileged Security Groups\" for the ISWEB domain on Windows machines.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4728\", \"4729\", \"4756\", \"4757\")\n| filter xdm.source.host.hostname contains \"isweb.com\"\n\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to the CVE-2020-0688 exploit that involve the MSExchange Control Panel and contain \"&__VIEWSTATE=\" in the raw log.", "response": "preset = xdr_event_log\n| alter Level = regextract(to_json_string(action_evtlog_data_fields)->Level{}, \"\\\"(.*)\\\"\")\n| filter ((action_evtlog_event_id = 4 and provider_name = \"MSExchange Control Panel\" and Level = \"Error\") and _raw_log contains \"&__VIEWSTATE=\")\n\n\n\n"}
{"prompt": "I want to find instances of potential DLL sideloading using ClassicExplorer32.dll from the Windows Event Log.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\ClassicExplorer32\\.dll\" and  not (action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Classic\\ Shell\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious PowerShell activity that might be used for email exfiltration.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \"Add-PSSnapin\" and action_process_image_command_line contains \"Get-Recipient\" and action_process_image_command_line contains \"-ExpandProperty\" and action_process_image_command_line contains \"EmailAddresses\" and action_process_image_command_line contains \"SmtpAddress\" and action_process_image_command_line contains \"-hidetableheaders\"))\n\n\n\n"}
{"prompt": " I want to find out about privileged administrative activities related to Amazon S3 buckets. ", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name = \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"PutBucketAcl\", \"PutBucketPolicy\", \"PutBucketCors\", \"PutBucketLifecycle\", \"PutBucketReplication\", \"PutBucketReplication\", \"DeleteBucketPolicy\", \"DeleteBucketCors\", \"DeleteBucketLifecycle\", \"DeleteBucketReplication\")\n| filter target_username not contains \"<Username>\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdesc\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect suspicious activity when PsSuspend is used with Microsoft Security Essentials.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"pssuspend.exe\" or (action_process_image_path ~= \".*\\\\pssuspend\\.exe\" or action_process_image_path ~= \".*\\\\pssuspend64\\.exe\")) and action_process_image_command_line contains \"msmpeng.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts about malicious Mesh Agent service installations on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (actor_process_image_path contains \"MeshAgent.exe\" or ServiceName contains \"Mesh Agent\"))\n\n\n\n"}
{"prompt": "I want to see events that might indicate information disclosure attempts on my network based on Cisco Firepower logs.", "response": "/*config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"disclosure attempt\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\"\n| join type = left(dataset = iisvascan_ip_address_list| fields ip_address as ip) as iis_scan iis_scan.ip = xdm.source.ipv4| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip, policy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level, xdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4, xdm.source.port, xdm.event.description, xdm.alert.description, xdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol, xdm.event.operation, xdm.source.application.name, xdm.source.location.country, xdm.source.asn.as_name, xdm.target.asn.as_name, _time, _insert_time, device_ip, policy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime, count() as matched_events, values(*) as * by xdm.source.ipv4, _time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ibpmsourceip\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time), duplicate_alert_count = subtract(floor(divide(matched_events,3)),1)*/\ndatamodel dataset = microsoft_windows_raw\n| alter device_ip = \"\",\npolicy_name = \"\",\naggregation_criteria = \"\",\nevent_time = \"\",\nduplicate_alert_count = \"\"\n| filter xdm.event.id = \"123\"\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, aggregation_criteria, event_time, duplicate_alert_count,\n_vendor, _product"}
{"prompt": "I want to see Cortex XQL alerts related to potential Ryuk ransomware activity.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\" and action_process_image_command_line ~= \".*C\\:\\\\users\\\\Public\\\\.*\") or (action_process_image_command_line ~= \".*del\\ \\/s\\ \\/f\\ \\/q\\ c\\:\\\\.*\" and action_process_image_command_line contains \"\\*.bac\" and action_process_image_command_line contains \"\\*.bak\" and action_process_image_command_line contains \"\\*.bkf\") or ((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") and (action_process_image_command_line contains \" stop \" and action_process_image_command_line contains \" /y\") and (action_process_image_command_line contains \"samss\" or action_process_image_command_line contains \"audioendpointbuilder\" or action_process_image_command_line contains \"unistoresvc_\" or action_process_image_command_line contains \"AcrSch2Svc\")))\n\n\n\n"}
{"prompt": "I want to find instances of Ntdsutil being misused on my endpoints, as detected by event logs.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"ESENT\" and action_evtlog_event_id in (216, 325, 326, 327) and Data contains \"ntds.dit\")\n\n\n\n"}
{"prompt": "I want to find events related to Mimikatz creating its default log file \"mimilsa.log\".", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*mimilsa\\.log\"\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to Raspberry Robin malware executing CPL files through rundll32.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_image_path ~= \".*\\\\control\\.exe\") and (action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and (action_process_image_command_line contains \"shell32.dll\" and action_process_image_command_line contains \"Control_RunDLL\" and action_process_image_command_line contains \".CPL\") and action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see events related to AADInternals PowerShell cmdlets being executed, specifically focusing on process creation.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.Exe\", \"pwsh.dll\")) and (action_process_image_command_line contains \"Add-AADInt\" or action_process_image_command_line contains \"ConvertTo-AADInt\" or action_process_image_command_line contains \"Disable-AADInt\" or action_process_image_command_line contains \"Enable-AADInt\" or action_process_image_command_line contains \"Export-AADInt\" or action_process_image_command_line contains \"Get-AADInt\" or action_process_image_command_line contains \"Grant-AADInt\" or action_process_image_command_line contains \"Install-AADInt\" or action_process_image_command_line contains \"Invoke-AADInt\" or action_process_image_command_line contains \"Join-AADInt\" or action_process_image_command_line contains \"New-AADInt\" or action_process_image_command_line contains \"Open-AADInt\" or action_process_image_command_line contains \"Read-AADInt\" or action_process_image_command_line contains \"Register-AADInt\" or action_process_image_command_line contains \"Remove-AADInt\" or action_process_image_command_line contains \"Restore-AADInt\" or action_process_image_command_line contains \"Search-AADInt\" or action_process_image_command_line contains \"Send-AADInt\" or action_process_image_command_line contains \"Set-AADInt\" or action_process_image_command_line contains \"Start-AADInt\" or action_process_image_command_line contains \"Update-AADInt\"))\n\n\n\n"}
{"prompt": "I want to find events related to changes made to Outlook security settings in the Windows registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Office\\\\.*\" and action_registry_key_name ~= \".*\\\\Outlook\\\\Security\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find instances where the Bitsadmin browser connects to servers with uncommon IP addresses like those ending in 1 through 9.", "response": "datamodel\n| filter (xdm.network.http.browser ~= \"Microsoft\\ BITS\\/.*\" and (xdm.network.http.domain ~= \".*1\" or xdm.network.http.domain ~= \".*2\" or xdm.network.http.domain ~= \".*3\" or xdm.network.http.domain ~= \".*4\" or xdm.network.http.domain ~= \".*5\" or xdm.network.http.domain ~= \".*6\" or xdm.network.http.domain ~= \".*7\" or xdm.network.http.domain ~= \".*8\" or xdm.network.http.domain ~= \".*9\"))\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple Zscaler SCAM ILLEGAL category URLs based on behavioral analysis.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| bin _time span = 1d\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category ~= \"illegal\" or URLCategory ~= \"illegal\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst,\n_time\n| filter matched_events >= 5"}
{"prompt": "I want to see events related to starting Windows services using Net.exe.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and action_process_image_command_line contains \" start \")\n\n\n\n"}
{"prompt": "I want to see alerts about when groupdel is used on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\/groupdel\"\n\n\n\n"}
{"prompt": "I want to find instances of exploits targeting CVE-2021-31979 and CVE-2021-3371 using the XQL query you provided.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*CLSID\\\\\\{CF4CC405\\-E2C5\\-4DDD\\-B3CE\\-5E7582D8C9FA\\}\\\\InprocServer32\\\\\\(Default\\)\" or action_registry_key_name ~= \".*CLSID\\\\\\{7C857801\\-7381\\-11CF\\-884D\\-00AA004B2E24\\}\\\\InProcServer32\\\\\\(Default\\)\") and  not (((action_registry_value_name ~= \".*system32\\\\wbem\\\\wmiutils\\.dll\" or action_registry_value_name ~= \".*system32\\\\wbem\\\\wbemsvc\\.dll\") or (action_registry_data ~= \".*system32\\\\wbem\\\\wmiutils\\.dll\" or action_registry_data ~= \".*system32\\\\wbem\\\\wbemsvc\\.dll\")))\n\n\n\n"}
{"prompt": "I want to see alerts for when there are over 1000 failed login attempts due to password expiry or account issues within a 5 minute timeframe across all Windows Event Logs.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| bin _time span = 5m\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\naction = arrayindex(regextract(microsoft_windows_raw.message, \"User Account Control:\\t\\n\\t\\t(.*)\\n\\t\"), 0)\n| filter xdm.event.id = \"5136\" and action ~= \"Value Deleted\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, action\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.event.id\n| filter matched_events >= 1000\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 1000)), 1)"}
{"prompt": "I want to detect suspicious activity related to manipulating Windows Trace ETW sessions using Logman.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\logman\\.exe\" or actor_process_file_original_name = \"Logman.exe\") and (action_process_image_command_line contains \"stop \" or action_process_image_command_line contains \"delete \") and (action_process_image_command_line contains \"Circular Kernel Context Logger\" or action_process_image_command_line contains \"EventLog-\" or action_process_image_command_line contains \"SYSMON TRACE\" or action_process_image_command_line contains \"SysmonDnsEtwSession\"))\n\n\n\n"}
{"prompt": "I want to find out if AddInUtil.exe is making any suspicious network connections that might indicate malware activity.", "response": "#N/A"}
{"prompt": "I want to find potential AMSI bypass scripts that use NULL bits and are executed on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"if(0){{{0}}}' -f $(0 -as [char]) +\" or ScriptBlockText contains \"#<NULL>\")\n\n\n\n"}
{"prompt": "I want to see events related to revoked image loading detected by CodeIntegrity.", "response": "datamodel\n| filter xdm.event.id in (3032, 3035)\n\n\n\n"}
{"prompt": "I want to find suspicious uses of the Certutil tool on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_file_original_name = \"CertUtil.exe\") and (action_process_image_command_line contains \" -decode \" or action_process_image_command_line contains \" -decodehex \" or action_process_image_command_line contains \" -urlcache \" or action_process_image_command_line contains \" -verifyctl \" or action_process_image_command_line contains \" -encode \" or action_process_image_command_line contains \" -exportPFX \" or action_process_image_command_line contains \" /decode \" or action_process_image_command_line contains \" /decodehex \" or action_process_image_command_line contains \" /urlcache \" or action_process_image_command_line contains \" /verifyctl \" or action_process_image_command_line contains \" /encode \" or action_process_image_command_line contains \" /exportPFX \"))\n\n\n\n"}
{"prompt": "I want to see alerts for when attrib.exe is used to hide files.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\attrib\\.exe\" or actor_process_file_original_name = \"ATTRIB.EXE\") and action_process_image_command_line contains \" +h \") and  not (action_process_image_command_line contains \"\\\\desktop.ini \") and  not ((actor_process_image_path ~= \".*\\\\cmd\\.exe\" and action_process_image_command_line = \"+R +H +S +A \\\\\\*.cui\" and actor_process_image_command_line = \"C:\\\\WINDOWS\\\\system32\\\\\\*.bat\"))\n\n\n\n"}
{"prompt": "I want to see network connections initiated by Regsvr32.exe.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (Initiated = \"true\" and actor_process_image_path ~= \".*\\\\regsvr32\\.exe\")\n\n\n\n"}
{"prompt": "I want to detect suspicious file creations on my Palo Alto GlobalProtect device that could indicate exploitation of CVE-2024-3400.", "response": "datamodel\n| filter ((xdm.target.file.filename contains \"{IFS}\" or xdm.target.file.filename contains \"base64\" or xdm.target.file.filename contains \"bash\" or xdm.target.file.filename contains \"curl\" or xdm.target.file.filename contains \"http\") and xdm.target.file.filename ~= \"\\/opt\\/panlogs\\/tmp\\/device\\_telemetry\\/.*\")\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple File Storage/Sharing URLs over an hour period, with a large amount of data transferred.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and user_agent not in (\"-\")\n| filter category ~= \"File Storage/Sharing\" and action ~= \"OBSERVED\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 20 and bytes_src >= 10000000\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find malicious activity from multiple signature detections originating from the same IP address.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name !~= \"qualys\"\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| join type = left conflict_strategy = left\n(datamodel dataset = check_point_vpn_1_firewall_1_raw\n| alter origin = check_point_vpn_1_firewall_1_raw.origin\n| filter xdm.observer.action = \"accept\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name !~= \"qualys\"\n| fields xdm.observer.action, xdm.source.ipv4 as fw_src_ip,\nxdm.source.port, xdm.target.ipv4, xdm.target.is_internal_ip\n) as fw_events fw_events.fw_src_ip = xdm.source.ipv4\n| filter fw_src_ip != null\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address as ip_addr\n) as dmz_ips dmz_ips.ip_addr = xdm.target.ipv4\n| filter (xdm.target.is_internal_ip = true or ip_addr != null)\n| comp values(*) as *,\ncount() as matched_events by xdm.source.ipv4,\n_time\n| filter array_length(xdm.alert.description) >= 5\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious processes that are created from a public folder and use common evasion techniques like PowerShell or CMD.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \"C\\:\\\\Users\\\\Public\\\\.*\" and (action_process_image_command_line contains \"powershell\" or action_process_image_command_line contains \"cmd.exe /c \" or action_process_image_command_line contains \"cmd.exe /r \" or action_process_image_command_line contains \"cmd.exe /k \" or action_process_image_command_line contains \"cmd /c \" or action_process_image_command_line contains \"cmd /r \" or action_process_image_command_line contains \"cmd /k \" or action_process_image_command_line contains \"wscript.exe\" or action_process_image_command_line contains \"cscript.exe\" or action_process_image_command_line contains \"bitsadmin\" or action_process_image_command_line contains \"certutil\" or action_process_image_command_line contains \"mshta.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts for potential misuse of Mftrace.EXE on my endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\mftrace\\.exe\"\n\n\n\n"}
{"prompt": "I want to see alerts about new scheduled tasks being created using Schtasks.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\schtasks\\.exe\" and action_process_image_command_line contains \" /create \") and  not ((action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\"))\n\n\n\n"}
{"prompt": "I want to see all events related to high privilege admin activity where domain policies were modified, including details about the affected computer, user, and event outcome.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4739\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name,\ntarget_domain\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all alerts about account sign-in attempts that were blocked by Azure due to too many failed attempts.", "response": "dataset = msft_azure_raw\n| alter properties_resultType = json_extract_scalar(properties , \"$.resultType\")\n| alter properties_resultDescription = json_extract_scalar(properties , \"$.resultDescription\")\n| filter (properties.resultType = 50057 and properties.resultDescription = \"Failure\")\n\n\n\n"}
{"prompt": "I want to see detections related to UEFI persistence using wpbbin.exe on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path = \"C:\\\\Windows\\\\System32\\\\wpbbin.exe\"\n\n\n\n"}
{"prompt": "I want to find suspicious network connections initiated by processes running from unusual file locations.", "response": "#N/A"}
{"prompt": "I want to detect if an attacker is enumerating DLLs like \"rdpcorets.dll\" using tasklist.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\tasklist\\.exe\" or actor_process_file_original_name = \"tasklist.exe\") and (action_process_image_command_line contains \"-m\" or action_process_image_command_line contains \"/m\") and action_process_image_command_line contains \"rdpcorets.dll\")\n\n\n\n"}
{"prompt": "I want to see all communication matches, from Fortigate and ASA firewalls, that involve IPs known to be associated with malicious actors.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw, cisco_asa_raw)\n| filter (xdm.source.ipv4 != NULL and xdm.target.ipv4 != NULL)\n| union (dataset = bad_actor_iocs)\n| filter (xdm.source.ipv4 ~= ioc_value or xdm.target.ipv4 ~= ioc_value)"}
{"prompt": "I want to find indicators of exploitation related to the \"SlashAndGrab\" vulnerability in ScreenConnect as described in the Huntress blog post.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*C\\:\\\\Windows\\\\Temp\\\\ScreenConnect\\\\.*\" and xdm.target.file.filename contains \"\\\\LB3.exe\") or (xdm.target.file.filename contains \"C:\\\\mpyutd.msi\" or xdm.target.file.filename contains \"C:\\\\perflogs\\\\RunSchedulerTaskOnce.ps1\" or xdm.target.file.filename contains \"C:\\\\ProgramData\\\\1.msi\" or xdm.target.file.filename contains \"C:\\\\ProgramData\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\\\\mpyutd.msi\" or xdm.target.file.filename contains \"C:\\\\ProgramData\\\\update.dat\" or xdm.target.file.filename contains \"C:\\\\Users\\\\oldadmin\\\\Documents\\\\MilsoftConnect\\\\Files\\\\ta.exe\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\Help\\\\Help\\\\SentinelAgentCore.dll\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\Help\\\\Help\\\\SentinelUI.exe\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\spsrv.exe\" or xdm.target.file.filename contains \"C:\\\\Windows\\\\Temp\\\\svchost.exe\"))\n\n\n\n"}
{"prompt": "I want to see events related to potential exploits of CVE-2019-0708 on RDP connections from endpoints.", "response": "preset = xdr_event_log\n| filter (action_evtlog_event_id in (56, 50) and provider_name = \"TermDD\")\n\n\n\n"}
{"prompt": "I want to see files with names matching those associated with UNC4841 Barracuda ESG exploitation indicators on Linux systems.", "response": "preset = xdr_file\n| filter (action_file_name ~= \".*\\/11111\\.tar\" or action_file_name ~= \".*\\/aacore\\.sh\" or action_file_name ~= \".*\\/appcheck\\.sh\" or action_file_name ~= \".*\\/autoins\" or action_file_name ~= \".*\\/BarracudaMailService\" or action_file_name ~= \".*\\/etc\\/cron\\.daily\\/core\\_check\\.sh\" or action_file_name ~= \".*\\/etc\\/cron\\.daily\\/core\\.sh\" or action_file_name ~= \".*\\/etc\\/cron\\.hourly\\/aacore\\.sh\" or action_file_name ~= \".*\\/etc\\/cron\\.hourly\\/appcheck\\.sh\" or action_file_name ~= \".*\\/etc\\/cron\\.hourly\\/core\\.sh\" or action_file_name ~= \".*\\/get\\_fs\\_info\\.pl\" or action_file_name ~= \".*\\/imgdata\\.jpg\" or action_file_name ~= \".*\\/install\\_att\\_v2\\.tar\" or action_file_name ~= \".*\\/install\\_bvp74\\_auth\\.tar\" or action_file_name ~= \".*\\/install\\_helo\\.tar\" or action_file_name ~= \".*\\/install\\_reuse\\.tar\" or action_file_name ~= \".*\\/intent\\_helo\" or action_file_name ~= \".*\\/intent\\_reuse\" or action_file_name ~= \".*\\/intentbas\" or action_file_name ~= \".*\\/mknod\" or action_file_name ~= \".*\\/mod\\_attachment\\.lua\" or action_file_name ~= \".*\\/mod\\_content\\.lua\" or action_file_name ~= \".*\\/mod\\_require\\_helo\\.lua\" or action_file_name ~= \".*\\/mod\\_rtf\" or action_file_name ~= \".*\\/mod\\_sender\\.lua\" or action_file_name ~= \".*\\/mod\\_udp\\.so\" or action_file_name ~= \".*\\/nfsd\\_stub\\.ko\" or action_file_name ~= \".*\\/resize\\_reisertab\" or action_file_name ~= \".*\\/resize\\_risertab\" or action_file_name ~= \".*\\/resize2fstab\" or action_file_name ~= \".*\\/rverify\" or action_file_name ~= \".*\\/saslautchd\" or action_file_name ~= \".*\\/sendscd\" or action_file_name ~= \".*\\/snapshot\\.tar\" or action_file_name ~= \".*\\/tmp\\/p\" or action_file_name ~= \".*\\/tmp\\/p7\" or action_file_name ~= \".*\\/tmp\\/t\" or action_file_name ~= \".*\\/update\\_v2\\.sh\" or action_file_name ~= \".*\\/update\\_v31\\.sh\" or action_file_name ~= \".*\\/update\\_v35\\.sh\" or action_file_name ~= \".*\\/update\\_version\")\n\n\n\n"}
{"prompt": " I want to see all instances of non-admin users unlocking accounts on Windows systems, along with details like the username, host name, domain, and any error codes or failure reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4767\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious files created in uncommon AppData folders on Windows systems.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\.*\" and (xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.cmd\" or xdm.target.file.filename ~= \".*\\.cpl\" or xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\" or xdm.target.file.filename ~= \".*\\.hta\" or xdm.target.file.filename ~= \".*\\.iso\" or xdm.target.file.filename ~= \".*\\.lnk\" or xdm.target.file.filename ~= \".*\\.msi\" or xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.psm1\" or xdm.target.file.filename ~= \".*\\.scr\" or xdm.target.file.filename ~= \".*\\.vbe\" or xdm.target.file.filename ~= \".*\\.vbs\")) and  not ((xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and (xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\.*\" or xdm.target.file.filename ~= \".*\\\\AppData\\\\LocalLow\\\\.*\" or xdm.target.file.filename ~= \".*\\\\AppData\\\\Roaming\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see events where scheduled tasks are being used to execute payloads loaded from the registry.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" or actor_process_file_original_name = \"schtasks.exe\") and action_process_image_command_line contains \"/Create\" and (action_process_image_command_line contains \"Get-ItemProperty\" or action_process_image_command_line contains \" gp \") and (action_process_image_command_line contains \"HKCU:\" or action_process_image_command_line contains \"HKLM:\" or action_process_image_command_line contains \"registry::\" or action_process_image_command_line contains \"HKEY_\")) and  not ((action_process_image_command_line contains \"FromBase64String\" or action_process_image_command_line contains \"encodedcommand\"))\n\n\n\n"}
{"prompt": "I want to see a list of all logged events grouped by username.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.security/locations/alerts/activate/action\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\"),\neventlog = json_extract_scalar(properties, \"$.eventName\")\n| filter referenceid in (\"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time, eventlog, resultDescription\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see details about manual user access provisioning events in MFA, specifically those where a new user is added and excluding sync events.", "response": "config case_sensitive = false\n| datamodel dataset = mfa_mfa2_raw\n| filter xdm.event.operation in (\"added new user\") and xdm.source.user.username !~= \"multifactorauthadsync\"\n| fields xdm.event.type, xdm.event.description, xdm.event.operation,\nxdm.event.outcome, xdm.source.user.username, xdm.target.user.username,\nxdm.observer.action, xdm.source.host.hostname, xdm.event.original_event_type,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.source.ipv4, _time, _insert_time\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect potential suspicious activity involving sensitive files on my endpoints by looking for processes that access or modify critical paths and commands.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\/cat\" or action_process_image_path ~= \".*\\/echo\" or action_process_image_path ~= \".*\\/grep\" or action_process_image_path ~= \".*\\/head\" or action_process_image_path ~= \".*\\/more\" or action_process_image_path ~= \".*\\/tail\") and action_process_image_command_line contains \">\") or (action_process_image_path ~= \".*\\/emacs\" or action_process_image_path ~= \".*\\/nano\" or action_process_image_path ~= \".*\\/sed\" or action_process_image_path ~= \".*\\/vi\" or action_process_image_path ~= \".*\\/vim\")) and (action_process_image_command_line contains \"/bin/login\" or action_process_image_command_line contains \"/bin/passwd\" or action_process_image_command_line contains \"/boot/\" or action_process_image_command_line contains \"/etc/*.conf\" or action_process_image_command_line contains \"/etc/cron.\" or action_process_image_command_line contains \"/etc/crontab\" or action_process_image_command_line contains \"/etc/hosts\" or action_process_image_command_line contains \"/etc/init.d\" or action_process_image_command_line contains \"/etc/sudoers\" or action_process_image_command_line contains \"/opt/bin/\" or action_process_image_command_line contains \"/sbin\" or action_process_image_command_line contains \"/usr/bin/\" or action_process_image_command_line contains \"/usr/local/bin/\")\n\n\n\n"}
{"prompt": "I want to see events related to suspicious network activity, like dropped packets with source port zero or denied AXFR requests.", "response": "datamodel\n| filter ( contains \" dropping source port zero packet from \" or  contains \" denied AXFR from \" or  contains \" exiting (due to fatal error)\")\n\n\n\n"}
{"prompt": "I want to find out if \"aspnet_compiler.exe\" is being used to create new DLL files in suspicious locations.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\aspnet\\_compiler\\.exe\" or xdm.source.process.name ~= \".*\\\\aspnet\\_compiler\\.exe\") and (xdm.target.file.filename ~= \".*\\\\Temporary\\ ASP\\.NET\\ Files\\\\.*\" and xdm.target.file.filename ~= \".*\\\\assembly\\\\tmp\\\\.*\" and xdm.target.file.filename contains \".dll\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious file access events related to Microsoft Teams, specifically those involving cookies and local storage files, but excluding legitimate accesses by the Teams application itself.", "response": "datamodel\n| filter (xdm.target.file.filename contains \"\\\\Microsoft\\\\Teams\\\\Cookies\" or xdm.target.file.filename contains \"\\\\Microsoft\\\\Teams\\\\Local Storage\\\\leveldb\") and  not ((xdm.target.process.name contains \"\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe\" or xdm.source.process.name contains \"\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe\"))\n\n\n\n"}
{"prompt": "I want to detect when AnyDesk is being used with piped passwords through the command line.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"/c \" and action_process_image_command_line contains \"echo \" and action_process_image_command_line contains \".exe --set-password\")\n\n\n\n"}
{"prompt": "I want to detect when an adversary tries to access browser login data by looking for scripts that copy files containing this information from locations like Opera, Firefox, Edge, or Chrome.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"Copy-Item\" and ScriptBlockText contains \"-Destination\") and (ScriptBlockText contains \"\\\\Opera Software\\\\Opera Stable\\\\Login Data\" or ScriptBlockText contains \"\\\\Mozilla\\\\Firefox\\\\Profiles\" or ScriptBlockText contains \"\\\\Microsoft\\\\Edge\\\\User Data\\\\Default\" or ScriptBlockText contains \"\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Login Data\" or ScriptBlockText contains \"\\\\Google\\\\Chrome\\\\User Data\\\\Default\\\\Login Data For Account\"))\n\n\n\n"}
{"prompt": "I want to find suspicious modifications to the ScreenConnect user database file.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\.xml\" and (xdm.target.file.filename contains \"Temp\" and xdm.target.file.filename contains \"ScreenConnect\") and (xdm.target.process.name ~= \".*\\\\ScreenConnect\\.Service\\.exe\" or xdm.source.process.name ~= \".*\\\\ScreenConnect\\.Service\\.exe\"))\n\n\n\n"}
{"prompt": "I want to identify Cisco switches that have experienced a high number of port security violations within a specific timeframe.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 3m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter msg_id in (\"PORT_SECURITY-SP-2-PSECURE_VIOLATION\", \"PORT_SECURITY-2-PSECURE_VIOLATION\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\neth_src,\n_time\n| filter matched_events >= 15\n| alter aggregation_criteria = \"macaddress\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 15)), 1)"}
{"prompt": "I want to see indicators of compromise associated with Greenbug espionage group activity on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\:\\\\ProgramData\\\\adobe\\\\Adobe\\.exe\" or action_process_image_path ~= \".*\\:\\\\ProgramData\\\\oracle\\\\local\\.exe\" or action_process_image_path ~= \".*\\\\revshell\\.exe\" or action_process_image_path ~= \".*\\\\infopagesbackup\\\\ncat\\.exe\" or action_process_image_path ~= \".*\\:\\\\ProgramData\\\\comms\\\\comms\\.exe\") or (action_process_image_command_line contains \"-ExecutionPolicy Bypass -File\" and action_process_image_command_line contains \"\\\\msf.ps1\") or (action_process_image_command_line contains \"infopagesbackup\" and action_process_image_command_line contains \"\\\\ncat\" and action_process_image_command_line contains \"-e cmd.exe\") or (action_process_image_command_line contains \"system.Data.SqlClient.SqlDataAdapter($cmd); [void]$da.fill\" or action_process_image_command_line contains \"-nop -w hidden -c $k=new-object\" or action_process_image_command_line contains \"[Net.CredentialCache]::DefaultCredentials;IEX \" or action_process_image_command_line contains \" -nop -w hidden -c $m=new-object net.webclient;$m\" or action_process_image_command_line contains \"-noninteractive -executionpolicy bypass whoami\" or action_process_image_command_line contains \"-noninteractive -executionpolicy bypass netstat -a\") or action_process_image_command_line contains \"L3NlcnZlcj1\")\n\n\n\n"}
{"prompt": "I want to monitor local Windows security groups for any changes and get alerts if a member is added to the local admin group.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4732\", \"4733\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find PowerShell events where an attacker is prompting for credentials.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"PromptForCredential\"\n\n\n\n"}
{"prompt": "I want to find out if any SET users have logged into Duo from two different operating systems within the last 24 hours.", "response": "dataset = duo_duo_raw\n| filter email != NULL\n| filter result in (\"success\") and eventtype in (\"authentication\")\n| alter DuoUserName = json_extract(user, \"$.name\"),\nIPAddress = json_extract(access_device, \"$.ip\"),\nDeviceTrustLevel = json_extract(adaptive_trust_assessments, \"$.remember_me.trust_level\")\n\n| join type = right\n(dataset = wl_ip_cidrs\n| fields wl_description, wl_logsrc, wl_type, wl_value\n| filter wl_type = \"ipv4\"\n) as wlist wlist.wl_value != IPAddress\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false\n| alter AccDevLocationCN = json_extract(access_device, \"$.location.country\"),\nAccDevLocationST = json_extract(access_device, \"$.location.state\"),\nAccDevLocationCY = json_extract(access_device, \"$.location.city\"),\nAccDevOS = json_extract_scalar(access_device, \"$.os\"),\nAccDevOSVer = json_extract(access_device, \"$.os_version\"),\nAccDevBrowser = json_extract(access_device, \"$.browser\")\n| filter AccDevOS not in (\"iOS\", \"Android\")\n| alter AppSrc = json_extract(application, \"$.name\")\n| filter IPAddress not contains \"0.0.0.0\" and (AccDevLocationCN != NULL or len(AccDevLocationCN) > 4)\n| alter AccDevLocationCN = replace(AccDevLocationCN, \"\\\"\", \"\")\n| fields AccDevLocationCN, AccDevBrowser, AccDevOS, DuoUserName,\nresult, reason, email, IPAddress\n\n\n| filter email in (\"<emails>\")\n\n\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(AccDevOS) as UniqOS by DuoUserName,\nemail\n| filter array_length(UniqOS) > 1"}
{"prompt": "I want to detect suspicious PowerShell scripts that retrieve the current user's information.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"[System.Environment]::UserName\" or ScriptBlockText contains \"$env:UserName\" or ScriptBlockText contains \"[System.Security.Principal.WindowsIdentity]::GetCurrent()\")\n\n\n\n"}
{"prompt": "I want to see alerts for potential ColdSteel RAT persistence using svchost and a specific DLL file path.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and action_module_path ~= \".*\\\\AppData\\\\Roaming\\\\newdev\\.dll\")\n\n\n\n"}
{"prompt": " I want to find instances where PowerShell is being used to create volume shadow copies on endpoints. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Win32_ShadowCopy\" and ScriptBlockText contains \").Create(\" and ScriptBlockText contains \"ClientAccessible\")\n\n\n\n"}
{"prompt": "I want to find suspicious instances of HH.EXE being executed, especially if it uses unusual command lines involving temporary folders or specific paths like AppData, Downloads, Users\\Public, and Windows\\Temp.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"HH.exe\" or action_process_image_path ~= \".*\\\\hh\\.exe\") and (action_process_image_command_line contains \".application\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Content\\.Outlook\\\\.*\" or action_process_image_command_line ~= \".*\\\\Downloads\\\\.*\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances where attackers are using the sftp.exe binary as part of a LOLBIN attack.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\sftp\\.exe\" and (action_process_image_command_line contains \" -D ..\" or action_process_image_command_line ~= \".*\\ \\-D\\ C\\:\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see information about successful sign-ons from Swift where the description mentions \"successfully signed on to the terminal\" and includes operator usernames like \"lso\" or \"rso\".", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"Successful signon\" and xdm.event.description contains \"successfully signed on to the terminal\" and (xdm.event.description ~= \"operator lso : left security officer|operator rso : right security <usernames>\")\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all events related to files named \"dumpert.dmp\" that are part of the Datamodel.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*dumpert\\.dmp\"\n\n\n\n"}
{"prompt": "I want to detect suspicious network commands being executed on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"ipconfig /all\" or action_process_image_command_line contains \"netsh interface show interface\" or action_process_image_command_line contains \"arp -a\" or action_process_image_command_line contains \"nbtstat -n\" or action_process_image_command_line contains \"net config\" or action_process_image_command_line contains \"route print\")\n\n\n\n"}
{"prompt": "I want to find instances where the dsquery executable is used to discover domain trusts.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\dsquery\\.exe\" or actor_process_file_original_name = \"dsquery.exe\") and action_process_image_command_line contains \"trustedDomain\")\n\n\n\n"}
{"prompt": "I want to see alerts related to high privilege admin activity, specifically when SID History is added to an account.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4765\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential exploitation attempts of undocumented Windows Server RCE vulnerabilities that involve svchost.exe processes using the -k DHCPServer command line argument and executed by certain system accounts.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and action_process_image_path ~= \".*\\\\svchost\\.exe\" and actor_process_image_command_line contains \"-k DHCPServer\" and action_process_image_command_line contains \"-k DHCPServer\" and (action_process_username contains \"NETWORK SERVICE\" or action_process_username contains \"NETZWERKDIENST\" or action_process_username contains \"SERVIZIO DI RETE\" or action_process_username contains \"SERVICIO DE RED\"))\n\n\n\n"}
{"prompt": "I want to find potential Devil Bait malware reconnaissance activity on my endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\wscript\\.exe\" and action_process_image_path ~= \".*\\\\cmd\\.exe\" and action_process_image_command_line ~= \".*\\>\\>\\%APPDATA\\%\\\\Microsoft\\\\.*\" and (action_process_image_command_line ~= \".*\\.xml\" or action_process_image_command_line ~= \".*\\.txt\")) and (action_process_image_command_line contains \"dir\" or action_process_image_command_line contains \"ipconfig /all\" or action_process_image_command_line contains \"systeminfo\" or action_process_image_command_line contains \"tasklist\"))\n\n\n\n"}
{"prompt": "I want to see events related to CrackMapExec activity on my endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_command_line contains \"tasklist /fi \" and action_process_image_command_line contains \"Imagename eq lsass.exe\") and (action_process_image_command_line contains \"cmd.exe /c \" or action_process_image_command_line contains \"cmd.exe /r \" or action_process_image_command_line contains \"cmd.exe /k \" or action_process_image_command_line contains \"cmd /c \" or action_process_image_command_line contains \"cmd /r \" or action_process_image_command_line contains \"cmd /k \") and (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\")) or (action_process_image_command_line contains \"do rundll32.exe C:\\\\windows\\\\System32\\\\comsvcs.dll, MiniDump\" and action_process_image_command_line ~= \".*\\\\Windows\\\\Temp\\\\.*\" and action_process_image_command_line contains \" full\" and action_process_image_command_line contains \"%%B\") or (action_process_image_command_line contains \"tasklist /v /fo csv\" and action_process_image_command_line contains \"findstr /i \\\"lsass\\\"\"))\n\n\n\n"}
{"prompt": "I want to find users who have experienced a sudden spike in Symantec Endpoint Protection (SEP) activity today compared to their average activity over the past week.", "response": "dataset = symantec_ep_raw\n| filter _raw_log ~= \",Risk\\sname:\"\n| alter username = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0))\n| filter username not in (\"SYSTEM\", null, \"None\")\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter day = extract_time(_time, \"DAYOFWEEK\")\n| comp count() as current_day_count by day,\nusername\n| join type = left conflict_strategy = both\n(dataset = symantec_ep_raw\n| filter _raw_log ~= \",Risk\\sname:\"\n| alter username = to_string(arrayindex(regextract(_raw_log, \"User Name:\\s([^,]+),\"), 0))\n| filter username not in (\"SYSTEM\", null, \"None\")\n| alter day = extract_time(_time, \"DAYOFWEEK\")\n| comp count() as 7_days_count by day,\nusername\n| comp avg(7_days_count) as 7_days_count_avg by username addrawdata = true as avg_raw\n| alter user = username\n| fields user, 7_days_count_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = username\n| filter current_day_count > multiply(7_days_count_avg, 1.35)"}
{"prompt": "I want to find potential Conti ransomware activity where someone is using sqlcmd to dump databases from local machines.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sqlcmd\\.exe\" or (action_process_image_command_line contains \"sqlcmd \" or action_process_image_command_line contains \"sqlcmd.exe\")) and action_process_image_command_line contains \" -S localhost \" and (action_process_image_command_line contains \"sys.sysprocesses\" or action_process_image_command_line contains \"master.dbo.sysdatabases\" or action_process_image_command_line contains \"BACKUP DATABASE\"))\n\n\n\n"}
{"prompt": "I want to find suspicious instances of Regasm or Regsvcs being executed from unusual locations on my endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\Regsvcs\\.exe\" or action_process_image_path ~= \".*\\\\Regasm\\.exe\") or actor_process_file_original_name in (\"RegSvcs.exe\", \"RegAsm.exe\")) and (action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Microsoft\\\\Windows\\\\Start\\ Menu\\\\Programs\\\\Startup\\\\.*\" or action_process_image_command_line ~= \".*\\\\PerfLogs\\\\.*\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find activities that disable Windows Defender AV security monitoring.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"-DisableBehaviorMonitoring $true\" or action_process_image_command_line contains \"-DisableRuntimeMonitoring $true\")) or ((action_process_image_path ~= \".*\\\\sc\\.exe\" or actor_process_file_original_name = \"sc.exe\") and ((action_process_image_command_line contains \"stop\" and action_process_image_command_line contains \"WinDefend\") or (action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"WinDefend\") or (action_process_image_command_line contains \"config\" and action_process_image_command_line contains \"WinDefend\" and action_process_image_command_line contains \"start=disabled\")))\n\n\n\n"}
{"prompt": "I want to detect attempts to download files from remote shares using the \"findstr\" command with specific flags.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"findstr\" or action_process_image_path ~= \".*findstr\\.exe\" or actor_process_file_original_name = \"FINDSTR.EXE\") and (action_process_image_command_line contains \" -v \" and action_process_image_command_line contains \" -l \" and action_process_image_command_line ~= \".*\\\\\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see processes on endpoints that are spawning suspicious programs using shell scripting tools like mshta, powershell, or rundll32.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\" or actor_process_image_path ~= \".*\\\\wmiprvse\\.exe\" or actor_process_image_path ~= \".*\\\\regsvr32\\.exe\") and (action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\nslookup\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\")) and  not (action_process_cwd ~= \".*\\\\ccmcache\\\\.*\" or (actor_process_image_command_line contains \"\\\\Program Files\\\\Amazon\\\\WorkSpacesConfig\\\\Scripts\\\\setup-scheduledtask.ps1\" or actor_process_image_command_line contains \"\\\\Program Files\\\\Amazon\\\\WorkSpacesConfig\\\\Scripts\\\\set-selfhealing.ps1\" or actor_process_image_command_line contains \"\\\\Program Files\\\\Amazon\\\\WorkSpacesConfig\\\\Scripts\\\\check-workspacehealth.ps1\" or actor_process_image_command_line contains \"\\\\nessus_\") or action_process_image_command_line contains \"\\\\nessus_\" or (actor_process_image_path ~= \".*\\\\mshta\\.exe\" and action_process_image_path ~= \".*\\\\mshta\\.exe\" and (actor_process_image_command_line contains \"C:\\\\MEM_Configmgr_\" and actor_process_image_command_line contains \"\\\\splash.hta\" and actor_process_image_command_line contains \"{1E460BD7-F1C3-4B2E-88BF-4E770A288AF5}\") and (action_process_image_command_line contains \"C:\\\\MEM_Configmgr_\" and action_process_image_command_line ~= \".*\\\\SMSSETUP\\\\BIN\\\\.*\" and action_process_image_command_line contains \"\\\\autorun.hta\" and action_process_image_command_line contains \"{1E460BD7-F1C3-4B2E-88BF-4E770A288AF5}\")))\n\n\n\n"}
{"prompt": "I want to see events related to changes made to security groups, specifically those involving \"Administrators\" and \"Remote Desktop Users\". I need details like the username, error codes, hostname, event type, and target domain.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4732\", \"4733\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter group_name = trim(arrayindex(regextract(xdm.event.description, \"Group Name:\\t\\t([^\\n]+)\"), 0))\n| filter group_name IN (\"Administrators\", \"Remote Desktop Users\") and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username != NULL\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_domain\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all security events related to replay attacks detected on my endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 4649\n\n\n\n"}
{"prompt": "I want to find instances where a process on endpoints attempts to dump credentials and secrets from the SAM registry.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" save \" and (action_process_image_command_line contains \"HKLM\\\\sam\" or action_process_image_command_line contains \"HKLM\\\\system\" or action_process_image_command_line contains \"HKLM\\\\security\"))\n\n\n\n"}
{"prompt": "I want to see alerts for unusual user account deletions, especially when 100 or more accounts are deleted within a short period.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4726\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp count() as events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *\n| filter events >= 100\n| alter aggregation_criteria = \"ipbmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see all instances where files are downloaded from web browsers via inline URLs, regardless of file type. This should include Chrome, Brave, Edge, Opera, and Vivaldi.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\brave\\.exe\" or action_process_image_path ~= \".*\\\\chrome\\.exe\" or action_process_image_path ~= \".*\\\\msedge\\.exe\" or action_process_image_path ~= \".*\\\\opera\\.exe\" or action_process_image_path ~= \".*\\\\vivaldi\\.exe\") and action_process_image_command_line contains \"http\" and (action_process_image_command_line ~= \".*\\.7z\" or action_process_image_command_line ~= \".*\\.dat\" or action_process_image_command_line ~= \".*\\.dll\" or action_process_image_command_line ~= \".*\\.exe\" or action_process_image_command_line ~= \".*\\.hta\" or action_process_image_command_line ~= \".*\\.ps1\" or action_process_image_command_line ~= \".*\\.psm1\" or action_process_image_command_line ~= \".*\\.txt\" or action_process_image_command_line ~= \".*\\.vbe\" or action_process_image_command_line ~= \".*\\.vbs\" or action_process_image_command_line ~= \".*\\.zip\"))\n\n\n\n"}
{"prompt": "I want to detect instances where users are added to highly privileged groups like \"Group Policy Creator Owners\" or \"Schema Admins.\"", "response": "preset = xdr_process\n| filter (((action_process_image_command_line contains \"localgroup \" and action_process_image_command_line contains \" /add\") or (action_process_image_command_line contains \"Add-LocalGroupMember \" and action_process_image_command_line contains \" -Group \")) and (action_process_image_command_line contains \"Group Policy Creator Owners\" or action_process_image_command_line contains \"Schema Admins\"))\n\n\n\n"}
{"prompt": "I want to find URLs that contain \"/list/suc?name=\" and are related to iOS implants.", "response": "datamodel\n| filter xdm.network.http.url contains \"/list/suc?name=\"\n\n\n\n"}
{"prompt": "I want to see activity related to suspicious use of ShellExec_RunDLL on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"ShellExec_RunDLL\" and (action_process_image_command_line contains \"regsvr32\" or action_process_image_command_line contains \"msiexec\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line contains \"odbcconf\" or action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\" or action_process_image_command_line ~= \".*\\\\Temp\\\\.*\" or action_process_image_command_line contains \"Invoke-\" or action_process_image_command_line contains \"iex\" or action_process_image_command_line contains \"comspec\"))\n\n\n\n"}
{"prompt": "I want to see any changes made to the \"sc_logicalaccess\" group on Windows machines, including additions and removals of users. I need this information because access to this group grants the highest privileges, so any changes require immediate validation for potential privilege escalation activities.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.target.user.groups = \"sc_logicalaccess\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect suspicious service installations happening in folders like AppData or involving connections to localhost.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path ~= \".*\\\\AppData\\\\.*\" or actor_process_image_path contains \"\\\\\\\\127.0.0.1\" or actor_process_image_path contains \"\\\\\\\\localhost\")) and  not ((ServiceName = \"Zoom Sharing Service\" and actor_process_image_path contains \":\\\\Program Files\\\\Common Files\\\\Zoom\\\\Support\\\\CptService.exe\"))\n\n\n\n"}
{"prompt": "I want to detect when new users are created using net.exe or net1.exe.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") or actor_process_file_original_name in (\"net.exe\", \"net1.exe\")) and (action_process_image_command_line contains \"user\" and action_process_image_command_line contains \"add\"))\n\n\n\n"}
{"prompt": "I want to find instances of Conti malware using volume shadow listing as seen in the command line \"vssadmin list shadows\" and logging to \"log.txt\".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"vssadmin list shadows\" and action_process_image_command_line contains \"log.txt\")\n\n\n\n"}
{"prompt": "I want to find instances of COM hijacking attacks via Sdclt using Windows Event Logs.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\Software\\\\Classes\\\\Folder\\\\shell\\\\open\\\\command\\\\DelegateExecute\"\n\n\n\n"}
{"prompt": "I want to find instances where a file named \"code_tunnel.json\" is created by something other than Visual Studio Code itself.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\code\\_tunnel\\.json\" and  not (((xdm.target.process.name ~= \".*\\\\code\\-tunnel\\.exe\" or xdm.target.process.name ~= \".*\\\\code\\.exe\") or (xdm.source.process.name ~= \".*\\\\code\\-tunnel\\.exe\" or xdm.source.process.name ~= \".*\\\\code\\.exe\")))\n\n\n\n"}
{"prompt": "I want to find suspicious activity where processes are switching code pages using the `chcp` command and specifying either code page 936 or 1258.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\chcp\\.com\" and (action_process_image_command_line ~= \".*\\ 936\" or action_process_image_command_line ~= \".*\\ 1258\"))\n\n\n\n"}
{"prompt": "I want to find suspicious instances where the shutdown.exe process is used with the /l parameter for logoff.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\shutdown\\.exe\" and action_process_image_command_line contains \"/l\")\n\n\n\n"}
{"prompt": "I want to find potential password reconnaissance attempts using Findstr.EXE that look for words like \"password\", \"haslo\", \"senha\" etc.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\findstr\\.exe\" or actor_process_file_original_name = \"FINDSTR.EXE\") and (action_process_image_command_line contains \"contrase\ufffd\ufffd\ufffd\ufffd\ufffd\ufffda\" or action_process_image_command_line contains \"has\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdo\" or action_process_image_command_line contains \"heslo\" or action_process_image_command_line contains \"parola\" or action_process_image_command_line contains \"passe\" or action_process_image_command_line contains \"passw\" or action_process_image_command_line contains \"senha\" or action_process_image_command_line contains \"senord\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious instances of the Sigverif tool being executed on endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\sigverif\\.exe\"\n\n\n\n"}
{"prompt": "I want to find instances where the \"jsc.exe\" (JScript Compiler) is executed on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\jsc\\.exe\" or actor_process_file_original_name = \"jsc.exe\")\n\n\n\n"}
{"prompt": "I want to see recent Duo fraud cases from countries that aren't typically associated with business operations, specifically focusing on the last hour.", "response": "dataset = duo_duo_raw\n| filter email != NULL and (reason = \"user_marked_fraud\" and result = \"fraud\")\n| alter DuoUserName = user -> name,\nIPAddress = access_device -> ip,\nDeviceTrustLevel = adaptive_trust_assessments -> remember_me.trust_level,\nAccDevLocationCN = access_device -> location.country,\nAccDevLocationST = access_device -> location.state,\nAccDevLocationCY = access_device -> location.city,\nAccDevOS = access_device -> os,\nAccDevOSVer = access_device -> os_version,\nAccDevBrowser = access_device -> browser,\nIntegration = application -> name\n| filter incidr(IPAddress, \"<ip>\") = False and incidr(IPAddress, \"10.0.0.0/8\") = False and IPAddress not in (\"0.0.0.0\", null, NULL, \"\"\"\"\"\") and DuoUserName != NULL and IPAddress not in (\"<ip>\")\n| union (dataset = wl_ip_cidrs)\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter (IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false) and (AccDevLocationCN not in (null, NULL, \"\"\"\"\"\", \"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\"))"}
{"prompt": "I want to see information about remote PowerShell sessions using WinRM, including the destination port and LayerRTID.", "response": "preset = xdr_event_log\n| alter DestPort = regextract(to_json_string(action_evtlog_data_fields)->DestPort{}, \"\\\"(.*)\\\"\")\n| alter LayerRTID = regextract(to_json_string(action_evtlog_data_fields)->LayerRTID{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5156 and DestPort in (5985, 5986) and LayerRTID = 44)\n\n\n\n"}
{"prompt": "I want to see events related to suspicious activity involving the Colorcpl application.", "response": "datamodel\n| filter (xdm.target.process.name ~= \".*\\\\colorcpl\\.exe\" or xdm.source.process.name ~= \".*\\\\colorcpl\\.exe\") and  not ((xdm.target.file.filename ~= \".*\\.icm\" or xdm.target.file.filename ~= \".*\\.gmmp\" or xdm.target.file.filename ~= \".*\\.cdmp\" or xdm.target.file.filename ~= \".*\\.camp\"))\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to Microsoft Office DLL sideloading from my Windows Event Logs.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\outllib\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\OFFICE.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Office\\\\OFFICE.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\Root\\\\OFFICE.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Office\\\\Root\\\\OFFICE.*\"))\n\n\n\n"}
{"prompt": " I want to see alerts for processes using Runexehelper.exe as a proxy, which might indicate Lolbin activity.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\runexehelper\\.exe\"\n\n\n\n"}
{"prompt": " I want to detect commands that try to clear or tamper with the Linux command history. ", "response": "datamodel\n| filter ( contains \"cat /dev/null >\\*sh_history\" or  contains \"cat /dev/zero >\\*sh_history\" or  contains \"chattr +i\\*sh_history\" or  contains \"echo \\\"\\\" >\\*sh_history\" or  contains \"empty_bash_history\" or  contains \"export HISTFILESIZE=0\" or  contains \"history -c\" or  contains \"history -w\" or  contains \"ln -sf /dev/null \\*sh_history\" or  contains \"ln -sf /dev/zero \\*sh_history\" or  contains \"rm \\*sh_history\" or  contains \"shopt -ou history\" or  contains \"shopt -uo history\" or  contains \"shred \\*sh_history\" or  contains \"truncate -s0 \\*sh_history\")\n\n\n\n"}
{"prompt": "I want to find instances where Windows WebDAV User Agent is used in HTTP GET requests with the \"Microsoft\\-WebDAV\\-MiniRedir\" string in the browser field.", "response": "datamodel\n| filter (xdm.network.http.browser ~= \"Microsoft\\-WebDAV\\-MiniRedir\\/.*\" and xdm.network.http.method = \"GET\")\n\n\n\n"}
{"prompt": "I want to see detections for when Gpg.exe is renamed and executed.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"gpg.exe\" and  not ((action_process_image_path ~= \".*\\\\gpg\\.exe\" or action_process_image_path ~= \".*\\\\gpg2\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find HTTP requests with empty user agent strings in my proxy logs.", "response": "datamodel\n| filter xdm.network.http.browser = \"\"\n\n\n\n"}
{"prompt": "I want to see alerts for when a TAP driver service with \"tap0901\" is installed on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and ServiceFileName contains \"tap0901\")\n\n\n\n"}
{"prompt": "I want to see alerts related to TeamViewer Remote Sessions that might indicate Command And Control activity.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*\\\\TeamViewer\\\\RemotePrinting\\\\tvprint\\.db\" or xdm.target.file.filename ~= \".*\\\\TeamViewer\\\\TVNetwork\\.log\") or (xdm.target.file.filename contains \"\\\\TeamViewer\" and xdm.target.file.filename contains \"_Logfile.log\"))\n\n\n\n"}
{"prompt": "I want to see alerts when both source and destination IP addresses are 0.0.0.0 on Cisco Catalyst switches.  This should trigger if there are three or more events within a 5-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 5m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"ACL-5-ARPINSPECTIPPKT1\", \"ACL-5-ARPINSPECTIPPKT2\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to see events where RdrLeakDiag.exe is used to create full memory dumps.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\rdrleakdiag\\.exe\" and action_process_image_command_line contains \"/fullmemdmp\") or (action_process_image_command_line contains \"/fullmemdmp\" and action_process_image_command_line contains \" /o \" and action_process_image_command_line contains \" /p \")\n\n\n\n"}
{"prompt": "I want to see a list of ESXi VMs discovered via the esxcli command.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/esxcli\" and action_process_image_command_line contains \"vm process\" and action_process_image_command_line ~= \".*\\ list\")\n\n\n\n"}
{"prompt": "I want to see events related to suspicious child processes spawned by common browsers on macOS systems.", "response": "preset = xdr_process\n| filter ((actor_process_image_path contains \"com.apple.WebKit.WebContent\" or actor_process_image_path contains \"firefox\" or actor_process_image_path contains \"Google Chrome Helper\" or actor_process_image_path contains \"Google Chrome\" or actor_process_image_path contains \"Microsoft Edge\" or actor_process_image_path contains \"Opera\" or actor_process_image_path contains \"Safari\" or actor_process_image_path contains \"Tor Browser\") and (action_process_image_path ~= \".*\\/bash\" or action_process_image_path ~= \".*\\/curl\" or action_process_image_path ~= \".*\\/dash\" or action_process_image_path ~= \".*\\/ksh\" or action_process_image_path ~= \".*\\/osascript\" or action_process_image_path ~= \".*\\/perl\" or action_process_image_path ~= \".*\\/php\" or action_process_image_path ~= \".*\\/pwsh\" or action_process_image_path ~= \".*\\/python\" or action_process_image_path ~= \".*\\/sh\" or action_process_image_path ~= \".*\\/tcsh\" or action_process_image_path ~= \".*\\/wget\" or action_process_image_path ~= \".*\\/zsh\")) and  not (action_process_image_command_line contains \"--defaults-torrc\" or action_process_image_command_line contains \"/Library/Application Support/Microsoft/MAU*/Microsoft AutoUpdate.app/Contents/MacOS/msupdate\" or ((actor_process_image_path contains \"Google Chrome Helper\" or actor_process_image_path contains \"Google Chrome\") and (action_process_image_command_line contains \"/Volumes/Google Chrome/Google Chrome.app/Contents/Frameworks/*/Resources/install.sh\" or action_process_image_command_line contains \"/Applications/Google Chrome.app/Contents/Frameworks/Google Chrome Framework.framework/*/Resources/keystone_promote_preflight.sh\" or action_process_image_command_line contains \"/Applications/Google Chrome.app/Contents/Frameworks/Google Chrome Framework.framework/*/Resources/keystone_promote_postflight.sh\")) or (actor_process_image_path contains \"Microsoft Edge\" and (action_process_image_command_line contains \"IOPlatformExpertDevice\" or action_process_image_command_line contains \"hw.model\")) or ((actor_process_image_path contains \"Google Chrome Helper\" or actor_process_image_path contains \"Google Chrome\") and (action_process_image_command_line contains \"/Users/\" and action_process_image_command_line contains \"/Library/Application Support/Google/Chrome/recovery/\" and action_process_image_command_line contains \"/ChromeRecovery\"))) and  not (action_process_image_command_line = \"None\" or action_process_image_command_line = \"\")\n\n\n\n"}
{"prompt": "I want to see activity related to Hermetic Wiper malware processes based on specific file paths and command line arguments.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\policydefinitions\\\\postgresql\\.exe\" or ((action_process_image_command_line contains \"CSIDL_SYSTEM_DRIVE\\\\temp\\\\sys.tmp\" or action_process_image_command_line contains \" 1> \\\\\\\\127.0.0.1\\\\ADMIN$\\\\__16\") or (action_process_image_command_line contains \"powershell -c \" and action_process_image_command_line contains \"\\\\comsvcs.dll MiniDump \" and action_process_image_command_line contains \"\\\\winupd.log full\")))\n\n\n\n"}
{"prompt": "I want to see alerts for potential MuddyWater APT activity based on suspicious process creation behavior.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"vbscript:Close(Execute(\\\"CreateObject(\" and action_process_image_command_line contains \"powershell\" and action_process_image_command_line contains \"-w 1 -exec Bypass\" and action_process_image_command_line ~= \".*\\\\ProgramData\\\\.*\") or (action_process_image_command_line contains \"Win32_OperatingSystem\" and action_process_image_command_line contains \"Win32_NetworkAdapterConfiguration\" and action_process_image_command_line contains \"root\\\\SecurityCenter2\" and action_process_image_command_line contains \"[System.Net.DNS]\") or (action_process_image_command_line contains \"[Convert]::ToBase64String\" and action_process_image_command_line contains \"[System.Text.Encoding]::UTF8.GetString]\" and action_process_image_command_line contains \"GetResponse().GetResponseStream()\" and action_process_image_command_line contains \"[System.Net.HttpWebRequest]::Create(\" and action_process_image_command_line contains \"-bxor \"))\n\n\n\n"}
{"prompt": "I want to see alerts about Azure Suppression Rules being created.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName = \"MICROSOFT.SECURITY/ALERTSSUPPRESSIONRULES/WRITE\"\n\n\n\n"}
{"prompt": "I want to see all instances where ScreenConnect Client Service is used to execute commands through cmd.exe or Cmd.Exe, especially if those commands are located in a TEMP folder named \"ScreenConnect\".", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\ScreenConnect\\.ClientService\\.exe\" and (action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and action_process_image_command_line ~= \".*\\\\TEMP\\\\ScreenConnect\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see processes that are using PowerShell to query Active Directory users and potentially export that data.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and ((action_process_image_command_line contains \"Get-ADUser \" and action_process_image_command_line contains \" -Filter \\*\") and (action_process_image_command_line contains \" > \" or action_process_image_command_line contains \" | Select \" or action_process_image_command_line contains \"Out-File\" or action_process_image_command_line contains \"Set-Content\" or action_process_image_command_line contains \"Add-Content\")))\n\n\n\n"}
{"prompt": "I want to find instances of the UAC Bypass WSReset technique, which uses wsreset.exe with an elevated integrity level.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\wsreset\\.exe\" and action_process_integrity_level in (\"High\", \"System\"))\n\n\n\n"}
{"prompt": "I want to detect instances of Adwind RAT / JRAT activity that modify registry entries related to the \"Run\" key and set values or data containing \"%AppData%\\Roaming\\Oracle\\bin\\\" paths.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run.*\" and (action_registry_value_name ~= \"\\%AppData\\%\\\\Roaming\\\\Oracle\\\\bin\\\\.*\" or action_registry_data ~= \"\\%AppData\\%\\\\Roaming\\\\Oracle\\\\bin\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see potential brute force attacks based on multiple failed login attempts with usernames that don't exist in AD or local systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| bin _time span = 3m\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type)\n| filter ((xdm.event.id in (\"4625\", \"4776\") and error_code = \"0xC0000064\") or (xdm.event.id = \"672\" and error_code = \"0x6\")) and xdm.event.outcome = \"failure\" and xdm.source.user.username !~= \"\\$$|sas|mpetl_pr\" and xdm.source.ipv4 != null and xdm.source.ipv4 not in (\"<ip>\", \"<ip>\", \"<ip>\", \"<ip>\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = \"\"\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.target.user.username,\nxdm.source.ipv4,\n_time\n| filter matched_events = 5\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to see which unmanaged devices have Fortigate VPN connections.", "response": "config case_sensitive = false\n| datamodel dataset = fortinet_fortigate1_raw\n| filter xdm.event.original_event_type = \"0107045057\"\n| alter id = regextract(fortinet_fortigate1_raw._raw_log, \".*logid=\\\"(.*)\\\" type.*\"),\nhostname = arrayindex(regextract(fortinet_fortigate1_raw._raw_log, \".*name=\\\"(.*)\\\" fctuid.*\"), 0)\n| dedup hostname\n| fields xdm.source.user.username, hostname, xdm.source.ipv4,\nxdm.alert.subcategory\n| join type = left\n(config case_sensitive = false\n| dataset = endpoints\n| fields endpoint_name, endpoint_status\n) as endp endp.endpoint_name = hostname\n| filter (endpoint_name in (null, \"\"\"\"\"\"))"}
{"prompt": "I want to find instances of Renamed Remote Utilities RAT (RURAT) being executed on endpoints by looking for process creations that don't match the typical RURAT file names.", "response": "preset = xdr_process\n| filter action_process_signature_product = \"Remote Utilities\" and  not ((action_process_image_path ~= \".*\\\\rutserv\\.exe\" or action_process_image_path ~= \".*\\\\rfusclient\\.exe\"))\n\n\n\n"}
{"prompt": " I want to find instances where AWS root credentials are being used. ", "response": "dataset = amazon_aws_raw\n| alter userIdentity_type = json_extract_scalar(userIdentity , \"$.type\")\n| filter userIdentity.type = \"Root\" and  not (eventType = \"AwsServiceEvent\")\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple SymantecWSS Malicious category URLs based on behavioral study.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and category ~= \"Malicious Sources/Malnets\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "{I want to see events where a command combines ping and deletion actions with specific flags like \"-n\", \"Nul\", \"-f\", or \"-q.\"} \n\n\nThis prompt reflects:\n\n* **User intent:**  The user is interested in finding specific command combinations.\n* **Natural language:**  It uses common phrasing understandable to a non-technical person.\n* **Focus on key elements:** It highlights the crucial \"ping\" and \"deletion\" actions along with the mentioned flags.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" -n \" and action_process_image_command_line contains \"Nul\" and (action_process_image_command_line contains \" -f \" or action_process_image_command_line contains \" -q \") and (action_process_image_command_line contains \"ping\" and action_process_image_command_line contains \"del \"))\n\n\n\n"}
{"prompt": "I want to see alerts about users having access blocked by Azure Conditional Access policies.", "response": "dataset = msft_azure_raw\n| alter properties_resultType = json_extract_scalar(properties , \"$.resultType\")\n| filter properties.resultType = 53003\n\n\n\n"}
{"prompt": "I want to detect instances of curl being used to make web requests that potentially include custom User-Agent strings.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\curl\\.exe\" or actor_process_file_original_name = \"curl.exe\") and (action_process_image_command_line ~= \"\\s\\-H\\s\" and action_process_image_command_line contains \"User-Agent:\"))\n\n\n\n"}
{"prompt": "I want to see if any processes on my endpoints have suspicious names or command lines associated with known exploits and malware.", "response": "preset = xdr_process\n| filter (((action_process_image_path contains \"\\\\CVE-202\" or action_process_image_path contains \"\\\\CVE202\") or (action_process_image_path ~= \".*\\\\poc\\.exe\" or action_process_image_path ~= \".*\\\\artifact\\.exe\" or action_process_image_path ~= \".*\\\\artifact64\\.exe\" or action_process_image_path ~= \".*\\\\artifact\\_protected\\.exe\" or action_process_image_path ~= \".*\\\\artifact32\\.exe\" or action_process_image_path ~= \".*\\\\artifact32big\\.exe\" or action_process_image_path ~= \".*obfuscated\\.exe\" or action_process_image_path ~= \".*obfusc\\.exe\" or action_process_image_path ~= \".*\\\\meterpreter\")) or (action_process_image_command_line contains \"inject.ps1\" or action_process_image_command_line contains \"Invoke-CVE\" or action_process_image_command_line contains \"pupy.ps1\" or action_process_image_command_line contains \"payload.ps1\" or action_process_image_command_line contains \"beacon.ps1\" or action_process_image_command_line contains \"PowerView.ps1\" or action_process_image_command_line contains \"bypass.ps1\" or action_process_image_command_line contains \"obfuscated.ps1\" or action_process_image_command_line contains \"obfusc.ps1\" or action_process_image_command_line contains \"obfus.ps1\" or action_process_image_command_line contains \"obfs.ps1\" or action_process_image_command_line contains \"evil.ps1\" or action_process_image_command_line contains \"MiniDogz.ps1\" or action_process_image_command_line contains \"_enc.ps1\" or action_process_image_command_line contains \"\\\\shell.ps1\" or action_process_image_command_line contains \"\\\\rshell.ps1\" or action_process_image_command_line contains \"revshell.ps1\" or action_process_image_command_line contains \"\\\\av.ps1\" or action_process_image_command_line contains \"\\\\av_test.ps1\" or action_process_image_command_line contains \"adrecon.ps1\" or action_process_image_command_line contains \"mimikatz.ps1\" or action_process_image_command_line contains \"\\\\PowerUp_\" or action_process_image_command_line contains \"powerup.ps1\" or action_process_image_command_line contains \"\\\\Temp\\\\a.ps1\" or action_process_image_command_line contains \"\\\\Temp\\\\p.ps1\" or action_process_image_command_line contains \"\\\\Temp\\\\1.ps1\" or action_process_image_command_line contains \"Hound.ps1\" or action_process_image_command_line contains \"encode.ps1\" or action_process_image_command_line contains \"powercat.ps1\"))\n\n\n\n"}
{"prompt": "I want to see a list of malicious IP addresses identified by Cisco ASA, Fortinet Fortigate, and SonicWall NS security devices.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| join\n(dataset = IP_IOCs\n) as whip(Source_IP = xdm.source.ipv4 or Destination_IP = xdm.target.ipv4)\n| fields *\n| view column order = populated"}
{"prompt": "I want to find potential exploits using CVE-2023-36884 that involve GET requests with URLs containing \"/MSHTML_C7/\" and parameters like \"?d=[IP address]\"", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and xdm.network.http.url contains \"/MSHTML_C7/\" and xdm.network.http.url ~= \"\\?d\\=[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\")\n\n\n\n"}
{"prompt": "I want to detect if someone has changed the default RDP port on Windows systems.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\Control\\\\Terminal\\ Server\\\\WinStations\\\\RDP\\-Tcp\\\\PortNumber\" and  not ((action_registry_value_name = \"DWORD (0x00000d3d)\" or action_registry_data = \"DWORD (0x00000d3d)\"))\n\n\n\n"}
{"prompt": "I want to see alerts about when new admin roles are assigned in Okta.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type = \"iam.resourceset.bindings.add\"\n\n\n\n"}
{"prompt": "I want to see events where Office applications loaded DLLs from the GAC.", "response": "preset = xdr_image_load\n| filter ((actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\mspub\\.exe\" or actor_process_image_path ~= \".*\\\\onenote\\.exe\" or actor_process_image_path ~= \".*\\\\onenoteim\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\winword\\.exe\") and action_module_path ~= \"C\\:\\\\Windows\\\\Microsoft\\.NET\\\\assembly\\\\GAC\\_MSIL.*\")\n\n\n\n"}
{"prompt": "I want to find activity that indicates an attacker enabled the Windows Recall feature by manipulating the registry.", "response": "#N/A"}
{"prompt": "I want to detect suspicious processes that might be executing a file named HOSTNAME.EXE on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\HOSTNAME\\.EXE\"\n\n\n\n"}
{"prompt": "I want to find potential instances of malicious scripts or binaries being dropped using PowerShell.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\\\pwsh\\.exe\") or (xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\")) and (xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.chm\" or xdm.target.file.filename ~= \".*\\.cmd\" or xdm.target.file.filename ~= \".*\\.com\" or xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\" or xdm.target.file.filename ~= \".*\\.hta\" or xdm.target.file.filename ~= \".*\\.jar\" or xdm.target.file.filename ~= \".*\\.js\" or xdm.target.file.filename ~= \".*\\.ocx\" or xdm.target.file.filename ~= \".*\\.scr\" or xdm.target.file.filename ~= \".*\\.sys\" or xdm.target.file.filename ~= \".*\\.vbe\" or xdm.target.file.filename ~= \".*\\.vbs\" or xdm.target.file.filename ~= \".*\\.wsf\")) and  not ((xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and (xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\")) or (xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\Temp\\\\.*\" and (xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\")))\n\n\n\n"}
{"prompt": "I want to find suspicious activity on Linux endpoints where the \"find\" command is used with potentially risky permissions.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/find\" and (action_process_image_command_line contains \"-perm -4000\" or action_process_image_command_line contains \"-perm -2000\" or action_process_image_command_line contains \"-perm 0777\" or action_process_image_command_line contains \"-perm -222\" or action_process_image_command_line contains \"-perm -o w\" or action_process_image_command_line contains \"-perm -o x\" or action_process_image_command_line contains \"-perm -u=s\" or action_process_image_command_line contains \"-perm -g=s\"))\n\n\n\n"}
{"prompt": "I want to see alerts about threats using Disk Cleanup to bypass UAC.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*\\\"\\\\system32\\\\cleanmgr\\.exe\\ \\/autoclean\\ \\/d\\ C\\:\" and actor_process_image_command_line = \"C:\\\\Windows\\\\system32\\\\svchost.exe -k netsvcs -p -s Schedule\" and action_process_integrity_level in (\"High\", \"System\"))\n\n\n\n"}
{"prompt": "I want to see details about recent changes made to firewall rules for Azure SQL databases, specifically focusing on operations like write access and including information about the usernames involved, IP addresses, timestamps, and the specific resource IDs affected.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.sql/servers/firewallrules/write\", \"microsoft.dbformysql/servers/firewallrules/write\", \"microsoft.network/azurefirewalls/write\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"9227fdca-483d-424c-bc56-9fd2b4030484\", \"3fd7f1e1-88df-41df-982e-90c0daa354b9\", \"f2a4f062-8a8b-444f-82b8-e668b51cf42e\", \"71cce8cd-49d7-4463-bf9f-20dd2a68c5eb\", \"416105b8-5451-4d32-8f96-fcb0deb64ae0\", \"799febb6-d243-48d7-86a3-e94c956f46ba\", \"7269cfc9-f839-4437-9ded-f6d4bdec41d2\", \"8de7d5e6-d76e-497e-97c2-557d13d801e8\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect processes on Linux endpoints that might be used for reconnaissance activities, such as those looking for .htpasswd files or setting permissions with -perm -4000.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" -name .htpasswd\" or action_process_image_command_line contains \" -perm -4000 \")\n\n\n\n"}
{"prompt": "I want to find events where someone used the S3 Browser tool to create an S3 bucket policy that allows object retrieval from a specific bucket.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"iam.amazonaws.com\" and eventName = \"PutUserPolicy\" and userAgent contains \"S3 Browser\" and (requestParameters contains \"\\\"arn:aws:s3:::<YOUR-BUCKET-NAME>/*\\\"\" and requestParameters contains \"\\\"s3:GetObject\\\"\" and requestParameters contains \"\\\"Allow\\\"\"))\n\n\n\n"}
{"prompt": "I want to see a list of users who have had 5 or more failed login attempts on our Tools Platform Servers within the last minute.", "response": "datamodel dataset = linux_linux_raw\n| bin _time span = 1m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"Tools_Platform_Server\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| alter xdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), xdm.source.user.username),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.event.type in (\"login\", \"SSH\", \"sshd\", \"sssh\", \"User\", \"groupdel\", \"audit\", \"Successfully\", \"auditd\", \"input_userauth_request\", \"Accepted\", \"sudo\", \"userdel\", \"root\", \"Failed\", \"usermod\", \"su\", \"LOGIN\", \"passwd\", \"pam_authenticate\") and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol != \"ssh2\" and xdm.source.user.username not in (null, NULL, \"git\", \"UNKNOWN_USER\") and xdm.source.ipv4 not in (\"<ip>\")\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, device_ip, _vendor, _product\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to detect potential certificate spoofing attempts on my endpoints by looking for Kerberos events that don't have strong user mappings.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Kerberos-Key-Distribution-Center\" and action_evtlog_event_id in (39, 41))\n\n\n\n"}
{"prompt": "I want to see if there have been 10 or more object deletions by Yuvaraja Kupan or Paulraj Selvaraj01 within the last 5 minutes on CheckPoint firewalls in the USA region.", "response": "config case_sensitive = false\n| dataset = check_point_smartconsole_raw\n| bin _time span = 5m\n| filter operation = \"Delete Object\" and lowercase(administrator) in (\"yuvaraja_kuppan\", \"paulraj_selvaraj01\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(subject) as result,\nvalues(_product) as product,\ncount() as matched_events by administrator,\n_time\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see a list of domain controllers that have recently shut down or restarted, including their hostname, IP address, and any error codes associated with the event.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"1074\")\n| filter xdm.event.description !~= \"NT AUTHORITY\\\\SYSTEM\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps(wingrps.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or wingrps.IP = device_ip)\n| filter TYPE in (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect activity related to a pingback backdoor using DLL loading with `msdtc.exe` and `C:\\Windows\\oci.dll`. ", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\msdtc\\.exe\" and action_module_path = \"C:\\\\Windows\\\\oci.dll\")\n\n\n\n"}
{"prompt": "I want to see a list of Cisco ASA users who have experienced five or more authentication failures within a 5-minute window, along with the timestamp of their first failure.", "response": "datamodel dataset = cisco_asa_raw\n| bin _time span = 5m\n| fields xdm.event.id, xdm.event.description, xdm.event.type,\nxdm.alert.severity, xdm.observer.name, xdm.event.outcome_reason,\nxdm.source.ipv4, xdm.target.ipv4, xdm.target.user.username,\nxdm.event.is_completed, cisco_asa_raw._raw_log, _time,\n_insert_time, xdm.source.port, xdm.target.port\n| filter xdm.event.id in (\"605004\", \"611102\") and xdm.source.ipv4 != \"0.0.0.0\" and xdm.target.user.username != null\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.target.user.username,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to detect potential DLL sideloading through JsSchHlp using Windows Event Logs.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\JSESPR\\.dll\" and  not (action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Justsystem\\\\JsSchHlp\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see alerts when OSPF entries on Cisco Catalyst switches exceed a threshold of 6 or more matching events within a 6-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 1m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"OSPF-2-NOMEMORY\", \"OSPF-3-DBEXIST\", \"OSPF-3-DUP_RTRID\", \"OSPF-3-INIT_IDB\", \"OSPF-3-INTERNALERR\", \"OSPF-3-INVALID_ENCR_PASSWORD\", \"OSPF-3-LSA_LEN\", \"OSPF-3-NOBACKBONE\", \"OSPF-3-NOCONNDB\", \"OSPF-3-NOLSA\", \"OSPF-3-NOMEMORY\", \"OSPF-3-NOSELF\", \"OSPF-3-NO_SNMP_IFINDEX\", \"OSPF-3-RDB_NO_LSA\", \"OSPF-3-RECONF_VL\", \"OSPF-3-UNKNOWNSTATE\", \"OSPF-4-AREA_ALLOC_FAIL\", \"OSPF-4-ASBR_WITHOUT_VALID_AREA\", \"OSPF-4-BADLENGTH\", \"OSPF-4-BADLSAMASK\", \"OSPF-4-BADLSATYPE\", \"OSPF-4-CFG_NBR_INVAL_NBMA_OPT\", \"OSPF-4-CFG_NBR_INVAL_NET_TYPE\", \"OSPF-4-CFG_NBR_INVAL_P2MP_OPT\", \"OSPF-4-CFG_NBR_P2MP_NEEDS_COST\", \"OSPF-4-CONFLICTING_LSAID\", \"OSPF-4-DBD_ALLOC_FAIL\", \"OSPF-4-DUP_RTRID_AREA\", \"OSPF-4-DUP_RTRID_AS\", \"OSPF-4-DUP_RTRID_NBR\", \"OSPF-4-ERRRCV\", \"OSPF-4-FLOOD_WAR\", \"OSPF-4-INVALID_METRIC\", \"OSPF-4-INV_LSA_BLD_FLG\", \"OSPF-4-LOW_NET_METRIC\", \"OSPF-4-NONEIGHBOR\", \"OSPF-4-NORTRID\", \"OSPF-4-NOTREDIST4\", \"OSPF-4-NOTREDIST5\", \"OSPF-4-NO_IPADDRESS_ON_INT\", \"OSPF-4-OSPFINTDOWN\", \"OSPF-4-VIRTUAL_IN_NON_BACKBONE\", \"OSPF-4-WRONG_DEFAULT\", \"OSPF-5-ADJCHG\", \"OSPF-6-AREACHG\", \"OSPF-6-BADCHKSUM\", \"OSPF-6-BAD_LSA_COUNT\", \"OSPF-6-LRIB_WRONG_REFCNT\", \"OSPF-6-MODECHG\", \"OSPF-6-NOSRCPDB\", \"OSPF-6-NOTREDIST1\", \"OSPF-6-NOTREDIST3\", \"OSPF-6-PROC_REM_FROM_INT\", \"OSPF-6-UNREC_VIRT_INT_TYPE\", \"OSPF-6-ZERO_BANDWIDTH\", \"OSPFv3-3-CFG_NBR_ALLOC_FAILED\", \"OSPFv3-3-DBEXIST\", \"OSPFv3-3-INIT_IDB\", \"OSPFv3-3-INTERNALERR\", \"OSPFv3-3-INT_ATTACHED_MULTI_AREAS\", \"OSPFv3-3-INT_INIT_FAILED\", \"OSPFv3-3-INVALID_ENCR_KEY\", \"OSPFv3-3-IPSEC_CLOSE_SS_ERROR\", \"OSPFv3-3-IPSEC_CREATE_POLICY_ERROR\", \"OSPFv3-3-IPSEC_ERROR_MSG_ABORT\", \"OSPFv3-3-IPSEC_ERROR_MSG_RETRY\", \"OSPFv3-3-IPSEC_GENERAL_ERROR\", \"OSPFv3-3-NOBACKBONE\", \"OSPFv3-3-NOSELF\", \"OSPFv3-3-RDB_NO_LSA\", \"OSPFv3-3-RECONF_VL\", \"OSPFv3-3-UNKNOWNSTATE\", \"OSPFv3-4-ASBR_WITHOUT_VALID_AREA\", \"OSPFv3-4-BADLENGTH\", \"OSPFv3-4-BADLSATYPE\", \"OSPFv3-4-CFG_NBR_INVAL_NBMA_OPT\", \"OSPFv3-4-CFG_NBR_INVAL_NET_TYPE\", \"OSPFv3-4-CFG_NBR_INVAL_P2MP_OPT\", \"OSPFv3-4-CFG_NBR_NOT_NBMA_NET\", \"OSPFv3-4-CFG_NBR_P2MP_NEEDS_COST\", \"OSPFv3-4-DBD_ALLOC_FAIL\", \"OSPFv3-4-DB_NOT_FOUND\", \"OSPFv3-4-DUP_RTRID_AREA\", \"OSPFv3-4-DUP_RTRID_AS\", \"OSPFv3-4-DUP_RTRID_NBR\", \"OSPFv3-4-ERRRCV\", \"OSPFv3-4-INV_LSA_BLD_FLG\", \"OSPFv3-4-NONEIGHBOR\", \"OSPFv3-4-NORTRID\", \"OSPFv3-4-VIRTUAL_IN_NON_BACKBONE\", \"OSPFv3-4-WRONG_DEFAULT\", \"OSPFv3-5-ADJCHG\", \"OSPFv3-6-AREACHG\", \"OSPFv3-6-BADCHKSUM\", \"OSPFv3-6-UNREC_VIRT_INT_TYPE\", \"OSPFv3-6-ZERO_BANDWIDTH\", \"OSPF-4-NOVALIDKEY\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to find PowerShell activity that looks like it might be using the \"Invoke-Obfuscation VAR+\" launcher based on obfuscated command strings.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter Payload ~= \"cmd.{0,5}(?\\:\\/c|\\/r)(?\\:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?\\:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?\\:.*\\)){1,}.*\\\"\"\n\n\n\n"}
{"prompt": "I want to detect processes that are started with suspicious file extensions beyond common executables (.exe, .bin, etc.) as this could indicate process ghosting or other evasion techniques.", "response": "preset = xdr_process\n| filter  not ((action_process_image_path ~= \".*\\.bin\" or action_process_image_path ~= \".*\\.cgi\" or action_process_image_path ~= \".*\\.com\" or action_process_image_path ~= \".*\\.exe\" or action_process_image_path ~= \".*\\.scr\" or action_process_image_path ~= \".*\\.tmp\")) and  not (action_process_image_path in (\"System\", \"Registry\", \"MemCompression\", \"vmmem\") or action_process_image_path contains \":\\\\Windows\\\\Installer\\\\MSI\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\DriverStore\\\\FileRepository\\\\.*\" or (action_process_image_path ~= \".*\\:\\\\Config\\.Msi\\\\.*\" and (action_process_image_path ~= \".*\\.rbf\" or action_process_image_path ~= \".*\\.rbs\")) or (actor_process_image_path ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\") or action_process_image_path ~= \".*\\:\\\\\\$Extend\\\\\\$Deleted\\\\.*\" or action_process_image_path in (\"-\", \"\") or action_process_image_path = \"None\") and  not (actor_process_image_path ~= \".*\\:\\\\ProgramData\\\\Avira\\\\.*\" or (action_process_image_path ~= \".*NVIDIA\\\\NvBackend\\\\.*\" and action_process_image_path ~= \".*\\.dat\") or ((action_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\WINPAKPRO\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\WINPAKPRO\\\\.*\") and action_process_image_path ~= \".*\\.ngn\") or (action_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\MyQ\\\\Server\\\\pcltool\\.dll\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\MyQ\\\\Server\\\\pcltool\\.dll\") or (action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Packages\\\\.*\" and action_process_image_path ~= \".*\\\\LocalState\\\\rootfs\\\\.*\") or action_process_image_path ~= \".*\\\\LZMA\\_EXE\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Mozilla\\ Firefox\\\\.*\" or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\services.exe\" and action_process_image_path ~= \".*com\\.docker\\.service\"))\n\n\n\n"}
{"prompt": "I want to find evidence of Solarwinds SUPERNOVA Webshell access on my network.", "response": "datamodel\n| filter (xdm.network.http.url contains \"logoimagehandler.ashx\" and xdm.network.http.url contains \"clazz\") or (xdm.network.http.url contains \"logoimagehandler.ashx\" and xdm.network.http.response_code = 500)\n\n\n\n"}
{"prompt": "I want to see a list of client devices that haven't had any firewall events logged in the last 4 hours. I need to include information about the device type, vendor, product, and the last time an event was seen.", "response": "config case_sensitive = false\n| preset = metrics_view\n| filter _collector_type in (\"Syslog\") and _product in (\"Fortigate\", \"ASA\")\n| join type = inner\n(config case_sensitive = false\n| dataset = Client_Devices\n) as cldev(cldev.IP_Address1 = _final_reporting_device_ip or cldev.IP_Address2 = _final_reporting_device_ip)\n| alter bin_time = _time\n| bin bin_time span = 240M timeshift = 1699518518\n| comp latest(last_seen) as LastSeen,\nsum(total_event_count) as Last_Event_Count by bin_time,\nClient,\n_broker_device_ip,\n_final_reporting_device_ip,\nDevice_Type,\n_vendor,\n_product\n| alter Hours_Since_Last_Event = timestamp_diff(current_time(), LastSeen, \"HOUR\")\n| filter Hours_Since_Last_Event >= 4 and Last_Event_Count = 0\n| dedup _final_reporting_device_ip,\nClient,\nLastSeen"}
{"prompt": "I want to detect repeated information disclosure attempts from suspicious IP addresses, excluding known IPs and ASNs like Qualys.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"disclosure attempt\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\"\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.ipv4,\n_time\n| filter matched_events >= 3\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1)"}
{"prompt": "I want to find instances where browser processes download \".vhd\" or \".vhdx\" files.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\brave\\.exe\" or xdm.target.process.name ~= \".*\\\\chrome\\.exe\" or xdm.target.process.name ~= \".*\\\\firefox\\.exe\" or xdm.target.process.name ~= \".*\\\\iexplore\\.exe\" or xdm.target.process.name ~= \".*\\\\maxthon\\.exe\" or xdm.target.process.name ~= \".*\\\\MicrosoftEdge\\.exe\" or xdm.target.process.name ~= \".*\\\\msedge\\.exe\" or xdm.target.process.name ~= \".*\\\\msedgewebview2\\.exe\" or xdm.target.process.name ~= \".*\\\\opera\\.exe\" or xdm.target.process.name ~= \".*\\\\safari\\.exe\" or xdm.target.process.name ~= \".*\\\\seamonkey\\.exe\" or xdm.target.process.name ~= \".*\\\\vivaldi\\.exe\" or xdm.target.process.name ~= \".*\\\\whale\\.exe\") or (xdm.source.process.name ~= \".*\\\\brave\\.exe\" or xdm.source.process.name ~= \".*\\\\chrome\\.exe\" or xdm.source.process.name ~= \".*\\\\firefox\\.exe\" or xdm.source.process.name ~= \".*\\\\iexplore\\.exe\" or xdm.source.process.name ~= \".*\\\\maxthon\\.exe\" or xdm.source.process.name ~= \".*\\\\MicrosoftEdge\\.exe\" or xdm.source.process.name ~= \".*\\\\msedge\\.exe\" or xdm.source.process.name ~= \".*\\\\msedgewebview2\\.exe\" or xdm.source.process.name ~= \".*\\\\opera\\.exe\" or xdm.source.process.name ~= \".*\\\\safari\\.exe\" or xdm.source.process.name ~= \".*\\\\seamonkey\\.exe\" or xdm.source.process.name ~= \".*\\\\vivaldi\\.exe\" or xdm.source.process.name ~= \".*\\\\whale\\.exe\")) and xdm.target.file.filename contains \".vhd\")\n\n\n\n"}
{"prompt": "I want to find instances where csrutil is used to check the status of System Integrity Protection (SIP) on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/csrutil\" and action_process_image_command_line contains \"status\")\n\n\n\n"}
{"prompt": "I want to see if there have been any attempted Log4j exploits detected by Cisco Firepower.", "response": "/*config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"log4j\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\" and xdm.source.is_internal_ip = false\n| join type = left(dataset = iisvascan_ip_address_list| fields ip_address as ip) as iis_scan iis_scan.ip = xdm.source.ipv4| filter ip = null\n| join type = left(dataset = dmz_ip_address_list) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4| filter ip_address = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip, policy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level, xdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4, xdm.source.port, xdm.event.description, xdm.alert.description, xdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol, xdm.event.operation, xdm.source.application.name, xdm.source.location.country, xdm.source.asn.as_name, xdm.target.asn.as_name, _time, _insert_time, device_ip, policy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime, count() as matched_events, values(*) as * by xdm.source.ipv4, _time\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ibpmsourceip\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)*/\ndatamodel dataset = microsoft_windows_raw\n| alter device_ip = \"\",\npolicy_name = \"\",\naggregation_criteria = \"\",\nevent_time = \"\",\nduplicate_alert_count = \"\"\n| filter xdm.event.id = \"123\"\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, aggregation_criteria, event_time, duplicate_alert_count,\n_vendor, _product"}
{"prompt": "I want to see activity related to VSIISExeLauncher.exe being used for malicious purposes, especially if it contains commands like \"-p\" or \"-a\".", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\VSIISExeLauncher\\.exe\" or actor_process_file_original_name = \"VSIISExeLauncher.exe\") and (action_process_image_command_line contains \" -p \" or action_process_image_command_line contains \" -a \"))\n\n\n\n"}
{"prompt": "I want to find instances of Sliver C2 implant activity on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"-NoExit -Command [Console]::OutputEncoding=[Text.UTF8Encoding]::UTF8\"\n\n\n\n"}
{"prompt": "I want to detect instances where Pcalua.exe is used with the \"-a\" flag in its command line.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\pcalua\\.exe\" and action_process_image_command_line contains \" -a\")\n\n\n\n"}
{"prompt": "I want to find instances where Ps.exe is renamed and used with suspicious commands like netstat.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"ps.exe -accepteula\" and action_process_image_command_line contains \"-s cmd /c netstat\")\n\n\n\n"}
{"prompt": "I want to see all instances where a password change occurred on a Directory Service Restore Mode (DSRM) account.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 4794\n\n\n\n"}
{"prompt": "I want to see a list of all user logons, including their usernames, groups, and any errors or failure reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4964\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ibpmeventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to the KrbRelayUp attack pattern, specifically those involving Kerberos authentication from 127.0.0.1 targeting specific users.", "response": "preset = xdr_event_log\n| alter LogonType = regextract(to_json_string(action_evtlog_data_fields)->LogonType{}, \"\\\"(.*)\\\"\")\n| alter AuthenticationPackageName = regextract(to_json_string(action_evtlog_data_fields)->AuthenticationPackageName{}, \"\\\"(.*)\\\"\")\n| alter IpAddress = regextract(to_json_string(action_evtlog_data_fields)->IpAddress{}, \"\\\"(.*)\\\"\")\n| alter TargetUserSid = regextract(to_json_string(action_evtlog_data_fields)->TargetUserSid{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4624 and LogonType = 3 and AuthenticationPackageName = \"Kerberos\" and IpAddress = \"127.0.0.1\" and TargetUserSid ~= \"S\\-1\\-5\\-21\\-.*\" and TargetUserSid ~= \".*\\-500\")\n\n\n\n"}
{"prompt": "I want to find suspicious instances where \"systeminfo.exe\" is executed on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\systeminfo\\.exe\" or actor_process_file_original_name = \"sysinfo.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts related to potential NTLM coercion attacks using Certutil.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_file_original_name = \"CertUtil.exe\") and (action_process_image_command_line contains \" -syncwithWU \" and action_process_image_command_line ~= \".*\\ \\\\\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect instances where the MegaSync executable file name has been changed during execution on endpoints.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"megasync.exe\" and  not (action_process_image_path ~= \".*\\\\megasync\\.exe\")\n\n\n\n"}
{"prompt": "I want to find any DNS queries that target domains related to Visual Studio Code tunnels.", "response": "datamodel\n| filter xdm.network.dns.dns_question.name ~= \".*\\.tunnels\\.api\\.visualstudio\\.com\"\n\n\n\n"}
{"prompt": "I want to find instances where non-admin users create or delete security groups on our systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4730\", \"4734\", \"4654\", \"4758\", \"4727\", \"4731\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect potential exploitation of CVE-2024-1212 in Progress Kemp LoadMaster by looking for suspicious GET requests with specific parameters and unusual authorization headers.", "response": "datamodel\n| filter ((xdm.network.http.method = \"GET\" and (xdm.network.http.url contains \"/access/set\" and xdm.network.http.url contains \"param=enableapi\" and xdm.network.http.url contains \"value=1\")) and ( contains \"Basic Jz\" or  contains \"Basic c7\" or  contains \"Basic nO\" or  contains \"Basic ';\"))\n\n\n\n"}
{"prompt": " I want to find PowerShell scripts that use obfuscation techniques involving `stdin` and potentially modify environment variables or invoke commands via input.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText ~= \"(?i)(set).*\\&\\&\\s?set.*(environment|invoke|\\$\\{?input).*\\&\\&.*\\\"\"\n\n\n\n"}
{"prompt": "I want to detect instances of the SNAKE Malware Service persistence mechanism on my endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and ServiceName contains \"WerFaultSvc\" and actor_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\" and actor_process_image_path ~= \".*\\\\WerFault\\.exe\")\n\n\n\n"}
{"prompt": " I want to find instances where attackers might be using WMIC to gather information about system disks and volumes. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\WMIC\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and (action_process_image_command_line contains \"volume\" or action_process_image_command_line contains \"path win32_logicaldisk\"))\n\n\n\n"}
{"prompt": "I want to find instances of Outbound TCP Flood attacks where traffic is being sent from internal IPs to external IPs using TCP and involving at least 60,000 packets sent over a duration of at least one minute.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter xdm.source.port not in (80, 443)\n| filter (xdm.source.is_internal_ip = true and xdm.target.is_internal_ip = false) and xdm.network.ip_protocol = \"\"\"TCP\"\"\" and xdm.source.sent_packets >= 60000 and xdm.event.duration >= 60000000000\n| fields *\n"}
{"prompt": "I want to see events related to the TacticalRMM Service Installation on my endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (actor_process_image_path contains \"tacticalrmm.exe\" or ServiceName contains \"TacticalRMM Agent Service\"))\n\n\n\n"}
{"prompt": "I want to see alerts about new user accounts being created with the \"Password Never Expiry\" option enabled on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4738\")\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| alter action = arrayindex(regextract(microsoft_windows_raw.message, \"User Account Control:\\t\\n\\t\\t(.*)\\n\\t\"), 0)\n| filter action contains \"enabled\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, action\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see details about new accounts created in Active Directory.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 4720\n| alter TUserName = json_extract_scalar(action_evtlog_data_fields, \"$.SubjectUserName\"),\nAccountName = arrayindex(regextract(action_evtlog_message, \"Account Name\\:(.*)\"), 0),\nGrpName = arrayindex(regextract(action_evtlog_message, \"Group Name\\:(.*)\"), 0),\nTargetDomainName = json_extract_scalar(action_evtlog_data_fields, \"$.TargetDomainName\"),\nSamAccountName = json_extract_scalar(action_evtlog_data_fields, \"$.SamAccountName\")\n| filter TUserName !~= \".*?$\""}
{"prompt": "I want to see security events related to files being securely deleted using SDelete on endpoints, particularly those involving files with names like \".*\\.AAA\" or \".*\\.ZZZ\".", "response": "preset = xdr_event_log\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4656, 4663, 4658) and (ObjectName ~= \".*\\.AAA\" or ObjectName ~= \".*\\.ZZZ\"))\n\n\n\n"}
{"prompt": "I want to find suspicious changes to shell context menus in the Windows Event Log.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Software\\\\Classes\\\\.*\" and action_registry_key_name ~= \".*\\\\shell\\\\.*\" and action_registry_key_name ~= \".*\\\\command\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see all events related to potential JNDI injection exploitation attempts in JVM based applications.", "response": "datamodel\n| filter ( contains \"com.sun.jndi.ldap.\" or  contains \"org.apache.logging.log4j.core.net.JndiManager\")\n\n\n\n"}
{"prompt": "I want to find instances where an attacker modifies MSConfig tokens to bypass UAC and runs pkgmgr.exe from a temporary location.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\pkgmgr\\.exe\")\n\n\n\n"}
{"prompt": "I want to see Cortex XQL alerts related to CrackMapExec execution patterns on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"cmd.exe /Q /c * 1> \\\\\\\\*\\\\*\\\\* 2>&1\" or action_process_image_command_line contains \"cmd.exe /C * > \\\\\\\\*\\\\*\\\\* 2>&1\" or action_process_image_command_line contains \"cmd.exe /C * > *\\\\Temp\\\\* 2>&1\" or action_process_image_command_line contains \"powershell.exe -exec bypass -noni -nop -w 1 -C \\\"\" or action_process_image_command_line contains \"powershell.exe -noni -nop -w 1 -enc \")\n\n\n\n"}
{"prompt": "I want to find instances where rundll32.exe has set a screensaver file from the registry.", "response": "preset = xdr_registry\n| filter actor_process_image_path ~= \".*\\\\rundll32\\.exe\" and (action_registry_key_name contains \"\\\\Control Panel\\\\Desktop\\\\SCRNSAVE.EXE\" and (action_registry_value_name ~= \".*\\.scr\" or action_registry_data ~= \".*\\.scr\")) and  not (((action_registry_value_name ~= \".*C\\:\\\\Windows\\\\System32\\\\.*\" or action_registry_value_name ~= \".*C\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (action_registry_data ~= \".*C\\:\\\\Windows\\\\System32\\\\.*\" or action_registry_data ~= \".*C\\:\\\\Windows\\\\SysWOW64\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that use web request commands or cmdlets, excluding those related to Microsoft Guest Configuration.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| alter Path = regextract(to_json_string(action_evtlog_data_fields)->Path{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"[System.Net.WebRequest]::create\" or ScriptBlockText contains \"curl \" or ScriptBlockText contains \"Invoke-RestMethod\" or ScriptBlockText contains \"Invoke-WebRequest\" or ScriptBlockText contains \"iwr \" or ScriptBlockText contains \"Net.WebClient\" or ScriptBlockText contains \"Resume-BitsTransfer\" or ScriptBlockText contains \"Start-BitsTransfer\" or ScriptBlockText contains \"wget \" or ScriptBlockText contains \"WinHttp.WinHttpRequest\") and  not (Path ~= \"C\\:\\\\Packages\\\\Plugins\\\\Microsoft\\.GuestConfiguration\\.ConfigurationforWindows\\\\.*\")\n\n\n\n"}
{"prompt": "{I want to detect instances of the T1047 Wmiprvse Wbemcomn DLL Hijack technique using Windows event logs.} \n\n\nLet me know if you'd like me to adjust this prompt further!", "response": "preset = xdr_event_log\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and RelativeTargetName ~= \".*\\\\wbem\\\\wbemcomn\\.dll\") and  not (SubjectUserName ~= \".*\\$\")\n\n\n\n"}
{"prompt": "I want to find events related to Azure AD accounts that only require single factor authentication.", "response": "dataset = msft_azure_raw\n| alter properties_status = json_extract_scalar(properties , \"$.status\")\n| alter properties_authenticationRequirement = json_extract_scalar(properties , \"$.authenticationRequirement\")\n| filter (properties.status = \"Success\" and properties.authenticationRequirement = \"singleFactorAuthentication\")\n\n\n\n"}
{"prompt": "I want to see all events related to account changes made by the CEO account, including successful and failed login attempts, privilege escalations, and other sensitive actions.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter xdm.source.user.username = if(xdm.source.user.username ~= \"<domain>\", rtrim(xdm.source.user.username, \"<domain>\"), if(xdm.source.user.username ~= \"<domain>\", rtrim(xdm.source.user.username, \"<domain>\"), if(xdm.source.user.username ~= \"<domain>\", ltrim(xdm.source.user.username, \"<domain>\\\\\"), xdm.source.user.username)))\n| filter (xdm.source.user.username in (\"<user>\", \"<domain>/<user>\", \"<user><domain>\", \"<user><domain>\") or xdm.source.user.username contains \"<user>\") and xdm.target.user.groups not in (\"i2webtestwlan\") and xdm.event.id in (\"4720\", \"4722\", \"4723\", \"4724\", \"4725\", \"4726\", \"4738\", \"4740\", \"4767\", \"4781\", \"4728\", \"4729\", \"4756\", \"4757\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all Symantec WSS events categorized as \"None\",  including details about the event type, description, target URL, IP addresses involved, and associated user.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Security\") and xdm.alert.name ~= \"^audit|^web attack|^malicious Site|^system infected|^os attack|^attack\"\n| alter server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer\\: ([^\\,]+)\"), 0)\n| alter category = xdm.alert.name,\nusername = xdm.source.user.username\n| alter event_desc = xdm.alert.description,\nevent_type = xdm.event.description,\ntarget_url = xdm.target.url,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nhostname = coalesce(xdm.target.host.hostname, xdm.source.host.hostname)\n| comp earliest(_time) as FirstAVEventTime,\nlatest(_time) as LatestAVEventTime,\nvalues(server_name) as server_name,\nvalues(category) as alert_category,\nvalues(event_desc) as event_desc,\nvalues(event_type) as event_type,\nvalues(src_ip) as src_ip,\nvalues(dst_ip) as dst_ip,\nvalues(target_url) as target_url by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nhostname\n| join type = left\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| alter user_dst = if(user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", \"\"\"non-interactive-user\"\"\", null, \"\"\"\"\"\"), if(user_dst ~= \"<id>\\n\", concat(\"n\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), if(user_dst ~= \"<id>\\r\", concat(\"r\", arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1)), arrayindex(regextract(user_dst, \"[a-zA-Z0-9._]+\"), -1))), user_dst)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by ip_src,\nuser_dst,\nalias_host\n) as proxyevents(proxyevents.ip_src = xdm.target.ipv4 or proxyevents.alias_host = hostname or proxyevents.user_dst = xdm.source.user.sam_account_name)\n| filter (ip_src != null or user_dst != null or alias_host != null) and category ~= \"uncategorized\""}
{"prompt": "I want to find instances of ScreenConnect being used to execute commands on endpoints.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"ScreenConnect\" and action_evtlog_event_id = 200 and Data contains \"Executed command of length\")\n\n\n\n"}
{"prompt": "I want to find suspicious modifications made to Office add-ins registry keys.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Software\\\\Wow6432Node\\\\Microsoft\\\\Office\" or action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Office\") and (action_registry_key_name contains \"\\\\Word\\\\Addins\" or action_registry_key_name contains \"\\\\PowerPoint\\\\Addins\" or action_registry_key_name contains \"\\\\Outlook\\\\Addins\" or action_registry_key_name contains \"\\\\Onenote\\\\Addins\" or action_registry_key_name contains \"\\\\Excel\\\\Addins\" or action_registry_key_name contains \"\\\\Access\\\\Addins\" or action_registry_key_name contains \"test\\\\Special\\\\Perf\") and  not ((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\") or ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Office\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Office\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\msiexec\\.exe.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\regsvr32\\.exe.*\") and (action_registry_key_name ~= \".*\\\\Excel\\\\Addins\\\\AdHocReportingExcelClientLib\\.AdHocReportingExcelClientAddIn\\.1\\\\.*\" or action_registry_key_name ~= \".*\\\\Excel\\\\Addins\\\\ExcelPlugInShell\\.PowerMapConnect\\\\.*\" or action_registry_key_name ~= \".*\\\\Excel\\\\Addins\\\\NativeShim\\\\.*\" or action_registry_key_name ~= \".*\\\\Excel\\\\Addins\\\\NativeShim\\.InquireConnector\\.1\\\\.*\" or action_registry_key_name ~= \".*\\\\Excel\\\\Addins\\\\PowerPivotExcelClientAddIn\\.NativeEntry\\.1\\\\.*\" or action_registry_key_name ~= \".*\\\\Outlook\\\\AddIns\\\\AccessAddin\\.DC\\\\.*\" or action_registry_key_name ~= \".*\\\\Outlook\\\\AddIns\\\\ColleagueImport\\.ColleagueImportAddin\\\\.*\" or action_registry_key_name ~= \".*\\\\Outlook\\\\AddIns\\\\EvernoteCC\\.EvernoteContactConnector\\\\.*\" or action_registry_key_name ~= \".*\\\\Outlook\\\\AddIns\\\\EvernoteOLRD\\.Connect\\\\.*\" or action_registry_key_name ~= \".*\\\\Outlook\\\\Addins\\\\Microsoft\\.VbaAddinForOutlook\\.1\\\\.*\" or action_registry_key_name ~= \".*\\\\Outlook\\\\Addins\\\\OcOffice\\.OcForms\\\\.*\" or action_registry_key_name contains \"\\\\Outlook\\\\Addins\\\\OneNote.OutlookAddin\" or action_registry_key_name ~= \".*\\\\Outlook\\\\Addins\\\\OscAddin\\.Connect\\\\.*\" or action_registry_key_name ~= \".*\\\\Outlook\\\\Addins\\\\OutlookChangeNotifier\\.Connect\\\\.*\" or action_registry_key_name contains \"\\\\Outlook\\\\Addins\\\\UCAddin.LyncAddin.1\" or action_registry_key_name contains \"\\\\Outlook\\\\Addins\\\\UCAddin.UCAddin.1\" or action_registry_key_name ~= \".*\\\\Outlook\\\\Addins\\\\UmOutlookAddin\\.FormRegionAddin\\\\.*\")) or ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\Updates\\\\.*\") and actor_process_image_path ~= \".*\\\\OfficeClickToRun\\.exe\") or (actor_process_image_path = \"C:\\\\Program Files\\\\AVG\\\\Antivirus\\\\RegSvr.exe\" and action_registry_key_name ~= \".*\\\\Microsoft\\\\Office\\\\Outlook\\\\Addins\\\\Antivirus\\.AsOutExt\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see potential exploits of CVE-2023-43261 in Milesight UR series routers that involve accessing proxy logs.", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and xdm.network.http.url contains \"/lang/log/httpd.log\" and xdm.network.http.response_code = 200)\n\n\n\n"}
{"prompt": "I want to see events that match the characteristics of a RottenPotato-like attack pattern.", "response": "preset = xdr_event_log\n| alter LogonType = regextract(to_json_string(action_evtlog_data_fields)->LogonType{}, \"\\\"(.*)\\\"\")\n| alter TargetUserName = regextract(to_json_string(action_evtlog_data_fields)->TargetUserName{}, \"\\\"(.*)\\\"\")\n| alter WorkstationName = regextract(to_json_string(action_evtlog_data_fields)->WorkstationName{}, \"\\\"(.*)\\\"\")\n| alter IpAddress = regextract(to_json_string(action_evtlog_data_fields)->IpAddress{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4624 and LogonType = 3 and TargetUserName = \"ANONYMOUS LOGON\" and WorkstationName = \"-\" and IpAddress in (\"127.0.0.1\", \"::1\"))\n\n\n\n"}
{"prompt": "I want to detect changes made to AWS Network Gateways, such as creating, deleting, attaching, and detaching gateways.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name != \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"CreateCustomerGateway\", \"DeleteCustomerGateway\", \"AttachInternetGateway\", \"CreateInternetGateway\", \"DeleteInternetGateway\", \"DetachInternetGateway\")\n| filter account_id != \"<account id>\"\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ileventdescription\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential persistence attempts where processes use Reg.EXE to add entries to the Windows Run keys.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"reg\" and action_process_image_command_line contains \" ADD \" and action_process_image_command_line contains \"Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\")\n\n\n\n"}
{"prompt": "I want to detect suspicious activity related to Invoke-Obfuscation CLIP+ Launcher using event log data from endpoints.", "response": "preset = xdr_event_log\n| alter ServiceFileName = regextract(to_json_string(action_evtlog_data_fields)->ServiceFileName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4697 and (ServiceFileName contains \"cmd\" and ServiceFileName contains \"&&\" and ServiceFileName contains \"clipboard]::\"))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts that are trying to identify security software installed on a system.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"get-process | ?\" or ScriptBlockText contains \"get-process | where\" or ScriptBlockText contains \"gps | ?\" or ScriptBlockText contains \"gps | where\") and (ScriptBlockText contains \"Company -like\" or ScriptBlockText contains \"Description -like\" or ScriptBlockText contains \"Name -like\" or ScriptBlockText contains \"Path -like\" or ScriptBlockText contains \"Product -like\") and (ScriptBlockText contains \"\\*avira\\*\" or ScriptBlockText contains \"\\*carbonblack\\*\" or ScriptBlockText contains \"\\*cylance\\*\" or ScriptBlockText contains \"\\*defender\\*\" or ScriptBlockText contains \"\\*kaspersky\\*\" or ScriptBlockText contains \"\\*malware\\*\" or ScriptBlockText contains \"\\*sentinel\\*\" or ScriptBlockText contains \"\\*symantec\\*\" or ScriptBlockText contains \"\\*virus\\*\"))\n\n\n\n"}
{"prompt": "I want to see alerts about Kerberos Policy changes made by non-privileged users or administrators, including details like the username, hostname, and outcome of the change.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4713\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find Cisco Catalyst switches with more than 10 duplicate address detection alerts in a given period.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter msg_id in (\"IP-4-DUPADDR\", \"IP-3-DUPIPADDR_TR\", \"IP-3-DUPIPADDR\", \"DUPADDR\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to find instances of UNC4841, which involves downloading compressed files from temp.sh using wget.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/wget\" and action_process_image_command_line contains \"https:\n\n\n\n"}
{"prompt": "I want to find processes that use obfuscated IEX commands on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \"\\$PSHome\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$PSHome\\[\" or action_process_image_command_line ~= \"\\$ShellId\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$ShellId\\[\" or action_process_image_command_line ~= \"\\$env\\:Public\\[\\s*\\d{1,3}\\s*\\]\\s*\\+\\s*\\$env\\:Public\\[\" or action_process_image_command_line ~= \"\\$env\\:ComSpec\\[(\\s*\\d{1,3}\\s*\\,){2}\" or action_process_image_command_line ~= \"\\*mdr\\*W\\s*\\)\\.Name\" or action_process_image_command_line ~= \"\\$VerbosePreference\\.ToString\\(\" or action_process_image_command_line ~= \"\\[String\\]\\s*\\$VerbosePreference\")\n\n\n\n"}
{"prompt": "I want to see all processes on macOS endpoints that are related to network scanning activities, like nc, netcat, nmap, and telnet. I specifically want to exclude instances where \"l\" is present in the command line.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/nc\" or action_process_image_path ~= \".*\\/netcat\") and  not (action_process_image_command_line contains \"l\")) or (action_process_image_path ~= \".*\\/nmap\" or action_process_image_path ~= \".*\\/telnet\")\n\n\n\n"}
{"prompt": "I want to see Zeek logs that show DNS queries for \"seed\" addresses ending with \".nkn.org\".", "response": "datamodel\n| filter (xdm.network.dns.dns_question.name contains \"seed\" and xdm.network.dns.dns_question.name contains \".nkn.org\")\n\n\n\n"}
{"prompt": "I want to see all instances of internal UDP flooding attacks detected by Cisco ASA, Fortinet Fortigate, and SonicWall NS security devices. The attack should involve over 100,000 packets sent within a duration of at least 6 minutes.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter (xdm.source.is_internal_ip = true and xdm.target.is_internal_ip = true) and xdm.network.ip_protocol = \"\"\"UDP\"\"\" and xdm.source.sent_packets >= 100000 and xdm.event.duration >= 60000000000\n| fields *"}
{"prompt": "I want to find malicious files that bypassed Trend Micro detection and ended up on user machines. I need to correlate URLs, file hashes from TM logs with SEP AV alerts and Cortex Agent Logs.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter `xdm.event.type` in (\"Behavior\", \"Risk\") and `xdm.alert.name` !~= \"OS Attack\\:\"\n| alter hostname = coalesce(`xdm.source.host.hostname`, `xdm.target.host.hostname`)\n| filter `xdm.target.file.sha256` != null and hostname != null\n| fields `xdm.alert.name`, `xdm.event.type`, `xdm.observer.action`,\n`xdm.event.operation_sub_type`, `xdm.source.user.username`,\n`xdm.target.file.sha256`, `xdm.target.ipv4`, hostname,\n`xdm.target.file.path`\n| join type = left\n(dataset = trend_micro_email_security_raw\n| filter headerTo != null and headerFrom != null and headerFrom !~= \"zscaler.net|qualys.net\" and (attachments contains \"sha256\" or details contains \"fileInfo\")\n| alter file_To_array = if(attachments != null, attachments, json_extract(details, \"$.fileInfo\")) -> []\n| arrayexpand file_To_array\n| alter file_sha256 = if(attachments != null, uppercase(json_extract_scalar(file_To_array, \"$.sha256\")), uppercase(json_extract_scalar(file_To_array, \"$.fileSha256\")))\n| fields headerFrom, headerTo, eventType, file_sha256,\nfile_To_array\n) as avevents avevents.file_sha256 = `xdm.target.file.sha256`\n| filter file_sha256 != null"}
{"prompt": "I want to find instances of UAC bypass attempts using Windows Media Player through registry modifications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\AppCompatFlags\\\\Compatibility\\ Assistant\\\\Store\\\\C\\:\\\\Program\\ Files\\\\Windows\\ Media\\ Player\\\\osk\\.exe\" and (action_registry_value_name = \"Binary Data\" or action_registry_data = \"Binary Data\"))\n\n\n\n"}
{"prompt": "I want to see alerts about successful executions of nltest.exe on endpoints.", "response": "preset = xdr_event_log\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| alter Status = regextract(to_json_string(action_evtlog_data_fields)->Status{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4689 and ProcessName ~= \".*nltest\\.exe\" and Status = \"0x0\")\n\n\n\n"}
{"prompt": "I want to find processes that might be using right-to-left override as a defense evasion technique.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"\n\n\n\n"}
{"prompt": "I want to see alerts for high-privilege password resets by Red carpet users, including details like usernames, error codes, and timestamps.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4724\")\n| alter target_user = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| join type = inner\n(dataset = redcarpet_users_list\n| fields username\n) as redcarpusers redcarpusers.username = target_user\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_user\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of Cisco CLI commands that clear logs or archives.", "response": "datamodel\n| filter ( contains \"clear logging\" or  contains \"clear archive\")\n\n\n\n"}
{"prompt": "I want to see events related to COLDSTEEL RAT using svchost.exe and specific command line arguments like \"-k msupdate\", \"-k msupdate2\", or \"-k alg.\"", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\svchost\\.exe\" and (action_process_image_command_line ~= \".*\\ \\-k\\ msupdate\" or action_process_image_command_line ~= \".*\\ \\-k\\ msupdate2\" or action_process_image_command_line ~= \".*\\ \\-k\\ alg\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when members are added to security-enabled global groups on my endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id in (4728, 632)\n\n\n\n"}
{"prompt": "I want to find instances where attackers are using PowerShell scripts to search local and remote filesystems for potential credentials stored insecurely.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"ls\" and ScriptBlockText contains \" -R\" and ScriptBlockText contains \"select-string \" and ScriptBlockText contains \"-Pattern \")\n\n\n\n"}
{"prompt": "I want to see alerts for users who have deleted more than 500 security groups in the last 5 minutes across all scopes.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4730\", \"4734\", \"4758\")\n\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.source.user.username\n| filter matched_events >= 500\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 500)), 1)"}
{"prompt": "I want to see a list of users who have had 5 or more failed login attempts within the last few hours, along with the timestamps of their first and last failed login.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| bin _time span = 5m\n| filter xdm.logon.type = XDM_CONST.LOGON_TYPE_INTERACTIVE or xdm.logon.type = XDM_CONST.LOGON_TYPE_REMOTE_INTERACTIVE\n| filter xdm.event.id = \"4625\"\n| filter xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$[a-zA-Z\\d]+\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp count(xdm.target.user.username) as user_dst,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by xdm.target.user.username\n| filter user_dst >= 5\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see alerts for Red Carpet users who have been locked out due to multiple logon failures.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4722\", \"4725\", \"4726\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type)\n| alter target_user = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| join type = inner\n(dataset = redcarpet_users_list\n| fields username\n) as redcarpusers redcarpusers.username = target_user\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_user\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see users who have had at least 10 TeamViewer interactions with unusual web activity, including details about their actions, results, and traffic volume.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter host_dst ~= \".teamviewer.com\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 10"}
{"prompt": "I want to find instances of UAC bypass using Windows Media Player as described in this query.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\OskSupport\\.dll\") or ((xdm.target.process.name = \"C:\\\\Windows\\\\system32\\\\DllHost.exe\" or xdm.source.process.name = \"C:\\\\Windows\\\\system32\\\\DllHost.exe\") and xdm.target.file.filename = \"C:\\\\Program Files\\\\Windows Media Player\\\\osk.exe\"))\n\n\n\n"}
{"prompt": "I want to see events related to the PCRE.NET Package Image Load execution on Windows, specifically focusing on those that load DLLs from the temporary folder path \"AppData\\Local\\Temp\\ba9ea7344a4a5f591d6e5dc32a13494b\".", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\ba9ea7344a4a5f591d6e5dc32a13494b\\\\.*\"\n\n\n\n"}
{"prompt": "I want to find Cisco ASA devices that have experienced excessive outbound drop events, specifically those with at least 2000 matched events within a 5-second timeframe.", "response": "datamodel dataset = cisco_asa_raw\n| bin _time span = 5s\n| fields xdm.event.id, xdm.event.description, xdm.event.outcome_reason,\nxdm.event.outcome, xdm.source.ipv4, xdm.source.port,\nxdm.source.sent_bytes, xdm.source.interface, xdm.source.zone,\nxdm.target.ipv4, xdm.target.port, xdm.target.zone,\nxdm.target.interface, xdm.observer.name, xdm.event.is_completed,\nxdm.alert.severity, _time, _insert_time, xdm.source.port,\nxdm.target.port\n| filter xdm.event.id in (\"302302\", \"313001\", \"313004\", \"313008\", \"322001\", \"716004\", \"106002\", \"106006\", \"106007\", \"106010\", \"106012\", \"106014\", \"106015\", \"302014\") or xdm.event.description ~= \"deny|denied|denied by acl|shunned|dropped|rejected|no matching connection|invalid|terminated|terminating|deleted|discarded|rejecting|deleting|rejected|reset|dropping|teardown|down|restricted\"\n| filter (xdm.source.ipv4 ~= \"(10)\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\" or xdm.source.ipv4 ~= \"(172)\\.(1[6-9]|2[0-9]|3[0-1])\\.([0-9]{1,3})\\.([0-9]{1,3})\" or xdm.source.ipv4 ~= \"(192)\\.(168)\\.([0-9]{1,3})\\.([0-9]{1,3})\") and (xdm.target.ipv4 !~= \"(10)\\.([0-9]{1,3})\\.([0-9]{1,3})\\.([0-9]{1,3})\" and xdm.target.ipv4 !~= \"(172)\\.(1[6-9]|2[0-9]|3[0-1])\\.([0-9]{1,3})\\.([0-9]{1,3})\" and xdm.target.ipv4 !~= \"(192)\\.(168)\\.([0-9]{1,3})\\.([0-9]{1,3})\")\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.ipv4,\n_time\n| filter matched_events >= 2000\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see activity related to local system accounts on Linux endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/lastlog\" or action_process_image_command_line contains \"'x:0:'\" or ((action_process_image_path ~= \".*\\/cat\" or action_process_image_path ~= \".*\\/head\" or action_process_image_path ~= \".*\\/tail\" or action_process_image_path ~= \".*\\/more\") and (action_process_image_command_line contains \"/etc/passwd\" or action_process_image_command_line contains \"/etc/shadow\" or action_process_image_command_line contains \"/etc/sudoers\")) or action_process_image_path ~= \".*\\/id\" or (action_process_image_path ~= \".*\\/lsof\" and action_process_image_command_line contains \"-u\"))\n\n\n\n"}
{"prompt": "I want to see events where sdiagnhost.exe is creating potentially malicious child processes like powershell.exe, cmd.exe, or mshta.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\sdiagnhost\\.exe\" and (action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\taskkill\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\calc\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances where adversaries are using Office add-ins to gain persistence on compromised systems by analyzing script block text for specific patterns related to XLL file registration.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"new-object \" and ScriptBlockText contains \"-ComObject \" and ScriptBlockText contains \".application\" and ScriptBlockText contains \".RegisterXLL\")\n\n\n\n"}
{"prompt": "I want to see events related to potential abuse of the \"Potential RemoteFXvGPUDisablement.EXE\" module using PowerShell on endpoints.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter Payload contains \"ModuleContents=function Get-VMRemoteFXPhysicalVideoAdapter {\"\n\n\n\n"}
{"prompt": "I want to see alerts for password changes made by domain admins and get details about those events, like the username, hostname, timestamp, and outcome.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4723\") and xdm.target.user.username in (\"<user>\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \"@\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where the \"EnableUnsafeClientMailRules\" registry setting is enabled in Outlook on Windows.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Outlook\\\\Security\\\\EnableUnsafeClientMailRules\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to see events related to suspicious use of reg.exe to dump sensitive hives from Windows endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and (action_process_image_command_line contains \" save \" or action_process_image_command_line contains \" export \" or action_process_image_command_line contains \" \ufffd\ufffd\ufffd\ufffd\ufffd\ufffdave \" or action_process_image_command_line contains \" e\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdport \") and (action_process_image_command_line contains \"hklm\" or action_process_image_command_line contains \"hk\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdm\" or action_process_image_command_line contains \"hkey_local_machine\" or action_process_image_command_line contains \"hkey_\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdocal_machine\" or action_process_image_command_line contains \"hkey_loca\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd_machine\" or action_process_image_command_line contains \"hkey_\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdoca\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd_machine\") and (action_process_image_command_line contains \"\\\\system\" or action_process_image_command_line contains \"\\\\sam\" or action_process_image_command_line contains \"\\\\security\" or action_process_image_command_line contains \"\\\\\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdystem\" or action_process_image_command_line contains \"\\\\sy\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdtem\" or action_process_image_command_line contains \"\\\\\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdy\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdtem\" or action_process_image_command_line contains \"\\\\\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdam\" or action_process_image_command_line contains \"\\\\\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdecurity\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious child processes spawned by the spoolsv service that might indicate malicious activity.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\spoolsv\\.exe\" and action_process_integrity_level = \"System\") and ((action_process_image_path ~= \".*\\\\gpupdate\\.exe\" or action_process_image_path ~= \".*\\\\whoami\\.exe\" or action_process_image_path ~= \".*\\\\nltest\\.exe\" or action_process_image_path ~= \".*\\\\taskkill\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\taskmgr\\.exe\" or action_process_image_path ~= \".*\\\\sc\\.exe\" or action_process_image_path ~= \".*\\\\findstr\\.exe\" or action_process_image_path ~= \".*\\\\curl\\.exe\" or action_process_image_path ~= \".*\\\\wget\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\accesschk\\.exe\" or action_process_image_path ~= \".*\\\\wevtutil\\.exe\" or action_process_image_path ~= \".*\\\\bcdedit\\.exe\" or action_process_image_path ~= \".*\\\\fsutil\\.exe\" or action_process_image_path ~= \".*\\\\cipher\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\write\\.exe\" or action_process_image_path ~= \".*\\\\wuauclt\\.exe\" or action_process_image_path ~= \".*\\\\systeminfo\\.exe\" or action_process_image_path ~= \".*\\\\reg\\.exe\" or action_process_image_path ~= \".*\\\\query\\.exe\") or ((action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\") and  not (action_process_image_command_line contains \"start\")) or (action_process_image_path ~= \".*\\\\cmd\\.exe\" and  not ((action_process_image_command_line contains \".spl\" or action_process_image_command_line contains \"route add\" or action_process_image_command_line contains \"program files\"))) or (action_process_image_path ~= \".*\\\\netsh\\.exe\" and  not ((action_process_image_command_line contains \"add portopening\" or action_process_image_command_line contains \"rule name\"))) or ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and  not (action_process_image_command_line contains \".spl\")) or ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and action_process_image_command_line ~= \".*rundll32\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts about named pipes created using the mkfifo command.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\/mkfifo\"\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious WebDAV LNK executions where explorer.exe creates commands like cmd.exe, cscript.exe, mshta.exe, powershell.exe, pwsh.exe, or wscript.exe with a target path in the DavWWWRoot directory.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\explorer\\.exe\" and (action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") and action_process_image_command_line ~= \".*\\\\DavWWWRoot\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect potential CobaltStrike service installations based on registry activity.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name contains \"\\\\System\\\\CurrentControlSet\\\\Services\" or (action_registry_key_name contains \"\\\\System\\\\ControlSet\" and action_registry_key_name contains \"\\\\Services\")) and (((action_registry_value_name contains \"ADMIN$\" or action_registry_data contains \"ADMIN$\") and (action_registry_value_name contains \".exe\" or action_registry_data contains \".exe\")) or ((action_registry_value_name contains \"%COMSPEC%\" or action_registry_data contains \"%COMSPEC%\") and (action_registry_value_name contains \"start\" or action_registry_data contains \"start\") and (action_registry_value_name contains \"powershell\" or action_registry_data contains \"powershell\"))))\n\n\n\n"}
{"prompt": "I want to find MacOS, VCenter, and ESXi devices that haven't sent any logs for the past 4 hours.", "response": "config case_sensitive = false\n| preset = metrics_view\n| filter _collector_type in (\"Syslog\") and _product in (\"macos\", \"VCenter\", \"esxi\")\n| alter Desc_String = if(_broker_device_name contains \"NEWAVLON\", \"New Avalon\", \".\")\n| alter bin_time = _time\n| bin bin_time span = 4h\n| comp max(_time) as MaxTime,\nmax(last_seen) as LastSeen,\nsum(total_event_count) as LastEventCount by bin_time,\n_vendor,\n_product,\n_broker_device_ip,\n_final_reporting_device_ip addrawdata = true as RW\n| alter Hours_Since_LastEvent = timestamp_diff(MaxTime, LastSeen, \"HOUR\"),\nCategory = \"DeviceNotReporting\"\n| filter Hours_Since_LastEvent >= 4 and LastEventCount = 0 and _final_reporting_device_ip not in (\"<ip>\")\n| sort desc Hours_Since_LastEvent\n| alter RW1 = to_json_string(RW)\n| alter DS = RW1 -> [0]\n| alter Desc_String = DS -> Desc_String"}
{"prompt": "I want to find potential credential dumping attempts using PowerShell that target the lsass process.", "response": "datamodel\n| filter ((xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\") and xdm.target.process.name ~= \".*\\\\lsass\\.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts for processes trying to load the \"ShellChromeAPI.DLL\" file.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\ShellChromeAPI\\.dll\"\n\n\n\n"}
{"prompt": "I want to detect potential exploitation attempts using known malicious frameworks and tools like Meterpreter, Metasploit, Cobalt Strike, etc.", "response": "datamodel\n| filter (xdm.source.process.executable.signer contains \"MeteTool\" or xdm.source.process.executable.signer contains \"MPreter\" or xdm.source.process.executable.signer contains \"Meterpreter\" or xdm.source.process.executable.signer contains \"Metasploit\" or xdm.source.process.executable.signer contains \"PowerSploit\" or xdm.source.process.executable.signer contains \"CobaltStrike\" or xdm.source.process.executable.signer contains \"BruteR\" or xdm.source.process.executable.signer contains \"Brutel\" or xdm.source.process.executable.signer contains \"Swrort\" or xdm.source.process.executable.signer contains \"Rozena\" or xdm.source.process.executable.signer contains \"Backdoor.Cobalt\" or xdm.source.process.executable.signer contains \"CobaltStr\" or xdm.source.process.executable.signer contains \"COBEACON\" or xdm.source.process.executable.signer contains \"Cometer\" or xdm.source.process.executable.signer contains \"Razy\" or xdm.source.process.executable.signer contains \"IISExchgSpawnCMD\" or xdm.source.process.executable.signer contains \"Exploit.Script.CVE\" or xdm.source.process.executable.signer contains \"Seatbelt\" or xdm.source.process.executable.signer contains \"Sbelt\" or xdm.source.process.executable.signer contains \"Sliver\")\n\n\n\n"}
{"prompt": "I want to see events where OpenWith.exe executes a command using /c.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\OpenWith\\.exe\" and action_process_image_command_line contains \"/c\")\n\n\n\n"}
{"prompt": "I want to see a list of events flagged by both Symantec Endpoint Protection and Zscaler Network Security Services logs that indicate malicious activity, including details like IP addresses, user accounts, event descriptions, and web page information.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Security\") and xdm.alert.name ~= \"^audit|^web attack|^malicious Site|^system infected|^os attack|^attack\"\n| alter server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer\\: ([^\\,]+)\"), 0)\n| alter category = xdm.alert.name,\nusername = xdm.source.user.username\n| alter event_desc = xdm.alert.description,\nevent_type = xdm.event.description,\ntarget_url = xdm.target.url,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nhostname = coalesce(xdm.target.host.hostname, xdm.source.host.hostname)\n| comp earliest(_time) as FirstAVEventTime,\nlatest(_time) as LatestAVEventTime,\nvalues(server_name) as server_name,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(event_type) as event_type,\nvalues(src_ip) as src_ip,\nvalues(dst_ip) as dst_ip,\nvalues(target_url) as target_url by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nhostname\n| join type = left\n(datamodel dataset = zscaler_nssweblog_raw\n| filter xdm.source.user.username contains \"@\" and xdm.network.application_protocol_category ~= \"Malicious Content\"\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.sam_account_name,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| arrayexpand xdm.source.host.ipv4_addresses\n| alter machine_ip = xdm.source.host.ipv4_addresses\n| comp values(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url by machine_ip,\nuser_dst,\nMachinename\n) as proxyevents(proxyevents.machine_ip = xdm.target.ipv4 or proxyevents.user_dst = xdm.source.user.sam_account_name or proxyevents.Machinename = hostname)\n| filter (ip_src != null or user_dst != null or Machinename != null)"}
{"prompt": "I want to see alerts about botnet detections from my Cisco ASA and Fortinet Fortigate firewalls.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw)\n\n\n| filter xdm.event.original_event_type ~= \"16400|16401|54601|54600\""}
{"prompt": "I want to detect suspicious instances of ZipExec being used on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"/generic:Microsoft_Windows_Shell_ZipFolder:filename=\" and action_process_image_command_line contains \".zip\" and action_process_image_command_line contains \"/pass:\" and action_process_image_command_line contains \"/user:\") or (action_process_image_command_line contains \"/delete\" and action_process_image_command_line contains \"Microsoft_Windows_Shell_ZipFolder:filename=\" and action_process_image_command_line contains \".zip\")\n\n\n\n"}
{"prompt": "I want to see CyberArk Vault activity logs for specific reference IDs (24 and 57) on station 10.64.103.83 or any device with the IP addresses listed, excluding those related to password expiration.", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_dst = xdm.target.user.username,\nuser_src = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station = \"10.64.103.83\" or device_ip in (\"<ip>\")\n| filter reference_id in (24, 57) and reason !~= \"ExpirationPeriod\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to new BITS jobs created through Bitsadmin.", "response": "datamodel\n| filter (xdm.event.id = 3 and xdm.target.process.executable.path ~= \".*\\\\bitsadmin\\.exe\")\n\n\n\n"}
{"prompt": "{I want to see all password reset activity performed by non-admin users on Windows machines.} \n\n\nThis prompt accurately reflects the intent of the XQL query, which focuses on detecting unauthorized privilege escalation through password resets by non-administrative users.  It is concise and written in a natural voice.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4724\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"PAM_windows\") and xdm.source.user.username !~= \"\\$$\" and xdm.target.user.username !~= \"\\$$\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about when an SES identity has been deleted from Amazon AWS.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"ses.amazonaws.com\" and eventName = \"DeleteIdentity\")\n\n\n\n"}
{"prompt": "I want to find instances where svchost creates new processes that are Office applications like Word, Excel, or PowerPoint.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and (action_process_image_path ~= \".*\\\\eqnedt32\\.exe\" or action_process_image_path ~= \".*\\\\excel\\.exe\" or action_process_image_path ~= \".*\\\\msaccess\\.exe\" or action_process_image_path ~= \".*\\\\mspub\\.exe\" or action_process_image_path ~= \".*\\\\powerpnt\\.exe\" or action_process_image_path ~= \".*\\\\visio\\.exe\" or action_process_image_path ~= \".*\\\\winword\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious interactive PowerShell executions running as SYSTEM.", "response": "datamodel\n| filter xdm.target.file.filename in (\"C:\\\\Windows\\\\System32\\\\config\\\\systemprofile\\\\AppData\\\\Roaming\\\\Microsoft\\\\Windows\\\\PowerShell\\\\PSReadLine\\\\ConsoleHost_history.txt\", \"C:\\\\Windows\\\\System32\\\\config\\\\systemprofile\\\\AppData\\\\Local\\\\Microsoft\\\\Windows\\\\PowerShell\\\\StartupProfileData-Interactive\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential attempts to exploit CVE-2021-41379 by using cmd.exe, powershell.exe, pwsh.exe or elevation_service.exe with System integrity level.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"Cmd.Exe\", \"PowerShell.EXE\", \"pwsh.dll\")) and (actor_process_image_path ~= \".*\\\\elevation\\_service\\.exe\" and action_process_integrity_level = \"System\"))\n\n\n\n"}
{"prompt": "I want to see alerts for potential phishing attacks where an attacker uses a ZIP file containing a malicious shortcut that gets placed in my Startup folder.", "response": "datamodel\n| filter ((xdm.target.file.filename contains \"\\\\Microsoft\\\\Windows\\\\Start Menu\\\\Programs\\\\Startup\" and xdm.target.file.filename contains \".lnk.{0AFACED1-E828-11D1-9187-B532F1E9575D}\") and (xdm.target.process.name ~= \".*\\\\explorer\\.exe\" or xdm.source.process.name ~= \".*\\\\explorer\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances where the \"ms-appinstaller\" protocol handler is used from the command line to potentially download files.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"ms-appinstaller:\n\n\n\n"}
{"prompt": "I want to detect when uncommon file extensions are created by Office applications like Excel or Word.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\excel\\.exe\" or xdm.target.process.name ~= \".*\\\\msaccess\\.exe\" or xdm.target.process.name ~= \".*\\\\mspub\\.exe\" or xdm.target.process.name ~= \".*\\\\powerpnt\\.exe\" or xdm.target.process.name ~= \".*\\\\visio\\.exe\" or xdm.target.process.name ~= \".*\\\\winword\\.exe\") or (xdm.source.process.name ~= \".*\\\\excel\\.exe\" or xdm.source.process.name ~= \".*\\\\msaccess\\.exe\" or xdm.source.process.name ~= \".*\\\\mspub\\.exe\" or xdm.source.process.name ~= \".*\\\\powerpnt\\.exe\" or xdm.source.process.name ~= \".*\\\\visio\\.exe\" or xdm.source.process.name ~= \".*\\\\winword\\.exe\")) and (xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.cmd\" or xdm.target.file.filename ~= \".*\\.com\" or xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\" or xdm.target.file.filename ~= \".*\\.hta\" or xdm.target.file.filename ~= \".*\\.ocx\" or xdm.target.file.filename ~= \".*\\.proj\" or xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.scf\" or xdm.target.file.filename ~= \".*\\.scr\" or xdm.target.file.filename ~= \".*\\.sys\" or xdm.target.file.filename ~= \".*\\.vbe\" or xdm.target.file.filename ~= \".*\\.vbs\" or xdm.target.file.filename ~= \".*\\.wsf\" or xdm.target.file.filename ~= \".*\\.wsh\")) and  not ((xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\assembly\\\\tmp\\\\.*\" and xdm.target.file.filename ~= \".*\\.dll\")) and  not (((xdm.target.file.filename ~= \".*C\\:\\\\Users\\\\.*\" and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Office\\\\.*\" and xdm.target.file.filename contains \"\\\\WebServiceCache\\\\AllUsers\") and xdm.target.file.filename ~= \".*\\.com\") or ((xdm.target.process.name ~= \".*\\\\winword\\.exe\" or xdm.source.process.name ~= \".*\\\\winword\\.exe\") and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\webexdelta\\\\.*\" and (xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\")))\n\n\n\n"}
{"prompt": " I want to see all instances of password resets that might indicate unauthorized privilege escalation.  Show me details like the username, host name, event type and any failure reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type)\n| filter message_id in (\"Security_4724_Microsoft-Windows-Security-Auditing\") and xdm.target.user.username !~= \"[a-zA-Z\\d]+\\$$\" and (xdm.source.user.username not in (\"<usernames>\") and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \"@\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationUser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect attempts to run PowerShell scripts from redirected input streams on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and action_process_image_command_line ~= \"\\s\\-\\s*\\<\")\n\n\n\n"}
{"prompt": "I want to find instances where \"sc.exe\" is running with medium integrity level and its command line includes keywords related to configuring a service image path or handling failures.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\sc\\.exe\" and action_process_integrity_level = \"Medium\") and ((action_process_image_command_line contains \"config\" and action_process_image_command_line contains \"binPath\") or (action_process_image_command_line contains \"failure\" and action_process_image_command_line contains \"command\"))\n\n\n\n"}
{"prompt": "I want to find suspicious processes that are using WinRM and potentially bypassing AWL with malicious XML files.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"winrm\" and ((action_process_image_command_line contains \"format:pretty\" or action_process_image_command_line contains \"format:\\\"pretty\\\"\" or action_process_image_command_line contains \"format:\\\"text\\\"\" or action_process_image_command_line contains \"format:text\") and  not ((action_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find out which Fortigate and Cisco ASA devices haven't sent any logs for at least 4 hours.", "response": "config case_sensitive = false\n| preset = metrics_view\n| filter _collector_type in (\"Syslog\") and _product in (\"Fortigate\", \"ASA\")\n| alter Desc_String = if(_broker_device_name contains \"<bvm>\", \".\")\n| alter bin_time = _time\n| bin bin_time span = 4h timeshift = 1705708800\n| comp latest(_time) as LatestTime,\nlatest(last_seen) as LastSeen,\nsum(total_event_count) as TotalEventCount by bin_time,\n_vendor,\n_product,\n_broker_device_ip,\n_final_reporting_device_ip addrawdata = true as RW\n| alter Hours_Since_LastEvent = timestamp_diff(current_time(), LastSeen, \"HOUR\"),\nCategory = \"DeviceNotReporting\"\n| filter TotalEventCount = 0 and Hours_Since_LastEvent >= 4\n| filter _final_reporting_device_ip not in (\"<ips>\")\n| alter RW1 = to_json_string(RW)\n| alter DS = RW1 -> [0]\n| alter Desc_String = DS -> Desc_String"}
{"prompt": "I want to see all instances where security configuration parameters were modified in Swift applications.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"security configuration parameter modified\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to Tap Driver installations on endpoints.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and actor_process_image_path contains \"tap0901\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential CleanWipe PUA activity on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\SepRemovalToolNative\\_x64\\.exe\" or (action_process_image_path ~= \".*\\\\CATClean\\.exe\" and action_process_image_command_line contains \"--uninstall\") or (action_process_image_path ~= \".*\\\\NetInstaller\\.exe\" and action_process_image_command_line contains \"-r\") or (action_process_image_path ~= \".*\\\\WFPUnins\\.exe\" and (action_process_image_command_line contains \"/uninstall\" and action_process_image_command_line contains \"/enterprise\")))\n\n\n\n"}
{"prompt": "I want to detect attempts to bypass User Account Control (UAC) using Event Viewer.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\mscfile\\\\shell\\\\open\\\\command\"\n\n\n\n"}
{"prompt": " I want to find instances where PresentationHost.EXE is executing .xbap files from unusual locations on endpoints. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\presentationhost\\.exe\" or actor_process_file_original_name = \"PresentationHost.exe\") and action_process_image_command_line contains \".xbap\") and  not ((action_process_image_command_line ~= \".*\\ C\\:\\\\Windows\\\\.*\" or action_process_image_command_line contains \" C:\\\\Program Files\"))\n\n\n\n"}
{"prompt": "I want to find files that have been quarantined multiple times by the same application and computer.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type != \"Security\"\n| alter hostname = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| filter xdm.target.file.sha256 != null and hostname != null\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\ndownload_site = arrayindex(regextract(symantec_ep_raw._raw_log, \"Download site:\\s([^\\,]+)\"), 0),\ndownloaded_by = arrayindex(regextract(symantec_ep_raw._raw_log, \"Downloaded by:\\s([^\\,]+)\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1),\nfile_hash = xdm.target.file.sha256,\nusername = xdm.source.user.username,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nprocess = xdm.target.file.path,\nrisk_name = xdm.alert.name,\naction = xdm.observer.action\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\")\n| comp earliest(_time) as FirstEventTime,\nlast(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(directory) as directory,\nvalues(file_name) as file_name,\nvalues(file_extension) as file_extension,\nvalues(server_name) as server_name,\nvalues(xdm.source.user.username) as username,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ips,\nvalues(xdm.target.ipv4) as dst_ips,\nvalues(download_site) as download_site,\nvalues(downloaded_by) as downloaded_by,\ncount() as matched_events by hostname,\nxdm.target.file.sha256\n| alter ip_address = replace(replace(replace(to_string(ip_address), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nrisk_name = replace(replace(replace(to_string(risk_name), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\ndirectory = replace(replace(replace(to_string(directory), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter matched_events >= 8 and FirstEventTime != LatestEventTime\n| alter alert_category = \"Initial Access\""}
{"prompt": "I want to see alerts about potential tampering with Attachment Manager settings in the Windows registry.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Attachments\\\\.*\" and ((action_registry_key_name ~= \".*\\\\HideZoneInfoOnProperties\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\")) or (action_registry_key_name ~= \".*\\\\SaveZoneInformation\" and (action_registry_value_name = \"DWORD (0x00000002)\" or action_registry_data = \"DWORD (0x00000002)\")) or (action_registry_key_name ~= \".*\\\\ScanWithAntiVirus\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\")))\n\n\n\n"}
{"prompt": "I want to see security events related to suspicious temporary files being created by WebDAV access on Windows systems.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\TfsStore\\\\Tfs\\_DAV\\\\.*\" and (xdm.target.file.filename ~= \".*\\.7z\" or xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.dat\" or xdm.target.file.filename ~= \".*\\.ico\" or xdm.target.file.filename ~= \".*\\.js\" or xdm.target.file.filename ~= \".*\\.lnk\" or xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.rar\" or xdm.target.file.filename ~= \".*\\.vbe\" or xdm.target.file.filename ~= \".*\\.vbs\" or xdm.target.file.filename ~= \".*\\.zip\"))\n\n\n\n"}
{"prompt": "I want to see Duo login failures that happened multiple times in a short period.", "response": "dataset = duo_duo_raw\n| filter email != NULL and reason in (\"invalid_passcode\", \"deny_unenrolled_user\", \"endpoint_is_not_trusted\", \"locked_out\", \"user_disabled\", \"user_mistake\") and result in (\"denied\") and eventtype in (\"authentication\")\n| alter DuoUserName = json_extract_scalar(user, \"$.name\"),\nIPAddress = json_extract_scalar(access_device, \"$.ip\"),\nDeviceTrustLevel = json_extract_scalar(adaptive_trust_assessments, \"$.remember_me.trust_level\"),\nAccDevLocationCN = json_extract_scalar(access_device, \"$.location.country\"),\nAccDevLocationST = json_extract_scalar(access_device, \"$.location.state\"),\nAccDevLocationCY = json_extract_scalar(access_device, \"$.location.city\"),\nAccDevOS = json_extract_scalar(access_device, \"$.os\"),\nAccDevOSVer = json_extract_scalar(access_device, \"$.os_version\"),\nAccDevBrowser = json_extract_scalar(access_device, \"$.browser\"),\nAppSrc = json_extract_scalar(application, \"$.name\")\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value),\nAccDevLocationCN = replace(AccDevLocationCN, \"\\\"\", \"\"),\nDuoUserName = replace(DuoUserName, \"\\\"\", \"\"),\nIPAddress = replace(IPAddress, \"\\\"\", \"\")\n| filter IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false and IPAddress not contains \"0.0.0.0\" and AccDevLocationCN != NULL\n| comp earliest(_time) as FirstEvent,\nlatest(_time) as LastEvent,\nvalues(IPAddress) as MultipleIPs,\nvalues(AccDevOS) as MultipleOS,\nvalues(AccDevBrowser) as MultipleBrowser,\nvalues(AccDevLocationCN) as MultipleCountries,\nvalues(access_device) as FailedEventCount by email,\nDuoUserName,\nAppSrc,\nreason,\nresult,\neventtype,\n_vendor,\n_product,\n_collector_name,\n_collector_type\n| filter array_length(FailedEventCount) >= 15 and timestamp_diff(LastEvent, FirstEvent, \"MINUTE\") <= 10"}
{"prompt": "I want to see alerts about potential suspicious activity using SeCEdit on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\secedit\\.exe\" or actor_process_file_original_name = \"SeCEdit\") and (((action_process_image_command_line contains \"/export\" and action_process_image_command_line contains \"/cfg\") or (action_process_image_command_line contains \"/configure\" and action_process_image_command_line contains \"/db\")))\n\n\n\n"}
{"prompt": "I want to detect potential hacktool executions on Linux endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/crackmapexec\" or action_process_image_path ~= \".*\\/havoc\" or action_process_image_path ~= \".*\\/merlin\\-agent\" or action_process_image_path ~= \".*\\/merlinServer\\-Linux\\-x64\" or action_process_image_path ~= \".*\\/msfconsole\" or action_process_image_path ~= \".*\\/msfvenom\" or action_process_image_path ~= \".*\\/ps\\-empire\\ server\" or action_process_image_path ~= \".*\\/ps\\-empire\" or action_process_image_path ~= \".*\\/sliver\\-client\" or action_process_image_path ~= \".*\\/sliver\\-server\" or action_process_image_path ~= \".*\\/Villain\\.py\") or (action_process_image_path contains \"/cobaltstrike\" or action_process_image_path contains \"/teamserver\") or (action_process_image_path ~= \".*\\/autorecon\" or action_process_image_path ~= \".*\\/httpx\" or action_process_image_path ~= \".*\\/legion\" or action_process_image_path ~= \".*\\/naabu\" or action_process_image_path ~= \".*\\/netdiscover\" or action_process_image_path ~= \".*\\/nmap\" or action_process_image_path ~= \".*\\/nuclei\" or action_process_image_path ~= \".*\\/recon\\-ng\" or action_process_image_path ~= \".*\\/zenmap\") or action_process_image_path contains \"/sniper\" or (action_process_image_path ~= \".*\\/dirb\" or action_process_image_path ~= \".*\\/dirbuster\" or action_process_image_path ~= \".*\\/eyewitness\" or action_process_image_path ~= \".*\\/feroxbuster\" or action_process_image_path ~= \".*\\/ffuf\" or action_process_image_path ~= \".*\\/gobuster\" or action_process_image_path ~= \".*\\/wfuzz\" or action_process_image_path ~= \".*\\/whatweb\") or (action_process_image_path ~= \".*\\/joomscan\" or action_process_image_path ~= \".*\\/nikto\" or action_process_image_path ~= \".*\\/wpscan\") or (action_process_image_path ~= \".*\\/aircrack\\-ng\" or action_process_image_path ~= \".*\\/bloodhound\\-python\" or action_process_image_path ~= \".*\\/bpfdos\" or action_process_image_path ~= \".*\\/ebpfki\" or action_process_image_path ~= \".*\\/evil\\-winrm\" or action_process_image_path ~= \".*\\/hashcat\" or action_process_image_path ~= \".*\\/hoaxshell\\.py\" or action_process_image_path ~= \".*\\/hydra\" or action_process_image_path ~= \".*\\/john\" or action_process_image_path ~= \".*\\/ncrack\" or action_process_image_path ~= \".*\\/nxc\\-ubuntu\\-latest\" or action_process_image_path ~= \".*\\/pidhide\" or action_process_image_path ~= \".*\\/pspy32\" or action_process_image_path ~= \".*\\/pspy32s\" or action_process_image_path ~= \".*\\/pspy64\" or action_process_image_path ~= \".*\\/pspy64s\" or action_process_image_path ~= \".*\\/setoolkit\" or action_process_image_path ~= \".*\\/sqlmap\" or action_process_image_path ~= \".*\\/writeblocker\") or action_process_image_path contains \"/linpeas\")\n\n\n\n"}
{"prompt": "I want to find out if any firewall admins in Australia deleted 10 or more objects within a 5-minute timeframe from the CheckPoint logs.", "response": "config case_sensitive = false\n| dataset = check_point_smartconsole_raw\n| bin _time span = 5m\n| filter operation = \"Delete Object\" and lowercase(administrator) in (\"ajesh_s\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(subject) as result,\nvalues(_product) as product,\ncount() as matched_events by administrator,\n_time\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about potential unquoted service path reconnaissance using Wmic.exe on my endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"wmic.exe\" or action_process_image_path ~= \".*\\\\WMIC\\.exe\") and (action_process_image_command_line contains \" service get \" and action_process_image_command_line contains \"name,displayname,pathname,startmode\"))\n\n\n\n"}
{"prompt": "I want to see all instances of password change failures for <username> from Manage Engine ADSSP logs.", "response": "config case_sensitive = false\n| dataset = manage_engine_adssp_raw\n| filter _raw_log contains \"\\\"productName\\\":\\\"ADSSP\\\"}\"\n| alter json_message = arrayindex(regextract(_raw_log, \"\\d+\\.\\d+\\.\\d+\\.\\d+\\s(.*)\"), 0) -> {}\n| alter STATUS = json_message -> message.STATUS\n| alter json_message = replace(replace(json_message, \"LOGIN NAME\", \"LOGIN_NAME\"), \"DOMAIN NAME\", \"DOMAIN_NAME\")\n| alter Login_Name = json_message -> message.LOGIN_NAME,\nACCESS_MODE = json_message -> message.ACCESS_MODE,\nIP = json_message -> message.IP,\nHOST = json_message -> message.HOST,\nDOMAIN_NAME = json_message -> message.DOMAIN_NAME,\nDATE_TIME = json_message -> message.DATE_TIME,\nACTION_NAME = json_message -> message.ACTION_NAME,\nCat = \"ADSSP Domain Admin Login Failure\"\n| filter STATUS contains \"Password change failed.\" and Login_Name in (\"<username>\")"}
{"prompt": "I want to detect commands used for discovering processes running on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/ps\" or action_process_image_path ~= \".*\\/top\")\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious activity related to creating shadow copies using PowerShell, wmic, or vssadmin.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\vssadmin\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\", \"wmic.exe\", \"VSSADMIN.EXE\")) and (action_process_image_command_line contains \"shadow\" and action_process_image_command_line contains \"create\"))\n\n\n\n"}
{"prompt": "I want to find instances of potentially suspicious commands being executed using CMD, where output is redirected to unusual locations.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and ((action_process_image_command_line ~= \".*\\>.*\\%APPDATA\\%\\\\.*\" or action_process_image_command_line ~= \".*\\>.*\\%TEMP\\%\\\\.*\" or action_process_image_command_line ~= \".*\\>.*\\%TMP\\%\\\\.*\" or action_process_image_command_line ~= \".*\\>.*\\%USERPROFILE\\%\\\\.*\" or action_process_image_command_line ~= \".*\\>.*C\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\>.*C\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\>.*C\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\>.*C\\:\\\\Windows\\\\Temp\\\\.*\") or ((action_process_image_command_line contains \" >\" or action_process_image_command_line contains \"\\\">\" or action_process_image_command_line contains \"'>\") and (action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to detect when a user is added to the admin group on macOS using dscl.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/dscl\" and (action_process_image_command_line contains \" -append \" and action_process_image_command_line contains \" /Groups/admin \" and action_process_image_command_line contains \" GroupMembership \"))\n\n\n\n"}
{"prompt": "I want to see all instances of Impacket tools being executed on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path contains \"\\\\goldenPac\" or action_process_image_path contains \"\\\\karmaSMB\" or action_process_image_path contains \"\\\\kintercept\" or action_process_image_path contains \"\\\\ntlmrelayx\" or action_process_image_path contains \"\\\\rpcdump\" or action_process_image_path contains \"\\\\samrdump\" or action_process_image_path contains \"\\\\secretsdump\" or action_process_image_path contains \"\\\\smbexec\" or action_process_image_path contains \"\\\\smbrelayx\" or action_process_image_path contains \"\\\\wmiexec\" or action_process_image_path contains \"\\\\wmipersist\") or (action_process_image_path ~= \".*\\\\atexec\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\dcomexec\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\dpapi\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\findDelegation\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\GetADUsers\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\GetNPUsers\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\getPac\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\getST\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\getTGT\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\GetUserSPNs\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\ifmap\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\mimikatz\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\netview\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\nmapAnswerMachine\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\opdump\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\psexec\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\rdp\\_check\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\sambaPipe\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\smbclient\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\smbserver\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\sniff\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\sniffer\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\split\\_windows\\.exe\" or action_process_image_path ~= \".*\\\\ticketer\\_windows\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to the Atlassian Confluence CVE-2022-26134 exploit that involve suspicious processes like curl or wget running on endpoints.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \"\\/opt\\/atlassian\\/confluence\\/.*\" and actor_process_image_path ~= \".*\\/java\" and (action_process_image_command_line contains \"/bin/sh\" or action_process_image_command_line contains \"bash\" or action_process_image_command_line contains \"dash\" or action_process_image_command_line contains \"ksh\" or action_process_image_command_line contains \"zsh\" or action_process_image_command_line contains \"csh\" or action_process_image_command_line contains \"fish\" or action_process_image_command_line contains \"curl\" or action_process_image_command_line contains \"wget\" or action_process_image_command_line contains \"python\"))\n\n\n\n"}
{"prompt": "I want to find instances of PowerShell being used to set full control permissions on Windows folders.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\") or (action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\")) and (action_process_image_command_line contains \"Set-Acl \" and action_process_image_command_line contains \"-AclObject \") and (action_process_image_command_line contains \"-Path \\\"C:\\\\Windows\" or action_process_image_command_line contains \"-Path 'C:\\\\Windows\" or action_process_image_command_line contains \"-Path %windir%\" or action_process_image_command_line contains \"-Path $env:windir\") and (action_process_image_command_line contains \"FullControl\" or action_process_image_command_line contains \"Allow\"))\n\n\n\n"}
{"prompt": "I want to see events related to suspicious non-privileged activity using Registry or PowerShell commands.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"reg \" and action_process_image_command_line contains \"add\") or (action_process_image_command_line contains \"powershell\" or action_process_image_command_line contains \"set-itemproperty\" or action_process_image_command_line contains \" sp \" or action_process_image_command_line contains \"new-itemproperty\")) and (action_process_integrity_level = \"Medium\" and (action_process_image_command_line contains \"ControlSet\" and action_process_image_command_line contains \"Services\") and (action_process_image_command_line contains \"ImagePath\" or action_process_image_command_line contains \"FailureCommand\" or action_process_image_command_line contains \"ServiceDLL\"))\n\n\n\n"}
{"prompt": "I want to see Symantec HIPS events flagged as \"Unwanted Software\" by Zscaler, along with corresponding Zscaler web logs for the same users and IPs.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Security\") and xdm.alert.name ~= \"^audit|^web attack|^malicious Site|^system infected|^os attack|^attack\"\n| alter server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer\\: ([^\\,]+)\"), 0)\n| alter category = xdm.alert.name,\nusername = xdm.source.user.username\n| alter event_desc = xdm.alert.description,\nevent_type = xdm.event.description,\ntarget_url = xdm.target.url,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nhostname = coalesce(xdm.target.host.hostname, xdm.source.host.hostname)\n| comp earliest(_time) as FirstAVEventTime,\nlatest(_time) as LatestAVEventTime,\nvalues(server_name) as server_name,\nvalues(category) as alert_category,\nvalues(event_desc) as event_desc,\nvalues(event_type) as event_type,\nvalues(src_ip) as src_ip,\nvalues(dst_ip) as dst_ip,\nvalues(target_url) as target_url by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nhostname\n| join type = left\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category contains \"shareware\" and user_dst contains \"@\"\n| alter user_dst = arrayindex(split(user_dst, \"@\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst,\nMachinename\n) as zsevents(zsevents.Machinename = hostname or zsevents.user_dst = xdm.source.user.sam_account_name)\n| filter (user_dst != null or Machinename != null)"}
{"prompt": "I want to see alerts about potential exploitation of CVE-2023-2283 through SSHD using libssh authentication bypass.", "response": "datamodel\n| filter _raw_log contains \"Failed to generate curve25519 keys\"\n\n\n\n"}
{"prompt": "I want to see all events when an Okta API token is created.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type = \"system.api_token.create\"\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious Transport Rules in Office 365.", "response": "dataset = msft_o365_exchange_online_raw\n| filter Workload = \"Exchange\"\n| filter Operation contains \"TransportRule\""}
{"prompt": "I want to see which domain admin accounts have had brute force attacks targeting them, grouped by the time frame of the attack (15 min increments).", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4625) and _collector_type in (\"XDR Collector\")\n| alter bin_time = _time\n| bin bin_time span = 1M timeshift = 15\n| alter TargetUserName = event_data -> TargetUserName,\nSubjectDomainName = event_data -> SubjectDomainName\n| filter (TargetUserName in (\"adssp.service\", \"IST-ISAID\", \"jonesj\", \"jflores\", \"minerva.khuele\", \"singhals\", \"siamert\", \"vbanaag\", \"Patela.Dadmin\", \"vbanng\", \"brunonc.dadmin\", \"dudgeon.viona\", \"huelek\", \"saadmin\", \"jonesj\", \"kendricks.dadmin\", \"singhals\", \"stephenh.dadmin\", \"veermanp.dadmin\", \"ricardob\", \"cian.thunder\", \"patrick.murphy\", \"billy.kirkpatrick\", \"Russell.Jefferson\", \"Borislav.Nance\", \"EscobarLin\", \"banaagv\", \"Michael.Clarkson\", \"keifer.gimenez\", \"laong.laan\", \"tim.rivers\", \"Jarrett.jenkins\", \"alex.duke\", \"henry.reeves\", \"Jeff.mills\", \"saul.silvanus\", \"parker.vega\", \"pharrell.hill\", \"patela\", \"abhishek.ojha1\"))\n| comp min(_time) as First_EventTimestamp,\nmax(_time) as Latest_EventTimestamp,\nvalues(event_data) as EventData_List,\nvalues(message) as Message_Data_List,\ncount() as EventCount by TargetUserName,\nbin_time\n| alter Events_TimeDiff_in_Seconds = timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\"),\nAlert_Cat = \"Brute Force\"\n| filter EventCount >= 5\n| union (config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4625) and _collector_type in (\"XDR Collector\")\n| alter bin_time = _time\n| bin bin_time span = 1M timeshift = 30\n| alter TargetUserName = event_data -> TargetUserName,\nSubjectDomainName = event_data -> SubjectDomainName\n| filter (TargetUserName in (\"adssp.service\", \"IST-ISAID\", \"jonesj\", \"jflores\", \"minerva.khuele\", \"singhals\", \"siamert\", \"vbanaag\", \"Patela.Dadmin\", \"vbanng\", \"brunonc.dadmin\", \"dudgeon.viona\", \"huelek\", \"saadmin\", \"jonesj\", \"kendricks.dadmin\", \"singhals\", \"stephenh.dadmin\", \"veermanp.dadmin\", \"ricardob\", \"cian.thunder\", \"patrick.murphy\", \"billy.kirkpatrick\", \"Russell.Jefferson\", \"Borislav.Nance\", \"EscobarLin\", \"banaagv\", \"Michael.Clarkson\", \"keifer.gimenez\", \"laong.laan\", \"tim.rivers\", \"Jarrett.jenkins\", \"alex.duke\", \"henry.reeves\", \"Jeff.mills\", \"saul.silvanus\", \"parker.vega\", \"pharrell.hill\", \"patela\", \"abhishek.ojha1\"))\n| comp min(_time) as First_EventTimestamp,\nmax(_time) as Latest_EventTimestamp,\nvalues(event_data) as EventData_List,\nvalues(message) as Message_Data_List,\ncount() as EventCount by TargetUserName,\nbin_time\n| alter Events_TimeDiff_in_Seconds = timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\"),\nAlert_Cat = \"Brute Force\"\n| filter EventCount >= 5)\n| union (config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4625) and _collector_type in (\"XDR Collector\")\n| alter bin_time = _time\n| bin bin_time span = 1M timeshift = 45\n| alter TargetUserName = event_data -> TargetUserName,\nSubjectDomainName = event_data -> SubjectDomainName\n| filter (TargetUserName in (\"adssp.service\", \"IST-ISAID\", \"jonesj\", \"jflores\", \"minerva.khuele\", \"singhals\", \"siamert\", \"vbanaag\", \"Patela.Dadmin\", \"vbanng\", \"brunonc.dadmin\", \"dudgeon.viona\", \"huelek\", \"saadmin\", \"jonesj\", \"kendricks.dadmin\", \"singhals\", \"stephenh.dadmin\", \"veermanp.dadmin\", \"ricardob\", \"cian.thunder\", \"patrick.murphy\", \"billy.kirkpatrick\", \"Russell.Jefferson\", \"Borislav.Nance\", \"EscobarLin\", \"banaagv\", \"Michael.Clarkson\", \"keifer.gimenez\", \"laong.laan\", \"tim.rivers\", \"Jarrett.jenkins\", \"alex.duke\", \"henry.reeves\", \"Jeff.mills\", \"saul.silvanus\", \"parker.vega\", \"pharrell.hill\", \"patela\", \"abhishek.ojha1\"))\n| comp min(_time) as First_EventTimestamp,\nmax(_time) as Latest_EventTimestamp,\nvalues(event_data) as EventData_List,\nvalues(message) as Message_Data_List,\ncount() as EventCount by TargetUserName,\nbin_time\n| alter Events_TimeDiff_in_Seconds = timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\"),\nAlert_Cat = \"Brute Force\"\n| filter EventCount >= 5)\n| union (config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4625) and _collector_type in (\"XDR Collector\")\n| alter bin_time = _time\n| bin bin_time span = 1M timeshift = 60\n| alter TargetUserName = event_data -> TargetUserName,\nSubjectDomainName = event_data -> SubjectDomainName\n| filter (TargetUserName in (\"adssp.service\", \"IST-ISAID\", \"jonesj\", \"jflores\", \"minerva.khuele\", \"singhals\", \"siamert\", \"vbanaag\", \"Patela.Dadmin\", \"vbanng\", \"brunonc.dadmin\", \"dudgeon.viona\", \"huelek\", \"saadmin\", \"jonesj\", \"kendricks.dadmin\", \"singhals\", \"stephenh.dadmin\", \"veermanp.dadmin\", \"ricardob\", \"cian.thunder\", \"patrick.murphy\", \"billy.kirkpatrick\", \"Russell.Jefferson\", \"Borislav.Nance\", \"EscobarLin\", \"banaagv\", \"Michael.Clarkson\", \"keifer.gimenez\", \"laong.laan\", \"tim.rivers\", \"Jarrett.jenkins\", \"alex.duke\", \"henry.reeves\", \"Jeff.mills\", \"saul.silvanus\", \"parker.vega\", \"pharrell.hill\", \"patela\", \"abhishek.ojha1\"))\n| comp min(_time) as First_EventTimestamp,\nmax(_time) as Latest_EventTimestamp,\nvalues(event_data) as EventData_List,\nvalues(message) as Message_Data_List,\ncount() as EventCount by TargetUserName,\nbin_time\n| alter Events_TimeDiff_in_Seconds = timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\"),\nAlert_Cat = \"Brute Force\"\n| filter EventCount >= 5)\n| dedup TargetUserName by asc First_EventTimestamp"}
{"prompt": "I want to see alerts for potential WMI Backdoor Exchange Transport Agent activity on my endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\EdgeTransport\\.exe\" and  not (action_process_image_path = \"C:\\\\Windows\\\\System32\\\\conhost.exe\" or (action_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\\\Exchange\\ Server\\\\.*\" and action_process_image_path ~= \".*\\\\Bin\\\\OleConverter\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to registry modifications that involve adding or deleting entries under \"HKCU\\Software\\Classes\\ms-settings\\shell\\open\\command\".", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"reg\" and action_process_image_command_line contains \"add\" and action_process_image_command_line contains \"hkcu\\\\software\\\\classes\\\\ms-settings\\\\shell\\\\open\\\\command\" and action_process_image_command_line contains \"/ve \" and action_process_image_command_line contains \"/d\") or (action_process_image_command_line contains \"reg\" and action_process_image_command_line contains \"add\" and action_process_image_command_line contains \"hkcu\\\\software\\\\classes\\\\ms-settings\\\\shell\\\\open\\\\command\" and action_process_image_command_line contains \"/v\" and action_process_image_command_line contains \"DelegateExecute\") or (action_process_image_command_line contains \"reg\" and action_process_image_command_line contains \"delete\" and action_process_image_command_line contains \"hkcu\\\\software\\\\classes\\\\ms-settings\"))\n\n\n\n"}
{"prompt": "I want to detect potential UAC bypass attempts using EventVwr.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\Microsoft\\\\Event\\ Viewer\\\\RecentViews\" or xdm.target.file.filename ~= \".*\\\\Microsoft\\\\EventV\\~1\\\\RecentViews\") and  not (((xdm.target.process.name ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see potential attempts to exploit CVE-2021-27905 in Apache Solr.", "response": "datamodel\n| filter (((xdm.network.http.url contains \"/solr/\" and xdm.network.http.url contains \"/debug/dump*\" and xdm.network.http.url contains \"param=ContentStream\") and xdm.network.http.response_code = 200) or (xdm.network.http.method = \"GET\" and (xdm.network.http.url contains \"/solr/\" and xdm.network.http.url contains \"command=fetchindex\" and xdm.network.http.url contains \"masterUrl=\") and xdm.network.http.response_code = 200))\n\n\n\n"}
{"prompt": "I want to find instances where Wscript or Cscript executes JavaScript, VBScript, VBA, or WSF files.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name in (\"wscript.exe\", \"cscript.exe\") or (action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\")) and (action_process_image_command_line contains \".js\" or action_process_image_command_line contains \".jse\" or action_process_image_command_line contains \".vba\" or action_process_image_command_line contains \".vbe\" or action_process_image_command_line contains \".vbs\" or action_process_image_command_line contains \".wsf\"))\n\n\n\n"}
{"prompt": " I want to find any files created by the Diamond Sleet APT that have names matching specific patterns.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\:\\\\ProgramData\\\\4800\\-84DC\\-063A6A41C5C\" or xdm.target.file.filename ~= \".*\\:\\\\ProgramData\\\\clip\\.exe\" or xdm.target.file.filename ~= \".*\\:\\\\ProgramData\\\\DSROLE\\.dll\" or xdm.target.file.filename ~= \".*\\:\\\\ProgramData\\\\Forest64\\.exe\" or xdm.target.file.filename ~= \".*\\:\\\\ProgramData\\\\readme\\.md\" or xdm.target.file.filename ~= \".*\\:\\\\ProgramData\\\\Version\\.dll\" or xdm.target.file.filename ~= \".*\\:\\\\ProgramData\\\\wsmprovhost\\.exe\")\n\n\n\n"}
{"prompt": "I want to see how many Azure Kubernetes pods have been deleted.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName = \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/PODS/DELETE\"\n\n\n\n"}
{"prompt": "I want to find any instances where InstallUtil.exe is used to download files from the internet.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\InstallUtil\\.exe\" or actor_process_file_original_name = \"InstallUtil.exe\") and (action_process_image_command_line contains \"ftp:\n\n\n\n"}
{"prompt": "I want to detect potential email exfiltration attempts by UNC4841 using file patterns on Linux systems.", "response": "preset = xdr_file\n| filter action_file_name ~= \"\\/mail\\/tmp\\/[a-zA-Z0-9]{3}[0-9]{3}\\.tar\\.gz\"\n\n\n\n"}
{"prompt": "I want to see activity related to modifications of the Wow6432Node CurrentVersion Autorun keys in Windows Event Logs.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\" and (action_registry_key_name contains \"\\\\ShellServiceObjectDelayLoad\" or action_registry_key_name ~= \".*\\\\Run\\\\.*\" or action_registry_key_name ~= \".*\\\\RunOnce\\\\.*\" or action_registry_key_name ~= \".*\\\\RunOnceEx\\\\.*\" or action_registry_key_name ~= \".*\\\\RunServices\\\\.*\" or action_registry_key_name ~= \".*\\\\RunServicesOnce\\\\.*\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellServiceObjects\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellIconOverlayIdentifiers\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellExecuteHooks\" or action_registry_key_name contains \"\\\\Explorer\\\\SharedTaskScheduler\" or action_registry_key_name contains \"\\\\Explorer\\\\Browser Helper Objects\")) and  not ((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\") or (actor_process_image_path contains \"C:\\\\Program Files (x86)\\\\Microsoft\\\\EdgeUpdate\\\\Install\\\\{\" and actor_process_image_path contains \"\\\\setup.exe\") or (actor_process_image_path = \"C:\\\\Program Files\\\\Common Files\\\\Microsoft Shared\\\\ClickToRun\\\\OfficeClickToRun.exe\" and action_registry_key_name ~= \".*\\\\Office\\\\ClickToRun\\\\REGISTRY\\\\MACHINE\\\\Software\\\\Wow6432Node\\\\.*\") or (actor_process_image_path in (\"C:\\\\Program Files\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe\", \"C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe\") and action_registry_key_name ~= \".*\\\\Explorer\\\\Browser\\ Helper\\ Objects\\\\\\{31D09BA0\\-12F5\\-4CCE\\-BE8A\\-2923E76605DA\\}\\\\.*\") or ((action_registry_value_name ~= \".*\\-A251\\-47B7\\-93E1\\-CDD82E34AF8B\\}\" or action_registry_data ~= \".*\\-A251\\-47B7\\-93E1\\-CDD82E34AF8B\\}\") or (action_registry_value_name = \"grpconv -o\" or action_registry_data = \"grpconv -o\") or ((action_registry_value_name contains \"C:\\\\Program Files\" or action_registry_data contains \"C:\\\\Program Files\") and (action_registry_value_name contains \"\\\\Dropbox\\\\Client\\\\Dropbox.exe\" or action_registry_data contains \"\\\\Dropbox\\\\Client\\\\Dropbox.exe\") and (action_registry_value_name contains \" /systemstartup\" or action_registry_data contains \" /systemstartup\"))) or action_registry_key_name ~= \".*\\\\Explorer\\\\Browser\\ Helper\\ Objects\\\\\\{92EF2EAD\\-A7CE\\-4424\\-B0DB\\-499CF856608E\\}\\\\NoExplorer\" or (actor_process_image_path contains \"\\\\windowsdesktop-runtime-\" and (action_registry_key_name ~= \".*\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\\\{e2d1ae32\\-dd1d\\-4ad7\\-a298\\-10e42e7840fc\\}\" or action_registry_key_name ~= \".*\\\\WOW6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\\\{7037b699\\-7382\\-448c\\-89a7\\-4765961d2537\\}\") and (action_registry_value_name ~= \"\\\"C\\:\\\\ProgramData\\\\Package\\ Cache\\\\.*\" or action_registry_data ~= \"\\\"C\\:\\\\ProgramData\\\\Package\\ Cache\\\\.*\") and (action_registry_value_name ~= \".*\\.exe\\\"\\ \\/burn\\.runonce\" or action_registry_data ~= \".*\\.exe\\\"\\ \\/burn\\.runonce\")) or ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\Updates\\\\.*\") and actor_process_image_path ~= \".*\\\\OfficeClickToRun\\.exe\") or (action_registry_value_name ~= \"\\\"C\\:\\\\ProgramData\\\\Package\\ Cache\\\\\\{d21a4f20\\-968a\\-4b0c\\-bf04\\-a38da5f06e41\\}\\\\windowsdesktop\\-runtime\\-.*\" or action_registry_data ~= \"\\\"C\\:\\\\ProgramData\\\\Package\\ Cache\\\\\\{d21a4f20\\-968a\\-4b0c\\-bf04\\-a38da5f06e41\\}\\\\windowsdesktop\\-runtime\\-.*\") or (actor_process_image_path ~= \".*\\\\VC\\_redist\\.x64\\.exe\" and (action_registry_value_name ~= \".*\\}\\\\VC\\_redist\\.x64\\.exe\\\"\\ \\/burn\\.runonce\" or action_registry_data ~= \".*\\}\\\\VC\\_redist\\.x64\\.exe\\\"\\ \\/burn\\.runonce\")) or ((actor_process_image_path ~= \"C\\:\\\\ProgramData\\\\Package\\ Cache.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\Temp\\\\.*\") and (actor_process_image_path contains \"\\\\winsdksetup.exe\" or actor_process_image_path contains \"\\\\windowsdesktop-runtime-\" or actor_process_image_path contains \"\\\\AspNetCoreSharedFrameworkBundle-\") and (action_registry_value_name ~= \".*\\ \\/burn\\.runonce\" or action_registry_data ~= \".*\\ \\/burn\\.runonce\")) or (actor_process_image_path ~= \"C\\:\\\\Windows\\\\Installer\\\\MSI.*\" and action_registry_key_name contains \"\\\\Explorer\\\\Browser Helper Objects\") or (actor_process_image_path = \"C:\\\\WINDOWS\\\\system32\\\\msiexec.exe\" and action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Wow6432Node\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see when multi-factor authentication was disabled in Office 365, who made the change, and which users were affected.", "response": "dataset = msft_azure_ad_audit_raw\n| filter category = \"UserManagement\" and activityDisplayName = \"Disable Strong Authentication\"\n| alter initiatedBy = json_extract(initiatedBy, \"$.user.userPrincipalName\")\n| alter targetResources = json_extract(targetResources, \"$.userPrincipalName\")\n| fields category, activityDisplayName, initiatedBy, targetResources"}
{"prompt": "I want to find out which units or locations received at least 5 phishing emails from the same sender domain within a single day, if those domains were targeted by at least 80% of users in that unit or location.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter eventType = \"Phishing\" and headerFrom != null and headerTo != null\n| alter headerTo_array = if(headerTo ~= \"\\\"\\\"\", recipients -> [], headerTo -> []),\nsender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0)\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\")\n| filter headerTo_string ~= \"<domain>\"\n| alter username = arrayindex(split(headerTo_string, \"@\"), 0),\nsender_domain = lowercase(arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0))\n| join type = inner\n(preset = ad_users\n| fields sam_account_name, location\n) as adusers adusers.sam_account_name = username\n| filter location != null\n| comp count() as total_phish_events by sender_domain\n| join type = inner\n(dataset = trend_micro_email_security_raw\n| filter eventType = \"Phishing\" and headerFrom != null and headerTo != null\n| alter headerTo_array = if(headerTo ~= \"\\\"\\\"\", recipients -> [], headerTo -> []),\nsender_domain = lowercase(arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0))\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\")\n| filter headerTo_string ~= \"<domain>\"\n| alter username = arrayindex(split(headerTo_string, \"@\"), 0),\nsender_domain = lowercase(arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0))\n| join type = inner\n(preset = ad_users\n| fields sam_account_name, location\n) as adusers adusers.sam_account_name = username\n| filter location != null\n| comp count() as matched_events,\nvalues(headerFrom) as headerFrom,\nvalues(headerTo_string) as users by location,\nsender_domain\n) as tmevents tmevents.sender_domain = sender_domain\n| alter domain_obser_stats = ceil(multiply(divide(matched_events, total_phish_events), 100))\n| filter domain_obser_stats >= 80 and array_length(users) >= 10"}
{"prompt": "I want to see all files potentially related to the FIN7 APT group that have filenames like \".*\\_64refl\\.ps1\" or \"host_ip.ps1\".", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\_64refl\\.ps1\" or xdm.target.file.filename = \"host_ip.ps1\")\n\n\n\n"}
{"prompt": "I want to find instances of unauthorized modifications to Session Manager autorun keys in the Windows Event Log.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\System\\\\CurrentControlSet\\\\Control\\\\Session Manager\" and (action_registry_key_name contains \"\\\\SetupExecute\" or action_registry_key_name contains \"\\\\S0InitialCommand\" or action_registry_key_name contains \"\\\\KnownDlls\" or action_registry_key_name contains \"\\\\Execute\" or action_registry_key_name contains \"\\\\BootExecute\" or action_registry_key_name contains \"\\\\AppCertDlls\") and  not ((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\"))\n\n\n\n"}
{"prompt": "I want to see events related to suspicious applications being allowed through Exploit Guard in Windows Defender.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"SOFTWARE\\\\Microsoft\\\\Windows Defender\\\\Windows Defender Exploit Guard\\\\Controlled Folder Access\\\\AllowedApplications\" and (action_registry_key_name ~= \".*\\\\Users\\\\Public\\\\.*\" or action_registry_key_name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_registry_key_name ~= \".*\\\\Desktop\\\\.*\" or action_registry_key_name ~= \".*\\\\PerfLogs\\\\.*\" or action_registry_key_name ~= \".*\\\\Windows\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see Duo login events from non-business countries, including user name, IP address, location details, browser and OS information.", "response": "config case_sensitive = false\n| dataset = duo_duo_raw\n| filter host in (\"api-5bed3135.duosecurity.com\", \"api-20e02457.duosecurity.com\")\n| filter email != NULL\n| filter result in (\"success\") and eventtype in (\"authentication\")\n| alter DuoUserName = json_extract(user, \"$.name\"),\nIPAddress = json_extract_scalar(access_device, \"$.ip\"),\nDeviceTrustLevel = json_extract(adaptive_trust_assessments, \"$.remember_me.trust_level\")\n| alter AccDevLocationCN = json_extract_scalar(access_device, \"$.location.country\"),\nAccDevLocationST = json_extract(access_device, \"$.location.state\"),\nAccDevLocationCY = json_extract(access_device, \"$.location.city\"),\nAccDevOS = json_extract(access_device, \"$.os\"),\nAccDevOSVer = json_extract(access_device, \"$.os_version\"),\nAccDevBrowser = json_extract(access_device, \"$.browser\"),\nAccDevBrowserVer = json_extract(access_device, \"$.browser_version\"),\nIntegration = json_extract_scalar(application, \"$.name\")\n| alter AccDevLocationCN = replace(AccDevLocationCN, \"\\\"\", \"\"),\nIPAddress = replace(IPAddress, \"\\\"\", \"\"),\nPhoneNumber = auth_device -> name\n| filter incidr(IPAddress, \"<ip>\") = False\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false\n| alter Private_IP_Segment_192 = incidr(IPAddress, \"<ip>\"),\nPrivate_IP_Segment_10 = incidr(IPAddress, \"<ip>\"),\nPrivate_IP_Segment_172 = incidr(IPAddress, \"<ip>\")\n| filter IPAddress not contains \"0.0.0.0\"\n| alter DuoUserName = replace(DuoUserName, \"\\\"\", \"\")\n| filter AccDevLocationCN not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\")\n| alter CorrelationAlertName = \"CNX_EU_PROD DUO Successful Authentication from Non-business Country\"\n| filter (AccDevLocationCN != NULL)\n| fields DuoUserName, IPAddress, email, reason, result,\neventtype, AccDevLocationCN, AccDevLocationST, AccDevLocationCY,\nAccDevBrowser, AccDevBrowserVer, AccDevOS, AccDevOSVer,\nIntegration, access_device, *"}
{"prompt": " I want to see which users have had 10 or more failed SSH login attempts on our Linux servers within the last defined time period. ", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"Tools_Platform_Server\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"sshd\" and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol = \"ssh2\" and xdm.source.user.username not in (null, NULL, \"git\", \"UNKNOWN_USER\")\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter (xdm.source.is_internal_ip = true or ip_address != null)\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, linux_linux_raw._final_reporting_device_ip,\n_vendor, _product\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.user.username\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see detections for known ransomware based on executable signer information.", "response": "datamodel\n| filter (xdm.source.process.executable.signer contains \"Ransom\" or xdm.source.process.executable.signer contains \"Cryptor\" or xdm.source.process.executable.signer contains \"Crypter\" or xdm.source.process.executable.signer contains \"CRYPTES\" or xdm.source.process.executable.signer contains \"GandCrab\" or xdm.source.process.executable.signer contains \"BlackWorm\" or xdm.source.process.executable.signer contains \"Phobos\" or xdm.source.process.executable.signer contains \"Destructor\" or xdm.source.process.executable.signer contains \"Filecoder\" or xdm.source.process.executable.signer contains \"GrandCrab\" or xdm.source.process.executable.signer contains \"Krypt\" or xdm.source.process.executable.signer contains \"Locker\" or xdm.source.process.executable.signer contains \"Ryuk\" or xdm.source.process.executable.signer contains \"Ryzerlo\" or xdm.source.process.executable.signer contains \"Tescrypt\" or xdm.source.process.executable.signer contains \"TeslaCrypt\")\n\n\n\n"}
{"prompt": "I want to see failed login attempts followed by a successful login for specific users on Linux systems.", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| sort asc _time\n| bin _time span = 5m\n| filter xdm.event.type in (\"sshd\") and xdm.event.outcome in (XDM_CONST.OUTCOME_SUCCESS, XDM_CONST.OUTCOME_FAILED) and xdm.source.user.username != null and xdm.source.user.username in (\"anjali.s01\", \"athimoolam_a\", \"balaji_m07\", \"jegadheesan.a\", \"biju_victordhasan\", \"manivannan_s06\", \"nagarajan.m\", \"paulraj_selvaraj01\", \"naveen.a03\", \"shobanbabu_yuvaraj\", \"renuga.chandrasekar\", \"swathi.b06\", \"sivagnanam.m\", \"anand_shekhar01\", \"balasubramaniam_r02\", \"banupriya_s03\", \"manoj_mahalingam\", \"raja_shanmugam\", \"ramkumar.r13\", \"saranraj_g01\", \"vasanth_m\", \"vigneshwaran.r\", \"bharathy_l\", \"amudambigai_p\", \"deepa.sy\", \"kannan.vijayan\", \"mohanraj_g03\", \"radha_rajendran02\", \"rajesh.mohan\", \"sathish_ms01\", \"senthilkumar_o\", \"sravanthi.c\", \"srivatsan.r\", \"sukhvinder.kaur\", \"venkatesh.ragupathy\", \"alagumuthu.mariappan\", \"bathula.krishnarjun\", \"ezhilarasi_m\", \"jayaganesh.j\", \"karthikeyan.b\", \"kishorekumar.raji\", \"lakshmi.perubhotla\", \"manoharan_p\", \"parthasaradhi_g\", \"sankara.rajasekaran\", \"sankaranarayanan.s\", \"sivaram\", \"sunidhi.yadav\", \"sunilkumar_g02\", \"yuvaraj.koppuravuri\", \"chella_priyak\", \"keerthana.rajan\", \"p.dhanusha\", \"priya_chandran02\", \"raj_kumar18\", \"rani_jayamoorthy\", \"swathikiran.m\", \"sravanthi.bandi\", \"sravanthi.hosdoday\", \"uma.batcha\", \"gowreswarir.r\", \"k.raghavendra\", \"piyush_kute\", \"prakash_c04\", \"ravikumar_satla\", \"siva_thirumaiyan\", \"varun_nidadavolu\", \"ajesh_s\", \"raghavendra_goliya\", \"parthiban_g\", \"siva_thirumaiyan\", \"deepak_veluchamy\", \"parthasarathy_pg\", \"satheesh_k\", \"abhijit_patil02\", \"panjabmahadev_yede\", \"parthasarathy_pg\", \"ajay_kadu\", \"nirmal_arumugam\", \"siva_vadagana\", \"yuvaraja_kuppan\", \"rajasekhar_bhogadi\", \"suneel.sah\", \"devaki.k\", \"guruprakash.u\", \"k.latha\", \"kiruthiga.rk\", \"monisha.sankar\", \"pittasairama.l\", \"prasanth.k\", \"santhosh.k19\", \"sasimohan.chandran\", \"swetha.rajan01\")\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, device_ip, _insert_time, _vendor, _product\n| alter pattern = if(xdm.event.outcome = XDM_CONST.OUTCOME_FAILED, \"F\", \"S\")\n| comp list(pattern) as pattern_events,\ncount() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.user.username,\nxdm.source.ipv4,\n_time\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events ~= \"F,F,F,S\"\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious instances of image loading where svchost.exe uses clfsw32.dll.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and action_module_path ~= \".*\\\\clfsw32\\.dll\")\n\n\n\n"}
{"prompt": "I want to see all events where an account's SID history was added.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4765\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about security settings being updated on the OCSP Responder Service.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"5124\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ibpmeventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential persistence threats using the Windows Event Log that involve modifications to the \"mpnotify\" registry key.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows NT\\\\CurrentVersion\\\\Winlogon\\\\mpnotify\"\n\n\n\n"}
{"prompt": "I want to find instances of an attacker disabling administrative share creation at startup on Windows systems.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Services\\\\LanmanServer\\\\Parameters\\\\.*\" and (action_registry_key_name ~= \".*\\\\AutoShareWks\" or action_registry_key_name ~= \".*\\\\AutoShareServer\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to detect potential malicious activity involving the in-memory download and compilation of payloads on macOS endpoints using \"osacompile\" and \"curl\" commands.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"osacompile\" and action_process_image_command_line contains \"curl\")\n\n\n\n"}
{"prompt": "I want to detect instances of new user profiles being created in my AWS environment.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name != \"EV_CloudTrail\"\n| filter eventname IN (\"CreateLoginProfile\")\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter account_id NOT IN (\"<account id>\")\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"illogonsessionid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see activity related to the Volume Shadow Copy Service on Windows systems using esentutl.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"System\\\\CurrentControlSet\\\\Services\\\\VSS\" and actor_process_image_path ~= \".*esentutl\\.exe\") and  not (action_registry_key_name contains \"System\\\\CurrentControlSet\\\\Services\\\\VSS\\\\Start\")\n\n\n\n"}
{"prompt": "I want to see all AWS Security Group configuration changes made by users, excluding those from 'SO0111', and group them by event description and security group ID.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroup_name = json_extract_scalar(requestParameters, \"$.groupName\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"AuthorizeSecurityGroupIngress\", \"CreateSecurityGroup\")\n| filter target_username not contains \"SO0111\"\n| alter aggregation_criteria1 = \"ileventdesc\",\naggregation_criteria2 = \"groupid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect instances of potential obfuscation techniques using System invoke commands that involve \"set\", \"&&\", \"environment\", \"invoke\", or \"input\" in their process image paths.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and (actor_process_image_path contains \"set\" and actor_process_image_path contains \"&&\") and (actor_process_image_path contains \"environment\" or actor_process_image_path contains \"invoke\" or actor_process_image_path contains \"input\"))\n\n\n\n"}
{"prompt": "I want to see a list of Cisco Catalyst devices that have had at least five failed DOT1x authentication attempts within the last 5 minutes.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 5m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter msg_id in (\"DOT1X-5-FAIL\") and xdm.event.description not contains \"Unknown MAC\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ibpmdeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": " I want to detect processes that use short names in their command lines on endpoints, potentially indicating evasion techniques. ", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*\\~1\\\\.*\" or action_process_image_command_line ~= \".*\\~2\\\\.*\") and  not ((actor_process_image_path in (\"C:\\\\Windows\\\\System32\\\\Dism.exe\", \"C:\\\\Windows\\\\System32\\\\cleanmgr.exe\", \"C:\\\\Program Files\\\\GPSoftware\\\\Directory Opus\\\\dopus.exe\") or (actor_process_image_path ~= \".*\\\\WebEx\\\\WebexHost\\.exe\" or actor_process_image_path ~= \".*\\\\thor\\\\thor64\\.exe\" or actor_process_image_path ~= \".*\\\\veam\\.backup\\.shell\\.exe\" or actor_process_image_path ~= \".*\\\\winget\\.exe\" or actor_process_image_path ~= \".*\\\\Everything\\\\Everything\\.exe\") or actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\WinGet\\\\.*\" or (action_process_image_command_line contains \"\\\\appdata\\\\local\\\\webex\\\\webex64\\\\meetings\\\\wbxreport.exe\" or action_process_image_command_line contains \"C:\\\\Program Files\\\\Git\\\\post-install.bat\" or action_process_image_command_line contains \"C:\\\\Program Files\\\\Git\\\\cmd\\\\scalar.exe\")))\n\n\n\n"}
{"prompt": "I want to detect suspicious instances of the Vsls-Agent process loading extensions via the AgentExtensionPath parameter.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\vsls\\-agent\\.exe\" and action_process_image_command_line contains \"--agentExtensionPath\") and  not (action_process_image_command_line contains \"Microsoft.VisualStudio.LiveShare.Agent.\")\n\n\n\n"}
{"prompt": "I want to see alerts for Kerberos Policy changes made by non-privileged users or administrators.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4713\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see Cortex XQL queries that identify potential Follina exploitation attempts using PowerShell's Troubleshooting Pack cmdlets.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Invoke-TroubleshootingPack\" and ScriptBlockText contains \"C:\\\\Windows\\\\Diagnostics\\\\System\\\\PCW\" and ScriptBlockText contains \"-AnswerFile\" and ScriptBlockText contains \"-Unattended\")\n\n\n\n"}
{"prompt": "I want to detect suspicious PowerShell invocations that might indicate malicious activity, focusing on specific indicators like command-line arguments and module usage.", "response": "preset = xdr_event_log\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter ((ContextInfo contains \"-nop\" and ContextInfo contains \" -w \" and ContextInfo contains \"hidden\" and ContextInfo contains \" -c \" and ContextInfo contains \"[Convert]::FromBase64String\") or (ContextInfo contains \" -w \" and ContextInfo contains \"hidden\" and ContextInfo contains \"-noni\" and ContextInfo contains \"-nop\" and ContextInfo contains \" -c \" and ContextInfo contains \"iex\" and ContextInfo contains \"New-Object\") or (ContextInfo contains \" -w \" and ContextInfo contains \"hidden\" and ContextInfo contains \"-ep\" and ContextInfo contains \"bypass\" and ContextInfo contains \"-Enc\") or (ContextInfo contains \"powershell\" and ContextInfo contains \"reg\" and ContextInfo contains \"add\" and ContextInfo contains \"HKCU\\\\software\\\\microsoft\\\\windows\\\\currentversion\\\\run\") or (ContextInfo contains \"bypass\" and ContextInfo contains \"-noprofile\" and ContextInfo contains \"-windowstyle\" and ContextInfo contains \"hidden\" and ContextInfo contains \"new-object\" and ContextInfo contains \"system.net.webclient\" and ContextInfo contains \".download\") or (ContextInfo contains \"iex\" and ContextInfo contains \"New-Object\" and ContextInfo contains \"Net.WebClient\" and ContextInfo contains \".Download\")) and  not ((ContextInfo contains \"(New-Object System.Net.WebClient).DownloadString('https:\n\n\n\n"}
{"prompt": "I want to find logs that show the SSHD Error Message CVE-2018-15473.", "response": "datamodel\n| filter _raw_log contains \"error: buffer_get_ret: trying to get more bytes 1907 than in buffer 308 [preauth]\"\n\n\n\n"}
{"prompt": "I want to find events where Ntds.dit is dumped to suspicious locations on endpoints.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter ((provider_name = \"ESENT\" and action_evtlog_event_id = 325 and Data contains \"ntds.dit\") and (Data contains \":\\\\ntds.dit\" or Data ~= \".*\\\\Appdata\\\\.*\" or Data ~= \".*\\\\Desktop\\\\.*\" or Data ~= \".*\\\\Downloads\\\\.*\" or Data ~= \".*\\\\Perflogs\\\\.*\" or Data ~= \".*\\\\Temp\\\\.*\" or Data ~= \".*\\\\Users\\\\Public\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances where Verclsid.exe is running COM objects with the \"/S\" and \"/C\" command line parameters.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\verclsid\\.exe\" or actor_process_file_original_name = \"verclsid.exe\") and (action_process_image_command_line contains \"/S\" and action_process_image_command_line contains \"/C\"))\n\n\n\n"}
{"prompt": "I want to find out if any intrusion payload URLs have been accessed by more than 10 unique users within the last 24 hours, based on data from Symantec EP.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type = \"Security\"\n| filter xdm.target.url != null\n| comp values(xdm.alert.name) as alert_name,\nvalues(xdm.event.description) as alert_desc,\nvalues(xdm.observer.action) as action,\nvalues(xdm.event.type) as event_type,\nvalues(xdm.source.user.username) as users,\nvalues(xdm.source.ipv4) as host_src,\nvalues(xdm.target.ipv4) as host_dst by xdm.target.url\n| filter array_length(users) >= 10"}
{"prompt": "I want to see detections related to ScreenConnect Web Shell execution on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\ScreenConnect\\.Service\\.exe\" and (action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\csc\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see events related to processes on endpoints that use the 'chattr' command with the '-i' flag to remove file immutability.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/chattr\" and action_process_image_command_line contains \" -i \")\n\n\n\n"}
{"prompt": "I want to see alerts about security settings being updated on OCSP Responder Services, especially if they indicate potential attacks.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"5124\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where delegation access is enabled for any mailbox within Infosys. Specifically, I need to see when the \"GrantSendOnBehalfTo\" permission is set and who it's granted to.", "response": "config case_sensitive = false\n| dataset = msft_o365_exchange_online_raw\n| filter Operation IN (\"Set-Mailbox\")\n| alter grantedto = arrayindex(regextract(parameters, \"\\\"Name\\\":\\\"([^\\\"]+)\"), 1),\ngranteduser = arrayindex(regextract(parameters, \"\\\"Value\\\":\\\"([^\\\"]+)\"), 1)\n| filter grantedto = \"GrantSendOnBehalfTo\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to detect suspicious activity related to clearing or modifying event logs on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wevtutil\\.exe\" and (action_process_image_command_line contains \"clear-log \" or action_process_image_command_line contains \" cl \" or action_process_image_command_line contains \"set-log \" or action_process_image_command_line contains \" sl \" or action_process_image_command_line contains \"lfn:\")) or ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \"Clear-EventLog \" or action_process_image_command_line contains \"Remove-EventLog \" or action_process_image_command_line contains \"Limit-EventLog \" or action_process_image_command_line contains \"Clear-WinEvent \")) or ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\") and action_process_image_command_line contains \"ClearEventLog\")) and  not ((actor_process_image_path in (\"C:\\\\Windows\\\\SysWOW64\\\\msiexec.exe\", \"C:\\\\Windows\\\\System32\\\\msiexec.exe\") and action_process_image_command_line contains \" sl \"))\n\n\n\n"}
{"prompt": " I want to see events where someone was added to an O365 MFA exception list, specifically looking at events with IDs 4728 and 4732 that mention \"A member was added\" along with \"-EXCEPTION\" and \"GSG-\". Please show me the event ID, description, usernames involved, and any relevant groups. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter xdm.event.id in (\"4728\", \"4732\")\n| filter xdm.event.description contains \"A member was added\" and (xdm.event.description contains \"-EXCEPTION\" and xdm.event.description contains \"GSG-\")\n| fields xdm.event.id, xdm.event.description, xdm.source.user.username,\nxdm.target.user.groups, xdm.target.user.username,\n*"}
{"prompt": "I want to see alerts related to potential EmpireMonkey activity, specifically those involving processes with command lines containing \"/e:jscript\" and \"\\\\Local\\\\Temp\\\\Errors.bat\".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"/e:jscript\" and action_process_image_command_line contains \"\\\\Local\\\\Temp\\\\Errors.bat\")\n\n\n\n"}
{"prompt": "I want to see events related to blocked device installations on my endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 6423\n\n\n\n"}
{"prompt": " I want to see if any firewall admins in the USA region have modified 10 or more objects within a 5-minute window in the CheckPoint SmartConsole.", "response": "config case_sensitive = false\n| dataset = check_point_smartconsole_raw\n| bin _time span = 5m\n| filter operation = \"Modify Object\" and lowercase(administrator) in (\"yuvaraja_kuppan\", \"paulraj_selvaraj01\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(subject) as result,\nvalues(_product) as product,\ncount() as matched_events by administrator,\n_time\n| filter matched_events >= 10\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect potential instances of SolidPDFCreator.DLL being sideloaded through image loading.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\SolidPDFCreator\\.dll\" and  not ((actor_process_image_path ~= \".*\\\\SolidPDFCreator\\.exe\" and (action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\SolidDocuments\\\\SolidPDFCreator\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\SolidDocuments\\\\SolidPDFCreator\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see events related to Windows binaries writing suspicious file extensions.", "response": "datamodel\n| filter ((((xdm.target.process.name ~= \".*\\\\csrss\\.exe\" or xdm.target.process.name ~= \".*\\\\lsass\\.exe\" or xdm.target.process.name ~= \".*\\\\RuntimeBroker\\.exe\" or xdm.target.process.name ~= \".*\\\\sihost\\.exe\" or xdm.target.process.name ~= \".*\\\\smss\\.exe\" or xdm.target.process.name ~= \".*\\\\wininit\\.exe\" or xdm.target.process.name ~= \".*\\\\winlogon\\.exe\") or (xdm.source.process.name ~= \".*\\\\csrss\\.exe\" or xdm.source.process.name ~= \".*\\\\lsass\\.exe\" or xdm.source.process.name ~= \".*\\\\RuntimeBroker\\.exe\" or xdm.source.process.name ~= \".*\\\\sihost\\.exe\" or xdm.source.process.name ~= \".*\\\\smss\\.exe\" or xdm.source.process.name ~= \".*\\\\wininit\\.exe\" or xdm.source.process.name ~= \".*\\\\winlogon\\.exe\")) and (xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\" or xdm.target.file.filename ~= \".*\\.hta\" or xdm.target.file.filename ~= \".*\\.iso\" or xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.txt\" or xdm.target.file.filename ~= \".*\\.vbe\" or xdm.target.file.filename ~= \".*\\.vbs\")) or (((xdm.target.process.name ~= \".*\\\\dllhost\\.exe\" or xdm.target.process.name ~= \".*\\\\rundll32\\.exe\" or xdm.target.process.name ~= \".*\\\\svchost\\.exe\") or (xdm.source.process.name ~= \".*\\\\dllhost\\.exe\" or xdm.source.process.name ~= \".*\\\\rundll32\\.exe\" or xdm.source.process.name ~= \".*\\\\svchost\\.exe\")) and (xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.hta\" or xdm.target.file.filename ~= \".*\\.iso\" or xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.vbe\" or xdm.target.file.filename ~= \".*\\.vbs\"))) and  not (((xdm.target.process.name = \"C:\\\\Windows\\\\System32\\\\dllhost.exe\" or xdm.source.process.name = \"C:\\\\Windows\\\\System32\\\\dllhost.exe\") and (xdm.target.file.filename ~= \".*\\:\\\\Users\\\\.*\" and xdm.target.file.filename contains \"\\\\AppData\\\\Local\\\\Temp\\\\__PSScriptPolicyTest_\") and xdm.target.file.filename ~= \".*\\.ps1\") or ((xdm.target.process.name = \"C:\\\\Windows\\\\system32\\\\svchost.exe\" or xdm.source.process.name = \"C:\\\\Windows\\\\system32\\\\svchost.exe\") and (xdm.target.file.filename ~= \".*C\\:\\\\Windows\\\\System32\\\\GroupPolicy\\\\DataStore\\\\.*\" and xdm.target.file.filename ~= \".*\\\\sysvol\\\\.*\" and xdm.target.file.filename ~= \".*\\\\Policies\\\\.*\" and xdm.target.file.filename ~= \".*\\\\Machine\\\\Scripts\\\\Startup\\\\.*\") and (xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.bat\")))\n\n\n\n"}
{"prompt": "I want to see all instances where an Authentication Policy Change occurred, including when a new trust was created or removed.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4706\", \"4707\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ibpmeventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious processes on endpoints that use the 'mount' command with the 'hidepid=2' parameter.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/mount\" and (action_process_image_command_line contains \"hidepid=2\" and action_process_image_command_line contains \" -o \"))\n\n\n\n"}
{"prompt": "I want to see all DLP incidents from Clearswift where the sender is any of my usernames and the recipients are not from a specific domain.", "response": "config case_sensitive = false\n| datamodel dataset = clearswift_dlp_raw\n| filter xdm.email.sender ~= \"<usernames>\" and xdm.email.recipients !~= \"<domain>\""}
{"prompt": "I want to see potential instances of RoboForm.DLL being sideloaded on my system.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\roboform\\.dll\" or action_module_path ~= \".*\\\\roboform\\-x64\\.dll\") and  not (((actor_process_image_path ~= \"\\ C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Siber\\ Systems\\\\AI\\ RoboForm\\\\.*\" or actor_process_image_path ~= \"\\ C\\:\\\\Program\\ Files\\\\Siber\\ Systems\\\\AI\\ RoboForm\\\\.*\") and (actor_process_image_path ~= \".*\\\\robotaskbaricon\\.exe\" or actor_process_image_path ~= \".*\\\\robotaskbaricon\\-x64\\.exe\")))\n\n\n\n"}
{"prompt": "I want to find instances where a public AWS RDS database has been restored.", "response": "dataset = amazon_aws_raw\n| alter responseElements_publiclyAccessible = json_extract_scalar(responseElements , \"$.publiclyAccessible\")\n| filter (eventSource = \"rds.amazonaws.com\" and responseElements.publiclyAccessible = \"true\" and eventName = \"RestoreDBInstanceFromDBSnapshot\")\n\n\n\n"}
{"prompt": "I want to detect instances where an attacker might be enumerating local firewall rules using PowerShell commands like \"Get-NetFirewallRule\" or \"Show-NetFirewallRule\".", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter ((Payload contains \"Get-NetFirewallRule\" or Payload contains \"Show-NetFirewallRule\") or (ContextInfo contains \"Get-NetFirewallRule\" or ContextInfo contains \"Show-NetFirewallRule\"))\n\n\n\n"}
{"prompt": "I want to see which processes on Linux systems are used to enumerate kernel modules.", "response": "/* process where host.os.type == \"linux\" and event.type == \"start\" and (and process.parent.user.id != \"0\") or process.name == \"lsmod\") and not process.parent.name : (\"vboxmanage\", \"virtualbox\", \"prime-offload\", \"vboxdrv.sh\") and not process.group_leader.name : \"qualys-cloud-agent\" */\nconfig case_sensitive = false\n| datamodel dataset = xdr_data\n| filter xdm.source.host.os_family = XDM_CONST.OS_FAMILY_LINUX and (xdm.source.process.name contains \"kmod\" and xdm.source.process.name contains \"list\") or (xdm.source.process.name contains \"modinfo\" and xdm.source.process.parent_id != \"0\") or (xdm.source.process.name contains \"depmod\" and (xdm.source.process.name contains \"--all\" or xdm.source.process.name contains \"-a\") and xdm.source.process.parent_id != \"0\") or (xdm.source.process.name contains \"lsmod\")\n| fields *"}
{"prompt": "I want to see alerts for processes that aren't browsers communicating with Google APIs, as this could be a sign of covert command and control activity like GC2.", "response": "#N/A"}
{"prompt": "I want to find all instances of potential exploitation attempts targeting CVE-2020-5902 in F5 BIG-IP systems.", "response": "datamodel\n| filter (xdm.network.http.url contains \"/tmui/\" or xdm.network.http.url contains \"/hsqldb\") and (xdm.network.http.url contains \"..;/\" or xdm.network.http.url contains \".jsp/..\")\n\n\n\n"}
{"prompt": "I want to see events that show suspicious PowerShell downloads and executions.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"IEX ((New-Object Net.WebClient).DownloadString\" or action_process_image_command_line contains \"IEX (New-Object Net.WebClient).DownloadString\" or action_process_image_command_line contains \"IEX((New-Object Net.WebClient).DownloadString\" or action_process_image_command_line contains \"IEX(New-Object Net.WebClient).DownloadString\" or action_process_image_command_line contains \" -command (New-Object System.Net.WebClient).DownloadFile(\" or action_process_image_command_line contains \" -c (New-Object System.Net.WebClient).DownloadFile(\")\n\n\n\n"}
{"prompt": "I want to see all Windows events related to high privilege admin activities with role separation enabled.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4897\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where PowerShell policies are changed to an insecure level.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\") or (action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\")) and (action_process_image_command_line contains \"-executionpolicy \" or action_process_image_command_line contains \" -ep \" or action_process_image_command_line contains \" -exec \") and (action_process_image_command_line contains \"Bypass\" or action_process_image_command_line contains \"Unrestricted\"))\n\n\n\n"}
{"prompt": "I want to detect when someone is installing or starting Virtualbox VMs on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"VBoxRT.dll,RTR3Init\" or action_process_image_command_line contains \"VBoxC.dll\" or action_process_image_command_line contains \"VBoxDrv.sys\") or (action_process_image_command_line contains \"startvm\" or action_process_image_command_line contains \"controlvm\"))\n\n\n\n"}
{"prompt": "I want to find instances of PowerShell code using rundll32 to obfuscate commands.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"&&\" and ScriptBlockText contains \"rundll32\" and ScriptBlockText contains \"shell32.dll\" and ScriptBlockText contains \"shellexec_rundll\") and (ScriptBlockText contains \"value\" or ScriptBlockText contains \"invoke\" or ScriptBlockText contains \"comspec\" or ScriptBlockText contains \"iex\"))\n\n\n\n"}
{"prompt": "I want to see a list of uncommon child processes created by SndVol.exe on endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\SndVol\\.exe\" and  not ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" and action_process_image_command_line contains \" shell32.dll,Control_RunDLL \"))\n\n\n\n"}
{"prompt": "I want to detect potential malicious activity on Amazon EC2 instances by identifying suspicious patterns of user creation and termination.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n\n| filter eventName IN (\"CreateUser\", \"TerminateInstances\", \"RunInstances\")\n| sort asc _time\n| bin _time span = 5m\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = json_extract_scalar(requestParameters, \"$.groupId\"),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress)\n| fields account_id, eventname, type, source_username,\ntarget_username, awsRegion, groupid, errorCode,\nuserAgent, srcaddr, username, bucketName, _time,\n_insert_time\n| alter pattern = if(eventname = \"CreateUser\", \"E1\", \"E2\")\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by source_username,\naccount_id\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events ~= \"[E1,]+E2\"\n| alter aggregation_criteria = \"ileventdesc\",\naggregation_criteria1 = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "{I want to detect when the RemCom service is installed on endpoints.} \n\n\nLet me know if you need help with any other prompts!", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter ((provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (ServiceName = \"RemComSvc\" or actor_process_image_path ~= \".*\\\\RemComSvc\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see SymantecAV events flagged as \"Unwanted Software\" from Zscaler, including details like the affected user, process, IP addresses, and downloaded files.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Risk\")\n| alter hostname = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| filter xdm.target.file.sha256 != null and hostname != null\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\ndownload_site = arrayindex(regextract(symantec_ep_raw._raw_log, \"Download site:\\s([^\\,]+)\"), 0),\ndownloaded_by = arrayindex(regextract(symantec_ep_raw._raw_log, \"Downloaded by:\\s([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlast(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(server_name) as server_name,\nvalues(xdm.source.user.username) as username,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ips,\nvalues(xdm.target.ipv4) as dst_ips,\nvalues(download_site) as download_site,\nvalues(downloaded_by) as downloaded_by,\nvalues(xdm.target.file.sha256) as file_hash by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nxdm.target.host.hostname\n| join type = left\n(datamodel dataset = zscaler_nssweblog_raw\n| filter xdm.source.user.username contains \"@\" and xdm.network.application_protocol_category contains \"shareware\"\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.sam_account_name,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| arrayexpand xdm.source.host.ipv4_addresses\n| filter incidr(xdm.source.host.ipv4_addresses, \"10.0.0.0/8\") = true or incidr(xdm.source.host.ipv4_addresses, \"192.168.0.0/16\") = true or incidr(xdm.source.host.ipv4_addresses, \"172.16.0.0./12\") = true\n| alter machine_ip = xdm.source.host.ipv4_addresses\n| comp values(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url by machine_ip,\nuser_dst,\nMachinename\n) as proxyevents(proxyevents.machine_ip = xdm.target.ipv4 or proxyevents.user_dst = xdm.source.user.sam_account_name or proxyevents.Machinename = `xdm.target.host.hostname`)\n| filter (ip_src != null or user_dst != null or Machinename != null)\n| alter process = replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_address = replace(replace(replace(to_string(ip_address), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nrisk_name = replace(replace(replace(to_string(risk_name), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nfile_name = arrayindex(split(replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"), \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(process, file_name, \"\")"}
{"prompt": "I want to see events where PowerShell is used to retrieve information about the LSASS process.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Get-Process lsass\"\n\n\n\n"}
{"prompt": "I want to find out which users are repeatedly receiving emails with malicious links or files.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter eventType in (\"Malware\", \"Ransomware\")\n| alter headerTo_array = headerTo -> []\n| arrayexpand headerTo_array\n| alter headerTo_string = json_extract_scalar(headerTo_array, \"$.\"),\nfile_details = json_extract(details, \"$.fileInfo\")\n| filter headerTo_string ~= \"<domian>\"\n| comp count() as matched_events,\nvalues(eventType) as eventType,\nvalues(headerFrom) as headerFrom,\nfirst(file_details) as file_details by headerTo_string\n| alter file_details = arrayindex(file_details -> [], 0)\n| alter file_name = json_extract_scalar(file_details, \"$.fileName\"),\nfile_hash = json_extract_scalar(file_details, \"$.fileSha256\"),\nthreat_name = json_extract_scalar(file_details, \"$.threatName\")\n| filter matched_events >= 5"}
{"prompt": "I want to see a list of usernames that have triggered multiple login attempts on Cisco ASA or Fortinet Fortigate devices within a one minute timeframe, along with the total number of events and the time difference between the first and last event.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw)\n| filter xdm.event.original_event_type ~= \"113005|39426\"\n| filter xdm.event.outcome_reason != \"sslvpn_login_unknown_user\"\n| alter username = if(xdm.target.user.username = null, xdm.source.user.username, xdm.target.user.username)\n| alter deviceAddress = if(xdm.observer.product = \"ASA\", cisco_asa_raw._final_reporting_device_ip, if(xdm.observer.product = \"Fortigate\", fortinet_fortigate_raw._final_reporting_device_ip, fortinet_fortigate1_raw._final_reporting_device_ip))\n| filter username !~= \"\\B\\*\\*\\*\\*\\*\\B\"\n| alter bin_time = _time\n| bin bin_time span = 1M\n| comp min(_time) as First_EventTimestamp,\nmax(_time) as Latest_EventTimestamp,\nvalues(xdm.source.user.username) as Username_List,\ncount() as EventCount by xdm.source.user.username,\nbin_time,\nxdm.observer.product,\ndeviceAddress\n| alter Events_TimeDiff_in_Seconds = timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\"),\nAlert_Cat = \"Brute Force\"\n| filter EventCount >= 10"}
{"prompt": "I want to see all events related to buffer overflow attempts.", "response": "datamodel\n| filter ( contains \"attempt to execute code on stack by\" or  contains \"FTP LOGIN FROM .\\* 0bin0sh\" or  contains \"rpc.statd[\\\\d+]: gethostbyname error for\" or  contains \"AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA\")\n\n\n\n"}
{"prompt": "I want to detect potential malware activity by finding DNS queries sent to Devtunnels domains.", "response": "datamodel\n| filter xdm.network.dns.dns_question.name ~= \".*\\.devtunnels\\.ms\"\n\n\n\n"}
{"prompt": "I want to see network connections initiated by processes to ngrok domains.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (Initiated = \"true\" and (action_external_hostname ~= \".*\\.ngrok\\-free\\.app\" or action_external_hostname ~= \".*\\.ngrok\\-free\\.dev\" or action_external_hostname ~= \".*\\.ngrok\\.app\" or action_external_hostname ~= \".*\\.ngrok\\.dev\" or action_external_hostname ~= \".*\\.ngrok\\.io\"))\n\n\n\n"}
{"prompt": "I want to see alerts for password changes made by users on my red carpet list.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4723\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type)\n| alter target_user = if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<domain>\", rtrim(xdm.target.user.username, \"<domain>\"), if(xdm.target.user.username ~= \"<user>\", ltrim(xdm.target.user.username, \"<user>\\\\\"), xdm.target.user.username)))\n| join type = inner\n(dataset = redcarpet_users_list\n| fields username\n) as redcarpusers redcarpusers.username = target_user\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_user\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see potential exploitation attempts targeting CVE-2022-44877 on Centos Web Panels.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and (xdm.network.http.url contains \"/login/index.php\" and xdm.network.http.url contains \"login=\") and (xdm.network.http.url contains \"login=$(\" or xdm.network.http.url contains \"base64\" or xdm.network.http.url contains \"subprocess\" or xdm.network.http.url contains \"socket\" or xdm.network.http.url contains \"${IFS}\" or xdm.network.http.url contains \"cHl0aG9u\" or xdm.network.http.url contains \"B5dGhvb\" or xdm.network.http.url contains \"weXRob2\"))\n\n\n\n"}
{"prompt": "I want to find out if anyone has recently created an AWS IAM user or access key that indicates potential use with S3 Browser.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"iam.amazonaws.com\" and eventName in (\"CreateUser\", \"CreateAccessKey\") and userAgent contains \"S3 Browser\")\n\n\n\n"}
{"prompt": "I want to see activities that use `wmic.exe` to check for Windows hotfixes.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"wmic.exe\" or action_process_image_path ~= \".*\\\\WMIC\\.exe\") and action_process_image_command_line contains \" qfe\")\n\n\n\n"}
{"prompt": "I want to find instances where attackers are using Findstr with specific flags for evasion techniques.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"findstr\" or action_process_image_path ~= \".*findstr\\.exe\" or actor_process_file_original_name = \"FINDSTR.EXE\") and (((action_process_image_command_line contains \" /v \" or action_process_image_command_line contains \" -v \") and (action_process_image_command_line contains \" /l \" or action_process_image_command_line contains \" -l \")) or ((action_process_image_command_line contains \" /s \" or action_process_image_command_line contains \" -s \") and (action_process_image_command_line contains \" /i \" or action_process_image_command_line contains \" -i \")))\n\n\n\n"}
{"prompt": "I want to see events where PDQDeployRunner is executing suspicious child processes.", "response": "preset = xdr_process\n| filter (actor_process_image_path contains \"\\\\PDQDeployRunner-\" and ((action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\csc\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\dllhost\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\msiexec\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\scriptrunner\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\wsl\\.exe\") or (action_process_image_path ~= \".*\\:\\\\ProgramData\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\TEMP\\\\.*\" or action_process_image_path contains \"\\\\AppData\\\\Local\\\\Temp\") or (action_process_image_command_line contains \" -decode \" or action_process_image_command_line contains \" -enc \" or action_process_image_command_line contains \" -encodedcommand \" or action_process_image_command_line contains \" -w hidden\" or action_process_image_command_line contains \"DownloadString\" or action_process_image_command_line contains \"FromBase64String\" or action_process_image_command_line contains \"http\" or action_process_image_command_line contains \"iex \" or action_process_image_command_line contains \"Invoke-\")))\n\n\n\n"}
{"prompt": "I want to find suspicious processes on endpoints that are writing malicious files to the Fonts folder.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"echo\" or action_process_image_command_line contains \"copy\" or action_process_image_command_line contains \"type\" or action_process_image_command_line contains \"file createnew\" or action_process_image_command_line contains \"cacls\") and action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\Fonts\\\\.*\" and (action_process_image_command_line contains \".sh\" or action_process_image_command_line contains \".exe\" or action_process_image_command_line contains \".dll\" or action_process_image_command_line contains \".bin\" or action_process_image_command_line contains \".bat\" or action_process_image_command_line contains \".cmd\" or action_process_image_command_line contains \".js\" or action_process_image_command_line contains \".msh\" or action_process_image_command_line contains \".reg\" or action_process_image_command_line contains \".scr\" or action_process_image_command_line contains \".ps\" or action_process_image_command_line contains \".vb\" or action_process_image_command_line contains \".jar\" or action_process_image_command_line contains \".pl\" or action_process_image_command_line contains \".inf\" or action_process_image_command_line contains \".cpl\" or action_process_image_command_line contains \".hta\" or action_process_image_command_line contains \".msi\" or action_process_image_command_line contains \".vbs\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential remote XSL execution attacks that use Msxsl.exe and download content from a URL.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\msxsl\\.exe\" and action_process_image_command_line contains \"http\")\n\n\n\n"}
{"prompt": "I want to see alerts for potential compromised 3CXDesktopApp downloads of ICO files from suspicious URLs.", "response": "datamodel\n| filter (xdm.network.http.url contains \"IconStorages/images/main/icon\" and xdm.network.http.url contains \".ico\")\n\n\n\n"}
{"prompt": "I want to find instances where malicious scripts are used to dump credentials from Veeam Backup Servers on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"[Credentials]\" and ScriptBlockText contains \"[Veeam.Backup.Common.ProtectedStorage]::GetLocalString\" and ScriptBlockText contains \"Invoke-Sqlcmd\" and ScriptBlockText contains \"Veeam Backup and Replication\")\n\n\n\n"}
{"prompt": "I want to see which users have had more than 4 failed login attempts while using the VPN in the last few hours.", "response": "dataset = fortinet_fortigate_raw\n| alter Desc_String = if(_broker_device_name contains \"<broker>\", \".\")\n| fields duser, cefDeviceEventClassId, reason, FTNTFGTlogid,\n_final_reporting_device_ip, _broker_device_name,\nsrc, sourceTranslatedAddress, dst, destinationTranslatedAddress,\nsourceTranslatedPort, destinationTranslatedPort,\n_broker_device_name, Desc_String\n| filter ftntfgtlogid in (\"0101039426\") and duser not in (\"user\", \"test\", \"user1\", \"admin\")\n| comp count(_time) as DistinctCount,\nvalues(reason) as MultipleEvents by duser,\nFTNTFGTlogid,\n_final_reporting_device_ip,\ndst addrawdata = true as RW\n| filter DistinctCount > 4\n| alter RW1 = to_json_string(RW)\n| alter DS = RW1 -> [0]\n| alter Desc_String = DS -> Desc_String"}
{"prompt": "I want to find any instances of suspicious errors related to the OpenSSH daemon.", "response": "datamodel\n| filter ( contains \"unexpected internal error\" or  contains \"unknown or unsupported key type\" or  contains \"invalid certificate signing key\" or  contains \"invalid elliptic curve value\" or  contains \"incorrect signature\" or  contains \"error in libcrypto\" or  contains \"unexpected bytes remain after decoding\" or  contains \"fatal: buffer_get_string: bad string\" or  contains \"Local: crc32 compensation attack\" or  contains \"bad client public DH value\" or  contains \"Corrupted MAC on input\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential Vivaldi_elf.DLL sideloading attacks detected by Windows Event Log.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\vivaldi\\_elf\\.dll\" and  not ((actor_process_image_path ~= \".*\\\\Vivaldi\\\\Application\\\\vivaldi\\.exe\" and action_module_path ~= \".*\\\\Vivaldi\\\\Application\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious executable file creation by looking for unusual filenames.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\:\\\\\\$Recycle\\.Bin\\.exe\" or xdm.target.file.filename ~= \".*\\:\\\\Documents\\ and\\ Settings\\.exe\" or xdm.target.file.filename ~= \".*\\:\\\\MSOCache\\.exe\" or xdm.target.file.filename ~= \".*\\:\\\\PerfLogs\\.exe\" or xdm.target.file.filename ~= \".*\\:\\\\Recovery\\.exe\" or xdm.target.file.filename ~= \".*\\.bat\\.exe\" or xdm.target.file.filename ~= \".*\\.sys\\.exe\")\n\n\n\n"}
{"prompt": "I want to find users who have triggered unauthorized access attempts on our IIS web servers at least 10 times in a single minute interval.  Please provide details about each event, including timestamps and associated URLs.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| bin _time span = 1m\n| join type = left\n(dataset = device_group_static_list\n| filter TYPE ~= \"microsoft iis\"\n| fields IP\n) as device_group device_group.IP = xdm.target.ipv4\n| filter IP != null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.network.http.response_code = XDM_CONST.HTTP_RSP_CODE_UNAUTHORIZED and xdm.source.ipv4 not in (\"<ip>\") and xdm.target.ipv4 not in (\"<ip>\") and xdm.source.user.username not in (\"-\", null)\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 10\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to see events related to suspicious execution of the Shell32 DLL through rundll32.exe in potentially dangerous locations like AppData, Temp folders, or %tmp%.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and ((action_process_image_command_line contains \"shell32.dll\" and action_process_image_command_line contains \"Control_RunDLL\") and (action_process_image_command_line contains \"%AppData%\" or action_process_image_command_line contains \"%LocalAppData%\" or action_process_image_command_line contains \"%Temp%\" or action_process_image_command_line contains \"%tmp%\" or action_process_image_command_line ~= \".*\\\\AppData\\\\.*\" or action_process_image_command_line ~= \".*\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see alerts about failed attempts to add SID History to accounts on my Windows devices.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4766\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see if Setres.exe is being used alongside Choice.exe on my endpoints.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\setres\\.exe\" and action_process_image_path ~= \".*\\\\choice\")\n\n\n\n"}
{"prompt": "I want to find instances where someone has modified sensitive RDP settings like allowing unauthorized users or disabling security features.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\Control\\\\Terminal\\ Server\\\\.*\" or action_registry_key_name ~= \".*\\\\Windows\\ NT\\\\Terminal\\ Services\\\\.*\") and action_registry_key_name ~= \".*\\\\Shadow\" and (action_registry_value_name in (\"DWORD (0x00000001)\", \"DWORD (0x00000002)\", \"DWORD (0x00000003)\", \"DWORD (0x00000004)\") or action_registry_data in (\"DWORD (0x00000001)\", \"DWORD (0x00000002)\", \"DWORD (0x00000003)\", \"DWORD (0x00000004)\"))) or ((action_registry_key_name ~= \".*\\\\Control\\\\Terminal\\ Server\\\\.*\" or action_registry_key_name ~= \".*\\\\Windows\\ NT\\\\Terminal\\ Services\\\\.*\") and (action_registry_key_name ~= \".*\\\\DisableRemoteDesktopAntiAlias\" or action_registry_key_name ~= \".*\\\\DisableSecuritySettings\" or action_registry_key_name ~= \".*\\\\fAllowUnsolicited\" or action_registry_key_name ~= \".*\\\\fAllowUnsolicitedFullControl\") and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\")) or (action_registry_key_name contains \"\\\\Control\\\\Terminal Server\\\\InitialProgram\" or action_registry_key_name contains \"\\\\Control\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp\\\\InitialProgram\" or action_registry_key_name contains \"\\\\services\\\\TermService\\\\Parameters\\\\ServiceDll\" or action_registry_key_name contains \"\\\\Windows NT\\\\Terminal Services\\\\InitialProgram\")\n\n\n\n"}
{"prompt": "I want to see all instances of the \"PUA - DIT Snapshot Viewer\" process, which is known to be malicious and related to credential access.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\ditsnap\\.exe\" or action_process_image_command_line contains \"ditsnap.exe\")\n\n\n\n"}
{"prompt": "I want to see detections for processes using DxCap.exe with a command line argument of \"-c\", which could indicate an attempt to bypass application whitelisting.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\DXCap\\.exe\" or actor_process_file_original_name = \"DXCap.exe\") and action_process_image_command_line contains \" -c \")\n\n\n\n"}
{"prompt": "I want to see alerts about when \"livekd.dmp\" files are created in C:\\\\Windows\\\\.", "response": "datamodel\n| filter xdm.target.file.filename = \"C:\\\\Windows\\\\livekd.dmp\"\n\n\n\n"}
{"prompt": "I want to find instances where files with suspicious extensions are downloaded from domains that aren't common TLDs like .com or .org.", "response": "datamodel\n| filter xdm.network.http.url in (\"exe\", \"vbs\", \"bat\", \"rar\", \"ps1\", \"doc\", \"docm\", \"xls\", \"xlsm\", \"pptm\", \"rtf\", \"hta\", \"dll\", \"ws\", \"wsf\", \"sct\", \"zip\") and  not ((xdm.network.http.domain ~= \".*\\.com\" or xdm.network.http.domain ~= \".*\\.org\" or xdm.network.http.domain ~= \".*\\.net\" or xdm.network.http.domain ~= \".*\\.edu\" or xdm.network.http.domain ~= \".*\\.gov\" or xdm.network.http.domain ~= \".*\\.uk\" or xdm.network.http.domain ~= \".*\\.ca\" or xdm.network.http.domain ~= \".*\\.de\" or xdm.network.http.domain ~= \".*\\.jp\" or xdm.network.http.domain ~= \".*\\.fr\" or xdm.network.http.domain ~= \".*\\.au\" or xdm.network.http.domain ~= \".*\\.us\" or xdm.network.http.domain ~= \".*\\.ch\" or xdm.network.http.domain ~= \".*\\.it\" or xdm.network.http.domain ~= \".*\\.nl\" or xdm.network.http.domain ~= \".*\\.se\" or xdm.network.http.domain ~= \".*\\.no\" or xdm.network.http.domain ~= \".*\\.es\"))\n\n\n\n"}
{"prompt": "I want to see events related to CVE-2021-1675 Print Spooler Exploitation attempts on endpoints.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName = \"\\\\\\\\\\*\\\\IPC$\" and RelativeTargetName = \"spoolss\" and AccessMask = \"0x3\" and ObjectType = \"File\")\n\n\n\n"}
{"prompt": "I want to see all instances where a group type was changed in Windows Event Log, along with details like the username involved, group membership, and any error codes or failure reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\ngroups = to_string(xdm.target.user.groups)\n| filter xdm.event.id = \"4764\" and xdm.source.user.username not in (\"Vinod_Krishnan04\", \"Thanigaivel_G01\", \"Renju_nettady\", \"sathish_kumarkp\", \"jayagovind\", \"chandrasekhar_m05\", \"bhaskar\", \"Vishwanath_BN\", \"suresh_kumars\", \"shashanka_vemula\", \"Rupesh_Dalvi01\", \"ak_jain\", \"harisha_nk\", \"jsenthil_kumar\", \"SanjeevKumar_Shahi\", \"nataraj_sm\", \"Kushal_Raut\", \"mohit_sharma27\", \"Aravindh_VM\", \"Sakthivel_Muthu\", \"Swaroop_Bopaiah\", \"VikramSingh_Jadon\", \"bharat_pise\", \"ayesh_sanap\", \"pranav_thombre\", \"chandrahas_sharma\", \"prashant_nikam03\", \"mohit_tyagi02\", \"arvind_gidroniya\", \"nandakumar_nk01\", \"girish_pande01\", \"Phillipjay_Estudillo\", \"Alok_Chaudhary\", \"Jaroslaw_Karasinski\", \"jaroslaw_szelag\", \"dawid_piotrowski\", \"T_Ciemnoczulowski\", \"Leos_Koukal\", \"kukol_ivan\", \"juan_lopez\", \"Jason_k\", \"Mark_Lynn\", \"jack_taffar\", \"Mark_Kitchens\", \"carroll_garvin\", \"Simon_Strauss\", \"Winston_Parham\", \"Blue_Chu\", \"Tom_Ge\", \"Allen.Huang01\", \"siju_george\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ibpmdestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find out if there are any instances of log4j attempts followed by accepted traffic in our firewall logs.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"log4j\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name ~= \"qualys\"\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.target.ipv4\n| filter (xdm.target.is_internal_ip = true or ip_address != null)\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| join type = left\n(datamodel dataset = check_point_vpn_1_firewall_1_raw\n| alter origin = check_point_vpn_1_firewall_1_raw.origin\n| filter xdm.observer.action = \"accept\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.is_internal_ip = false and xdm.source.asn.as_name ~= \"qualys\"\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.target.ipv4\n| filter (xdm.target.is_internal_ip = true or ip_address != null)\n| fields xdm.observer.action, xdm.source.ipv4 as fw_src_ip,\nxdm.source.port, xdm.event.description, xdm.target.ipv4,\nxdm.target.is_internal_ip\n) as fw_events fw_events.fw_src_ip = xdm.source.ipv4\n| filter fw_src_ip != null\n| comp values(*) as * by xdm.source.ipv4,\n_time\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to find PowerShell scripts that use DirectorySearcher to potentially exploit system directories. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"New-Object \" and ScriptBlockText contains \"System.DirectoryServices.DirectorySearcher\" and ScriptBlockText contains \".PropertiesToLoad.Add\" and ScriptBlockText contains \".findall()\" and ScriptBlockText contains \"Properties.name\")\n\n\n\n"}
{"prompt": "I want to see alerts for when platform admin accounts get locked out due to multiple logon failures.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id = \"4740\"\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n) as ent_admin_dst ent_admin_dst.username = xdm.target.user.username or ent_admin_dst.sam_account_name = xdm.target.user.username\n| filter (admin_type in (\"av_admin\", \"azure_cloud_admin\", \"bluecoat_admin\", \"byod_admin\", \"dmz_owner\", \"firewall_admin\", \"ilms_admin\", \"is_fusion_admin\", \"isg_qualys_admin\", \"nas_l1_admin\", \"nas_l1_l2_admin\", \"nas_l1_l2_l3_admin\", \"nas_l1_l3_admin\", \"nas_l2_admin\", \"nas_l2_l3_admin\", \"nas_l3_admin\", \"netscaler_admin\", \"network_admin\", \"network_ipt_admin\", \"nips_admin\", \"sccm_admin\", \"securid_admin\", \"sharepoint_admin\", \"unixr1_admin\", \"unixr2_admin\", \"win_accop\", \"win_admin\", \"win_admin_accop\") or security_groups in (\"Tier0Users\", \"Tier1Users\"))\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nhostname = arrayindex(regextract(xdm.event.description, \"Caller Computer Name:\\t([^\\n]+)\"), 0)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, hostname\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all terminated user activity related to Symantec AV events across my environment, including details like the user account, event type, risk name, process involved, and any actions taken.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.source.user.sam_account_name != null and xdm.source.user.sam_account_name !~= \"system|none\"\n| alter host_name = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| join type = left\n(dataset = pan_dss_raw\n| fields company_name, sam_account_name, ou\n) as adusers adusers.sam_account_name = xdm.source.user.sam_account_name\n| filter sam_account_name != null and company_name ~= \"^SEP|^SEPX\"\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1),\nfile_hash = xdm.target.file.sha256,\nusername = xdm.source.user.username,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nprocess = xdm.target.file.path,\nrisk_name = xdm.alert.name,\naction = xdm.observer.action\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\")\n| comp earliest(_time) as FirstEventTime,\nlast(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(directory) as directory,\nvalues(file_name) as file_name,\nvalues(file_extension) as file_extension,\nvalues(server_name) as aliashost,\nvalues(symantec_server_name) as symantec_server_name,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ips,\nvalues(xdm.target.ipv4) as dst_ips,\nvalues(xdm.alert.category) as category_alert,\ncount() as matched_events,\nvalues(xdm.event.type) as event_type,\nvalues(host_name) as host_name,\nvalues(to_string(OU)) as org_unit,\nvalues(company_name),\nvalues(xdm.target.file.sha256) as file_hash by xdm.source.user.sam_account_name"}
{"prompt": "I want to find instances where sdbinst.exe is used to install shims, potentially for malicious persistence.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\sdbinst\\.exe\" or actor_process_file_original_name = \"sdbinst.exe\") and action_process_image_command_line contains \".sdb\") and  not ((actor_process_image_path ~= \".*\\\\msiexec\\.exe\" and (action_process_image_command_line contains \":\\\\Program Files (x86)\\\\IIS Express\\\\iisexpressshim.sdb\" or action_process_image_command_line contains \":\\\\Program Files\\\\IIS Express\\\\iisexpressshim.sdb\")))\n\n\n\n"}
{"prompt": "I want to find potential malicious PowerShell code execution attempts that use encoding techniques like converting data types and manipulating strings.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (((action_process_image_command_line contains \"ToInt\" or action_process_image_command_line contains \"ToDecimal\" or action_process_image_command_line contains \"ToByte\" or action_process_image_command_line contains \"ToUint\" or action_process_image_command_line contains \"ToSingle\" or action_process_image_command_line contains \"ToSByte\") and (action_process_image_command_line contains \"ToChar\" or action_process_image_command_line contains \"ToString\" or action_process_image_command_line contains \"String\")) or ((action_process_image_command_line contains \"char\" and action_process_image_command_line contains \"join\") or (action_process_image_command_line contains \"split\" and action_process_image_command_line contains \"join\")))\n\n\n\n"}
{"prompt": "I want to see events related to suspicious child processes spawned by Microsoft OneNote.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\onenote\\.exe\" and ((actor_process_file_original_name in (\"bitsadmin.exe\", \"CertOC.exe\", \"CertUtil.exe\", \"Cmd.Exe\", \"CMSTP.EXE\", \"cscript.exe\", \"curl.exe\", \"HH.exe\", \"IEExec.exe\", \"InstallUtil.exe\", \"javaw.exe\", \"Microsoft.Workflow.Compiler.exe\", \"msdt.exe\", \"MSHTA.EXE\", \"msiexec.exe\", \"Msxsl.exe\", \"odbcconf.exe\", \"pcalua.exe\", \"PowerShell.EXE\", \"RegAsm.exe\", \"RegSvcs.exe\", \"REGSVR32.exe\", \"RUNDLL32.exe\", \"schtasks.exe\", \"ScriptRunner.exe\", \"wmic.exe\", \"WorkFolders.exe\", \"wscript.exe\") or (action_process_image_path ~= \".*\\\\AppVLP\\.exe\" or action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\certoc\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cmstp\\.exe\" or action_process_image_path ~= \".*\\\\control\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\curl\\.exe\" or action_process_image_path ~= \".*\\\\forfiles\\.exe\" or action_process_image_path ~= \".*\\\\hh\\.exe\" or action_process_image_path ~= \".*\\\\ieexec\\.exe\" or action_process_image_path ~= \".*\\\\installutil\\.exe\" or action_process_image_path ~= \".*\\\\javaw\\.exe\" or action_process_image_path ~= \".*\\\\mftrace\\.exe\" or action_process_image_path ~= \".*\\\\Microsoft\\.Workflow\\.Compiler\\.exe\" or action_process_image_path ~= \".*\\\\msbuild\\.exe\" or action_process_image_path ~= \".*\\\\msdt\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\msidb\\.exe\" or action_process_image_path ~= \".*\\\\msiexec\\.exe\" or action_process_image_path ~= \".*\\\\msxsl\\.exe\" or action_process_image_path ~= \".*\\\\odbcconf\\.exe\" or action_process_image_path ~= \".*\\\\pcalua\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regasm\\.exe\" or action_process_image_path ~= \".*\\\\regsvcs\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\scrcons\\.exe\" or action_process_image_path ~= \".*\\\\scriptrunner\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\svchost\\.exe\" or action_process_image_path ~= \".*\\\\verclsid\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\workfolders\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\")) or (action_process_image_path ~= \".*\\\\explorer\\.exe\" and (action_process_image_command_line contains \".hta\" or action_process_image_command_line contains \".vb\" or action_process_image_command_line contains \".wsh\" or action_process_image_command_line contains \".js\" or action_process_image_command_line contains \".ps\" or action_process_image_command_line contains \".scr\" or action_process_image_command_line contains \".pif\" or action_process_image_command_line contains \".bat\" or action_process_image_command_line contains \".cmd\")) or (action_process_image_path ~= \".*\\\\AppData\\\\.*\" or action_process_image_path ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\\\ProgramData\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\System32\\\\Tasks\\\\.*\")) and  not ((action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\current\\\\Teams\\.exe\" and action_process_image_command_line ~= \".*\\-Embedding\") or (action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\.*\" and action_process_image_path ~= \".*\\\\FileCoAuth\\.exe\" and action_process_image_command_line ~= \".*\\-Embedding\"))\n\n\n\n"}
{"prompt": "I want to see events related to potential exploitation attempts of CVE-2023-38331 using WinRAR and suspicious double extension files.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\WinRAR\\.exe\" or xdm.source.process.name ~= \".*\\\\WinRAR\\.exe\") and xdm.target.file.filename contains \"\\\\AppData\\\\Local\\\\Temp\\\\Rar$\" and xdm.target.file.filename ~= \"\\.[a-zA-Z0-9]{1,4}\\ \\.\")\n\n\n\n"}
{"prompt": "I want to see all RPC calls from the internet coming into my internal systems, specifically on port 135, logged by Cisco ASA, Fortinet Fortigate, and SonicWall NS devices. Please exclude any calls originating from a specific IP address \"<IP>\".", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter xdm.target.port in (135) and xdm.target.is_internal_ip = true and (not incidr(xdm.source.ipv4, \"<IP>\"))\n| fields *\n"}
{"prompt": "I want to detect potential exploitation of CVE-2024-3094 by identifying suspicious child processes spawned by the sshd process with a specific execution user.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\/sshd\" and (action_process_image_command_line ~= \"bash\\ \\-c.*\" or action_process_image_command_line ~= \"sh\\ \\-c.*\") and action_process_username = \"root\") or (actor_process_image_path ~= \".*\\/sshd\" and action_process_image_path ~= \".*\\/sshd\" and action_process_username = \"sshd\" and action_process_image_command_line contains \"root\"))\n\n\n\n"}
{"prompt": "I want to find suspicious instances where processes are launched with \"nohup\" and their command lines include paths within the /tmp directory.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/nohup\" and action_process_image_command_line contains \"/tmp/\")\n\n\n\n"}
{"prompt": "I want to find instances where Ngrok is being used with Remote Desktop Service based on events with ID 21 and source IP addresses containing \"16777216\".", "response": "datamodel\n| filter (xdm.event.id = 21 and xdm.source.ipv4 contains \"16777216\")\n\n\n\n"}
{"prompt": "I want to see Cortex XQL queries that detect Apache Segmentation Faults.", "response": "datamodel\n| filter _raw_log contains \"exit signal Segmentation Fault\"\n\n\n\n"}
{"prompt": "I want to see which users had unusually high download activity today compared to their average over the past week.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|youtube.com\"\n| comp avg(bytes_src) as current_day_download_byte,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\", \"\"\"non-interactive-user\"\"\")) and host_dst !~= \"ardownload.adobe.com|microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|youtube.com\"\n| comp avg(bytes_src) as 7_days_download_byte,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_download_byte) as 7_days_download_byte_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ipaddr)) as ipaddr,\nvalues(to_string(event_source)) as event_source,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(tcp_action)) as tcp_action,\nvalues(to_string(alias_host)) as alias_host,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(groups)) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nvalues(to_string(sc_status)) as sc_status,\nvalues(to_string(supplier_country)) as supplier_country,\nvalues(to_string(client_ip_country)) as client_ip_country,\nvalues(to_string(uri_scheme)) as uri_scheme,\nvalues(to_string(uri_port)) as uri_port by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_download_byte_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_download_byte > multiply(7_days_download_byte_avg, 3) and current_day_download_byte >= 10000000\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see if there are any unusual outbound connections using Kerberos on port 88 that might indicate an attacker trying to move laterally or gain more privileges.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter ((action_local_port = 88 or action_remote_port = 88) and Initiated = \"true\") and  not (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\lsass.exe\") and  not (actor_process_image_path in (\"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\", \"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\") or actor_process_image_path in (\"C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe\", \"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\") or actor_process_image_path ~= \".*\\\\tomcat\\\\bin\\\\tomcat8\\.exe\")\n\n\n\n"}
{"prompt": "I want to find instances of suspicious remote named pipe activity on endpoints, specifically looking for new or uncommon connections.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName = \"\\\\\\\\\\*\\\\IPC$\") and  not (RelativeTargetName in (\"atsvc\", \"samr\", \"lsarpc\", \"lsass\", \"winreg\", \"netlogon\", \"srvsvc\", \"protected_storage\", \"wkssvc\", \"browser\", \"netdfs\", \"svcctl\", \"spoolss\", \"ntsvcs\", \"LSM_API_service\", \"HydraLsPipe\", \"TermSrv_API_service\", \"MsFteWds\", \"sql\\\\query\", \"eventlog\"))\n\n\n\n"}
{"prompt": "I want to see events related to Blue Mockingbird's registry modifications on Windows systems.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\CurrentControlSet\\\\Services\\\\wercplsupport\\\\Parameters\\\\ServiceDll\"\n\n\n\n"}
{"prompt": "I want to monitor password changes for specific users like Andre Valentine, Chris Caldwell, and so on.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4723, 4724)\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = if(message contains \"CN=\", arrayindex(regextract(message, \"Account Name:\\t\\tCN\\=([^\\,]+)\\,\"), 0), event_data -> TargetUserName),\nTargetGroupName = if(message contains \"CN=\", event_data -> TargetUserName, arrayindex(regextract(message, \"Group Name:\\t\\t(.*?)\\r\\n\\tGroup Domain\"), 0)),\nTargetDomainName = event_data -> TargetDomainName,\nMessage_Description = if(event_id in (4723), \"An attempt was made to change an account's password\", if(event_id in (4734), \"An attempt was made to reset an accounts password\"))\n| filter SubjectUserName in (\"andre.valentine\", \"chris.caldwell\", \"cormac.twomey\", \"debbie.gonzalez\", \"diane.hanson\", \"dinesh.venugopal\", \"guy.brosseau\", \"jane.fogarty\", \"jason.marasigan\", \"kathy.juve\", \"monica.egger\", \"philip.cassidy\", \"rick.rosso\")"}
{"prompt": "I want to find suspicious activity related to Outlook persistence through registry modifications, specifically those affecting the homepage and Calendar/Inbox settings.", "response": "preset = xdr_registry\n| filter (((action_registry_key_name ~= \".*\\\\Software\\\\Microsoft\\\\Office\\\\.*\" or action_registry_key_name ~= \".*\\\\Outlook\\\\WebView\\\\.*\") and action_registry_key_name ~= \".*\\\\URL\") and (action_registry_key_name ~= \".*\\\\Calendar\\\\.*\" or action_registry_key_name ~= \".*\\\\Inbox\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect when a credential dumping tool creates a named pipe on an endpoint.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter (PipeName contains \"\\\\cachedump\" or PipeName contains \"\\\\lsadump\" or PipeName contains \"\\\\wceservicepipe\")\n\n\n\n"}
{"prompt": "I want to see alerts for processes using WMI (WMIC.exe) that were launched from Office applications like Word, Excel, or PowerPoint.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wbem\\\\WMIC\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and (actor_process_image_path ~= \".*\\\\winword\\.exe\" or actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find out if Wordpad is connecting to unusual ports on the network, which could be a sign of malicious activity.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter (Initiated = \"true\" and actor_process_image_path ~= \".*\\\\wordpad\\.exe\") and  not ((action_local_port in (80, 139, 443, 445, 465, 587, 993, 995) or action_remote_port in (80, 139, 443, 445, 465, 587, 993, 995)))\n\n\n\n"}
{"prompt": "I want to find potential Bumblebee malware activity by looking for instances where processes like \"wabmig.exe\", \"wab.exe\", or \"ImagingDevices.exe\" create remote threads using rundll32.exe.", "response": "datamodel\n| filter ((xdm.source.process.name ~= \".*\\\\wabmig\\.exe\" or xdm.source.process.name ~= \".*\\\\wab\\.exe\" or xdm.source.process.name ~= \".*\\\\ImagingDevices\\.exe\") and xdm.target.process.name ~= \".*\\\\rundll32\\.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts about administrators changing the system time on Windows machines.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4616\")\n| filter xdm.source.user.username not in (\"LOCAL SERVICE\") and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\"\n| alter srchostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps(wingrps.host_name = srchostname or wingrps.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE in (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_domain\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": " I want to see which file hashes have been accessed by at least 10 different machines. ", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter symantec_ep_raw._raw_log !~= \",Intrusion\\sURL:\"\n| alter hostname = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| filter xdm.target.file.sha256 != null and hostname != null\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\ndownload_site = arrayindex(regextract(symantec_ep_raw._raw_log, \"Download site:\\s([^\\,]+)\"), 0),\ndownloaded_by = arrayindex(regextract(symantec_ep_raw._raw_log, \"Downloaded by:\\s([^\\,]+)\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1),\nfile_hash = xdm.target.file.sha256,\nusername = xdm.source.user.username,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nprocess = xdm.target.file.path,\nrisk_name = xdm.alert.name,\naction = xdm.observer.action\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(directory) as directory,\nvalues(file_name) as file_name,\nvalues(file_extension) as file_extension,\nvalues(server_name) as aliashost,\nvalues(xdm.source.user.username) as username,\nvalues(symantec_server_name) as symantec_server_name,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ips,\nvalues(xdm.target.ipv4) as dst_ips,\nvalues(xdm.alert.category) as alert_category,\nvalues(hostname) as hostname,\nvalues(download_site) as download_site,\nvalues(downloaded_by) as downloaded_by by xdm.target.file.sha256\n| filter array_length(hostname) >= 10"}
{"prompt": "I want to see alerts for processes that might be evading detection by having their names changed.", "response": "preset = xdr_process\n| filter actor_process_file_original_name in (\"Cmd.Exe\", \"CONHOST.EXE\", \"7z.exe\", \"WinRAR.exe\", \"wevtutil.exe\", \"net.exe\", \"net1.exe\", \"netsh.exe\", \"InstallUtil.exe\") and  not ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\conhost\\.exe\" or action_process_image_path ~= \".*\\\\7z\\.exe\" or action_process_image_path ~= \".*\\\\WinRAR\\.exe\" or action_process_image_path ~= \".*\\\\wevtutil\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\net1\\.exe\" or action_process_image_path ~= \".*\\\\netsh\\.exe\" or action_process_image_path ~= \".*\\\\InstallUtil\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple SymantecWSS Phishing category URLs within an hour based on behavioral study.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and category ~= \"Phishing\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see alerts about outbound network connections initiated by Windows Script Interpreter processes.", "response": "#N/A"}
{"prompt": "I want to find events where legitimate Windows applications like Wordpad or Notepad are dropping suspicious scripts like .ps1 or .bat files.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\eqnedt32\\.exe\" or xdm.target.process.name ~= \".*\\\\wordpad\\.exe\" or xdm.target.process.name ~= \".*\\\\wordview\\.exe\" or xdm.target.process.name ~= \".*\\\\certutil\\.exe\" or xdm.target.process.name ~= \".*\\\\certoc\\.exe\" or xdm.target.process.name ~= \".*\\\\CertReq\\.exe\" or xdm.target.process.name ~= \".*\\\\Desktopimgdownldr\\.exe\" or xdm.target.process.name ~= \".*\\\\esentutl\\.exe\" or xdm.target.process.name ~= \".*\\\\mshta\\.exe\" or xdm.target.process.name ~= \".*\\\\AcroRd32\\.exe\" or xdm.target.process.name ~= \".*\\\\RdrCEF\\.exe\" or xdm.target.process.name ~= \".*\\\\hh\\.exe\" or xdm.target.process.name ~= \".*\\\\finger\\.exe\") or (xdm.source.process.name ~= \".*\\\\eqnedt32\\.exe\" or xdm.source.process.name ~= \".*\\\\wordpad\\.exe\" or xdm.source.process.name ~= \".*\\\\wordview\\.exe\" or xdm.source.process.name ~= \".*\\\\certutil\\.exe\" or xdm.source.process.name ~= \".*\\\\certoc\\.exe\" or xdm.source.process.name ~= \".*\\\\CertReq\\.exe\" or xdm.source.process.name ~= \".*\\\\Desktopimgdownldr\\.exe\" or xdm.source.process.name ~= \".*\\\\esentutl\\.exe\" or xdm.source.process.name ~= \".*\\\\mshta\\.exe\" or xdm.source.process.name ~= \".*\\\\AcroRd32\\.exe\" or xdm.source.process.name ~= \".*\\\\RdrCEF\\.exe\" or xdm.source.process.name ~= \".*\\\\hh\\.exe\" or xdm.source.process.name ~= \".*\\\\finger\\.exe\")) and (xdm.target.file.filename ~= \".*\\.ps1\" or xdm.target.file.filename ~= \".*\\.bat\" or xdm.target.file.filename ~= \".*\\.vbs\" or xdm.target.file.filename ~= \".*\\.scf\" or xdm.target.file.filename ~= \".*\\.wsf\" or xdm.target.file.filename ~= \".*\\.wsh\"))\n\n\n\n"}
{"prompt": " I want to find suspicious PowerShell scripts that list files and directories recursively on endpoints. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"ls\" or ScriptBlockText contains \"get-childitem\" or ScriptBlockText contains \"gci\") and ScriptBlockText contains \"-recurse\"\n\n\n\n"}
{"prompt": "I want to see all instances of suspicious PowerShell scripts that use the X509Enrollment function or contain the GUID 884e2002-217d-11da-b2a4-000e7bbb2b09.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"X509Enrollment.CBinaryConverter\" or ScriptBlockText contains \"884e2002-217d-11da-b2a4-000e7bbb2b09\")\n\n\n\n"}
{"prompt": "I want to find unusual child processes created by Appvlp.exe that might indicate malicious activity.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\appvlp\\.exe\" and  not ((action_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\rundll32\\.exe\")) and  not ((action_process_image_path contains \":\\\\Program Files\\\\Microsoft Office\" and action_process_image_path ~= \".*\\\\msoasb\\.exe\") or ((action_process_image_path contains \":\\\\Program Files\\\\Microsoft Office\" and action_process_image_path ~= \".*\\\\SkypeSrv\\\\.*\") and action_process_image_path ~= \".*\\\\SKYPESERVER\\.EXE\") or (action_process_image_path contains \":\\\\Program Files\\\\Microsoft Office\" and action_process_image_path ~= \".*\\\\MSOUC\\.EXE\"))\n\n\n\n"}
{"prompt": "I want to see a list of enterprise admin users who have had at least 20 failed login attempts within a short period and need further investigation.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4625\")\n| alter logon_type = arrayindex(regextract(xdm.event.description, \"Logon Type:\\t\\t\\t([^\\n]+)\"), 0)\n| filter logon_type IN (\"2\", \"10\")\n| sort asc _time\n| bin _time span = 5m\n| alter target_username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| join type = left\n(dataset = pan_dss_raw\n| filter security_groups contains \"Tier1Users\"\n) as enterprise_admin enterprise_admin.sam_account_name = target_username\n| filter sam_account_name != null\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.target.user.username,\n_time\n| filter matched_events >= 20\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 20)), 1)"}
{"prompt": "I want to find instances where TAIDOOR RAT is loading its DLL, potentially using \"MyStart\" in the command line.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"dll,MyStart\" or action_process_image_command_line contains \"dll MyStart\") or (action_process_image_command_line ~= \".*\\ MyStart\" and action_process_image_command_line contains \"rundll32.exe\")\n\n\n\n"}
{"prompt": "I want to see events where suspicious remote AppX package locations are being used.", "response": "datamodel\n| filter (xdm.event.id = 854 and (xdm.target.process.executable.path contains \".githubusercontent.com\" or xdm.target.process.executable.path contains \"anonfiles.com\" or xdm.target.process.executable.path contains \"cdn.discordapp.com\" or xdm.target.process.executable.path contains \"cdn.discordapp.com/attachments/\" or xdm.target.process.executable.path contains \"ddns.net\" or xdm.target.process.executable.path contains \"dl.dropboxusercontent.com\" or xdm.target.process.executable.path contains \"ghostbin.co\" or xdm.target.process.executable.path contains \"glitch.me\" or xdm.target.process.executable.path contains \"gofile.io\" or xdm.target.process.executable.path contains \"hastebin.com\" or xdm.target.process.executable.path contains \"mediafire.com\" or xdm.target.process.executable.path contains \"mega.nz\" or xdm.target.process.executable.path contains \"onrender.com\" or xdm.target.process.executable.path contains \"paste.ee\" or xdm.target.process.executable.path contains \"pastebin.com\" or xdm.target.process.executable.path contains \"pastebin.pl\" or xdm.target.process.executable.path contains \"pastetext.net\" or xdm.target.process.executable.path contains \"privatlab.com\" or xdm.target.process.executable.path contains \"privatlab.net\" or xdm.target.process.executable.path contains \"send.exploit.in\" or xdm.target.process.executable.path contains \"sendspace.com\" or xdm.target.process.executable.path contains \"storage.googleapis.com\" or xdm.target.process.executable.path contains \"storjshare.io\" or xdm.target.process.executable.path contains \"supabase.co\" or xdm.target.process.executable.path contains \"temp.sh\" or xdm.target.process.executable.path contains \"transfer.sh\" or xdm.target.process.executable.path contains \"ufile.io\"))\n\n\n\n"}
{"prompt": "I want to find suspicious shell scripts being created under the \"/etc/profile.d/\" directory on Linux systems.", "response": "preset = xdr_file\n| filter (action_file_name contains \"/etc/profile.d/\" and (action_file_name ~= \".*\\.csh\" or action_file_name ~= \".*\\.sh\"))\n\n\n\n"}
{"prompt": " I want to see all events related to Wmiexec default output files created on Windows systems. ", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"\\\\Windows\\\\\\_\\_1\\d{9}\\.\\d{1,7}$\" or xdm.target.file.filename ~= \"C\\:\\\\\\_\\_1\\d{9}\\.\\d{1,7}$\" or xdm.target.file.filename ~= \"D\\:\\\\\\_\\_1\\d{9}\\.\\d{1,7}$\")\n\n\n\n"}
{"prompt": "I want to find potential persistence attempts using changes to the Netsh registry key that add a new DLL value.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\NetSh\" and (action_registry_value_name contains \".dll\" or action_registry_data contains \".dll\"))\n\n\n\n"}
{"prompt": "I want to see activity related to the Diamond Sleet APT group on my endpoints, specifically looking for processes with the command line string \" uTYNkfKxHiZrx3KJ\".", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \" uTYNkfKxHiZrx3KJ\"\n\n\n\n"}
{"prompt": "I want to see Duo login failures from Morocco that happened recently, including details about the user, device, and application.", "response": "dataset = duo_duo_raw\n| filter email != NULL and result in (\"denied\") and eventtype in (\"authentication\")\n| alter DuoUserName = user -> name,\nIPAddress = access_device -> ip,\nDeviceTrustLevel = adaptive_trust_assessments -> remember_me.trust_level,\nAccDevLocationCN = access_device -> location.country,\nAccDevLocationST = access_device -> location.state,\nAccDevLocationCY = access_device -> location.city,\nAccDevOS = access_device -> os,\nAccDevOSVer = access_device -> os_version,\nAccDevBrowser = access_device -> browser,\nAccDevBrowserVer = access_device -> browser_version,\nIntegration = application -> name,\nPhoneNumber = auth_device -> name\n| filter AccDevLocationCN in (\"Morocco\") and IPAddress not in (\"0.0.0.0\", NULL, null, \"\"\"\"\"\")\n| alter AppSrc = application -> name,\nDuoUserName_Country = concat(DuoUserName, \"_\", AccDevLocationCN),\nCorrelationRuleName = \"CNX_EU_PROD DUO Failed User Login From Morocco RealTime\"\n| fields _raw_log as EventLog, DuoUserName, reason, IPAddress,\nresult, eventtype, email, AccDevLocationCN, DuoUserName_Country,\nAccDevOS, AccDevOSVer, AccDevBrowser, AccDevBrowserVer,\nIntegration, *"}
{"prompt": "I want to see changes made to Conditional Access policies in O365, including additions, updates, and deletions.", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Operation ~= \"Add policy|Update policy|Delete policy\"\n| alter source_user = json_extract_scalar(`Target`, \"$[3].ID\")\n| fields UserId, source_user, ObjectId, ResultStatus, Operation,\n_time, CreationTime, `Target`\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to see all events where PowerShell is used to write to the event log and includes \"-RawData\" in the script block.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Write-EventLog\" and ScriptBlockText contains \"-RawData \")\n\n\n\n"}
{"prompt": "I want to see alerts from Amazon GuardDuty when new IP sets are created.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"guardduty.amazonaws.com\" and eventName = \"CreateIPSet\")\n\n\n\n"}
{"prompt": "I want to find events related to the PrintNightmare PowerShell exploit on my endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Invoke-Nightmare\"\n\n\n\n"}
{"prompt": "I want to find instances where curl.exe is being used with command-line options related to cookies, potentially indicating session hijacking attempts.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\curl\\.exe\" or actor_process_file_original_name = \"curl.exe\") and (action_process_image_command_line ~= \"\\s\\-c\\s\" or action_process_image_command_line contains \"--cookie-jar\"))\n\n\n\n"}
{"prompt": " I want to find instances where Diskshadow.exe spawns child processes on endpoints. ", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\diskshadow\\.exe\" and  not (action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\WerFault\\.exe\")\n\n\n\n"}
{"prompt": "I want to find activity related to the Mustang Panda Dropper malware on my endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_command_line contains \"Temp\\\\wtask.exe /create\" or action_process_image_command_line contains \"%windir:~-3,1%%PUBLIC:~-9,1%\" or action_process_image_command_line contains \"/tn \\\"Security Script \" or action_process_image_command_line contains \"%windir:~-1,1%\") or (action_process_image_command_line contains \"/E:vbscript\" and action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" and action_process_image_command_line contains \".txt\" and action_process_image_command_line contains \"/F\")) or action_process_image_path ~= \".*Temp\\\\winwsh\\.exe\")\n\n\n\n"}
{"prompt": "I want to detect suspicious processes on endpoints that have double extensions in their name or command line arguments, like .doc.exe or .docx.js.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\.doc\\.exe\" or action_process_image_path ~= \".*\\.docx\\.exe\" or action_process_image_path ~= \".*\\.xls\\.exe\" or action_process_image_path ~= \".*\\.xlsx\\.exe\" or action_process_image_path ~= \".*\\.ppt\\.exe\" or action_process_image_path ~= \".*\\.pptx\\.exe\" or action_process_image_path ~= \".*\\.rtf\\.exe\" or action_process_image_path ~= \".*\\.pdf\\.exe\" or action_process_image_path ~= \".*\\.txt\\.exe\" or action_process_image_path ~= \".*\\ \\ \\ \\ \\ \\ \\.exe\" or action_process_image_path ~= \".*\\_\\_\\_\\_\\_\\_\\.exe\" or action_process_image_path ~= \".*\\.doc\\.js\" or action_process_image_path ~= \".*\\.docx\\.js\" or action_process_image_path ~= \".*\\.xls\\.js\" or action_process_image_path ~= \".*\\.xlsx\\.js\" or action_process_image_path ~= \".*\\.ppt\\.js\" or action_process_image_path ~= \".*\\.pptx\\.js\" or action_process_image_path ~= \".*\\.rtf\\.js\" or action_process_image_path ~= \".*\\.pdf\\.js\" or action_process_image_path ~= \".*\\.txt\\.js\") and (action_process_image_command_line contains \".doc.exe\" or action_process_image_command_line contains \".docx.exe\" or action_process_image_command_line contains \".xls.exe\" or action_process_image_command_line contains \".xlsx.exe\" or action_process_image_command_line contains \".ppt.exe\" or action_process_image_command_line contains \".pptx.exe\" or action_process_image_command_line contains \".rtf.exe\" or action_process_image_command_line contains \".pdf.exe\" or action_process_image_command_line contains \".txt.exe\" or action_process_image_command_line contains \"      .exe\" or action_process_image_command_line contains \"______.exe\" or action_process_image_command_line contains \".doc.js\" or action_process_image_command_line contains \".docx.js\" or action_process_image_command_line contains \".xls.js\" or action_process_image_command_line contains \".xlsx.js\" or action_process_image_command_line contains \".ppt.js\" or action_process_image_command_line contains \".pptx.js\" or action_process_image_command_line contains \".rtf.js\" or action_process_image_command_line contains \".pdf.js\" or action_process_image_command_line contains \".txt.js\"))\n\n\n\n"}
{"prompt": "I want to see how the \"Potential Dead Drop Resolvers\" Cortex XQL query identifies malicious activity using legitimate websites as dead drop resolvers.", "response": "#N/A"}
{"prompt": "I want to see potential instances of MSTSC shadowing activity on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"noconsentprompt\" and action_process_image_command_line contains \"shadow:\")\n\n\n\n"}
{"prompt": "I want to see events where Windows Defender's grace period has expired.", "response": "datamodel\n| filter xdm.event.id = 5101\n\n\n\n"}
{"prompt": " I want to see events related to the APT29 phishing campaign from 2018, specifically focusing on command line indicators mentioned in this preset. ", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"-noni -ep bypass $\" or (action_process_image_command_line contains \"cyzfc.dat,\" and action_process_image_command_line contains \"PointFunctionCall\"))\n\n\n\n"}
{"prompt": "I want to see events related to deleting history files on endpoints, like rm, unlink, or shred commands targeting bash_history, zsh_history, or similar.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/rm\" or action_process_image_path ~= \".*\\/unlink\" or action_process_image_path ~= \".*\\/shred\") and ((action_process_image_command_line contains \"/.bash_history\" or action_process_image_command_line contains \"/.zsh_history\") or (action_process_image_command_line ~= \".*\\_history\" or action_process_image_command_line ~= \".*\\.history\" or action_process_image_command_line ~= \".*zhistory\")))\n\n\n\n"}
{"prompt": "I want to detect suspicious browser launches that originate from document readers like Adobe or Microsoft Office and connect to websites over HTTP(S). This could indicate potential phishing attempts.", "response": "preset = xdr_process\n| filter ((actor_process_image_path contains \"Acrobat Reader\" or actor_process_image_path contains \"Microsoft Office\" or actor_process_image_path contains \"PDF Reader\") and (action_process_image_path ~= \".*\\\\brave\\.exe\" or action_process_image_path ~= \".*\\\\chrome\\.exe\" or action_process_image_path ~= \".*\\\\firefox\\.exe\" or action_process_image_path ~= \".*\\\\msedge\\.exe\" or action_process_image_path ~= \".*\\\\opera\\.exe\" or action_process_image_path ~= \".*\\\\maxthon\\.exe\" or action_process_image_path ~= \".*\\\\seamonkey\\.exe\" or action_process_image_path ~= \".*\\\\vivaldi\\.exe\" or action_process_image_path ~= \".*\") and action_process_image_command_line contains \"http\")\n\n\n\n"}
{"prompt": "I want to find instances of registry persistence using the Explorer Run key that target system folders like Recycle Bin, ProgramData, Temp, Users, and AppData.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\Explorer\\\\Run\" and ((action_registry_value_name ~= \".*\\:\\\\\\$Recycle\\.bin\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\ProgramData\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Users\\\\Default\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_registry_value_name ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") or (action_registry_data ~= \".*\\:\\\\\\$Recycle\\.bin\\\\.*\" or action_registry_data ~= \".*\\:\\\\ProgramData\\\\.*\" or action_registry_data ~= \".*\\:\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\Default\\\\.*\" or action_registry_data ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_registry_data ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see events where a new .scr file is written, excluding those in common system directories.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\.scr\" and  not ((xdm.target.file.filename ~= \".*\\:\\\\\\$WINDOWS\\.\\~BT\\\\NewOS\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\WinSxS\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\WUDownloadCache\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances of malware using RUNDLL32 and SHELL32 DLLs for obfuscation purposes.", "response": "datamodel\n| filter (xdm.target.process.executable.path contains \"rundll32.exe\" and xdm.target.process.executable.path contains \"shell32.dll\" and xdm.target.process.executable.path contains \"shellexec_rundll\" and xdm.target.process.executable.path contains \"powershell\")\n\n\n\n"}
{"prompt": "I want to see alerts about potentially suspicious child processes launched by KeyScrambler.exe.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\KeyScrambler\\.exe\" and ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or actor_process_file_original_name in (\"Cmd.Exe\", \"cscript.exe\", \"mshta.exe\", \"PowerShell.EXE\", \"pwsh.dll\", \"regsvr32.exe\", \"RUNDLL32.EXE\", \"wscript.exe\")))\n\n\n\n"}
{"prompt": " I want to find instances of Cobalt Strike using an OCSP stager. ", "response": "datamodel\n| filter (xdm.network.http.url contains \"/oscp/\" and xdm.network.http.domain = \"ocsp.verisign.com\")\n\n\n\n"}
{"prompt": "I want to find indicators of potential SharpLdapWhoami activity on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\SharpLdapWhoami\\.exe\" or (actor_process_file_original_name contains \"SharpLdapWhoami\" or action_process_signature_product = \"SharpLdapWhoami\") or (action_process_image_command_line ~= \".*\\ \\/method\\:ntlm\" or action_process_image_command_line ~= \".*\\ \\/method\\:kerb\" or action_process_image_command_line ~= \".*\\ \\/method\\:nego\" or action_process_image_command_line ~= \".*\\ \\/m\\:nego\" or action_process_image_command_line ~= \".*\\ \\/m\\:ntlm\" or action_process_image_command_line ~= \".*\\ \\/m\\:kerb\"))\n\n\n\n"}
{"prompt": "I want to see alerts about any changes made to domain trusts, such as new trusts being created or existing ones being removed.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4706\", \"4707\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, xdm.target.user.sam_account_name, _insert_time\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find Windows events related to new root, CA, or AuthRoot certificates being installed.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\SystemCertificates\\\\Root\\\\Certificates\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\SystemCertificates\\\\Root\\\\Certificates\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\EnterpriseCertificates\\\\Root\\\\Certificates\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\SystemCertificates\\\\CA\\\\Certificates\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\SystemCertificates\\\\CA\\\\Certificates\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\EnterpriseCertificates\\\\CA\\\\Certificates\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\SystemCertificates\\\\AuthRoot\\\\Certificates\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\SystemCertificates\\\\AuthRoot\\\\Certificates\\\\.*\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\EnterpriseCertificates\\\\AuthRoot\\\\Certificates\\\\.*\") and action_registry_key_name ~= \".*\\\\Blob\" and (action_registry_value_name = \"Binary Data\" or action_registry_data = \"Binary Data\"))\n\n\n\n"}
{"prompt": "I want to see activity logs related to user account changes, like enabling and disabling accounts, that might indicate unauthorized privilege escalation or misuse of access.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4720\", \"4722\", \"4725\", \"4726\") and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria1 = \"ilsourceuser\",\naggregation_criteria2 = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see how many failed remote login attempts have occurred from a single IP address within a 5 minute window across IS systems.", "response": "datamodel dataset = linux_linux_raw\n| bin _time span = 5m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"IS_Intranet\", \"IS_Linux_Azure_Infosys-Cloud\", \"IS_unix\", \"IS_Linux_Intranet\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"sshd\" and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.network.application_protocol = \"ssh2\" and xdm.source.ipv4 not in (null, NULL, \"<ip>\")\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"isg_server_qualys_src\")\n) as device_grps device_grps.IP = xdm.source.ipv4\n| filter IP = null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, linux_linux_raw._final_reporting_device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.ipv4,\n_time\n| filter array_length(xdm.source.user.username) >= 3\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see alerts about the \"Triple Cross eBPF Rootkit Execve Hijack\" threat on my endpoints that involve suspicious `sudo` usage and the \"execve_hijack\" command.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/sudo\" and action_process_image_command_line contains \"execve_hijack\")\n\n\n\n"}
{"prompt": "{I want to see if any processes are using IExpress to create self-extracting packages, especially if they involve .sed files.} \n\n\nLet me know if you need any other assistance!", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\iexpress\\.exe\" and (action_process_image_path ~= \".*\\\\makecab\\.exe\" or actor_process_file_original_name = \"makecab.exe\")) or ((action_process_image_path ~= \".*\\\\iexpress\\.exe\" or actor_process_file_original_name = \"IEXPRESS.exe\") and action_process_image_command_line contains \" /n \")\n\n\n\n"}
{"prompt": "I want to find out if someone has modified registry settings to hide files from view.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\ShowSuperHidden\" or action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Explorer\\\\Advanced\\\\Hidden\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to collect Cisco configuration data from the Datamodel, including output from commands like \"show running-config,\" \"show startup-config,\" and \"show archive config.\"", "response": "datamodel\n| filter ( contains \"show running-config\" or  contains \"show startup-config\" or  contains \"show archive config\" or  contains \"more\")\n\n\n\n"}
{"prompt": "I want to see security group configuration changes in AWS, including who made the changes and when.", "response": "config case_sensitive = false\n| dataset = amazon_aws_raw\n| filter _collector_name = \"EV_CloudTrail\"\n| alter source_username = json_extract_scalar(userIdentity, \"$.principalId\"),\ntarget_username = trim(coalesce(json_extract_scalar(userIdentity, \"$.userName\"), json_extract_scalar(userIdentity, \"$.sessionContext.sessionIssuer.userName\"), \"NA\"), \"\\\"\"),\ntype = json_extract_scalar(userIdentity, \"$.type\"),\ngroupid = coalesce(json_extract_scalar(requestParameters, \"$.groupId\"), trim(json_extract(responseElements, \"$.securityGroupRuleSet.items.0.groupId\"), \"\\\"\"), trim(json_extract(responseElements, \"$.groupId\"), \"\\\"\")),\nusername = json_extract_scalar(requestParameters, \"$.userName\"),\nbucketName = json_extract_scalar(requestParameters, \"$.bucketName\"),\naccount_id = coalesce(account_id, json_extract_scalar(userIdentity, \"$.accountId\")),\nsrcaddr = coalesce(srcaddr, sourceIPAddress),\ngroup_name = json_extract_scalar(requestParameters, \"$.groupName\")\n| alter response = json_extract_scalar(responseElements, \"$.ConsoleLogin\"),\ntype = json_extract_scalar(userIdentity, \"$.type\")\n| filter eventName in (\"AuthorizeSecurityGroupIngress\", \"CreateSecurityGroup\")\n| filter target_username not contains \"<username>\" and groupid not in (\"<group id>\", \"<group id>\", \",<group id>\")\n| alter aggregation_criteria1 = \"ileventdesc\",\naggregation_criteria2 = \"groupid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of the StoneDrill malware installing its service on Windows endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and ServiceName = \"NtsSrv\" and actor_process_image_path ~= \".*\\ LocalService\")\n\n\n\n"}
{"prompt": "I want to see events related to suspicious VSFTPD error messages.", "response": "datamodel\n| filter ( contains \"Connection refused: too many sessions for this address.\" or  contains \"Connection refused: tcp_wrappers denial.\" or  contains \"Bad HTTP verb.\" or  contains \"port and pasv both active\" or  contains \"pasv and port both active\" or  contains \"Transfer done (but failed to open directory).\" or  contains \"Could not set file modification time.\" or  contains \"bug: pid active in ptrace_sandbox_free\" or  contains \"PTRACE_SETOPTIONS failure\" or  contains \"weird status:\" or  contains \"couldn't handle sandbox event\" or  contains \"syscall \\* out of bounds\" or  contains \"syscall not permitted:\" or  contains \"syscall validate failed:\" or  contains \"Input line too long.\" or  contains \"poor buffer accounting in str_netfd_alloc\" or  contains \"vsf_sysutil_read_loop\")\n\n\n\n"}
{"prompt": "I want to see events related to PowerShell processes that are attempting to bypass AMSI using the pattern described in this query.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\") and (action_process_image_command_line contains \"[Ref].Assembly.GetType\" and action_process_image_command_line contains \"SetValue($null,$true)\" and action_process_image_command_line contains \"NonPublic,Static\"))\n\n\n\n"}
{"prompt": "I want to detect instances where attackers are using \"findstr\" to search for common names of security tools, as this might indicate they're trying to identify installed security software.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\find\\.exe\" or action_process_image_path ~= \".*\\\\findstr\\.exe\") or actor_process_file_original_name in (\"FIND.EXE\", \"FINDSTR.EXE\")) and (action_process_image_command_line ~= \".*\\ avira\" or action_process_image_command_line ~= \".*\\ avira\\\"\" or action_process_image_command_line ~= \".*\\ cb\" or action_process_image_command_line ~= \".*\\ cb\\\"\" or action_process_image_command_line ~= \".*\\ cylance\" or action_process_image_command_line ~= \".*\\ cylance\\\"\" or action_process_image_command_line ~= \".*\\ defender\" or action_process_image_command_line ~= \".*\\ defender\\\"\" or action_process_image_command_line ~= \".*\\ kaspersky\" or action_process_image_command_line ~= \".*\\ kaspersky\\\"\" or action_process_image_command_line ~= \".*\\ kes\" or action_process_image_command_line ~= \".*\\ kes\\\"\" or action_process_image_command_line ~= \".*\\ mc\" or action_process_image_command_line ~= \".*\\ mc\\\"\" or action_process_image_command_line ~= \".*\\ sec\" or action_process_image_command_line ~= \".*\\ sec\\\"\" or action_process_image_command_line ~= \".*\\ sentinel\" or action_process_image_command_line ~= \".*\\ sentinel\\\"\" or action_process_image_command_line ~= \".*\\ symantec\" or action_process_image_command_line ~= \".*\\ symantec\\\"\" or action_process_image_command_line ~= \".*\\ virus\" or action_process_image_command_line ~= \".*\\ virus\\\"\"))\n\n\n\n"}
{"prompt": "I want to find instances where processes on endpoints are clearing logs on Linux systems.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/rm\" or action_process_image_path ~= \".*\\/shred\" or action_process_image_path ~= \".*\\/unlink\") and (action_process_image_command_line contains \"/var/log\" or action_process_image_command_line contains \"/var/spool/mail\"))\n\n\n\n"}
{"prompt": "I want to find network connections to Reddit that aren't coming from a web browser.", "response": "preset = network_story\n| filter action_external_hostname contains \"reddit.com\" and  not (actor_process_image_path ~= \".*\\\\brave\\.exe\" or actor_process_image_path in (\"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\", \"C:\\\\Program Files (x86)\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\") or actor_process_image_path in (\"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\", \"C:\\\\Program Files (x86)\\\\Mozilla Firefox\\\\firefox.exe\") or actor_process_image_path in (\"C:\\\\Program Files (x86)\\\\Internet Explorer\\\\iexplore.exe\", \"C:\\\\Program Files\\\\Internet Explorer\\\\iexplore.exe\") or actor_process_image_path ~= \".*\\\\maxthon\\.exe\" or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeWebView\\\\Application\\\\.*\" or actor_process_image_path ~= \".*\\\\WindowsApps\\\\MicrosoftEdge\\.exe\" or actor_process_image_path in (\"C:\\\\Program Files (x86)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\", \"C:\\\\Program Files\\\\Microsoft\\\\Edge\\\\Application\\\\msedge.exe\")) or ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeCore\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\\\EdgeCore\\\\.*\") and (actor_process_image_path ~= \".*\\\\msedge\\.exe\" or actor_process_image_path ~= \".*\\\\msedgewebview2\\.exe\")) or actor_process_image_path ~= \".*\\\\opera\\.exe\" or actor_process_image_path ~= \".*\\\\safari\\.exe\" or actor_process_image_path ~= \".*\\\\seamonkey\\.exe\" or actor_process_image_path ~= \".*\\\\vivaldi\\.exe\" or actor_process_image_path ~= \".*\\\\whale\\.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts about changes made to mailbox permissions, especially for IL Top Management Users, and understand who made the change and what action was taken.", "response": "config case_sensitive = false\n| datamodel dataset = msft_admin_audit_raw\n| alter parameter_length = array_length(split(xdm.event.description, \" \")),\nparameter_values = split(xdm.event.operation, \" \")\n| alter mailbox = arrayindex(split(arrayindex(split(xdm.target.user.username, \"/\"), -1), \"(\"), 0),\nMailboxAccessGivenTo = if(parameter_length = 3, arrayindex(parameter_values, 1), arrayindex(parameter_values, 3)),\naccessrights = if(parameter_length = 3, arrayindex(parameter_values, 0), arrayindex(parameter_values, 2)),\nlog_src_name = \"AdminAudit\",\nserver_name = msft_admin_audit_raw._collector_hostname\n| filter mailbox in (\"<username(s)>\")\n| fields xdm.target.user.username, xdm.source.user.username,\nxdm.observer.action, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.event.id, xdm.event.description, xdm.event.operation,\nxdm.event.operation_sub_type, xdm.observer.type,\nxdm.event.is_completed, xdm.logon.is_elevated, MailboxAccessGivenTo,\nmailbox, accessrights, _time, _insert_time, log_src_name,\nserver_name, msft_admin_audit_raw.rundate\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see when Windows Defender Antivirus Service or Microsoft Defender Antivirus has been stopped.", "response": "preset = xdr_event_log\n| alter param1 = regextract(to_json_string(action_evtlog_data_fields)->param1{}, \"\\\"(.*)\\\"\")\n| alter param2 = regextract(to_json_string(action_evtlog_data_fields)->param2{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 7036 and provider_name = \"Service Control Manager\" and param1 in (\"Windows Defender Antivirus Service\", \"Service antivirus Microsoft Defender\") and param2 in (\"stopped\", \"arr\ufffd\ufffd\ufffd\ufffd\ufffd\ufffdt\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"))\n\n\n\n"}
{"prompt": "I want to see all the logged events for users, including username, target_username, operationName, referenceid, tenantId, resulttype, callerIpAddress, identity, aliashost, protocol, _time, eventlog, and resultDescription. I also want the _time field formatted as YYYY-MM-DD HH:MM:SS.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.security/locations/alerts/activate/action\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\"),\neventlog = json_extract_scalar(properties, \"$.eventName\")\n| filter referenceid not in (null, \"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\", \"9227fdca-483d-424c-bc56-9fd2b4030484\", \"3fd7f1e1-88df-41df-982e-90c0daa354b9\", \"f2a4f062-8a8b-444f-82b8-e668b51cf42e\", \"71cce8cd-49d7-4463-bf9f-20dd2a68c5eb\", \"416105b8-5451-4d32-8f96-fcb0deb64ae0\", \"799febb6-d243-48d7-86a3-e94c956f46ba\", \"7269cfc9-f839-4437-9ded-f6d4bdec41d2\", \"8de7d5e6-d76e-497e-97c2-557d13d801e8\", \"7b0af149-fe89-47b0-8994-b60d7999bb4c\", \"18a66fd5-79df-41f1-b842-92edb56dc876\", \"18a66fd5-79df-41f1-b842-92edb56dc876\", \"e0e1c09d-3f9e-44d1-80ef-94ac753330de\", \"9c19e47d-1004-47f8-b2c0-3571b7acafdf\", \"18a66fd5-79df-41f1-b842-92edb56dc876\", \"90896e35-c444-41b8-8898-5fd7f679d964\", \"64038161-0b1a-4859-8011-bd1eaade1929\", \"8920bca4-b566-4dc9-80c2-1cf9a86cd52e\", \"18a66fd5-79df-41f1-b842-92edb56dc876\", \"18a66fd5-79df-41f1-b842-92edb56dc876\", \"3bad1b18-d850-42ae-8acb-14acb766e642\", \"67131234-9e78-487a-9202-ec2e6af5a51e\", \"3f6b90c6-b601-4b0c-b403-51032959a996\", \"a4998e48-8471-4cb9-b52d-5e9306d13a50\", \"bb99a905-5f30-4c4e-9e32-31730c094c7a\", \"3f6cd9dc-8858-4c6b-a516-985c5d03b7c5\", \"bb99a905-5f30-4c4e-9e32-31730c094c7a\", \"c9b51485-e339-45fc-871e-6ef46be93a43\", \"bb99a905-5f30-4c4e-9e32-31730c094c7a\", \"bb99a905-5f30-4c4e-9e32-31730c094c7a\", \"bb99a905-5f30-4c4e-9e32-31730c094c7a\", \"aeaca799-dce4-4c88-83ad-0f5f72a5a3a9\", \"bb99a905-5f30-4c4e-9e32-31730c094c7a\", \"e71052a7-d2ad-4e43-ac28-7609a37a4ef7\", \"19053629-38ac-4f7a-bcbf-6effda51368e\", \"b1617c40-5fe7-4804-9138-161068eece0f\", \"a4909bd3-2023-4cd7-b521-d5bf29109761\", \"160421b8-c8e9-47bd-94ac-22a1e74353e0\", \"3bf1b93b-e895-498a-bb92-fa4c26c0da64\", \"918574c0-98eb-4eca-8c95-8d474abf8b10\", \"79d75b98-7df9-4f9c-af73-aeaa3a8b7c0a\", \"0254815d-161b-46a1-a419-9f2cf9324ae3\", \"a704c3a4-580c-40b7-9054-73d55b8234ae\", \"fc257d35-1522-4b2a-bbd8-29c8c4b47bd0\", \"e1dc9585-f94d-4f70-8165-b6ba1140af51\", \"4e6a7a01-59a1-4bd0-aa31-143f66640add\", \"5069f056-0890-4ee2-a5db-a5fa3584984a\", \"756ca836-d3cc-4966-a56a-a47fcade6b10\", \"3076e74d-719e-49a2-9c31-46f8a8adaf7f\", \"e2b4af70-62b8-4aff-9414-d8889e40df93\", \"5eca477e-0f16-4c76-9597-c319851b389f\", \"e2e7a999-5028-41a8-98fe-03fdc4a1db92\", \"582edb06-7900-49c5-b2b1-7b83523b41fa\", \"474ea229-a14b-44fc-8a13-42e1ced1ec97\", \"11bba985-0adb-42dd-9e4c-db064c6dfb85\", \"b95a53cb-7d9b-481e-b935-edb4bf3f46f0\", \"55eebf97-b9e9-4ea2-87ea-91c231cc17c8\", \"c8de8803-de3e-43b3-9681-691e4cbb2eab\", \"1cb09d48-4e9c-4347-aeaf-74afa25835a4\", \"135770ca-5913-45ab-bb76-3e38e8122af9\", \"5eca477e-0f16-4c76-9597-c319851b389f\", \"52d324e5-f1a1-4c85-8add-39cc69c1a9c7\", \"91470abc-c095-420f-9ba8-137b2f08ceb3\", \"59eb1057-e4bd-4876-86d0-e03ba405ef04\", \"c1f7b1d5-6390-46e3-bb15-fc9bcc0a3e93\", \"c9324b3d-797d-4488-bab0-72c5c4c4d410\", \"5eca477e-0f16-4c76-9597-c319851b389f\", \"4608857c-1e7e-4706-bf29-55e9795ac2a8\", \"a84e33df-86ca-4a57-9b22-fafb79df28e8\", \"5eca477e-0f16-4c76-9597-c319851b389f\", \"5de7ccfa-f2bd-4423-bfdd-9a2aac143bf9\", \"a6f4042a-fcf2-408e-81d0-c06b6c1c9ca8\", \"f21c10b4-d1c2-442d-9b4c-ee3176a43849\", \"5eca477e-0f16-4c76-9597-c319851b389f\", \"54da0094-a670-4b4e-8274-932681f6b6d7\", \"5eca477e-0f16-4c76-9597-c319851b389f\", \"5eca477e-0f16-4c76-9597-c319851b389f\", \"c3028dd5-eff1-487b-89cd-d19ca29b44d8\", \"5eca477e-0f16-4c76-9597-c319851b389f\", \"5eca477e-0f16-4c76-9597-c319851b389f\", \"77fc06f2-ff91-4dab-bee0-b42ef6458097\", \"be41154a-3e9a-4324-b874-0bee89883b79\", \"61417891-0e9e-452e-b731-c9b2e129a6f2\", \"5eca477e-0f16-4c76-9597-c319851b389f\", \"5c54af75-ee81-4d9c-88d7-d8e13dcd4478\", \"5eca477e-0f16-4c76-9597-c319851b389f\", \"9eee4bf1-de73-4f38-a6b1-ab1e82316f19\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time, eventlog, resultDescription\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect potentially malicious use of the GUP.exe process, excluding legitimate usage by Notepad++.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\GUP\\.exe\" and  not ((action_process_image_path ~= \".*\\\\Program\\ Files\\\\Notepad\\+\\+\\\\updater\\\\GUP\\.exe\" or action_process_image_path ~= \".*\\\\Program\\ Files\\ \\(x86\\)\\\\Notepad\\+\\+\\\\updater\\\\GUP\\.exe\") or (action_process_image_path ~= \".*\\\\Users\\\\.*\" and (action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Notepad\\+\\+\\\\updater\\\\GUP\\.exe\" or action_process_image_path ~= \".*\\\\AppData\\\\Roaming\\\\Notepad\\+\\+\\\\updater\\\\GUP\\.exe\")))\n\n\n\n"}
{"prompt": "I want to find instances where Winword.exe loads suspicious DLLs by looking at its command line arguments.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\winword\\.exe\" and action_process_image_command_line contains \"/l\")\n\n\n\n"}
{"prompt": "I want to find any suspicious files dropped into the Windows Spool Drivers Color folder, specifically DLLs, EXEs, or SYS files.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\.*\" and (xdm.target.file.filename ~= \".*\\.dll\" or xdm.target.file.filename ~= \".*\\.exe\" or xdm.target.file.filename ~= \".*\\.sys\"))\n\n\n\n"}
{"prompt": "I want to find potential reverse shells using Xterm on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path contains \"xterm\" and action_process_image_command_line contains \"-display\" and action_process_image_command_line ~= \".*\\:1\")\n\n\n\n"}
{"prompt": "I want to see events related to the VMware vCenter Server File Upload CVE-2021-22005 vulnerability.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and xdm.network.http.url contains \"/analytics/telemetry/ph/api/hyper/send*\")\n\n\n\n"}
{"prompt": "I want to find instances of AWS snapshot backups being exfiltrated.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"ec2.amazonaws.com\" and eventName = \"ModifySnapshotAttribute\")\n\n\n\n"}
{"prompt": "I want to find instances where uncommon applications access Windows DPAPI master keys, which could indicate credential theft.", "response": "datamodel\n| filter (xdm.target.file.path ~= \".*\\\\Microsoft\\\\Protect\\\\S\\-1\\-5\\-18\\\\.*\" or xdm.target.file.path contains \"\\\\Microsoft\\\\Protect\\\\S-1-5-21-\") and  not (((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find activities on endpoints that are splitting files into pieces.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\/split\"\n\n\n\n"}
{"prompt": "I want to find evidence of attackers clearing their Windows console history on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Clear-History\" or (ScriptBlockText contains \"Remove-Item\" or ScriptBlockText contains \"rm\") and (ScriptBlockText contains \"ConsoleHost_history.txt\" or ScriptBlockText contains \"(Get-PSReadlineOption).HistorySavePath\")\n\n\n\n"}
{"prompt": "I want to find instances of UAC bypass techniques using ChangePK and SLUI on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\changepk\\.exe\" and actor_process_image_path ~= \".*\\\\slui\\.exe\" and action_process_integrity_level in (\"High\", \"System\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potentially suspicious network connections to the Notion API, especially if they look like Command and Control activity.", "response": "#N/A"}
{"prompt": "I want to detect if someone has tampered with the NGenAssemblyUsageLog registry key, which could be a sign of .NET evasion techniques.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*SOFTWARE\\\\Microsoft\\\\\\.NETFramework\\\\NGenAssemblyUsageLog\"\n\n\n\n"}
{"prompt": "I want to see all access denied events on critical platform hosts like AD Alias Hosts, Exchange Alias Hosts and IS Alias Hosts, where the logon type is 10 and the status code is 0xc000015b. I need details about the user, host, timestamp, error codes and failure reasons.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4625\")\n| alter logon_type = arrayindex(regextract(xdm.event.description, \"Logon Type:\\t\\t\\t([^\\n]+)\"), 0)\n| alter status_code = arrayindex(regextract(xdm.event.description, \"Status:\\t\\t\\t([^\\n]+)\"), 0)\n| filter logon_type = \"10\" and status_code = \"0xc000015b\"\n| join type = left\n(dataset = enterprise_platform_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.ip_address = xdm.source.ipv4)\n| filter platform_type IN (\"ad_aliashost\", \"exchange_aliashost\", \"is_aliashost\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential persistence threats on my endpoints that use PlistBuddy to run scripts at system startup.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/PlistBuddy\" and (action_process_image_command_line contains \"RunAtLoad\" and action_process_image_command_line contains \"true\") and (action_process_image_command_line contains \"LaunchAgents\" or action_process_image_command_line contains \"LaunchDaemons\"))\n\n\n\n"}
{"prompt": "I want to see events related to unsigned images being loaded on Windows systems.", "response": "datamodel\n| filter xdm.event.id = 3037\n\n\n\n"}
{"prompt": "I want to find instances where attackers might be exploiting the Fortinet CVE-2018-13379 vulnerability.", "response": "datamodel\n| filter (xdm.network.http.url contains \"lang=/../../\" and xdm.network.http.url contains \"/dev/cmdb/sslvpn_websession\")\n\n\n\n"}
{"prompt": "I want to find out about when Azure Container Registries are created or deleted.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.CONTAINERREGISTRY/REGISTRIES/WRITE\", \"MICROSOFT.CONTAINERREGISTRY/REGISTRIES/DELETE\")\n\n\n\n"}
{"prompt": "I want to find instances where Certutil.exe downloads files from suspicious file-sharing websites.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_file_original_name = \"CertUtil.exe\") and (action_process_image_command_line contains \"urlcache \" or action_process_image_command_line contains \"verifyctl \") and (action_process_image_command_line contains \".githubusercontent.com\" or action_process_image_command_line contains \"anonfiles.com\" or action_process_image_command_line contains \"cdn.discordapp.com\" or action_process_image_command_line contains \"cdn.discordapp.com/attachments/\" or action_process_image_command_line contains \"ddns.net\" or action_process_image_command_line contains \"dl.dropboxusercontent.com\" or action_process_image_command_line contains \"ghostbin.co\" or action_process_image_command_line contains \"glitch.me\" or action_process_image_command_line contains \"gofile.io\" or action_process_image_command_line contains \"hastebin.com\" or action_process_image_command_line contains \"mediafire.com\" or action_process_image_command_line contains \"mega.nz\" or action_process_image_command_line contains \"onrender.com\" or action_process_image_command_line contains \"paste.ee\" or action_process_image_command_line contains \"pastebin.com\" or action_process_image_command_line contains \"pastebin.pl\" or action_process_image_command_line contains \"pastetext.net\" or action_process_image_command_line contains \"privatlab.com\" or action_process_image_command_line contains \"privatlab.net\" or action_process_image_command_line contains \"send.exploit.in\" or action_process_image_command_line contains \"sendspace.com\" or action_process_image_command_line contains \"storage.googleapis.com\" or action_process_image_command_line contains \"storjshare.io\" or action_process_image_command_line contains \"supabase.co\" or action_process_image_command_line contains \"temp.sh\" or action_process_image_command_line contains \"transfer.sh\" or action_process_image_command_line contains \"ufile.io\"))\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is used to request single Kerberos tickets on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"System.IdentityModel.Tokens.KerberosRequestorSecurityToken\"\n\n\n\n"}
{"prompt": " I want to find potential instances of GobRAT on my endpoints by looking for processes using grep that have suspicious command lines related to tools like apache, frpc, sshd.sh, or zone.arm.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/grep\" and (action_process_image_command_line contains \"apached\" or action_process_image_command_line contains \"frpc\" or action_process_image_command_line contains \"sshd.sh\" or action_process_image_command_line contains \"zone.arm\"))\n\n\n\n"}
{"prompt": "I want to find instances of potential arbitrary command execution using FTP.EXE on my endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\ftp\\.exe\" or ((action_process_image_path ~= \".*\\\\ftp\\.exe\" or actor_process_file_original_name = \"ftp.exe\") and (action_process_image_command_line contains \"-s:\" or action_process_image_command_line contains \"/s:\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to potential abuse of RemoteFXvGPUDisablement.EXE through PowerShell scripts.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText ~= \"function\\ Get\\-VMRemoteFXPhysicalVideoAdapter\\ \\{.*\"\n\n\n\n"}
{"prompt": "I want to find instances of malicious processes using the Ie4uinit Lolbin tool launched from unexpected locations.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\ie4uinit\\.exe\" or actor_process_file_original_name = \"IE4UINIT.EXE\") and  not (action_process_cwd in (\"c:\\\\windows\\\\system32\\\\\", \"c:\\\\windows\\\\sysWOW64\\\\\") or action_process_cwd = \"None\")\n\n\n\n"}
{"prompt": " I want to see Symantec AV events from Zscaler that have no defined category but indicate a risk, including details about the event, the user, and the system involved. ", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.event.type in (\"Risk\")\n| alter hostname = coalesce(xdm.source.host.hostname, xdm.target.host.hostname)\n| filter xdm.target.file.sha256 != null and hostname != null\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nserver_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\ndownload_site = arrayindex(regextract(symantec_ep_raw._raw_log, \"Download site:\\s([^\\,]+)\"), 0),\ndownloaded_by = arrayindex(regextract(symantec_ep_raw._raw_log, \"Downloaded by:\\s([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlast(_time) as LatestEventTime,\nvalues(xdm.observer.action) as action,\nvalues(requested_action) as requested_action,\nvalues(secondary_action) as secondary_action,\nvalues(ip_address) as ip_address,\nvalues(xdm.alert.name) as risk_name,\nvalues(xdm.target.file.path) as process,\nvalues(server_name) as server_name,\nvalues(xdm.source.user.username) as username,\nvalues(category) as category,\nvalues(event_desc) as event_desc,\nvalues(xdm.source.ipv4) as src_ips,\nvalues(xdm.target.ipv4) as dst_ips,\nvalues(download_site) as download_site,\nvalues(downloaded_by) as downloaded_by,\nvalues(xdm.target.file.sha256) as file_hash by xdm.target.ipv4,\nxdm.source.user.sam_account_name,\nxdm.target.host.hostname\n| join type = left\n(datamodel dataset = zscaler_nssweblog_raw\n| filter xdm.source.user.username contains \"@\" and xdm.network.application_protocol_category in (\"*Miscellaneous or Unknown*\", \"*Non Categorizable*\")\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.sam_account_name,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| arrayexpand xdm.source.host.ipv4_addresses\n| filter incidr(xdm.source.host.ipv4_addresses, \"10.0.0.0/8\") = true or incidr(xdm.source.host.ipv4_addresses, \"192.168.0.0/16\") = true or incidr(xdm.source.host.ipv4_addresses, \"172.16.0.0./12\") = true\n| alter machine_ip = xdm.source.host.ipv4_addresses\n| comp values(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url by machine_ip,\nuser_dst,\nMachinename\n) as proxyevents(proxyevents.machine_ip = xdm.target.ipv4 or proxyevents.user_dst = xdm.source.user.sam_account_name or proxyevents.Machinename = `xdm.target.host.hostname`)\n| filter (ip_src != null or user_dst != null or Machinename != null)\n| alter process = replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_address = replace(replace(replace(to_string(ip_address), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nrisk_name = replace(replace(replace(to_string(risk_name), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nfile_name = arrayindex(split(replace(replace(replace(to_string(process), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"), \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(process, file_name, \"\")"}
{"prompt": "I want to see Azure login attempts that show signs of brute force attacks within a 5 minute window and have at least 6 failed attempts.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n| filter resultType in (\"16003\", \"50034\", \"50053\", \"50056\", \"50126\", \"90125\", \"120000\")\n| alter bin_time = _time\n| bin bin_time span = 5m\n| alter id = properties -> id,\ncreatedDateTime = properties -> createdDateTime,\nuserDisplayName = properties -> userDisplayName,\nuserPrincipalName = properties -> userPrincipalName,\nuserId = properties -> userId,\nappId = properties -> appId,\nappDisplayName = properties -> appDisplayName,\nipAddress = properties -> ipAddress,\nerrorCode = properties -> status.errorCode,\nfailureReason = properties -> status.failureReason,\ndeviceId = properties -> deviceDetail.deviceId,\nlocation = properties -> location,\ncity = properties -> location.city,\nstate = properties -> location.state,\ncountryOrRegion = properties -> location.countryOrRegion,\ngeoCoordinates = properties -> location.geoCoordinates,\nlatitude = properties -> location.latitude,\nlongitude = properties -> location.longitude,\noriginalRequestId = properties -> originalRequestId,\nisInteractive = properties -> isInteractive,\ntokenIssuerName = properties -> tokenIssuerName,\ntokenIssuerType = properties -> tokenIssuerType\n| comp earliest(_time) as Earliest_EventTime,\nlatest(_time) as Latest_EventTime,\ncount(resultType) as ResultType_Count,\nvalues(properties) as Properties_List by bin_time,\ncallerIpAddress,\nresultType,\nresultDescription,\nuserDisplayName,\nuserId,\nuserPrincipalName,\nerrorCode\n| filter ResultType_Count >= 6 and timestamp_diff(Latest_EventTime, Earliest_EventTime, \"MINUTE\") <= 5"}
{"prompt": "I want to find instances where Devtoolslauncher.exe is launching another binary using the \"LaunchForDeploy\" command.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\devtoolslauncher\\.exe\" and action_process_image_command_line contains \"LaunchForDeploy\")\n\n\n\n"}
{"prompt": "I want to see alerts about when an ESXi Admin permission is assigned to an account using the esxcli command.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/esxcli\" and action_process_image_command_line contains \"system\" and (action_process_image_command_line contains \" permission \" and action_process_image_command_line contains \" set\" and action_process_image_command_line contains \"Admin\"))\n\n\n\n"}
{"prompt": "I want to see all events related to creating or updating security solutions in Azure, specifically focusing on these IDs: 9227fdca-483d-424c-bc56-9fd2b4030484, 3fd7f1e1-88df-41df-982e-90c0daa354b9, f2a4f062-8a8b-444f-82b8-e668b51cf42e, 71cce8cd-49d7-4463-bf9f-20dd2a68c5eb, 416105b8-5451-4d32-8f96-fcb0deb64ae0, 799febb6-d243-48d7-86a3-e94c956f46ba, 7269cfc9-f839-4437-9ded-f6d4bdec41d2, and 8de7d5e6-d76e-497e-97c2-555d13d801e8.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.SECURITY/SECURITYSOLUTIONS/WRITE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"9227fdca-483d-424c-bc56-9fd2b4030484\", \"3fd7f1e1-88df-41df-982e-90c0daa354b9\", \"f2a4f062-8a8b-444f-82b8-e668b51cf42e\", \"71cce8cd-49d7-4463-bf9f-20dd2a68c5eb\", \"416105b8-5451-4d32-8f96-fcb0deb64ae0\", \"799febb6-d243-48d7-86a3-e94c956f46ba\", \"7269cfc9-f839-4437-9ded-f6d4bdec41d2\", \"8de7d5e6-d76e-497e-97c2-557d13d801e8\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of credential dumping attempts via svchost on my endpoints.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\svchost\\.exe\" and GrantedAccess = \"0x143a\") and  not ((SourceImage ~= \".*\\\\services\\.exe\" or SourceImage ~= \".*\\\\msiexec\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances where iptables or ufw rules are flushed on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/iptables\" or action_process_image_path ~= \".*\\/xtables\\-legacy\\-multi\" or action_process_image_path ~= \".*\\/iptables\\-legacy\\-multi\" or action_process_image_path ~= \".*\\/ip6tables\" or action_process_image_path ~= \".*\\/ip6tables\\-legacy\\-multi\") and (action_process_image_command_line contains \"-F\" or action_process_image_command_line contains \"-Z\" or action_process_image_command_line contains \"-X\") and (action_process_image_command_line contains \"ufw-logging-deny\" or action_process_image_command_line contains \"ufw-logging-allow\" or action_process_image_command_line contains \"ufw6-logging-deny\" or action_process_image_command_line contains \"ufw6-logging-allow\"))\n\n\n\n"}
{"prompt": "I want to find processes that are using NTFS short names in their image path, excluding common system processes like explorer and known applications.", "response": "preset = xdr_process\n| filter (action_process_image_path contains \"~1.bat\" or action_process_image_path contains \"~1.dll\" or action_process_image_path contains \"~1.exe\" or action_process_image_path contains \"~1.hta\" or action_process_image_path contains \"~1.js\" or action_process_image_path contains \"~1.msi\" or action_process_image_path contains \"~1.ps1\" or action_process_image_path contains \"~1.tmp\" or action_process_image_path contains \"~1.vbe\" or action_process_image_path contains \"~1.vbs\" or action_process_image_path contains \"~2.bat\" or action_process_image_path contains \"~2.dll\" or action_process_image_path contains \"~2.exe\" or action_process_image_path contains \"~2.hta\" or action_process_image_path contains \"~2.js\" or action_process_image_path contains \"~2.msi\" or action_process_image_path contains \"~2.ps1\" or action_process_image_path contains \"~2.tmp\" or action_process_image_path contains \"~2.vbe\" or action_process_image_path contains \"~2.vbs\") and  not (actor_process_image_path = \"C:\\\\Windows\\\\explorer.exe\") and  not (actor_process_image_path ~= \".*\\\\WebEx\\\\WebexHost\\.exe\" or actor_process_image_path ~= \".*\\\\thor\\\\thor64\\.exe\" or action_process_image_path = \"C:\\\\PROGRA~1\\\\WinZip\\\\WZPREL~1.EXE\" or action_process_image_path ~= \".*\\\\VCREDI\\~1\\.EXE\")\n\n\n\n"}
{"prompt": "I want to find suspicious files downloaded to the \"Personalization\\LockScreenImage\" folder that are not images and are being accessed by svchost.exe.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\\\svchost\\.exe\" or xdm.source.process.name ~= \".*\\\\svchost\\.exe\") and xdm.target.file.filename ~= \".*\\\\Personalization\\\\LockScreenImage\\\\.*\") and  not (xdm.target.file.filename ~= \".*C\\:\\\\Windows\\\\.*\") and  not ((xdm.target.file.filename contains \".jpg\" or xdm.target.file.filename contains \".jpeg\" or xdm.target.file.filename contains \".png\"))\n\n\n\n"}
{"prompt": "I want to see failed login attempts on my Hitachi PAM platform.", "response": "config case_sensitive = false\n| dataset = hitachi_pam_raw\n| filter oper ~= \"DBCS|DBCM\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nevent_desc = \"Resuming commits since replication backlog is being processed.\",\ndevice_type = \"pam\""}
{"prompt": "I want to see a list of admin users who have had 7 or more authentication failures on Unix servers within the last hour.", "response": "config case_sensitive = false\n| datamodel dataset = linux_linux_raw\n| bin _time span = 1m\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"edgeverve_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"sshd\" and xdm.event.outcome = XDM_CONST.OUTCOME_FAILED and xdm.source.user.username not in (NULL, \"autoid\", \"migbrac\", \"crm_appscan\", \"finacle_appscan\", \"enterprisedb\", \"gs1adm\", \"ftadm\", \"qantasadm\", \"crmadmin\", \"jtrstadm\", \"bciadm\", \"feadm\", \"ING11ADM\", \"iobadm\", \"gstatsadm\", \"bmmig\", \"eqcuadm\", \"dopadm\", \"ebbpadm2\", \"ora12102\", \"ora12101\", \"fedadm\", \"INGADM\", \"medadm\", \"medadm1\", \"fnimsadm\", \"ora11g\", \"ubsadm\", \"quantasadm\", \"ingadmin\", \"devops\", \"jtbadm\", \"qntsadm\", \"fbmigadm\", \"fbmigadm\", \"eximadm\", \"kotadm\", \"dfsdev1\", \"sonaradm\", \"abreladm\", \"qudoseb\", \"wasadm\", \"ntbadm\", \"ubmigadm\", \"tstsp\", \"scmod03\", \"trgadm\", \"fecbdadm\", \"frel1adm\", \"_pamsdam\", \"_pamunix\", \"finadm\") and xdm.source.ipv4 not in (\"10.181.11.142\", \"10.156.118.117\", \"10.82.136.11\", \"10.10.100.68\", \"10.122.128.21\", \"10.152.163.42\", \"172.18.20.31\", \"172.18.38.149\", \"10.182.11.41\", \"172.18.1.25\", \"10.67.122.149\", \"10.219.7.67\", \"10.95.9.148\", \"10.118.132.98\", \"172.27.104.10\", \"10.122.128.20\", \"10.219.7.68\", \"10.139.38.106\", \"172.18.22.85\", \"10.67.122.151\", \"10.185.122.10\", \"10.76.63.68\", \"10.205.11.115\", \"10.67.122.150\", \"10.158.100.43\", \"10.82.136.10\", \"10.85.174.246\", \"10.78.172.244\", \"172.18.22.176\", \"10.204.11.97\", \"10.87.22.109\", \"10.67.122.148\", \"10.156.118.116\", \"172.18.43.37\", \"10.82.136.12\", \"10.139.38.107\") and xdm.target.host.hostname != \"bl4ul279\"\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name, security_groups\n| filter security_groups contains \"UNIX_Group_R1\" or security_groups contains \"UNIX_Group_R2\"\n) as ad_users ad_users.sam_account_name = xdm.source.user.username\n| filter sam_account_name != null\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, device_ip, _vendor, _product\n| comp count() as matched_events,\nvalues(*) as * by xdm.source.user.username,\n_time\n| filter matched_events >= 7\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to check if a system is vulnerable to a driver load by name attack.", "response": "datamodel\n| filter ((xdm.target.process.executable.filename ~= \".*\\\\panmonfltx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dbutil\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fairplaykd\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nvaudio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\superbmc\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bsmi\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\smarteio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bwrsh\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\agent64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asmmap64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dellbios\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\chaos\\-rootkit\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wcpu\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dh\\_kernel\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sbiosio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bw\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv102\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nt6\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mhyprot3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio64c\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asupio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\blackbonedrv10\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\d\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\driver7\\-x86\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sfdrvx32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\enetechio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sysinfodetectorx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fh\\-ethercat\\_dio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asromgdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\my\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dcprotect\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\irec\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gedevdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio32a\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gvcidrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_hwmio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nstr\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\inpoutx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hw\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hpportiox64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\iobitunlocker\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\b1\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\aoddriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\elbycdio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\protects\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kprocesshacker\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\speedfan\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\radhwmgr\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\iscflashx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\black\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\b4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hwos2ec10x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winflash64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\corsairllaccess64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_i2cio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\d3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\windows\\-xp\\-64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\aswvmm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_i2c64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\1\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nchgbios2x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cpuz141\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\segwindrvx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\tdeio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ntiolib\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gtckmdfbs\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\iomap64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\avalueio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\semav6msr\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lgdcatcher\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\b\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hwdetectng\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nt4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\tgsafe\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mydrivers\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\eneio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\procexp\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\viragt64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fpcie2com\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lenovodiagnosticsdriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cp2x72c\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kerneld\\.amd64\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_def64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\piddrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amifldrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cpuz\\_x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\proxy32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wsdkd\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\t8\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ucorew64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\atszio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lmiinfo\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\80\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nt3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ngiodriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lv561av\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gpcidrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fd3b7234419fafc9bdd533f48896ed73\\_b816c5cd\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rtport\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\full\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\viragt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fiddrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cupfixerx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cpupress\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hwos2ec7x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\driver7\\-x86\\-withoutdbg\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv10\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nvflsh64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrrapidstartdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\tmcomm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wiseunlo\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rwdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nvoclock\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\panio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mtcbsv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amigendrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\capcom\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\netflt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\phlashnt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dbutil\\_2\\_3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ni\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ntiolib\\_x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\atszio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lgcoretemp\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lha\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\phymem64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dbutildrv2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv103\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rtcore64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_hwmio64\\_w10\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ene\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio64b\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\piddrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\directio32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\monitor\\_win10\\_x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nt5\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrsmartconnectdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rtif\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\atillk64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\directio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asribdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kfeco11x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\citmdrv\\_ia64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sysdrv3s\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amp\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vboxdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\adv64drv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hostnt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\phymem\\_ext64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\echo\\_driver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winiodrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\pdfwkrnl\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\glckio2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv106\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nscm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_rcio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ncpl\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sandra\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fiddrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hwrwdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mhyprot\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrsetupdrv103\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\iqvw64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\b3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ssport\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_def\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\computerz\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\windows8\\-10\\-32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nstrwsk\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lurker\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bsmemx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wyproxy64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\t3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cpuz\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rtkio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\driver7\\-x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\netfilterdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ioaccess\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\testbone\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gameink\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kevp64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mhyprot2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\se64a\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vboxusb\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\windows7\\-32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vproeventmonitor\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio64a\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv101\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\netproxydriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\elrawdsk\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\zam64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cg6kwin2k\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asupio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\stdcdrvws64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\81\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\citmdrv\\_amd64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amdryzenmasterdriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vmdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sysinfo\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\alsysio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\directio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rzpnk\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amdpowerprofiler\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\truesight\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wirwadrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\phymemx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\msio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sepdrv3\\_1\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gametersafe\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_rcio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\d4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\t\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\eio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nt2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winring0\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\physmem\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\libnicm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\msio32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrautochkupddrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asio32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\etdsupp\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\smep\\_namco\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bandai\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\d2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\magdrvamd64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nvflash\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\goad\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\proxy64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amsdk\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kbdcap64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vdbsv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\pchunter\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sysconp\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dh\\_kernel\\_10\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\msrhook\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bedaisy\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dcr\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\panmonflt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bsmixp64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\otipcibus\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fidpcidrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kfeco10x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv104\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\c\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\tdklib64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bsmix64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_flash64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\stdcdrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\naldrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ctiio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bwrs\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nicm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio32b\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\paniox64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ecsiodriverx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\iomem64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fidpcidrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\aswarpot\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_rciow1064\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asmio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\openlibsys\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\viraglt64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dbk64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\t7\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\atlaccess\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nbiolib\\_x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\smep\\_capcom\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\iqvw64e\\.sys\") or (xdm.source.process.executable.filename ~= \".*\\\\panmonfltx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dbutil\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fairplaykd\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nvaudio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\superbmc\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bsmi\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\smarteio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bwrsh\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\agent64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asmmap64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dellbios\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\chaos\\-rootkit\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wcpu\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dh\\_kernel\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sbiosio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bw\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv102\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nt6\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mhyprot3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio64c\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asupio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\blackbonedrv10\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\d\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\driver7\\-x86\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sfdrvx32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\enetechio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sysinfodetectorx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fh\\-ethercat\\_dio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asromgdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\my\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dcprotect\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\irec\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gedevdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio32a\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gvcidrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_hwmio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nstr\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\inpoutx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hw\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hpportiox64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\iobitunlocker\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\b1\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\aoddriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\elbycdio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\protects\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kprocesshacker\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\speedfan\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\radhwmgr\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\iscflashx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\black\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\b4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hwos2ec10x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winflash64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\corsairllaccess64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_i2cio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\d3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\windows\\-xp\\-64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\aswvmm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_i2c64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\1\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nchgbios2x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cpuz141\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\segwindrvx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\tdeio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ntiolib\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gtckmdfbs\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\iomap64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\avalueio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\semav6msr\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lgdcatcher\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\b\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hwdetectng\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nt4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\tgsafe\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mydrivers\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\eneio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\procexp\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\viragt64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fpcie2com\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lenovodiagnosticsdriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cp2x72c\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kerneld\\.amd64\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_def64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\piddrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amifldrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cpuz\\_x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\proxy32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wsdkd\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\t8\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ucorew64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\atszio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lmiinfo\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\80\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nt3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ngiodriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lv561av\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gpcidrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fd3b7234419fafc9bdd533f48896ed73\\_b816c5cd\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rtport\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\full\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\viragt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fiddrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cupfixerx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cpupress\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hwos2ec7x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\driver7\\-x86\\-withoutdbg\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv10\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nvflsh64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrrapidstartdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\tmcomm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wiseunlo\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rwdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nvoclock\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\panio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mtcbsv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amigendrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\capcom\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\netflt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\phlashnt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dbutil\\_2\\_3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ni\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ntiolib\\_x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\atszio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lgcoretemp\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lha\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\phymem64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dbutildrv2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv103\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rtcore64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_hwmio64\\_w10\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ene\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio64b\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\piddrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\directio32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\monitor\\_win10\\_x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nt5\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrsmartconnectdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rtif\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\atillk64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\directio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asribdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kfeco11x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\citmdrv\\_ia64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sysdrv3s\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amp\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vboxdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\adv64drv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hostnt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\phymem\\_ext64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\echo\\_driver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winiodrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\pdfwkrnl\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\glckio2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv106\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nscm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_rcio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ncpl\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sandra\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fiddrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hwrwdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mhyprot\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrsetupdrv103\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\iqvw64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\b3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ssport\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_def\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\computerz\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\windows8\\-10\\-32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nstrwsk\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lurker\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bsmemx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wyproxy64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\t3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cpuz\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rtkio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\driver7\\-x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\netfilterdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ioaccess\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\testbone\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gameink\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kevp64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mhyprot2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\se64a\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vboxusb\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\windows7\\-32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vproeventmonitor\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio64a\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv101\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\netproxydriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\elrawdsk\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\zam64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cg6kwin2k\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asupio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\stdcdrvws64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\81\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\citmdrv\\_amd64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amdryzenmasterdriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vmdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sysinfo\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\alsysio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\directio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rzpnk\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amdpowerprofiler\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\truesight\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wirwadrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\phymemx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\msio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sepdrv3\\_1\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gametersafe\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_rcio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\d4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\t\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\eio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nt2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winring0\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\physmem\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\libnicm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\msio32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrautochkupddrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asio32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\etdsupp\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\smep\\_namco\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bandai\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\d2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\magdrvamd64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nvflash\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\goad\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\proxy64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amsdk\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kbdcap64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vdbsv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\pchunter\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sysconp\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dh\\_kernel\\_10\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\msrhook\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bedaisy\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dcr\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\panmonflt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bsmixp64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\otipcibus\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fidpcidrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kfeco10x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv104\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\c\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\tdklib64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bsmix64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_flash64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\stdcdrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\naldrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ctiio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bwrs\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nicm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio32b\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\paniox64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ecsiodriverx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\iomem64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fidpcidrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\aswarpot\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_rciow1064\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asmio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\openlibsys\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\viraglt64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dbk64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\t7\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\atlaccess\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nbiolib\\_x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\smep\\_capcom\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\iqvw64e\\.sys\"))\n\n\n\n"}
{"prompt": "I want to find events where HH.exe downloads or executes a CHM file from the internet.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"HH.exe\" or action_process_image_path ~= \".*\\\\hh\\.exe\") and (action_process_image_command_line contains \"http:\n\n\n\n"}
{"prompt": "I want to detect potentially suspicious processes launched from Event Viewer.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\eventvwr\\.exe\" and  not ((action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\mmc\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\WerFault\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\WerFault\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect potential misuse of Adplus.exe on my endpoints by identifying suspicious command line arguments.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\adplus\\.exe\" or actor_process_file_original_name = \"Adplus.exe\") and (action_process_image_command_line contains \" -hang \" or action_process_image_command_line contains \" -pn \" or action_process_image_command_line contains \" -pmn \" or action_process_image_command_line contains \" -p \" or action_process_image_command_line contains \" -po \" or action_process_image_command_line contains \" -c \" or action_process_image_command_line contains \" -sc \"))\n\n\n\n"}
{"prompt": "I want to see all events related to registry value modifications on Windows systems that fall under specific device groups.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id = \"4657\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious changes to Winevt channel access permissions in the Windows Event Log.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\WINEVT\\\\Channels\\\\.*\" and action_registry_key_name ~= \".*\\\\ChannelAccess\" and ((action_registry_value_name contains \"(A;;0x1;;;LA)\" or action_registry_value_name contains \"(A;;0x1;;;SY)\" or action_registry_value_name contains \"(A;;0x5;;;BA)\") or (action_registry_data contains \"(A;;0x1;;;LA)\" or action_registry_data contains \"(A;;0x1;;;SY)\" or action_registry_data contains \"(A;;0x5;;;BA)\"))) and  not (actor_process_image_path = \"C:\\\\Windows\\\\servicing\\\\TrustedInstaller.exe\" or (actor_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\" and actor_process_image_path ~= \".*\\\\TiWorker\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find brute force attacks on ASA or Fortigate devices that happened within the last minute and involved at least 10 login attempts for a single username.", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| fields xdm.event.description, xdm.event.original_event_type,\nxdm.event.outcome_reason, xdm.source.ipv4, xdm.target.ipv4,\nxdm.target.user.username, xdm.observer.action, xdm.observer.product,\nxdm.alert.subcategory, xdm.source.process.name, xdm.source.host.hostname,\n_time\n| filter xdm.event.original_event_type ~= \"32002|611102\"\n| comp earliest(_time) as FirstEventTimestamp,\nlatest(_time) as LatestEventTimestamp,\ncount() as EventCount by xdm.target.user.username,\nxdm.event.original_event_type,\nxdm.observer.action,\nxdm.source.ipv4,\nxdm.target.ipv4\n| filter EventCount >= 10 and timestamp_diff(LatestEventTimestamp, FirstEventTimestamp, \"SECOND\") <= 60"}
{"prompt": "I want to see alerts about files being downloaded through Microsoft Office applications like PowerPoint, Word, or Excel using HTTP.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\powerpnt\\.exe\" or action_process_image_path ~= \".*\\\\winword\\.exe\" or action_process_image_path ~= \".*\\\\excel\\.exe\") and action_process_image_command_line contains \"http\")\n\n\n\n"}
{"prompt": "I want to find instances of TeamViewer starting sessions on macOS hosts.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\/TeamViewer\\_Service\" and action_process_image_path ~= \".*\\/TeamViewer\\_Desktop\" and action_process_image_command_line ~= \".*\\/TeamViewer\\_Desktop\\ \\-\\-IPCport\\ 5939\\ \\-\\-Module\\ 1\")\n\n\n\n"}
{"prompt": "I want to see events related to suspicious archive tools and ISO burning tools that could indicate a phishing attack.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\Winrar\\.exe\" or actor_process_image_path ~= \".*\\\\7zFM\\.exe\" or actor_process_image_path ~= \".*\\\\peazip\\.exe\") and (action_process_image_path ~= \".*\\\\isoburn\\.exe\" or action_process_image_path ~= \".*\\\\PowerISO\\.exe\" or action_process_image_path ~= \".*\\\\ImgBurn\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances of the Triple Cross eBPF Rootkit being installed on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/sudo\" and (action_process_image_command_line contains \" tc \" and action_process_image_command_line contains \" enp0s3 \") and (action_process_image_command_line contains \" qdisc \" or action_process_image_command_line contains \" filter \"))\n\n\n\n"}
{"prompt": "I want to find instances where the Allow RDP Remote Assistance Feature has been enabled on Windows systems.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*System\\\\CurrentControlSet\\\\Control\\\\Terminal\\ Server\\\\fAllowToGetHelp\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to see events related to potential abuse of provisioning registry keys for binary proxy execution on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line ~= \".*SOFTWARE\\\\Microsoft\\\\Provisioning\\\\Commands\\\\.*\"\n\n\n\n"}
{"prompt": "I want to detect if any process on my endpoints is trying to access Microsoft Teams sensitive files like cookies or database files, except for the actual Teams application itself.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\Microsoft\\\\Teams\\\\Cookies\" or action_process_image_command_line contains \"\\\\Microsoft\\\\Teams\\\\Local Storage\\\\leveldb\") and  not (action_process_image_path ~= \".*\\\\Microsoft\\\\Teams\\\\current\\\\Teams\\.exe\")\n\n\n\n"}
{"prompt": "I want to find potentially malicious activity where User-Agent strings appear to be Base64 encoded and resemble common browser names like Chrome, AppleWebKit, Dalvik, or Mozilla.", "response": "datamodel\n| filter (xdm.network.http.browser ~= \"Q2hyb21l.*\" or xdm.network.http.browser ~= \"QXBwbGVXZWJLaX.*\" or xdm.network.http.browser ~= \"RGFsdmlr.*\" or xdm.network.http.browser ~= \"TW96aWxsY.*\")\n\n\n\n"}
{"prompt": "I want to find suspicious PowerShell scripts that create FileStream objects on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"New-Object\" and ScriptBlockText contains \"IO.FileStream\" and ScriptBlockText ~= \".*\\\\\\\\\\.\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect instances where attackers use ProtocolHandler.exe to download files from the internet.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\protocolhandler\\.exe\" or actor_process_file_original_name = \"ProtocolHandler.exe\") and (action_process_image_command_line contains \"ftp:\n\n\n\n"}
{"prompt": "I want to see events related to potentially suspicious processes executing from temporary folders on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \"\\/tmp\\/.*\"\n\n\n\n"}
{"prompt": "I want to find out if any users have been locked out of their accounts multiple times within an hour.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type)\n| filter message_id in (\"Security_4740_Microsoft-Windows-Security-Auditing\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \"@\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp earliest(_time) as FirstEventTime,\ncount(message_id) as match_events,\nvalues(*) as * by xdm.target.user.username\n| filter match_events > 3\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances where an Office application loads a PowerShell Core DLL.", "response": "preset = xdr_image_load\n| filter ((actor_process_image_path ~= \".*\\\\excel\\.exe\" or actor_process_image_path ~= \".*\\\\mspub\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\" or actor_process_image_path ~= \".*\\\\onenote\\.exe\" or actor_process_image_path ~= \".*\\\\onenoteim\\.exe\" or actor_process_image_path ~= \".*\\\\powerpnt\\.exe\" or actor_process_image_path ~= \".*\\\\winword\\.exe\") and (action_module_path contains \"\\\\System.Management.Automation.Dll\" or action_module_path contains \"\\\\System.Management.Automation.ni.Dll\"))\n\n\n\n"}
{"prompt": "I want to find instances of malware shellcode being executed within the \"verclsid.exe\" process.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\verclsid\\.exe\" and GrantedAccess = \"0x1FFFFF\") and ((CallTrace contains \"|UNKNOWN(\" and CallTrace contains \"VBE7.DLL\") or (SourceImage ~= \".*\\\\Microsoft\\ Office\\\\.*\" and CallTrace contains \"|UNKNOWN\"))\n\n\n\n"}
{"prompt": "I want to see events where an unsigned binary is loaded from a suspicious location on my system.", "response": "datamodel\n| filter (xdm.event.id in (11, 12) and (xdm.target.process.name ~= \".*\\\\Users\\\\Public\\\\.*\" or xdm.target.process.name ~= \".*\\\\PerfLogs\\\\.*\" or xdm.target.process.name ~= \".*\\\\Desktop\\\\.*\" or xdm.target.process.name ~= \".*\\\\Downloads\\\\.*\" or xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or xdm.target.process.name ~= \".*C\\:\\\\Windows\\\\TEMP\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find any DNS requests that might be related to Cloudflared tunnels, as they could indicate malicious activity like establishing a reverse shell or persistence.", "response": "datamodel\n| filter (xdm.network.dns.dns_question.name ~= \".*\\.v2\\.argotunnel\\.com\" or xdm.network.dns.dns_question.name ~= \".*protocol\\-v2\\.argotunnel\\.com\" or xdm.network.dns.dns_question.name ~= \".*trycloudflare\\.com\" or xdm.network.dns.dns_question.name ~= \".*update\\.argotunnel\\.com\")\n\n\n\n"}
{"prompt": "I want to find indicators of Linux reverse shell activity based on network connections.", "response": "preset = network_story\n| filter actor_process_image_path ~= \".*\\/bin\\/bash\" and  not ((action_local_ip in (\"127.0.0.1\", \"0.0.0.0\") or action_remote_ip in (\"127.0.0.1\", \"0.0.0.0\")))\n\n\n\n"}
{"prompt": "I want to see when and how Cortex XDR agents were tampered with by having \"cytool protect disable\" commands run on them.", "response": "config case_sensitive = false\n| dataset = xdr_data\n| filter (actor_process_command_line contains \"cytool protect disable\" and causality_actor_process_command_line not contains \"C:\\Windows\\System32\\WindowsPowerShell\\v1.0\\powershell.exe\\\" -executionpolicy bypass -file C:\\WINDOWS\\SCCM_ClientHealth\\ConfigMgrClientHealth.ps1 -config C:\\WINDOWS\\SCCM_ClientHealth\\config_\")\n| fields agent_hostname as Hostname, action_file_path, actor_process_image_path as apip,\nactor_process_command_line as apcl, causality_actor_process_image_path as capip,\ncausality_actor_process_command_line as capcl, os_actor_process_image_path as osapip,\nos_actor_process_command_line as ospcl, _time as CXReportTime\n| filter (apcl contains \"cytool protect disable\" and capip != \"\"\"C:\\\\Windows\\\\CCM\\\\CcmExec.exe\"\"\")\n| filter (apcl contains \"cytool protect disable\" and capcl not contains \"\"\"Machine\\\\Scripts\\\\Startup\\\\SMS_Service_Start.bat\"\"\")\n| dedup Hostname\n| join type = inner\n(dataset = host_inventory\n| arrayexpand services\n| alter Agent_Name = json_extract(services, \"$.display_name\"),\nAgent_Status = json_extract(services, \"$.started\"),\nAgent_State = json_extract(services, \"$.state\")\n| filter Agent_Name ~= \"(\\\"Cortex XDR\\\")\"\n) as AC AC.host_name = Hostname\n| alter diff = timestamp_diff(CXReportTime, _time, \"MINUTE\")\n| fields CXReportTime, Hostname, Agent_Name, Agent_Status,\ndiff as OTimeDiff, apip, apcl, _time as ObservedTime,\ncapip, capcl, osapip, ospcl\n| sort asc OTimeDiff,\ndesc Hostname"}
{"prompt": "I want to see events related to the acquisition of certificate private keys on Windows systems.", "response": "datamodel\n| filter xdm.event.id = 70\n\n\n\n"}
{"prompt": "I want to see events where AuditPol is used to disable specific audit logs like logon, system, SAM, privilege, object or process.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"/logon:none\" or action_process_image_command_line contains \"/system:none\" or action_process_image_command_line contains \"/sam:none\" or action_process_image_command_line contains \"/privilege:none\" or action_process_image_command_line contains \"/object:none\" or action_process_image_command_line contains \"/process:none\" or action_process_image_command_line contains \"/policy:none\")\n\n\n\n"}
{"prompt": "I want to see information about successful interactive logins of non-interactive accounts on Windows, including the username, source IP address, hostname, event ID, and domain.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type = \"XDR Collector\"\n| fields xdm.target.user.username, xdm.source.ipv4, xdm.source.host.hostname,\nxdm.logon.type, xdm.event.id, xdm.target.user.domain\n| filter xdm.event.id = \"4624\"\n| filter xdm.logon.type contains \"interactive\"\n| join\n(preset = ad_users\n| filter security_group_list contains \"Interactive Logon\"\n| fields sam_account_name\n) as ad ad.sam_account_name = xdm.target.user.username"}
{"prompt": "I want to find Windows events related to enabling local manifest installations with Winget.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\AppInstaller\\\\EnableLocalManifestFiles\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential Sysinternals tool executions where the EULA is accepted.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \" -accepteula\"\n\n\n\n"}
{"prompt": "I want to find Cisco Catalyst devices that are frequently showing signs of DHCP Snooping attacks based on their log messages.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 5m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time\n| filter (msg_id in (\"DHCP_SNOOPING-5-DHCP_SNOOPING_MATCH_MAC_FAIL\", \"DHCP_SNOOPING-5-DHCP_SNOOPING_UNTRUSTED_PORT\", \"DHCP_SNOOPING-5-DHCP_SNOOPING_FAKE_INTERFACE\", \"DHCP_SNOOPING-4-INVALID_RELEASE_OR_DECLINE_PKT\") or (msg_id in (\"DHCP_SNOOPING-5-DHCP_SNOOPING_NONZERO_GIADDR\") and xdm.event.description ~= \"message type: DHCPDECLINE\")) and xdm.event.description !~= \"message type: DHCPINFORM\"\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\nmsg_id,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ibpmdeviceip\",\naggregation_criteria1 = \"ibpmmsgid\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to find potential BearLPE exploitation attempts on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" or actor_process_file_original_name = \"schtasks.exe\") and (action_process_image_command_line contains \"/change\" and action_process_image_command_line contains \"/TN\" and action_process_image_command_line contains \"/RU\" and action_process_image_command_line contains \"/RP\"))\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple SymantecWSS SPAM category URLs based on behavioral study.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and category ~= \"Spam\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find PowerShell scripts that change permissions using Set-Acl.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Set-Acl \" and ScriptBlockText contains \"-AclObject \" and ScriptBlockText contains \"-Path \")\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious activity related to the rasdial.exe process.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*rasdial\\.exe\"\n\n\n\n"}
{"prompt": "I want to see alerts for potential KamiKakaBot activity, specifically when a Word document is executed through its Start Menu shortcut using cmd.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\cmd\\.exe\" and (action_process_image_command_line contains \"/c \" and action_process_image_command_line contains \".lnk ~\" and action_process_image_command_line contains \"Start Menu\\\\Programs\\\\Word\") and action_process_image_command_line ~= \".*\\.doc\")\n\n\n\n"}
{"prompt": "I want to find suspicious processes that load DLLs using CertOC.EXE and check if they are loading them from commonly abused locations.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certoc\\.exe\" or actor_process_file_original_name = \"CertOC.exe\") and action_process_image_command_line contains \" -LoadDLL \" and (action_process_image_command_line ~= \".*\\\\Appdata\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\" or action_process_image_command_line ~= \".*\\\\Downloads\\\\.*\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find potential cases of antivirus software DLL sideloading detected by Windows Event Logs.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\log\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Bitdefender\\ Antivirus\\ Free\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Bitdefender\\ Antivirus\\ Free\\\\.*\") or (actor_process_image_path = \"C:\\\\Program Files\\\\Dell\\\\SARemediation\\\\audit\\\\TelemetryUtility.exe\" and action_module_path in (\"C:\\\\Program Files\\\\Dell\\\\SARemediation\\\\plugin\\\\log.dll\", \"C:\\\\Program Files\\\\Dell\\\\SARemediation\\\\audit\\\\log.dll\")) or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Canon\\\\MyPrinter\\\\.*\")) or (action_module_path ~= \".*\\\\qrt\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\\\F\\-Secure\\\\Anti\\-Virus\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\F\\-Secure\\\\Anti\\-Virus\\\\.*\"))) or ((action_module_path ~= \".*\\\\ashldres\\.dll\" or action_module_path ~= \".*\\\\lockdown\\.dll\" or action_module_path ~= \".*\\\\vsodscpl\\.dll\") and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\\\McAfee\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\McAfee\\\\.*\"))) or (action_module_path ~= \".*\\\\vftrace\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\\\CyberArk\\\\Endpoint\\ Privilege\\ Manager\\\\Agent\\\\x32\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\CyberArk\\\\Endpoint\\ Privilege\\ Manager\\\\Agent\\\\x32\\\\.*\"))) or (action_module_path ~= \".*\\\\wsc\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\program\\ Files\\\\AVAST\\ Software\\\\Avast\\\\.*\" or action_module_path ~= \"C\\:\\\\program\\ Files\\ \\(x86\\)\\\\AVAST\\ Software\\\\Avast\\\\.*\"))) or (action_module_path ~= \".*\\\\tmdbglog\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\program\\ Files\\\\Trend\\ Micro\\\\Titanium\\\\.*\" or action_module_path ~= \"C\\:\\\\program\\ Files\\ \\(x86\\)\\\\Trend\\ Micro\\\\Titanium\\\\.*\"))) or (action_module_path ~= \".*\\\\DLPPREM32\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\program\\ Files\\\\ESET.*\" or action_module_path ~= \"C\\:\\\\program\\ Files\\ \\(x86\\)\\\\ESET.*\")))\n\n\n\n"}
{"prompt": "I want to find instances of UAC bypass attempts using the ComputerDefaults executable.", "response": "preset = xdr_process\n| filter (action_process_integrity_level in (\"High\", \"System\") and action_process_image_path = \"C:\\\\Windows\\\\System32\\\\ComputerDefaults.exe\") and  not ((actor_process_image_path contains \":\\\\Windows\\\\System32\" or actor_process_image_path contains \":\\\\Program Files\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious activities where Rundll32.exe is used to invoke system files (.sys).", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"rundll32.exe\" and (action_process_image_command_line contains \".sys,\" or action_process_image_command_line contains \".sys \"))\n\n\n\n"}
{"prompt": "I want to find files named \"WsmPty.xsl\" or \"WsmTxt.xsl\" that are *not* located in system folders like C:\\Windows\\System32 or C:\\Windows\\SysWOW64.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*WsmPty\\.xsl\" or xdm.target.file.filename ~= \".*WsmTxt\\.xsl\") and  not ((xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\"))\n\n\n\n"}
{"prompt": "{I want to see all communication with domains known to be involved in phishing attacks, coming from Cisco ASA, Fortinet Fortigate, and Netskope.} \n\n\nLet me know if you'd like any adjustments!", "response": "datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw, Netskope_Netskope_raw)\n| filter (xdm.network.http.url ~= \"<url>\") or (xdm.target.domain ~= \"<domain>\" or xdm.target.url ~= \"<url>\")"}
{"prompt": "I want to find instances where a server reboot was initiated by a user who is not authorized.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"Tools_Platform_Server\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.description ~= \"shutdown|reboot|poweroff|telinit|init \\d+\" and xdm.event.type in (\"sudo\", \"su\")\n| alter xdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0)),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.source.user.username not in (NULL, null, \"root\", \"reboot\")\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\ndevice_ip, _vendor, _product, _time, _insert_time\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all instances of OilRig APT using scheduled tasks for persistence on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and ServiceName in (\"SC Scheduled Scan\", \"UpdatMachine\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when someone removes full mailbox permissions from an account that isn't the owner.", "response": "config case_sensitive = false\n| dataset = msft_o365_exchange_online_raw\n| filter Operation IN (\"Remove-MailboxPermission\", \"Remove-ADPermission\", \"Remove-MailboxFolderPermission\", \"Remove-RecipientPermission\")\n| alter arraycount = array_length(regextract(Parameters, \"Name\"))\n| alter permission = if(arraycount = 1, json_extract_scalar(parameters, \"$[0].Value\"), if(arraycount = 2, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\")), if(arraycount = 3, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\"), \",\", json_extract_scalar(parameters, \"$[2].Value\")), if(arraycount = 4, concat(json_extract_scalar(parameters, \"$[0].Value\"), \",\", json_extract_scalar(parameters, \"$[1].Value\"), \",\", json_extract_scalar(parameters, \"$[2].Value\"), \",\", json_extract_scalar(parameters, \"$[3].Value\"))))))\n| fields Operation, MailboxOwnerUPN, UserId, ObjectId,\npermission, Parameters, ResultStatus, _time, CreationTime\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"obj_name\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to see alerts about when EFS fileshare mounts are deleted on AWS.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"elasticfilesystem.amazonaws.com\" and eventName = \"DeleteMountTarget\")\n\n\n\n"}
{"prompt": "I want to see alerts about potentially fake instances of HxTsr.exe running on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\hxtsr\\.exe\" and  not ((action_process_image_path contains \":\\\\program files\\\\windowsapps\\\\microsoft.windowscommunicationsapps_\" and action_process_image_path ~= \".*\\\\hxtsr\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find events related to malicious files with extensions like .dmp, .dump, or .hdmp.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\.dmp\" or xdm.target.file.filename ~= \".*\\.dump\" or xdm.target.file.filename ~= \".*\\.hdmp\")\n\n\n\n"}
{"prompt": "I want to see all DNS queries that target .onion domains.", "response": "datamodel\n| filter xdm.network.dns.dns_question.name contains \".onion\"\n\n\n\n"}
{"prompt": "I want to find potential indicators of SNAKE malware installation by looking for specific command-line arguments on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line ~= \"\\s[a-fA-F0-9]{64}\\s[a-fA-F0-9]{16}\"\n\n\n\n"}
{"prompt": "I want to see a list of unusual downloads today that are significantly higher than the average download amount over the past 7 days.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferrer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and host_dst !~= \"microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|youtube.com|ttech.service-now.com|supportportal.simcorp.com|anchor-ressol-dev.crm11.dynamics.com.mcas.ms\"\n| comp sum(bytes_src) as current_day_download,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referrer_url) as referrer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferrer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and host_dst !~= \"microsoft.com|symantec.com|download.windowsupdate.com|twitter.com|^edgedl|youtube.com|ttech.service-now.com|supportportal.simcorp.com|anchor-ressol-dev.crm11.dynamics.com.mcas.ms\"\n| comp sum(bytes_src) as 7_days_download,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referrer_url) as referrer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_download) as 7_days_download_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referrer_url)) as referrer_url,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_download > multiply(7_days_download_avg, 3)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find instances of DCOM InternetExplorer.Application Iertutil DLL hijack attacks detected on endpoints.", "response": "preset = xdr_event_log\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and RelativeTargetName ~= \".*\\\\Internet\\ Explorer\\\\iertutil\\.dll\") and  not (SubjectUserName ~= \".*\\$\")\n\n\n\n"}
{"prompt": "I want to see events related to new domain trusts being added on endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 4706\n\n\n\n"}
{"prompt": "I want to see alerts for when \"scrcons.exe\" is used alongside \"svchost.exe\" as part of a persistence script on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path = \"C:\\\\WINDOWS\\\\system32\\\\wbem\\\\scrcons.exe\" and actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\svchost.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts for suspicious processes trying to access or exfiltrate NTDS.DIT data.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\NTDSDump\\.exe\" or action_process_image_path ~= \".*\\\\NTDSDumpEx\\.exe\") or (action_process_image_command_line contains \"ntds.dit\" and action_process_image_command_line contains \"system.hiv\") or action_process_image_command_line contains \"NTDSgrab.ps1\") or (action_process_image_command_line contains \"ac i ntds\" and action_process_image_command_line contains \"create full\") or (action_process_image_command_line contains \"/c copy \" and action_process_image_command_line contains \"\\\\windows\\\\ntds\\\\ntds.dit\") or (action_process_image_command_line contains \"activate instance ntds\" and action_process_image_command_line contains \"create full\") or (action_process_image_command_line contains \"powershell\" and action_process_image_command_line contains \"ntds.dit\")) or (action_process_image_command_line contains \"ntds.dit\" and ((actor_process_image_path contains \"\\\\apache\" or actor_process_image_path contains \"\\\\tomcat\" or actor_process_image_path ~= \".*\\\\AppData\\\\.*\" or actor_process_image_path ~= \".*\\\\Temp\\\\.*\" or actor_process_image_path ~= \".*\\\\Public\\\\.*\" or actor_process_image_path ~= \".*\\\\PerfLogs\\\\.*\") or (action_process_image_path contains \"\\\\apache\" or action_process_image_path contains \"\\\\tomcat\" or action_process_image_path ~= \".*\\\\AppData\\\\.*\" or action_process_image_path ~= \".*\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\\\PerfLogs\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see detections related to the Visual Basic Command Line Compiler being used for potentially malicious purposes on endpoints.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\vbc\\.exe\" and action_process_image_path ~= \".*\\\\cvtres\\.exe\")\n\n\n\n"}
{"prompt": "I want to find any processes that might be using Covenant PowerShell Launcher based on the provided XQL query.", "response": "preset = xdr_process\n| filter (((action_process_image_command_line contains \"-Sta\" and action_process_image_command_line contains \"-Nop\" and action_process_image_command_line contains \"-Window\" and action_process_image_command_line contains \"Hidden\") and (action_process_image_command_line contains \"-Command\" or action_process_image_command_line contains \"-EncodedCommand\")) or (action_process_image_command_line contains \"sv o (New-Object IO.MemorySteam);sv d \" or action_process_image_command_line contains \"mshta file.hta\" or action_process_image_command_line contains \"GruntHTTP\" or action_process_image_command_line contains \"-EncodedCommand cwB2ACAAbwAgA\"))\n\n\n\n"}
{"prompt": "I want to see all instances of cron jobs on Linux endpoints that use /tmp/ in their command line.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*crontab\" and action_process_image_command_line contains \"/tmp/\")\n\n\n\n"}
{"prompt": "I want to see information about suspicious process creations on endpoints that use tools like \"tree.com\", \"WMIC.exe\", \"doskey.exe\", or \"sc.exe\" and write output to temporary files.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\tree\\.com\" or action_process_image_path ~= \".*\\\\WMIC\\.exe\" or action_process_image_path ~= \".*\\\\doskey\\.exe\" or action_process_image_path ~= \".*\\\\sc\\.exe\") or actor_process_file_original_name in (\"wmic.exe\", \"DOSKEY.EXE\", \"sc.exe\")) and (actor_process_image_command_line ~= \".*\\ \\>\\ \\%TEMP\\%\\\\.*\" or actor_process_image_command_line ~= \".*\\ \\>\\ \\%TMP\\%\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see events where processes are using \"Remove-MpPreference\" to tamper with Windows Defender settings.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"Remove-MpPreference\" and (action_process_image_command_line contains \"-ControlledFolderAccessProtectedFolders \" or action_process_image_command_line contains \"-AttackSurfaceReductionRules_Ids \" or action_process_image_command_line contains \"-AttackSurfaceReductionRules_Actions \" or action_process_image_command_line contains \"-CheckForSignaturesBeforeRunningScan \"))\n\n\n\n"}
{"prompt": "I want to see information about failed Cisco LDP authentication attempts.", "response": "datamodel\n| filter _raw_log contains \"LDP\" and ( contains \"SOCKET_TCP_PACKET_MD5_AUTHEN_FAIL\" or  contains \"TCPMD5AuthenFail\")\n\n\n\n"}
{"prompt": " I want to see events related to changes in domain trust settings, including new trusts being created and existing trusts being removed. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4706\", \"4707\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, xdm.target.user.sam_account_name, _insert_time,\ntarget_domain\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for instances where \"unregmp2.exe\" is used with the \"/HideWMP\" command-line argument as a proxy, potentially indicating an evasion technique.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\unregmp2\\.exe\" or actor_process_file_original_name = \"unregmp2.exe\") and action_process_image_command_line contains \" /HideWMP\")\n\n\n\n"}
{"prompt": "I want to see activity logs for privileged access groups like \"omausers\", \"omausers_e\", and \"mobility_byod_edb\" that include changes to membership, especially when users are added to these groups.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.target.user.groups in (\"omausers\", \"omausers_e\", \"mobility_byod_edb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events related to the creation of the LiveKD driver by either Livekd.exe or livek64.exe.", "response": "datamodel\n| filter (xdm.target.file.filename = \"C:\\\\Windows\\\\System32\\\\drivers\\\\LiveKdD.SYS\" and ((xdm.target.process.name ~= \".*\\\\livekd\\.exe\" or xdm.target.process.name ~= \".*\\\\livek64\\.exe\") or (xdm.source.process.name ~= \".*\\\\livekd\\.exe\" or xdm.source.process.name ~= \".*\\\\livek64\\.exe\")))\n\n\n\n"}
{"prompt": "I want to detect suspicious processes on endpoints that use specific sequences of characters in their command lines.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\") or (action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\") or (action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\" or action_process_image_command_line contains \"\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\ufffd\"))\n\n\n\n"}
{"prompt": "I want to find instances of PowerShell code using Rundll32 to obfuscate commands and potentially execute malicious payloads.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter ((Payload contains \"&&\" and Payload contains \"rundll32\" and Payload contains \"shell32.dll\" and Payload contains \"shellexec_rundll\") and (Payload contains \"value\" or Payload contains \"invoke\" or Payload contains \"comspec\" or Payload contains \"iex\"))\n\n\n\n"}
{"prompt": "I want to find instances where someone might be deleting volume shadow copies using PowerShell and WMI.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"Get-WmiObject\" or action_process_image_command_line contains \"gwmi\" or action_process_image_command_line contains \"Get-CimInstance\" or action_process_image_command_line contains \"gcim\") and action_process_image_command_line contains \"Win32_ShadowCopy\" and (action_process_image_command_line contains \".Delete()\" or action_process_image_command_line contains \"Remove-WmiObject\" or action_process_image_command_line contains \"rwmi\" or action_process_image_command_line contains \"Remove-CimInstance\" or action_process_image_command_line contains \"rcim\"))\n\n\n\n"}
{"prompt": "I want to find out about crashes of the Microsoft Malware Protection Engine on my endpoints.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Application Error\" and action_evtlog_event_id = 1000 and (Data contains \"MsMpEng.exe\" and Data contains \"mpengine.dll\"))\n\n\n\n"}
{"prompt": "I want to see alerts about users or service principals being added to privileged roles in Azure AD.", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Operation ~= \"Add app role assignment grant to user|Add app role assignment to service principal|Add app role assignment to group\"\n| alter source_user = json_extract_scalar(`Target`, \"$[3].ID\")\n| filter (source_user != \"LinkedIn\")\n| fields UserId, source_user, ObjectId, ResultStatus, Operation,\n_time, CreationTime, `Target`\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to find events related to disabling Windows Firewall through registry changes.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\WindowsFirewall\\\\StandardProfile\\\\EnableFirewall\" or action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Policies\\\\Microsoft\\\\WindowsFirewall\\\\DomainProfile\\\\EnableFirewall\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to find events where the NTDS.DIT file is created by an uncommon process, either as the target or source process.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\ntds\\.dit\" and (((xdm.target.process.name ~= \".*\\\\cmd\\.exe\" or xdm.target.process.name ~= \".*\\\\cscript\\.exe\" or xdm.target.process.name ~= \".*\\\\mshta\\.exe\" or xdm.target.process.name ~= \".*\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\\\pwsh\\.exe\" or xdm.target.process.name ~= \".*\\\\regsvr32\\.exe\" or xdm.target.process.name ~= \".*\\\\rundll32\\.exe\" or xdm.target.process.name ~= \".*\\\\wscript\\.exe\" or xdm.target.process.name ~= \".*\\\\wsl\\.exe\" or xdm.target.process.name ~= \".*\\\\wt\\.exe\") or (xdm.source.process.name ~= \".*\\\\cmd\\.exe\" or xdm.source.process.name ~= \".*\\\\cscript\\.exe\" or xdm.source.process.name ~= \".*\\\\mshta\\.exe\" or xdm.source.process.name ~= \".*\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\\\pwsh\\.exe\" or xdm.source.process.name ~= \".*\\\\regsvr32\\.exe\" or xdm.source.process.name ~= \".*\\\\rundll32\\.exe\" or xdm.source.process.name ~= \".*\\\\wscript\\.exe\" or xdm.source.process.name ~= \".*\\\\wsl\\.exe\" or xdm.source.process.name ~= \".*\\\\wt\\.exe\")) or ((xdm.target.process.name ~= \".*\\\\AppData\\\\.*\" or xdm.target.process.name ~= \".*\\\\Temp\\\\.*\" or xdm.target.process.name ~= \".*\\\\Public\\\\.*\" or xdm.target.process.name ~= \".*\\\\PerfLogs\\\\.*\") or (xdm.source.process.name ~= \".*\\\\AppData\\\\.*\" or xdm.source.process.name ~= \".*\\\\Temp\\\\.*\" or xdm.source.process.name ~= \".*\\\\Public\\\\.*\" or xdm.source.process.name ~= \".*\\\\PerfLogs\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to see how many times DOT1X authentication has failed on each Cisco Catalyst device over the last few minutes and identify devices with more than 5 failures.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 5m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter msg_id in (\"DOT1X-5-FAIL\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to detect communication with known malicious COVID IP addresses from my Fortinet Fortigate firewall.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw)\n| filter xdm.observer.action in (\"accept\", \"ip-conn\")\n| join\n(dataset = cv_fb_mz_iocs\n| filter ioc_description in (\"COVID IPAddress\") and ioc_type in (\"ipv4\")\n) as ioclookup ioclookup.ioc_value = xdm.source.ipv4\n| filter ioc_value = xdm.target.ipv4 or ioc_value = xdm.source.ipv4"}
{"prompt": " I want to find potential OGNL injection exploits in my JVM-based applications. ", "response": "datamodel\n| filter ( contains \"org.apache.commons.ognl.OgnlException\" or  contains \"ExpressionSyntaxException\")\n\n\n\n"}
{"prompt": "{I want to see all access denied login events for high profile users (Finance Group) in Infosys network, including details like error code and the username.} \n\n\nThis prompt reflects the purpose of the XQL query as described in the provided details.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4625\", \"4825\")\n| alter logon_type = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Logon Type:\\t\\t\\t([^\\n]+)\"), 0))\n| alter status_code = if(xdm.event.id IN (\"4625\"), arrayindex(regextract(xdm.event.description, \"Status:\\t\\t\\t([^\\n]+)\"), 0))\n| filter ((xdm.event.id IN (\"4625\") and logon_type = \"10\" and status_code = \"0xc000015b\") or xdm.event.id IN (\"4825\"))\n| alter target_username = if(xdm.event.id IN (\"4825\"), arrayindex(regextract(xdm.event.description, \"User Name:\\t([^\\n]+)\"), 0), xdm.target.user.username)\n| alter xdm.target.user.username = if(target_username ~= \"<domain>\", rtrim(target_username, \"<domain>\"), if(target_username ~= \"<domain>\", rtrim(target_username, \"<domain>\"), if(target_username ~= \"<domain>\", ltrim(target_username, \"<domain>\\\\\"), target_username)))\n| join type = left\n(dataset = enterprise_admin_list\n| filter admin_type = \"fin_user\"\n| alter fin_username = if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<domain>\", rtrim(username, \"<domain>\"), if(username ~= \"<domain>\", ltrim(username, \"<domain>\\\\\"), username)))\n) as fin_admin fin_admin.fin_username = target_username\n| filter fin_username != null\n\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| alter xdm.source.ipv4 = if(xdm.source.ipv4 = null, trim(arrayindex(regextract(xdm.event.description, \"Client Address:\\s([^\\n]+)\"), 0)), xdm.source.ipv4)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_username\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where Bitsadmin is used to download files directly from an IP address.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or actor_process_file_original_name = \"bitsadmin.exe\") and (action_process_image_command_line contains \" /transfer \" or action_process_image_command_line contains \" /create \" or action_process_image_command_line contains \" /addfile \") and (action_process_image_command_line contains \":\n\n\n\n"}
{"prompt": "I want to find files with suspicious double extensions, like \".doc.exe\" or \".rar.zip\".", "response": "datamodel\n| filter (((xdm.target.file.filename ~= \".*\\.exe\" or xdm.target.file.filename ~= \".*\\.iso\" or xdm.target.file.filename ~= \".*\\.rar\" or xdm.target.file.filename ~= \".*\\.zip\") and (xdm.target.file.filename contains \".doc.\" or xdm.target.file.filename contains \".docx.\" or xdm.target.file.filename contains \".jpg.\" or xdm.target.file.filename contains \".pdf.\" or xdm.target.file.filename contains \".ppt.\" or xdm.target.file.filename contains \".pptx.\" or xdm.target.file.filename contains \".xls.\" or xdm.target.file.filename contains \".xlsx.\")) or (xdm.target.file.filename ~= \".*\\.rar\\.exe\" or xdm.target.file.filename ~= \".*\\.zip\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential recon activity that uses DriverQuery.EXE, especially when it's paired with scripts or suspicious file paths.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*driverquery\\.exe\" or actor_process_file_original_name = \"drvqry.exe\") and ((actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") or (actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\.*\" or actor_process_image_path ~= \".*\\\\Users\\\\Public\\\\.*\" or actor_process_image_path ~= \".*\\\\Windows\\\\Temp\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to detect when someone opens a password protected ZIP file attachment from an email on my endpoints.", "response": "preset = xdr_event_log\n| alter TargetName = regextract(to_json_string(action_evtlog_data_fields)->TargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5379 and (TargetName contains \"Microsoft_Windows_Shell_ZipFolder:filename\" and TargetName contains \"\\\\Temporary Internet Files\\\\Content.Outlook\"))\n\n\n\n"}
{"prompt": " I want to find potential instances of sideloading malicious DLLs from suspicious locations on Windows systems. ", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\coreclr\\.dll\" or action_module_path ~= \".*\\\\facesdk\\.dll\" or action_module_path ~= \".*\\\\HPCustPartUI\\.dll\" or action_module_path ~= \".*\\\\libcef\\.dll\" or action_module_path ~= \".*\\\\ZIPDLL\\.dll\") and ((action_module_path ~= \".*\\:\\\\Perflogs\\\\.*\" or action_module_path ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_module_path contains \"\\\\Temporary Internet\" or action_module_path ~= \".*\\\\Windows\\\\Temp\\\\.*\") or ((action_module_path ~= \".*\\:\\\\Users\\\\.*\" and action_module_path ~= \".*\\\\Favorites\\\\.*\") or (action_module_path ~= \".*\\:\\\\Users\\\\.*\" and action_module_path ~= \".*\\\\Favourites\\\\.*\") or (action_module_path ~= \".*\\:\\\\Users\\\\.*\" and action_module_path ~= \".*\\\\Contacts\\\\.*\") or (action_module_path ~= \".*\\:\\\\Users\\\\.*\" and action_module_path ~= \".*\\\\Pictures\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find suspicious instances of the \"schtasks\" command being used with high privileges and specific scheduling options like ONLOGON, ONSTART, ONCE, or ONIDLE.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" or actor_process_file_original_name = \"schtasks.exe\") and (action_process_image_command_line contains \" ONLOGON \" or action_process_image_command_line contains \" ONSTART \" or action_process_image_command_line contains \" ONCE \" or action_process_image_command_line contains \" ONIDLE \") and (action_process_image_command_line contains \"NT AUT\" or action_process_image_command_line contains \" SYSTEM\" or action_process_image_command_line contains \"HIGHEST\"))\n\n\n\n"}
{"prompt": "I want to detect instances of Whoami.EXE being executed with the output option (/FO CSV or -FO CSV), including those capturing output to a file.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\whoami\\.exe\" or actor_process_file_original_name = \"whoami.exe\") and (action_process_image_command_line contains \" /FO CSV\" or action_process_image_command_line contains \" -FO CSV\")) or action_process_image_command_line contains \"whoami*>\"\n\n\n\n"}
{"prompt": "I want to find events where users are retrieving domain password policy information using PowerShell.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Get-AdDefaultDomainPasswordPolicy\"\n\n\n\n"}
{"prompt": "I want to see events related to potential exploitation of CVE-2022-30190 through modifications to the MSDT registry keys.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \"HKCR\\\\ms\\-msdt\\\\.*\"\n\n\n\n"}
{"prompt": "I want to find instances where PsExec is used to execute processes as the LOCAL SYSTEM user.", "response": "preset = xdr_process\n| filter (actor_process_image_path = \"C:\\\\Windows\\\\PSEXESVC.exe\" and (action_process_username contains \"AUTHORI\" or action_process_username contains \"AUTORI\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious scheduled tasks that use GUIDs in their task names.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" and action_process_image_command_line contains \"/Create \") and (action_process_image_command_line contains \"/TN \\\"{\" or action_process_image_command_line contains \"/TN '{\" or action_process_image_command_line contains \"/TN {\") and (action_process_image_command_line contains \"}\\\"\" or action_process_image_command_line contains \"}'\" or action_process_image_command_line contains \"} \"))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts using the \"Invoke-Obfuscation STDIN+\" launcher module that are attempting to execute malicious code.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| filter Payload ~= \"cmd.{0,5}(?\\:\\/c|\\/r).+powershell.+(?\\:\\$\\{?input\\}?|noexit).+\\\"\"\n\n\n\n"}
{"prompt": "I want to find out which departments have received multiple phishing emails with the same malicious payload from different senders within a specific timeframe.", "response": "config case_sensitive = false\n| dataset = trend_micro_email_security_raw\n| filter eventType in (\"Malware\", \"Ransomware\") and headerFrom != null and headerTo != null and details != null\n| alter headerTo_array = if(headerTo ~= \"\\\"\\\"\", recipients -> [], headerTo -> []),\nsender_domain = arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0),\nextracted_hashes = json_extract(details, \"$.fileInfo\") -> []\n| arrayexpand headerTo_array\n| filter headerTo_array ~= \"<domain>\"\n| alter headerTo_string = arrayindex(split(json_extract_scalar(headerTo_array, \"$.\"), \"@\"), 0),\nsender_domain = lowercase(arrayindex(regextract(headerFrom, \".?\\@(.*)\"), 0))\n| arrayexpand extracted_hashes\n| alter extracted_filesha256 = json_extract_scalar(extracted_hashes, \"$.fileSha256\")\n| join type = left\n(preset = ad_users\n| fields sam_account_name, department\n) as adusers adusers.sam_account_name = headerTo_string\n| filter sam_account_name != null and department != null\n| comp count() as department_observed_statistics,\nvalues(sender_domain) as sender_domain,\nvalues(headerTo_string) as recipients by extracted_filesha256,\ndepartment\n| filter array_length(sender_domain) > 1 and array_length(recipients) > 5"}
{"prompt": "I want to see events related to remote DLL loading using Rundll32.exe from the Windows Event Log.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\rundll32\\.exe\" and action_module_path ~= \"\\\\\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see events related to modifications of the VsCode PowerShell profile file.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\Microsoft\\.VSCode\\_profile\\.ps1\"\n\n\n\n"}
{"prompt": "I want to find instances of NirCmd being executed as SYSTEM on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \" runassystem \"\n\n\n\n"}
{"prompt": "I want to find instances of potential DLL sideloading using VMware Xfer logs.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\VMwareXferlogs\\.exe\" and action_module_path ~= \".*\\\\glib\\-2\\.0\\.dll\") and  not (action_module_path ~= \"C\\:\\\\Program\\ Files\\\\VMware\\\\.*\")\n\n\n\n"}
{"prompt": "I want to see details about CyberArk Vault activities related to retrieving user information, specifically focusing on event ID 178 and filtering out entries with IPs \"<ip>\".", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_src = xdm.target.user.username,\nuser_dst = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station != \"<ip>\" or device_ip not in (\"<ip>\")\n| filter reference_id in (178)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see a report of all login operations grouped by username, showing the target username, operation name, reference ID, tenant ID, result type, caller IP address, identity, alias host, protocol, and timestamp.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/WRITE\", \"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"50a92bdd-8137-47b2-9dd7-f9781d8b6916\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6e0083b9-e305-48e2-94a0-62a91c6225d2\", \"7cf73bd7-0eab-4b64-a4e1-20566896fadb\", \"eae9ab77-f765-4318-84b2-7c8f5834ac32\", \"51d7eb46-2232-4c67-9961-51d33adde0de\", \"54d1196b-1b30-47f7-8062-11cad613f554\", \"df6e35b5-ce24-4fdc-a7a7-4a244f7964d8\", \"2bbb3f69-aeae-4fac-9d21-05fd1d3ef12d\", \"930b3c9b-78bd-41cc-8f5a-bebe99362ffe\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"1c7a4c28-ed25-4f02-be9d-7f9f77a4141b\", \"67a16203-0ebc-49d6-878a-b368ceaf31fa\", \"647e5913-bb1c-41a0-b44c-1b89b9e71040\", \"f56b85ba-14f9-432a-b766-8365bb1dccca\", \"b4689f62-baa5-465a-8d19-991ad023b67e\", \"2575e67e-a88d-426a-a270-6d0428e8a2df\", \"78f76dfd-8ca8-4e00-817e-36a885d30ac1\", \"f55e6ad2-da7c-44a2-9066-b3ea9e276fef\", \"c7f1ebd7-256c-42cf-9d4b-2ab2f9d95b7f\", \"cd9847c0-a8d9-4a4e-9c79-cd7b30c063c4\", \"5779c357-af2a-4b82-a920-4d37141e03c6\", \"535acea7-c6c8-43a6-87a7-a07307e609ef\", \"dde82f29-1b15-46f0-b953-1754996739a4\", \"ac458e78-ef84-463f-81ba-e656e3283d61\", \"bf35912d-207b-459e-bf12-06b4310f59a4\", \"a05b02fe-5ad1-42e0-a7b3-7301ba6f2b32\", \"e4185f62-5f70-402f-9fb1-ad865a51412e\", \"976a3f12-9708-4923-96ce-bbead20af634\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"21a2d9d5-6b63-4499-bbe0-c97c01c1cb08\", \"c16d2854-05f8-4962-b87e-6fe697fe3e15\", \"95720531-8747-4e04-b7aa-420536625452\", \"cf24c914-8151-49d8-8f74-0437bfc448aa\", \"d64aac69-bb56-40f0-9e6b-fc4f672a3a2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"19c03ea8-d7ac-492f-9529-768d7be209d5\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"6baf778b-f4ac-4882-83c0-5b86ad3d3daa\", \"31e74830-22d4-4737-8fb3-9f8fbedd3205\", \"3dbb449f-4147-4931-b781-89f3998e398c\", \"02f2a25f-5664-4741-ba8b-7cc8a9edd68a\", \"657df92e-b199-42cb-a4c6-e669282494cd\", \"b1751e6c-bc1b-4426-8880-71d095bd7222\", \"0bc13dbb-cac3-4b09-bd4e-eb734ab9321a\", \"81eabac7-7374-464c-b197-2c36ed50a8a9\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"c74754c4-dfe5-43b1-a51a-93a15f2a96f6\", \"71e75463-ce41-43b8-9220-b1c735380841\", \"7a15a5de-09b7-43f2-9ffd-b8556ff5705d\", \"c0503f2c-8d34-4d10-b965-51f01d363780\", \"08c2a279-e6fc-4504-8f80-719369a10001\", \"959da076-348d-4210-898a-cfbe94589187\", \"4bb365f6-0b7e-4e0e-aaf7-fb9d261959c8\", \"1e574113-353a-445e-8a7a-2bd5501298db\", \"c3e585a8-5aee-4dbb-9365-178b88833889\", \"cc98f380-61c8-4f9d-a050-daf3059304c6\", \"f63d6a73-84fe-4700-92c5-02835dc063da\", \"c4e6cab2-7d4d-41a6-9a6a-0c1c936d3889\", \"843627c4-2bc6-4e56-b67b-2f97c547de5f\", \"54aeed41-c72c-4081-a936-57c6d0f7f3c2\", \"fad455e5-fe6a-4bcb-ba70-17c2b56b4d43\", \"649c9a86-4b3a-4f7a-8c83-94d7983f7cad\", \"4a045715-f813-42a1-b1aa-9790e42fc47f\", \"df48d742-75d8-4077-901a-7cecf80df757\", \"95f3dc45-7bc1-4bba-b888-270e96ce4226\", \"cc4b554b-c1fa-4813-a64d-9139042c2302\", \"93bcb451-8523-4c08-9416-f68c8824456b\", \"a55c3cdf-77d1-4407-888b-e47743915aa1\", \"9ae8a947-aed5-46df-88a4-6ea7ec6a8a31\", \"671ca6b6-3951-4ee6-b15c-0d4eda184b04\", \"9ed4c0bd-c3a8-4143-9c92-dc881ee908bb\", \"a8e126b2-12b0-411f-a12e-a8b34cd08c7f\", \"3a8906de-81cd-48e1-a210-93270f766b59\", \"563b4be4-3f81-486c-82f9-bc33a806f199\", \"db03aefd-9ab4-4c8d-8cf7-1bec391a40e3\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"e75f7f67-2ac1-4fc3-9303-bc15046cd9ee\", \"6cbf218d-583d-4bd1-b05c-75e6b2225937\", \"e3b04c38-70e1-4089-b937-ee890edd9519\", \"d7d12dcf-38aa-4cae-9177-da16e6120da2\", \"46d8b1ed-9966-489a-a479-c3b0bd78a58e\", \"0fe4ef20-a73d-4f8d-be0c-af933ebbb57e\", \"8c8a2c85-c0e3-4896-8f65-e3090e6a5793\", \"32fb05e8-65e7-4c8d-81b1-1188e1723ef4\", \"47ce881a-b1fe-4768-86c3-faf4e876ee86\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"07aed9c2-2871-41a7-b60b-7ab8463fa6a7\", \"9eaa496f-e49a-4a23-8290-bf8a3305c114\", \"702b5b37-0dbb-498d-b1cb-641c0812fd33\", \"5f1445ba-8128-442a-91e9-5443b84ad63c\", \"1c6e29a8-9084-4a31-8531-593da9ee0524\", \"51e35cd9-a340-402d-8c21-5cc96e71c1d1\", \"087c9571-6c18-42ae-8ac8-2575663403c5\", \"e531428f-0287-4541-8113-f31fc4641a6b\", \"c6b8bbb0-a854-456f-b1f1-85916c0c4c44\", \"09c23e47-a5e9-45a9-966c-f6b44bc8201e\", \"53679008-6ef7-46af-b016-f7747fb465cb\", \"670d0589-6670-47dc-8451-273b314d281b\", \"477e2c0d-d05f-486d-9d7a-60ddbd533018\", \"822a74f7-b307-4da6-883f-bc3b602d6776\", \"ab889024-cd32-4819-99ee-157beea80f56\", \"6460312c-c59c-449c-bb39-eda583a5c9ad\", \"f9356d3b-8c38-4842-91dd-bbc634bb31a4\", \"7046e2cd-98fa-4e27-8cdd-47a20edac165\", \"abcb7fd2-86a0-4cab-b836-32f77dfd6d69\", \"21095212-bb36-4929-aad2-df1b2746160b\", \"aef36ee1-5bbe-44db-8d38-ca823d0cd24c\", \"cdd26dd5-f7a3-4657-8339-bbd164148af3\", \"0d244246-4001-4cfc-9e9d-2034759352f1\", \"caf017d5-08ff-46a0-a96b-8051ba43c746\", \"72cb1331-c65b-479f-9600-f46f6c3598ec\", \"7d0d986f-d105-4f8d-b42a-350d80de40f6\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"74d3be1b-fc1c-4768-8ba8-0e79e17ee780\", \"f7661dcd-a89c-41d2-a0a8-a8dd878fa7b1\", \"fada523f-574e-4c7f-8e09-d3bf0943c261\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"ebd04caf-cec3-493c-90b9-0c9eee9b30ee\", \"3d9581fc-ab19-4358-99b8-80e0b9d0f780\", \"f369c8f1-8315-4fc4-b86d-fb613e1dda63\", \"8a0606aa-753d-49bb-a4e4-7542c4a9dec1\", \"c37bb826-0bc3-49f6-8ac2-96185f612e28\", \"81c6910a-81db-4144-bc3e-b524a4a35e04\", \"c3c70df4-47dd-4514-bfdd-7e75d5d1ae54\", \"62665ba1-dd94-42c6-b628-6ce0dd49218a\", \"62213f2e-b771-4967-aaa7-87e097fdab67\", \"a27633f8-4a0d-457c-a81b-62ed66f4dcb5\", \"6b505b5f-ac52-4bb6-bd1e-b4ce69edeac3\", \"8dd27fc2-9805-412c-b857-ea326def0da7\", \"205bae28-0bc7-4435-94c9-2c7cddf43255\", \"7f83d268-148d-4cb1-8433-b85e103feadb\", \"4fa3372c-ad0f-4cde-8670-dd65b0c117f1\", \"e7ff1d4f-ebb4-48c9-94d0-8840d7924cf7\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"a7409bf1-7feb-4eb2-a23f-701ee1b03d8c\", \"7141afc0-3afb-49c1-b125-290a5c75cd95\", \"95a42b9f-5fae-4cf9-853c-55c8a54b52a3\", \"911449fa-3292-4ae0-9b20-14eae4680e9d\", \"3021c645-6ff5-4c19-9023-9317bf127c86\", \"8292e4c5-afad-4184-9df6-ac69d270ca81\", \"ba047d80-3b9a-4628-8c5c-7d68cc64f445\", \"28967113-18ab-4d2f-9a41-1c0dabc15025\", \"6cfae23c-529f-4d98-a287-6ae711088d7b\", \"82be0564-4347-4c6b-82fb-781b67e61b02\", \"9b6c33fc-0992-40b0-ac71-f69e96bcd14f\", \"358ce32e-309f-4d10-9896-03dfa7d20df8\", \"cfccba02-4a28-42e5-9231-b83a61960ecd\", \"c200744e-362a-4404-9456-d813301e3915\", \"bc5209a3-d7c4-44e0-8620-53a697942d62\", \"3c1d7d39-72c4-4c92-bffe-669be3d70c3d\", \"0776de4d-3c76-4b64-97f1-692b7ff1a2bc\", \"52d9c25b-f263-4ca0-80ca-d4feeee49dc8\", \"46421705-2b6d-4cb5-9443-9e32aeccb5f3\", \"362ffea6-bdda-4c6a-a2c9-197bdfe16727\", \"ad49c718-8238-4885-85a9-0667a8790ff4\", \"21a75d95-d9ac-451f-8d90-8f083dc4d774\", \"e8a83a58-4f72-4c46-8299-7b1fd47cd63b\", \"5d83df35-965d-43d5-8916-0f5d325436fc\", \"5fc55004-edd5-4d87-beca-5887dfe573ea\", \"0a583e81-f3e8-4bc4-8600-c691a0b50786\", \"965ec6b8-220a-4bb9-b97e-727acfd8a0e8\", \"508b28a2-9792-40dc-91ec-84bbee30bb15\", \"55578356-c316-4e03-94a8-5a94c6489110\", \"9bb64f10-ab70-40bc-9572-3332d57bd94f\", \"923fba33-9e85-41ab-b17f-a7b5425c67b8\", \"8efddeb1-f521-411e-850f-23dfdb1d2551\", \"7541eae6-ca6a-49b0-8716-29bc779dca0c\", \"526c9d9a-86b0-4bf1-9ae4-e876b69dc37b\", \"bb059054-6f8e-46b1-bc5b-5ccf3e36730e\", \"db76ac69-5794-43f5-821c-1fe0771a887f\", \"78c30614-1fac-4641-adb6-f6f605ce7282\", \"e94f3a83-97a4-4380-966f-feef8abe4918\", \"15974792-1ee6-4df9-83f2-d816509fa504\", \"610f2256-5b75-4b9c-adf3-c51d654961bd\", \"f3d7c50f-2b84-4e77-a869-abd0f44aafda\", \"04733ed9-58ef-44e8-8ca6-07b56b27badc\", \"8bf4468c-eb63-480c-8aa6-82d34c398ab1\", \"c8756c02-3a75-4dcc-9513-5ca91334e638\", \"8ee32e89-368c-4f9b-bdb9-bbf60071196c\", \"3db5d520-d59f-42da-90e6-63e4b8d67bc3\", \"7048442f-6732-41c1-9723-07af625b80c4\", \"c78f1f44-ed34-4563-a7e4-436b372357d4\", \"c1f94bbb-bad2-441f-813e-24d807066467\", \"26b30438-87b5-4a11-aa5b-a55474b54cc2\", \"7a56b224-c1c8-4013-b978-14a5bf8ec0ec\", \"ecc73e52-5ef2-413b-8c20-b44b22c73bcf\", \"5e6a8833-319d-4d24-8bd1-527ddcf6ea16\", \"058aa436-9042-4335-86f1-5281c4247f2b\", \"51486777-deb4-4a65-9536-7d6d60c71191\", \"1b611507-1ef5-426f-8134-5825e8b51ccb\", \"910445fb-ff2e-439b-be91-39a91001e11a\", \"d99aa8f7-4047-4023-b3f7-fcba5334940c\", \"e000aa52-c94c-41aa-beb5-45054ff1a0b4\", \"e22720a9-6792-4e6d-85e7-1df7f81dfb7f\", \"06c15097-a509-4df9-865c-ba08832e8d1b\", \"d4923641-143d-457d-8be2-492711dd06ab\", \"9a15cf08-c4fc-4f22-8051-c4a554e50c74\", \"120284b1-3c0a-4461-8169-abc293f95df5\", \"ec36b5e7-2db7-492d-b507-52798bbddd90\", \"9ec36f01-3ba7-4655-a804-e97169995a2b\", \"668cd044-645d-4072-9b10-7d2997f250bd\", \"c5ffd1fa-eb23-4120-bcda-c8fb290c551c\", \"ec25720d-e93b-400c-9393-48433d969fab\", \"456ca616-3e6f-4200-8840-c5a9b45640de\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where wmic.exe is used to retrieve product information.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wmic\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and action_process_image_command_line contains \"Product\")\n\n\n\n"}
{"prompt": "{I want to find any instances where a process executable path contains \"tap0901\", as this might indicate an exfiltration attempt.} \n\n\nThis prompt captures the intent of the XQL query while using natural language and highlighting the potential security concern.", "response": "datamodel\n| filter xdm.target.process.executable.path contains \"tap0901\"\n\n\n\n"}
{"prompt": "I want to see Cortex XQL queries that detect potential recon commands where the output is piped to \"findstr\".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"ipconfig /all | find \" or action_process_image_command_line contains \"ipconfig /all | findstr \" or action_process_image_command_line contains \"ipconfig | find \" or action_process_image_command_line contains \"ipconfig | findstr \" or action_process_image_command_line contains \"ipconfig.exe /all | find \" or action_process_image_command_line contains \"ipconfig.exe /all | findstr \" or action_process_image_command_line contains \"ipconfig.exe | find \" or action_process_image_command_line contains \"ipconfig.exe | findstr \" or action_process_image_command_line contains \"net start | find\" or action_process_image_command_line contains \"net start | findstr\" or action_process_image_command_line contains \"net.exe start | find\" or action_process_image_command_line contains \"net.exe start | findstr\" or action_process_image_command_line contains \"net1 start | find\" or action_process_image_command_line contains \"net1 start | findstr\" or action_process_image_command_line contains \"net1.exe start | find\" or action_process_image_command_line contains \"net1.exe start | findstr\" or action_process_image_command_line contains \"netstat -ano | find\" or action_process_image_command_line contains \"netstat -ano | findstr\" or action_process_image_command_line contains \"netstat | find\" or action_process_image_command_line contains \"netstat | findstr\" or action_process_image_command_line contains \"netstat.exe -ano | find\" or action_process_image_command_line contains \"netstat.exe -ano | findstr\" or action_process_image_command_line contains \"netstat.exe | find\" or action_process_image_command_line contains \"netstat.exe | findstr\" or action_process_image_command_line contains \"ping | find\" or action_process_image_command_line contains \"ping | findstr\" or action_process_image_command_line contains \"ping.exe | find\" or action_process_image_command_line contains \"ping.exe | findstr\" or action_process_image_command_line contains \"systeminfo | find \" or action_process_image_command_line contains \"systeminfo | findstr \" or action_process_image_command_line contains \"systeminfo.exe | find \" or action_process_image_command_line contains \"systeminfo.exe | findstr \" or action_process_image_command_line contains \"tasklist | find \" or action_process_image_command_line contains \"tasklist | findstr \" or action_process_image_command_line contains \"tasklist.exe | find \" or action_process_image_command_line contains \"tasklist.exe | findstr \" or action_process_image_command_line contains \"whoami /all | find \" or action_process_image_command_line contains \"whoami /all | findstr \" or action_process_image_command_line contains \"whoami.exe /all | find \" or action_process_image_command_line contains \"whoami.exe /all | findstr \")\n\n\n\n"}
{"prompt": "I want to see CyberArk Vault activity logs that show users retrieving passwords, excluding those from specific usernames and IPs.", "response": "config case_sensitive = false\n| datamodel dataset = cyber_ark_vault_raw\n| alter reference_id = to_integer(xdm.event.id),\nuser_src = xdm.target.user.username,\nuser_dst = xdm.source.user.username,\nreason = xdm.event.outcome_reason,\naction = xdm.event.operation_sub_type,\ncommand = xdm.source.process.command_line,\nstation = xdm.source.ipv4,\ndirectory = xdm.target.file.filename,\nhost_dst = xdm.intermediate.ipv4,\nhost_src_name = xdm.source.host.hostname,\nhost_dst_name = xdm.target.host.hostname,\npolicy_name = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"PolicyID=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nsafe_name = cyber_ark_vault_raw.cs2,\ngateway_station = xdm.target.ipv4,\nserver_name = arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"\\d+\\-\\d+\\-\\d+T\\d+\\:\\d+\\:\\d+Z\\s([^\\s]+)\"), 0),\nseverity = xdm.event.log_level,\nlogon_domain = replace(arrayindex(regextract(cyber_ark_vault_raw._raw_log, \"LogonDomain=([^\\;]+)\"), 0), \"\\\"\", \"\"),\nSourceUser = xdm.source.user.username,\nTargetUser = xdm.target.user.username,\nec_outcome = xdm.event.outcome,\ndevice_ip = cyber_ark_vault_raw._final_reporting_device_ip\n| alter filename = arrayindex(split(directory, \"\\\"), -1)\n| fields reference_id, user_src, user_dst, reason, action,\ncommand, station, directory, host_dst, filename,\nhost_src_name, host_dst_name, safe_name, policy_name,\ngateway_station, server_name, severity, logon_domain,\nec_outcome, SourceUser, TargetUser, _time, device_ip\n| filter station != \"10.64.103.83\" or device_ip not in (\"10.64.103.83\")\n| filter action ~= \"retrieve password\" and user_dst not in (\"passwordmanager\", \"pvwaappuser\", \"pvwaappuser1\", \"pvwaappuser2\", \"administrator\", \"\") and user_dst != null and user_dst !~= \"^CPM_\" and user_src not in (\"skyboxlb\", \"psmadminconnect\", \"psmconnect\", \"\") and user_src != null\n| alter aggrega10ion_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious PowerShell scripts that are hiding windows.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"powershell\" and ScriptBlockText contains \"WindowStyle\" and ScriptBlockText contains \"Hidden\") and  not ((ScriptBlockText ~= \".*\\:\\\\Program\\ Files\\\\Amazon\\\\WorkSpacesConfig\\\\Scripts\\\\.*\" and ScriptBlockText contains \"$PSScriptRoot\\\\Module\\\\WorkspaceScriptModule\\\\WorkspaceScriptModule\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when a non-privileged or administrator user changes the Kerberos Policy on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4713\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name,\ntarget_domain\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to know if this list of driver names indicates potential vulnerabilities.", "response": "datamodel\n| filter ((xdm.target.process.executable.filename ~= \".*\\\\reddriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mhyprot2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hwos2ec7x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv103\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\e29f6311ae87542b3d693c1f38e4e3ad\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gvcidrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\spwizimgvt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hwos2ec10x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\e939448b28a4edc81f1f974cebf6e7d2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\phymemx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dh\\_kernel\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_def\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nbiolib\\_x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\viraglt64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ntiolib\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\paniox64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\libnicm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\phymem64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fiddrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cpuz141\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\yyprotect64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\aswarpot\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\t8\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\driver7\\-x86\\-withoutdbg\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dcr\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\b3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asupio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\blackbonedrv10\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rzpnk\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\iomem64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kfeco11x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\t\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mimikatz\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\_4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\chaos\\-rootkit\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mhyprot\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nlslexicons0024uvn\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\piddrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\aswvmm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\superbmc\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kprocesshacker\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lmiinfo\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\jokercontroller\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\blackbone\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fur\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vboxmousent\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mapmom\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\windows\\-xp\\-64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\d3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\inpout32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\tfbfs3ped\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\etdsupp\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asmmap64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lurker\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\alsysio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ntiolib\\_x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asas\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vproeventmonitor\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dbutil\\_2\\_3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\malicious\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cpupress\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\netfilter2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wintapix\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mhyprotnap\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ktes\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\titidrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rtcore64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\physmem\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\d\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv106\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winiodrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\phlashnt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sfdrvx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ene\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nqrmq\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\phydmaccx86\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fd3b7234419fafc9bdd533f48896ed73\\_b816c5cd\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\magdrvamd64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\a26363e7b02b13f2b8d697abb90cd5c3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amdryzenmasterdriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amigendrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\d2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\agent64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_rcio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\goad\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bsmi\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nvflsh64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gametersafe\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ndislan\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bw\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\directio32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrsmartconnectdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ktgn\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\eneio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amp\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\tmel\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nstr\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winring0\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fiddrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\tmcomm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\poortry2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bsmemx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gmer64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\panio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ucorew64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\atszio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nt2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\pciecubed\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nvflsh32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ssport\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wcpu\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\msio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\black\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nicm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank1\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\my\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\tgsafe\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dbk64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\proxydrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\1fc7aeeff3ab19004d2e53eae8160ab1\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\capcom\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asio32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\proxy32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv102\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vboxguest\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vboxtap\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\poortry\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ntbios\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\glckio2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dbutildrv2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kfeco10x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lenovodiagnosticsdriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\netfilter\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\corsairllaccess64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\semav6msr\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_rciow1064\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vboxusbmon\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nodedriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\iobitunlocker\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\smep\\_namco\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\xjokercontroller\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\irec\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asribdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mhyprot3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank6\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fidpcidrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bandai\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\procexp\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank5\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\daxin\\_blank4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bedaisy\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv10\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bwrsh\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\eio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio64a\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\citmdrv\\_ia64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\7\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\b\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bwrs\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nt3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wiseunlo\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ncpl\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ctiio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hw\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asromgdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_hwmio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lgdatacatcher\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rtkio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\phydmaccx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mtcbsv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ni\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\b4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\directio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vboxdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nvflash\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hpportiox64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_i2c64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\iomap64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vboxusb\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\msqpq\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sysinfo\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mhyprotect\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\naldrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lgdcatcher\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\echo\\_driver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\otipcibus\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\testbone\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lctka\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wyproxy64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\pchunter\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amdpowerprofiler\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\_3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\test2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rtcoremini64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\d4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\piddrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\panmonflt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\windows8\\-10\\-32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\_5\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mjj0ge\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kt2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rtkiow8x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nstrwsk\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\msio32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ktmutil7odm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hwrwdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nchgbios2x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_hwmio64\\_w10\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mydrivers\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\t7\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\_6\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sandra\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\atillk64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cpuz\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\netproxydriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\protects\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrrapidstartdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dh\\_kernel\\_10\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ef0e1725aaf0c6c972593f860531a2ea\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\enetechio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\citmdrv\\_amd64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\iqvw64e\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bsmixp64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_i2cio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\prokiller64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\netflt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\4748696211bd56c2d93c21cab91e82a5\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\openlibsys\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\adv64drv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\be6318413160e589080df02bb3ca6e6a\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cupfixerx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\se64a\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\speedfan\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\a236e7d654cd932b7d11cb604629a2d0\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio32b\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio64b\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sysdrv3s\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lv561av\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_def64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mlgbbiicaihflrnh\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dbutil\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\834761775\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kdriver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\spf\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\dkrtk\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_flash64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nt4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\directio32\\_legacy\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\viragt64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hostnt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\poortry1\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\c94f405c5929cfcccc8ad00b42c95083\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\b1\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wantd\\_2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mhyprotrpg\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nscm\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\smep\\_capcom\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sense5ext\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lha\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\atszio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amifldrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\blacklotus\\_driver\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrautochkupddrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\cpuz\\_x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrautochkupddrv\\_1\\_0\\_32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bs\\_rcio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\elbycdio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fidpcidrv64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\elrawdsk\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\telephonuafy\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\rwdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\lgcoretemp\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\segwindrvx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\windows7\\-32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrsetupdrv103\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hwinfo32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\inpoutx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv101\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asupio64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\monitor\\_win10\\_x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\msrhook\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nt5\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\wfshbr64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\driver7\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\sfdrvx32\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv104\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gameink\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\hwinfo64i\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\bsmix64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio32a\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kbdcap64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\5a4fe297c7d42539303137b6d75b150d\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fairplaykd\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\a9df5964635ef8bd567ae487c3d214c4\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\fgme\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\skill\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\capcom2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\typelibde\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\nt6\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winio64c\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\driver7\\-x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\air\\_system10\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\panmonfltx64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\ntbios\\_2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\viragt\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\zam64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\vmdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\iqvw64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\1\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\t3\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\gftkyj64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\proxy64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kevp64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\netfilterdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\4118b86e490aed091b1a219dba45f332\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\6771b13a53b9c7449d4891e427735ea2\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\mimidrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\driver7\\-x86\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\windbg\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\80\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\directio\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\atomicredteamcapcom\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\81\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\full\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\asrdrv\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\kapchelper\\_x64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\c\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\winflash64\\.sys\" or xdm.target.process.executable.filename ~= \".*\\\\amsdk\\.sys\") or (xdm.source.process.executable.filename ~= \".*\\\\reddriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mhyprot2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hwos2ec7x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv103\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\e29f6311ae87542b3d693c1f38e4e3ad\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gvcidrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\spwizimgvt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hwos2ec10x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\e939448b28a4edc81f1f974cebf6e7d2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\phymemx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dh\\_kernel\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_def\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nbiolib\\_x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\viraglt64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ntiolib\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\paniox64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\libnicm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\phymem64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fiddrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cpuz141\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\yyprotect64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\aswarpot\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\t8\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\driver7\\-x86\\-withoutdbg\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dcr\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\b3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asupio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\blackbonedrv10\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rzpnk\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\iomem64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kfeco11x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\t\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mimikatz\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\_4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\chaos\\-rootkit\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mhyprot\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nlslexicons0024uvn\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\piddrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\aswvmm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\superbmc\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kprocesshacker\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lmiinfo\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\jokercontroller\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\blackbone\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fur\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vboxmousent\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mapmom\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\windows\\-xp\\-64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\d3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\inpout32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\tfbfs3ped\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\etdsupp\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asmmap64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lurker\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\alsysio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ntiolib\\_x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asas\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vproeventmonitor\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dbutil\\_2\\_3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\malicious\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cpupress\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\netfilter2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wintapix\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mhyprotnap\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ktes\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\titidrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rtcore64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\physmem\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\d\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv106\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winiodrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\phlashnt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sfdrvx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ene\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nqrmq\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\phydmaccx86\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fd3b7234419fafc9bdd533f48896ed73\\_b816c5cd\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\magdrvamd64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\a26363e7b02b13f2b8d697abb90cd5c3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amdryzenmasterdriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amigendrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\d2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\agent64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_rcio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\goad\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bsmi\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nvflsh64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gametersafe\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ndislan\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bw\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\directio32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrsmartconnectdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ktgn\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\eneio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amp\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\tmel\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nstr\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winring0\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fiddrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\tmcomm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\poortry2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bsmemx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gmer64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\panio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ucorew64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\atszio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nt2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\pciecubed\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nvflsh32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ssport\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wcpu\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\msio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\black\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nicm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank1\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\my\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\tgsafe\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dbk64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\proxydrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\1fc7aeeff3ab19004d2e53eae8160ab1\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\capcom\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asio32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\proxy32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv102\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vboxguest\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vboxtap\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\poortry\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ntbios\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\glckio2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dbutildrv2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kfeco10x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lenovodiagnosticsdriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\netfilter\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\corsairllaccess64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\semav6msr\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_rciow1064\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vboxusbmon\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nodedriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\iobitunlocker\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\smep\\_namco\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\xjokercontroller\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\irec\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asribdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mhyprot3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank6\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fidpcidrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bandai\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\procexp\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank5\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\daxin\\_blank4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bedaisy\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv10\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bwrsh\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\eio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio64a\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\citmdrv\\_ia64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\7\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\b\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bwrs\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nt3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wiseunlo\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ncpl\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ctiio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hw\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asromgdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_hwmio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lgdatacatcher\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rtkio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\phydmaccx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mtcbsv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ni\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\b4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\directio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vboxdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nvflash\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hpportiox64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_i2c64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\iomap64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vboxusb\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\msqpq\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sysinfo\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mhyprotect\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\naldrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lgdcatcher\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\echo\\_driver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\otipcibus\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\testbone\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lctka\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wyproxy64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\pchunter\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amdpowerprofiler\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\_3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\test2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rtcoremini64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\d4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\piddrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\panmonflt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\windows8\\-10\\-32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\_5\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mjj0ge\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kt2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rtkiow8x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nstrwsk\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\msio32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ktmutil7odm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hwrwdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nchgbios2x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_hwmio64\\_w10\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mydrivers\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\t7\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\_6\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sandra\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\atillk64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cpuz\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\netproxydriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\protects\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrrapidstartdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dh\\_kernel\\_10\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ef0e1725aaf0c6c972593f860531a2ea\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\enetechio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\citmdrv\\_amd64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\iqvw64e\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bsmixp64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_i2cio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\prokiller64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\netflt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\4748696211bd56c2d93c21cab91e82a5\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\openlibsys\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\adv64drv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\be6318413160e589080df02bb3ca6e6a\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cupfixerx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\se64a\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\speedfan\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\a236e7d654cd932b7d11cb604629a2d0\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio32b\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio64b\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sysdrv3s\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lv561av\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_def64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mlgbbiicaihflrnh\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dbutil\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\834761775\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kdriver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\spf\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\dkrtk\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_flash64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nt4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\directio32\\_legacy\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\viragt64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hostnt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\poortry1\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\c94f405c5929cfcccc8ad00b42c95083\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\b1\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wantd\\_2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mhyprotrpg\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nscm\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\smep\\_capcom\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sense5ext\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lha\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\atszio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amifldrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\blacklotus\\_driver\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrautochkupddrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\cpuz\\_x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrautochkupddrv\\_1\\_0\\_32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bs\\_rcio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\elbycdio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fidpcidrv64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\elrawdsk\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\telephonuafy\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\rwdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\lgcoretemp\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\segwindrvx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\windows7\\-32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrsetupdrv103\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hwinfo32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\inpoutx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv101\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asupio64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\monitor\\_win10\\_x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\msrhook\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nt5\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\wfshbr64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\driver7\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\sfdrvx32\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv104\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gameink\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\hwinfo64i\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\bsmix64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio32a\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kbdcap64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\5a4fe297c7d42539303137b6d75b150d\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fairplaykd\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\a9df5964635ef8bd567ae487c3d214c4\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\fgme\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\skill\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\capcom2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\typelibde\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\nt6\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winio64c\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\driver7\\-x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\air\\_system10\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\panmonfltx64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\ntbios\\_2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\viragt\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\zam64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\vmdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\iqvw64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\1\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\t3\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\gftkyj64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\proxy64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kevp64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\netfilterdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\4118b86e490aed091b1a219dba45f332\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\6771b13a53b9c7449d4891e427735ea2\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\mimidrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\driver7\\-x86\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\windbg\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\80\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\directio\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\atomicredteamcapcom\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\81\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\full\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\asrdrv\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\kapchelper\\_x64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\c\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\winflash64\\.sys\" or xdm.source.process.executable.filename ~= \".*\\\\amsdk\\.sys\"))\n\n\n\n"}
{"prompt": "I want to find files that might indicate an attacker is stealing Active Directory data by looking for filenames like \"All.cab\" or \".ntds.cleartext\".", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\All\\.cab\" or xdm.target.file.filename ~= \".*\\.ntds\\.cleartext\")\n\n\n\n"}
{"prompt": "I want to see if any non-standard tools are making connections over port 3389, which could indicate lateral movement.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter ((action_local_port = 3389 or action_remote_port = 3389) and Initiated = \"true\") and  not (actor_process_image_path in (\"C:\\\\Windows\\\\System32\\\\mstsc.exe\", \"C:\\\\Windows\\\\SysWOW64\\\\mstsc.exe\")) and  not ((actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\dns.exe\" and (action_local_port = 53 or action_remote_port = 53) and action_network_protocol = \"udp\") or (actor_process_image_path ~= \".*\\\\Avast\\ Software\\\\Avast\\\\AvastSvc\\.exe\" or actor_process_image_path ~= \".*\\\\Avast\\\\AvastSvc\\.exe\") or actor_process_image_path ~= \".*\\\\RDCMan\\.exe\" or actor_process_image_path = \"C:\\\\Program Files\\\\Google\\\\Chrome\\\\Application\\\\chrome.exe\" or (actor_process_image_path ~= \".*\\\\FSAssessment\\.exe\" or actor_process_image_path ~= \".*\\\\FSDiscovery\\.exe\" or actor_process_image_path ~= \".*\\\\MobaRTE\\.exe\" or actor_process_image_path ~= \".*\\\\mRemote\\.exe\" or actor_process_image_path ~= \".*\\\\mRemoteNG\\.exe\" or actor_process_image_path ~= \".*\\\\Passwordstate\\.exe\" or actor_process_image_path ~= \".*\\\\RemoteDesktopManager\\.exe\" or actor_process_image_path ~= \".*\\\\RemoteDesktopManager64\\.exe\" or actor_process_image_path ~= \".*\\\\RemoteDesktopManagerFree\\.exe\" or actor_process_image_path ~= \".*\\\\RSSensor\\.exe\" or actor_process_image_path ~= \".*\\\\RTS2App\\.exe\" or actor_process_image_path ~= \".*\\\\RTSApp\\.exe\" or actor_process_image_path ~= \".*\\\\spiceworks\\-finder\\.exe\" or actor_process_image_path ~= \".*\\\\Terminals\\.exe\" or actor_process_image_path ~= \".*\\\\ws\\_TunnelService\\.exe\") or (actor_process_image_path ~= \".*\\\\thor\\.exe\" or actor_process_image_path ~= \".*\\\\thor64\\.exe\") or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\SplunkUniversalForwarder\\\\bin\\\\.*\" or actor_process_image_path ~= \".*\\\\Ranger\\\\SentinelRanger\\.exe\" or actor_process_image_path = \"C:\\\\Program Files\\\\Mozilla Firefox\\\\firefox.exe\" or actor_process_image_path in (\"C:\\\\Program Files\\\\TSplus\\\\Java\\\\bin\\\\HTML5service.exe\", \"C:\\\\Program Files (x86)\\\\TSplus\\\\Java\\\\bin\\\\HTML5service.exe\") or actor_process_image_path = \"None\" or actor_process_image_path = \"\" or actor_process_image_path = \"<unknown process>\")\n\n\n\n"}
{"prompt": "I want to see events where PowerShell or pwsh is accessing lsass for potential credential dumping.", "response": "preset = xdr_event_log\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (8, 10) and (SourceImage ~= \".*\\\\powershell\\.exe\" or SourceImage ~= \".*\\\\pwsh\\.exe\") and TargetImage ~= \".*\\\\lsass\\.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential process execution proxies using CL_Invocation.ps1 on my endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"SyncInvoke \"\n\n\n\n"}
{"prompt": "I want to see all indicators related to the BlueSky ransomware, such as file names and processes involved.", "response": "preset = xdr_event_log\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id in (4663, 4656) and (ObjectName ~= \".*\\.bluesky\" or ObjectName contains \"DECRYPT FILES BLUESKY\")) or (action_evtlog_event_id = 5145 and (RelativeTargetName ~= \".*\\.bluesky\" or RelativeTargetName contains \"DECRYPT FILES BLUESKY\"))\n\n\n\n"}
{"prompt": "I want to see events related to Windows security audit analysis that match Common Criteria FAU_SAA requirements.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4618\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._collector_ip_address\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ibpmeventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect malicious activity that modifies Internet Explorer registry settings.", "response": "preset = xdr_registry\n| filter action_registry_key_name contains \"\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Internet Settings\" and  not ((action_registry_value_name ~= \"DWORD.*\" or action_registry_data ~= \"DWORD.*\") or (action_registry_value_name in (\"Cookie:\", \"Visited:\", \"(Empty)\") or action_registry_data in (\"Cookie:\", \"Visited:\", \"(Empty)\")) or (action_registry_key_name contains \"\\\\Cache\" or action_registry_key_name contains \"\\\\ZoneMap\" or action_registry_key_name contains \"\\\\WpadDecision\") or (action_registry_value_name = \"Binary Data\" or action_registry_data = \"Binary Data\") or action_registry_key_name ~= \".*\\\\Accepted\\ Documents\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find instances where an attacker uses Cmd.exe to read and execute a file.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"Cmd.Exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") and ((actor_process_image_command_line contains \"cmd\" and actor_process_image_command_line contains \"/r \" and actor_process_image_command_line contains \"<\") or (action_process_image_command_line contains \"cmd\" and action_process_image_command_line contains \"/r \" and action_process_image_command_line contains \"<\")))\n\n\n\n"}
{"prompt": "I want to see alerts for successful remote login attempts from public IPs on Unix servers.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"RSD-Unix-servers\", \"sdam_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.type = \"sshd\" and xdm.event.outcome = XDM_CONST.OUTCOME_SUCCESS and xdm.source.ipv4 != null and xdm.source.is_internal_ip = false and incidr(xdm.source.ipv4, \"169.254.0.0/16\") = false and xdm.source.ipv4 NOT IN (\"127.0.0.1\")\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address as ip\n) as dmz_ips dmz_ips.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_ips incidr(xdm.source.ipv4, vpn_ips.cidr_range) = true\n| filter cidr_range = null\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, linux_linux_raw._final_reporting_device_ip,\n_vendor, _product\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip,\naggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to be alerted whenever someone adds certificates or passwords to service principals in Azure.", "response": "config case_sensitive = false\n| dataset = msft_o365_azure_ad_raw\n| filter Operation ~= \"Update application \u2013 Certificates and secrets management|Add service principal credentials\"\n| alter source_user = json_extract_scalar(`Target`, \"$[3].ID\")\n| fields UserId, source_user, ObjectId, ResultStatus, Operation,\n_time, CreationTime, `Target`\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _Time),\nCreationTime = format_timestamp(\"%Y-%m-%d %H:%M:%S\", CreationTime)"}
{"prompt": "I want to detect suspicious MFA PIN changes made by administrators for multiple users.", "response": "config case_sensitive = false\n| datamodel dataset = mfa_mfa2_raw\n| filter xdm.event.operation in (\"changed user\") and xdm.event.operation in (\"pinHash\") and xdm.source.user.username !~= \"multifactorauthadsync|mfausersrv\"\n| fields xdm.event.type, xdm.event.description, xdm.event.operation,\nxdm.event.outcome, xdm.source.user.username, xdm.target.user.username,\nxdm.observer.action, xdm.source.host.hostname, xdm.event.original_event_type,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.source.ipv4, _time\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.user.username\n| filter array_length(xdm.target.user.username) >= 10\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 10)), 1)"}
{"prompt": "I want to find any transactions happening today that have upload sizes more than 135% of the average upload size over the past seven days for users whose usernames contain '@', and those using PowerShell.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_agent ~= \"powershell\" and user_dst contains \"@\"\n| comp sum(rbytes) as current_day_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and user_agent ~= \"powershell\"\n| comp sum(rbytes) as 7_days_upload,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url by day,\nuser_dst\n| comp avg(7_days_upload) as 7_days_upload_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(web_page)) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(extension)) as extension,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url by user_dst addrawdata = true as avg_raw\n| alter user = user_dst\n| fields user, 7_days_upload_avg, avg_raw\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_upload > multiply(7_days_upload_avg, 1.35)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to find detections of new custom shim database files being created.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\apppatch\\\\Custom\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\apppatch\\\\CustomSDB\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find Duo users who have experienced at least four authentication failures from the same country in the last four hours due to reasons like invalid passcodes, locked accounts, or mistaken entries.", "response": "dataset = duo_duo_raw\n| filter email != NULL and reason in (\"invalid_passcode\", \"deny_unenrolled_user\", \"endpoint_is_not_trusted\", \"locked_out\", \"user_disabled\", \"user_mistake\") and result in (\"denied\") and eventtype in (\"authentication\")\n| alter DuoUserName = json_extract_scalar(user, \"$.name\"),\nIPAddress = json_extract_scalar(access_device, \"$.ip\"),\nDeviceTrustLevel = json_extract(adaptive_trust_assessments, \"$.remember_me.trust_level\"),\nAccDevLocationCN = json_extract_scalar(access_device, \"$.location.country\"),\nAccDevLocationST = json_extract(access_device, \"$.location.state\"),\nAccDevLocationCY = json_extract(access_device, \"$.location.city\"),\nAccDevOS = json_extract(access_device, \"$.os\"),\nAccDevOSVer = json_extract(access_device, \"$.os_version\"),\nAccDevBrowser = json_extract(access_device, \"$.browser\"),\nIntegration = json_extract(application, \"$.name\")\n| union wl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter (IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false) and incidr(IPAddress, \"<ip>\") = False and (incidr(IPAddress, \"<ip>\") = False and IPAddress not contains \"0.0.0.0\") and (AccDevLocationCN != NULL or len(AccDevLocationCN) > 4)\n| alter AccDevLocationCN = replace(AccDevLocationCN, \"\\\"\", \"\")\n| fields DuoUserName, reason, IPAddress, result, eventtype,\nemail, AccDevLocationCN, access_device, Integration\n| comp earliest(_time) as firstevent,\nlatest(_time) as lastevent,\ncount() as Failure_Event_Count,\nvalues(access_device) as Login_Failure_Events by DuoUserName,\nemail,\nAccDevLocationCN,\nresult,\nreason,\neventtype,\nIPAddress,\nIntegration,\n_vendor,\n_product addrawdata = true as DUO_Event_Log_Data\n| filter array_length(Login_Failure_Events) >= 4"}
{"prompt": "I want to see events where cmd.exe is executed via WmiPrvSE.exe with suspicious network activity using 2>&1 or 1> redirection.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" and actor_process_image_path ~= \".*\\\\WmiPrvSE\\.exe\" and action_process_image_command_line ~= \".*\\\\\\\\127\\.0\\.0\\.1\\\\.*\") and (action_process_image_command_line contains \"2>&1\" or action_process_image_command_line contains \"1>\"))\n\n\n\n"}
{"prompt": "I want to find potential Server Side Template Injection vulnerabilities where logs show Velocity Exceptions or errors like ParseErrorException and TemplateInitException.", "response": "datamodel\n| filter ( contains \"ParseErrorException\" or  contains \"VelocityException\" or  contains \"TemplateInitException\")\n\n\n\n"}
{"prompt": "I want to find alerts about remote threads being created within the KeePass application.", "response": "datamodel\n| filter xdm.target.process.name ~= \".*\\\\KeePass\\.exe\"\n\n\n\n"}
{"prompt": "I want to find instances where Chromium-based browsers are executed headless and connected to Mockbin or a similar service.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\brave\\.exe\" or action_process_image_path ~= \".*\\\\chrome\\.exe\" or action_process_image_path ~= \".*\\\\msedge\\.exe\" or action_process_image_path ~= \".*\\\\opera\\.exe\" or action_process_image_path ~= \".*\\\\vivaldi\\.exe\") and action_process_image_command_line contains \"--headless\" and (action_process_image_command_line contains \":\n\n\n\n"}
{"prompt": "I want to find events where an actor is using system processes to obfuscate their actions by interacting with clipboard services.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and actor_process_image_path contains \"(Clipboard|i\")\n\n\n\n"}
{"prompt": "I want to detect suspicious PowerShell scripts that use Mount-DiskImage to access files from external drives.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Mount-DiskImage \" and ScriptBlockText contains \"-ImagePath \" and ScriptBlockText contains \"Get-Volume\" and ScriptBlockText contains \".DriveLetter\" and ScriptBlockText contains \"invoke-item \" and ScriptBlockText ~= \".*\\)\\:\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find Windows processes created by APT29 that use command lines containing \"-noni\", \"-ep\", \"bypass\", and \"$\".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"-noni\" and action_process_image_command_line contains \"-ep\" and action_process_image_command_line contains \"bypass\" and action_process_image_command_line contains \"$\")\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious Office token searches happening through command line interfaces on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"eyJ0eXAiOi\" or action_process_image_command_line contains \" eyJ0eX\" or action_process_image_command_line contains \" \\\"eyJ0eX\\\"\" or action_process_image_command_line contains \" 'eyJ0eX'\")\n\n\n\n"}
{"prompt": "I want to find detections of PowerShell logging being disabled through registry key tampering.", "response": "preset = xdr_registry\n| filter ((action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\PowerShell\\\\.*\" or action_registry_key_name ~= \".*\\\\Microsoft\\\\PowerShellCore\\\\.*\") and (action_registry_key_name ~= \".*\\\\ModuleLogging\\\\EnableModuleLogging\" or action_registry_key_name ~= \".*\\\\ScriptBlockLogging\\\\EnableScriptBlockLogging\" or action_registry_key_name ~= \".*\\\\ScriptBlockLogging\\\\EnableScriptBlockInvocationLogging\" or action_registry_key_name ~= \".*\\\\Transcription\\\\EnableTranscripting\" or action_registry_key_name ~= \".*\\\\Transcription\\\\EnableInvocationHeader\" or action_registry_key_name ~= \".*\\\\EnableScripts\") and (action_registry_value_name = \"DWORD (0x00000000)\" or action_registry_data = \"DWORD (0x00000000)\"))\n\n\n\n"}
{"prompt": "I want to see events where the Wusa executable is extracting files from a CAB archive.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\wusa\\.exe\" and action_process_image_command_line contains \"/extract:\")\n\n\n\n"}
{"prompt": "I want to see potential instances of PowerShell obfuscation where commands are reversed in the command line.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"hctac\" or action_process_image_command_line contains \"kaerb\" or action_process_image_command_line contains \"dnammoc\" or action_process_image_command_line contains \"ekovn\" or action_process_image_command_line contains \"eliFd\" or action_process_image_command_line contains \"rahc\" or action_process_image_command_line contains \"etirw\" or action_process_image_command_line contains \"golon\" or action_process_image_command_line contains \"tninon\" or action_process_image_command_line contains \"eddih\" or action_process_image_command_line contains \"tpircS\" or action_process_image_command_line contains \"ssecorp\" or action_process_image_command_line contains \"llehsrewop\" or action_process_image_command_line contains \"esnopser\" or action_process_image_command_line contains \"daolnwod\" or action_process_image_command_line contains \"tneilCbeW\" or action_process_image_command_line contains \"tneilc\" or action_process_image_command_line contains \"ptth\" or action_process_image_command_line contains \"elifotevas\" or action_process_image_command_line contains \"46esab\" or action_process_image_command_line contains \"htaPpmeTteG\" or action_process_image_command_line contains \"tcejbO\" or action_process_image_command_line contains \"maerts\" or action_process_image_command_line contains \"hcaerof\" or action_process_image_command_line contains \"retupmoc\")) and  not ((action_process_image_command_line contains \" -EncodedCommand \" or action_process_image_command_line contains \" -enc \"))\n\n\n\n"}
{"prompt": "I want to detect potential WScript or CScript dropper files based on suspicious process and file name patterns.", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\wscript\\.exe\" or xdm.target.process.name ~= \".*\\\\cscript\\.exe\") or (xdm.source.process.name ~= \".*\\\\wscript\\.exe\" or xdm.source.process.name ~= \".*\\\\cscript\\.exe\")) and (xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" or xdm.target.file.filename ~= \"C\\:\\\\ProgramData.*\") and (xdm.target.file.filename ~= \".*\\.jse\" or xdm.target.file.filename ~= \".*\\.vbe\" or xdm.target.file.filename ~= \".*\\.js\" or xdm.target.file.filename ~= \".*\\.vba\" or xdm.target.file.filename ~= \".*\\.vbs\"))\n\n\n\n"}
{"prompt": "I want to see alerts about potential UAC bypass attempts using an IDiagnostic profile with \"DllHost.exe\" and a specific process ID.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\DllHost\\.exe\" and actor_process_image_command_line contains \" /Processid:{12C21EA7-2EB8-4B55-9249-AC243DA8C666}\" and action_process_integrity_level in (\"High\", \"System\"))\n\n\n\n"}
{"prompt": "I want to find potential attempts to exploit CVE-2023-25717 in Ruckus wireless devices.", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and (xdm.network.http.url contains \"/forms/doLogin\" and xdm.network.http.url contains \"login_username\" and xdm.network.http.url contains \"password\") and (xdm.network.http.url contains \"$(\" or xdm.network.http.url contains \"%24%28\"))\n\n\n\n"}
{"prompt": "I want to find instances where regedit is used to import registry keys from an ADS file.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regedit\\.exe\" or actor_process_file_original_name = \"REGEDIT.EXE\") and ((action_process_image_command_line contains \" /i \" or action_process_image_command_line contains \".reg\") and action_process_image_command_line ~= \"\\:[^\\ \\\\]\")) and  not ((action_process_image_command_line contains \" -e \" or action_process_image_command_line contains \" -a \" or action_process_image_command_line contains \" -c \"))\n\n\n\n"}
{"prompt": "I want to see all instances of PsExec service executions on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path = \"C:\\\\Windows\\\\PSEXESVC.exe\" or actor_process_file_original_name = \"psexesvc.exe\")\n\n\n\n"}
{"prompt": "I want to get alerts sent to XSOAR whenever Duo detects an update to a user's phone information.", "response": "datamodel dataset = duo_duo_raw\n| filter xdm.event.operation = \"user_update\" and xdm.event.description contains \"phones\"\n| filter xdm.observer.name = \"api-c7e21466.duosecurity.com\"\n| fields xdm.target.resource.name"}
{"prompt": "I want to find potential cases of Mpclient.DLL sideloading detected through Windows Event Logs.", "response": "preset = xdr_image_load\n| filter (action_module_path ~= \".*\\\\mpclient\\.dll\" and (actor_process_image_path ~= \".*\\\\MpCmdRun\\.exe\" or actor_process_image_path ~= \".*\\\\NisSrv\\.exe\")) and  not ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Windows\\ Defender\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Security\\ Client\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Windows\\ Defender\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\Platform\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts about modifications or deletions of Azure Virtual Networks.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter ((properties.operationName ~= \"MICROSOFT\\.NETWORK\\/VIRTUALNETWORKGATEWAYS\\/.*\" or properties.operationName ~= \"MICROSOFT\\.NETWORK\\/VIRTUALNETWORKS\\/.*\") and (properties.operationName ~= \".*\\/WRITE\" or properties.operationName ~= \".*\\/DELETE\"))\n\n\n\n"}
{"prompt": "I want to see MFA admin access management activities, including changes made to user accounts by admins.", "response": "config case_sensitive = false\n| datamodel dataset = mfa_mfa2_raw\n| filter xdm.event.operation in (\"changed user\") and xdm.observer.action in (\"isadmin\", \"adminchangemode\", \"adminchangephone\", \"adminchangesubmode\", \"adminchangepin\", \"adminuserinformation\", \"adminenabdisab\", \"admintestauth\", \"admindeactivatephoneapp\", \"adminactivatephoneapp\")\n| fields xdm.event.type, xdm.event.description, xdm.event.operation,\nxdm.event.outcome, xdm.source.user.username, xdm.target.user.username,\nxdm.observer.action, xdm.source.host.hostname, xdm.event.original_event_type,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.source.ipv4, _time, _insert_time\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events where an object's WriteDAC access was modified on the Domain Services (DS) server.", "response": "preset = xdr_event_log\n| alter ObjectServer = regextract(to_json_string(action_evtlog_data_fields)->ObjectServer{}, \"\\\"(.*)\\\"\")\n| alter AccessMask = regextract(to_json_string(action_evtlog_data_fields)->AccessMask{}, \"\\\"(.*)\\\"\")\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4662 and ObjectServer = \"DS\" and AccessMask = \"0x40000\" and ObjectType in (\"19195a5b-6da0-11d0-afd3-00c04fd930c9\", \"domainDNS\"))\n\n\n\n"}
{"prompt": "I want to find instances where someone exported a certificate using Certutil.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_file_original_name = \"CertUtil.exe\") and (action_process_image_command_line contains \"-exportPFX \" or action_process_image_command_line contains \"/exportPFX \"))\n\n\n\n"}
{"prompt": "{I want to find processes on endpoints that might be performing suspicious network scans by looking for commands like \"for\", \"foreach\", \"nslookup\", or \"ping\" in their command lines.} \n\n\nLet me know if you'd like any adjustments to this prompt!", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"for \" or action_process_image_command_line contains \"foreach \") and (action_process_image_command_line contains \"nslookup\" or action_process_image_command_line contains \"ping\"))\n\n\n\n"}
{"prompt": "I want to see alerts for Wmiprvse Wbemcomn DLL hijack attempts.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path ~= \".*\\\\wmiprvse\\.exe\" and action_module_path ~= \".*\\\\wbem\\\\wbemcomn\\.dll\")\n\n\n\n"}
{"prompt": "I want to find suspicious activity where known malicious binaries are copied from system directories like System32 or WinSxS.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" and action_process_image_command_line contains \"copy \") or ((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_command_line contains \"copy-item\" or action_process_image_command_line contains \" copy \" or action_process_image_command_line contains \"cpi \" or action_process_image_command_line contains \" cp \")) or ((action_process_image_path ~= \".*\\\\robocopy\\.exe\" or action_process_image_path ~= \".*\\\\xcopy\\.exe\") or actor_process_file_original_name in (\"robocopy.exe\", \"XCOPY.EXE\"))) and ((action_process_image_command_line contains \"\\\\System32\" or action_process_image_command_line contains \"\\\\SysWOW64\" or action_process_image_command_line contains \"\\\\WinSxS\") and (action_process_image_command_line contains \"\\\\bitsadmin.exe\" or action_process_image_command_line contains \"\\\\calc.exe\" or action_process_image_command_line contains \"\\\\certutil.exe\" or action_process_image_command_line contains \"\\\\cmdl32.exe\" or action_process_image_command_line contains \"\\\\cscript.exe\" or action_process_image_command_line contains \"\\\\mshta.exe\" or action_process_image_command_line contains \"\\\\rundll32.exe\" or action_process_image_command_line contains \"\\\\wscript.exe\"))\n\n\n\n"}
{"prompt": "I want to find events where an unknown process attempts to duplicate an LSASS handle using the HandleKatz technique.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and GrantedAccess = \"0x1440\" and CallTrace ~= \"C\\:\\\\Windows\\\\System32\\\\ntdll\\.dll\\+.*\" and CallTrace contains \"|UNKNOWN(\" and CallTrace ~= \".*\\)\")\n\n\n\n"}
{"prompt": "I want to find all events related to the \"Netcat The Powershell Version - PowerShell Module\"  malware that involve command and control activities.", "response": "preset = xdr_event_log\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter (ContextInfo contains \"powercat \" or ContextInfo contains \"powercat.ps1\")\n\n\n\n"}
{"prompt": "I want to see all network traffic related to domains that are known Wannacry killswitch domains.", "response": "datamodel\n| filter xdm.network.dns.dns_question.name in (\"ifferfsodp9ifjaposdfjhgosurijfaewrwergwea.testing\", \"ifferfsodp9ifjaposdfjhgosurijfaewrwergwea.test\", \"ifferfsodp9ifjaposdfjhgosurijfaewrwergwea.com\", \"ayylmaotjhsstasdfasdfasdfasdfasdfasdfasdf.com\", \"iuqssfsodp9ifjaposdfjhgosurijfaewrwergwea.com\")\n\n\n\n"}
{"prompt": "I want to find any instances of IPv4 CIDR addresses mentioned in logs from various security sources like Fortigate, Cisco ASA, Duo, Netskope, etc.", "response": "datamodel dataset in (fortinet_fortigate1_raw, fortinet_fortigate_raw, cisco_asa_raw, sonicwall_ns_raw, duo_duo_raw, Netskope_Netskope_raw, workday_activity_raw, msft_azure_raw, microsoft_windows_raw, microsoft_dns_raw)\n\n| filter incidr(xdm.source.ipv4, \"<ip>\") = true or incidr(xdm.target.ipv4, \"<ip>\") = true\n| fields *\n| view column order = populated"}
{"prompt": "I want to see XQL queries that flag potential credential access threats by analyzing LSASS interactions with programs located in suspicious folders.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and (GrantedAccess ~= \".*10\" or GrantedAccess ~= \".*30\" or GrantedAccess ~= \".*50\" or GrantedAccess ~= \".*70\" or GrantedAccess ~= \".*90\" or GrantedAccess ~= \".*B0\" or GrantedAccess ~= \".*D0\" or GrantedAccess ~= \".*F0\" or GrantedAccess ~= \".*18\" or GrantedAccess ~= \".*38\" or GrantedAccess ~= \".*58\" or GrantedAccess ~= \".*78\" or GrantedAccess ~= \".*98\" or GrantedAccess ~= \".*B8\" or GrantedAccess ~= \".*D8\" or GrantedAccess ~= \".*F8\" or GrantedAccess ~= \".*1A\" or GrantedAccess ~= \".*3A\" or GrantedAccess ~= \".*5A\" or GrantedAccess ~= \".*7A\" or GrantedAccess ~= \".*9A\" or GrantedAccess ~= \".*BA\" or GrantedAccess ~= \".*DA\" or GrantedAccess ~= \".*FA\" or GrantedAccess ~= \".*0x14C2\" or GrantedAccess ~= \".*FF\") and (SourceImage ~= \".*\\\\Temp\\\\.*\" or SourceImage ~= \".*\\\\Users\\\\Public\\\\.*\" or SourceImage ~= \".*\\\\PerfLogs\\\\.*\" or SourceImage ~= \".*\\\\AppData\\\\.*\" or SourceImage contains \"\\\\Temporary\")) and  not (((SourceImage ~= \".*\\:\\\\Users\\\\.*\" and SourceImage ~= \".*\\\\AppData\\\\Local\\\\.*\") and (SourceImage ~= \".*\\\\Microsoft\\ VS\\ Code\\\\Code\\.exe\" or SourceImage ~= \".*\\\\software\\_reporter\\_tool\\.exe\" or SourceImage ~= \".*\\\\DropboxUpdate\\.exe\" or SourceImage ~= \".*\\\\MBAMInstallerService\\.exe\" or SourceImage ~= \".*\\\\WebexMTA\\.exe\" or SourceImage ~= \".*\\\\Meetings\\\\WebexMTAV2\\.exe\" or SourceImage ~= \".*\\\\WebEx\\\\WebexHost\\.exe\" or SourceImage ~= \".*\\\\JetBrains\\\\Toolbox\\\\bin\\\\jetbrains\\-toolbox\\.exe\") and GrantedAccess = \"0x410\") or (SourceImage ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" and SourceImage ~= \".*\\.tmp\\\\DropboxUpdate\\.exe\" and GrantedAccess in (\"0x410\", \"0x1410\")) or ((SourceImage ~= \".*\\:\\\\Users\\\\.*\" and SourceImage ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") and SourceImage ~= \".*\\.tmp\\\\DropboxUpdate\\.exe\" and GrantedAccess = \"0x1410\") or ((SourceImage ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Dropbox\\\\.*\" or SourceImage ~= \".*\\:\\\\Program\\ Files\\\\Dropbox\\\\.*\") and SourceImage ~= \".*\\\\DropboxUpdate\\.exe\" and GrantedAccess = \"0x1410\") or ((SourceImage ~= \".*\\:\\\\Windows\\\\Temp\\\\asgard2\\-agent\\\\.*\" or SourceImage ~= \".*\\:\\\\Windows\\\\Temp\\\\asgard2\\-agent\\-sc\\\\.*\") and (SourceImage ~= \".*\\\\thor64\\.exe\" or SourceImage ~= \".*\\\\thor\\.exe\" or SourceImage ~= \".*\\\\aurora\\-agent\\-64\\.exe\" or SourceImage ~= \".*\\\\aurora\\-agent\\.exe\") and GrantedAccess in (\"0x1fffff\", \"0x1010\", \"0x101010\")) or ((SourceImage ~= \".*\\:\\\\Users\\\\.*\" and SourceImage ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and SourceImage contains \"\\\\vs_bootstrapper_\") and GrantedAccess = \"0x1410\") or (SourceImage ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Google\\\\Temp\\\\.*\" and SourceImage ~= \".*\\.tmp\\\\GoogleUpdate\\.exe\" and GrantedAccess in (\"0x410\", \"0x1410\")) or (SourceImage ~= \".*\\:\\\\Users\\\\.*\" and SourceImage ~= \".*\\\\AppData\\\\Local\\\\Keybase\\\\keybase\\.exe\" and GrantedAccess = \"0x1fffff\") or (SourceImage contains \"\\\\AppData\\\\Local\\\\Temp\\\\is-\" and SourceImage ~= \".*\\.tmp\\\\avira\\_system\\_speedup\\.tmp\" and GrantedAccess = \"0x1410\") or (SourceImage ~= \".*\\\\AppData\\\\Roaming\\\\ViberPC\\\\.*\" and SourceImage ~= \".*\\\\updater\\.exe\" and TargetImage ~= \".*\\\\winlogon\\.exe\" and GrantedAccess = \"0x1fffff\") or ((SourceImage ~= \".*\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Adobe\\\\ARM\\\\.*\" or SourceImage ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Common\\ Files\\\\Adobe\\\\ARM\\\\.*\") and SourceImage ~= \".*\\\\AdobeARMHelper\\.exe\" and GrantedAccess = \"0x1410\"))\n\n\n\n"}
{"prompt": "I want to see alerts for when suspicious child processes are created by Outlook.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\OUTLOOK\\.EXE\" and (action_process_image_path ~= \".*\\\\AppVLP\\.exe\" or action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\forfiles\\.exe\" or action_process_image_path ~= \".*\\\\hh\\.exe\" or action_process_image_path ~= \".*\\\\mftrace\\.exe\" or action_process_image_path ~= \".*\\\\msbuild\\.exe\" or action_process_image_path ~= \".*\\\\msdt\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\msiexec\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\scrcons\\.exe\" or action_process_image_path ~= \".*\\\\scriptrunner\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\svchost\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances where Reg.exe is used to import registry files from potentially suspicious locations.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and action_process_image_command_line contains \" import \" and (action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" or action_process_image_command_line contains \"%temp%\" or action_process_image_command_line contains \"%tmp%\" or action_process_image_command_line contains \"%appdata%\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\ProgramData\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find events where a file named \"__PSScriptPolicyTest_\" is created by a process that isn't one of the expected PowerShell or system utilities.", "response": "datamodel\n| filter xdm.target.file.filename contains \"__PSScriptPolicyTest_\" and  not (((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\PowerShell\\\\7\\-preview\\\\pwsh\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\PowerShell\\\\7\\\\pwsh\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\dsac\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\sdiagnhost\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\ServerManager\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\_ise\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\wsmprovhost\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\sdiagnhost\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\_ise\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\.exe\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\PowerShell\\\\7\\-preview\\\\pwsh\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\PowerShell\\\\7\\\\pwsh\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\dsac\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\sdiagnhost\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\ServerManager\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\_ise\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\wsmprovhost\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\sdiagnhost\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\_ise\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\WindowsPowerShell\\\\v1\\.0\\\\powershell\\.exe\")))\n\n\n\n"}
{"prompt": "I want to detect attempts to execute XSL scripts using WMIC with the \"-format\" flag.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\wmic\\.exe\" and (action_process_image_command_line contains \"-format\" or action_process_image_command_line contains \"/format\")) and  not ((action_process_image_command_line contains \"Format:List\" or action_process_image_command_line contains \"Format:htable\" or action_process_image_command_line contains \"Format:hform\" or action_process_image_command_line contains \"Format:table\" or action_process_image_command_line contains \"Format:mof\" or action_process_image_command_line contains \"Format:value\" or action_process_image_command_line contains \"Format:rawxml\" or action_process_image_command_line contains \"Format:xml\" or action_process_image_command_line contains \"Format:csv\"))\n\n\n\n"}
{"prompt": "I want to see a list of users in Azure who have been identified as risky with medium or high risk levels.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n| filter category = \"UserRiskEvents\"\n| alter riskState = properties -> riskState,\nuserDisplayName = properties -> userDisplayName,\nuserPrincipalName = properties -> userPrincipalName,\nriskDetail = properties -> riskDetail,\nriskLevel = properties -> riskLevel,\nisDeleted = properties -> isDeleted,\nisProcessing = properties -> isProcessing,\nipAddress = properties -> ipAddress,\nriskEventType = properties -> riskEventType\n| filter riskState contains \"risk\" or riskState contains \"compromised\"\n| filter riskLevel in (\"medium\", \"high\")\n| fields category, userDisplayName, userPrincipalName, riskEventType,\nipAddress, riskState, riskDetail, riskLevel, isDeleted,\nisProcessing"}
{"prompt": "I want to detect potential process memory dumps using dotnet-dump with the \"collect\" flag.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\dotnet\\-dump\\.exe\" or actor_process_file_original_name = \"dotnet-dump.dll\") and action_process_image_command_line contains \"collect\")\n\n\n\n"}
{"prompt": "I want to see all instances of potential Log4j attempts detected by Cisco Firepower, including source IP addresses, timestamps, and relevant event details.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_firepower_raw\n| bin _time span = 5m\n| filter xdm.event.id = \"430001\" and xdm.event.description ~= \"log4j\" and xdm.source.ipv4 !~= \"205\\.210\\.31\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"198\\.235\\.24\\.[0-9]{1,3}\" and xdm.source.asn.as_name !~= \"qualys\" and xdm.source.is_internal_ip = false\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as ip\n) as iis_scan iis_scan.ip = xdm.source.ipv4\n| filter ip = null\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmz_ips dmz_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| alter device_ip = cisco_firepower_raw._final_reporting_device_ip,\npolicy_name = xdm.event.operation\n| fields xdm.event.id, xdm.event.type, xdm.event.log_level,\nxdm.observer.action, xdm.source.host.hostname, xdm.source.ipv4,\nxdm.source.port, xdm.event.description, xdm.alert.description,\nxdm.target.ipv4, xdm.target.port, xdm.network.ip_protocol,\nxdm.event.operation, xdm.source.application.name,\nxdm.source.location.country, xdm.source.asn.as_name,\nxdm.target.asn.as_name, _time, _insert_time, device_ip,\npolicy_name, _vendor, _product\n| comp earliest(_time) as FirstEventTime,\ncount() as matched_events,\nvalues(*) as * by xdm.source.ipv4,\n_time\n| filter matched_events >= 1\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events related to enabling Windows Remote Management on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Enable-PSRemoting \"\n\n\n\n"}
{"prompt": "I want to see events that might indicate an Applocker bypass, specifically looking for suspicious command lines using executables like msdt.exe, installutil.exe, regsvrce.exe, regasm.exe, msbuild.exe, or ieexec.exe.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\msdt.exe\" or action_process_image_command_line contains \"\\\\installutil.exe\" or action_process_image_command_line contains \"\\\\regsvcs.exe\" or action_process_image_command_line contains \"\\\\regasm.exe\" or action_process_image_command_line contains \"\\\\msbuild.exe\" or action_process_image_command_line contains \"\\\\ieexec.exe\")\n\n\n\n"}
{"prompt": "{I want to see details about Azure Security Centre alerts related to administrative access misuse.} \n\n\nLet me know if you'd like to refine this further! \ud83d\ude0a", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"microsoft.security/locations/alerts/activate/action\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\"),\neventlog = json_extract_scalar(properties, \"$.eventName\")\n| filter referenceid in (\"9227fdca-483d-424c-bc56-9fd2b4030484\", \"3fd7f1e1-88df-41df-982e-90c0daa354b9\", \"f2a4f062-8a8b-444f-82b8-e668b51cf42e\", \"71cce8cd-49d7-4463-bf9f-20dd2a68c5eb\", \"416105b8-5451-4d32-8f96-fcb0deb64ae0\", \"799febb6-d243-48d7-86a3-e94c956f46ba\", \"7269cfc9-f839-4437-9ded-f6d4bdec41d2\", \"8de7d5e6-d76e-497e-97c2-557d13d801e8\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time, eventlog, resultDescription\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts for domain administrator lockouts due to multiple logon failures, which could indicate brute force attacks.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id = \"6279\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| alter source_username = if(xdm.source.user.username ~= \"@ad.infosys.com\", rtrim(xdm.source.user.username, \"@ad.infosys.com\"), if(xdm.source.user.username ~= \"@infosys.com\", rtrim(xdm.source.user.username, \"@infosys.com\"), if(xdm.source.user.username ~= \"itlinfosys\", ltrim(xdm.source.user.username, \"itlinfosys\\\\\"), xdm.source.user.username)))\n| join type = left\n(dataset = enterprise_admin_list\n| fields username, admin_type\n) as JT1 JT1.username = source_username\n| join type = left\n(dataset = pan_dss_raw\n| fields sam_account_name, security_groups\n) as JT2 JT2.sam_account_name = source_username\n| filter admin_type in (\"domain_admin_win_admin\") or security_groups contains \"Tier0Users\"\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, source_username\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see all instances where a user was added or removed from the CITI.ODC.VPN.NAM, CITI.ODC.RDP, or CITI.ODC.VPN.EMEA security groups on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4728\", \"4729\")\n| arrayexpand xdm.target.user.groups\n| alter xdm.target.user.username = if(xdm.event.description ~= \"Account Name:\\t\\tCN=\", trim(arrayindex(regextract(xdm.event.description, \"Account Name:\\t\\tCN=([^,]+)\"), 0)), xdm.target.user.username),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| filter xdm.target.user.groups IN (\"CITI.ODC.VPN.NAM\", \"CITI.ODC.RDP\", \"CITI.ODC.VPN.EMEA\")\n| fields event_time as Event_Time, xdm.source.user.username as Performer,\nxdm.target.user.username as Target_Account, xdm.target.user.groups as Group,\nxdm.event.operation_sub_type as Event_Description"}
{"prompt": "I want to see events where a user has been given administrative permissions to manage all Azure subscriptions.", "response": "dataset = msft_azure_raw\n| alter properties_category = json_extract_scalar(properties , \"$.category\")\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter (properties.category = \"Administrative\" and properties.operationName = \"Assigns the caller to user access admin\")\n\n\n\n"}
{"prompt": "I want to see all instances where PktMon.EXE is executed on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\pktmon\\.exe\" or actor_process_file_original_name = \"PktMon.exe\")\n\n\n\n"}
{"prompt": "I want to find instances where an unsigned AppX package is being installed using Add-AppxPackage through PowerShell.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"Add-AppPackage \" or action_process_image_command_line contains \"Add-AppxPackage \") and action_process_image_command_line contains \" -AllowUnsigned\")\n\n\n\n"}
{"prompt": "I want to find indicators of compromised systems that might have disabled ETW logging for rpcrt4.dll.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\ NT\\\\Rpc\\\\ExtErrorInformation\" and (action_registry_value_name in (\"DWORD (0x00000000)\", \"DWORD (0x00000002)\") or action_registry_data in (\"DWORD (0x00000000)\", \"DWORD (0x00000002)\")))\n\n\n\n"}
{"prompt": "I want to find potential XCSSET malware infections on my endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\/bash\" and action_process_image_path ~= \".*\\/curl\" and (action_process_image_command_line contains \"/sys/log.php\" or action_process_image_command_line contains \"/sys/prepod.php\" or action_process_image_command_line contains \"/sys/bin/Pods\")) and action_process_image_command_line contains \"https:\n\n\n\n"}
{"prompt": "I want to see details about potential misuse of Azure Delete Security Solutions, focusing on specific security solutions and user actions like deletion.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n| filter operationName IN (\"MICROSOFT.SECURITY/SECURITYSOLUTIONS/DELETE\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"9227fdca-483d-424c-bc56-9fd2b4030484\", \"3fd7f1e1-88df-41df-982e-90c0daa354b9\", \"f2a4f062-8a8b-444f-82b8-e668b51cf42e\", \"71cce8cd-49d7-4463-bf9f-20dd2a68c5eb\", \"416105b8-5451-4d32-8f96-fcb0deb64ae0\", \"799febb6-d243-48d7-86a3-e94c956f46ba\", \"7269cfc9-f839-4437-9ded-f6d4bdec41d2\", \"8de7d5e6-d76e-497e-97c2-557d13d801e8\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find out if users are trying to get information about local system groups and permissions on endpoints.", "response": "preset = xdr_event_log\n| alter Payload = regextract(to_json_string(action_evtlog_data_fields)->Payload{}, \"\\\"(.*)\\\"\")\n| alter ContextInfo = regextract(to_json_string(action_evtlog_data_fields)->ContextInfo{}, \"\\\"(.*)\\\"\")\n| filter (((Payload contains \"get-localgroup\" or Payload contains \"Get-LocalGroupMember\") or (ContextInfo contains \"get-localgroup\" or ContextInfo contains \"Get-LocalGroupMember\")) or ((Payload contains \"Get-WMIObject\" and Payload contains \"Win32_Group\") or (ContextInfo contains \"Get-WMIObject\" and ContextInfo contains \"Win32_Group\")))\n\n\n\n"}
{"prompt": "I want to detect malicious activity using regsvr32 that executes the DllRegisterServer function silently on suspicious DLLs.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or actor_process_file_original_name = \"REGSVR32.EXE\") and (action_process_image_command_line contains \" /s \" or action_process_image_command_line contains \" /e \")) and  not (((action_process_image_command_line contains \":\\\\Program Files (x86)\" or action_process_image_command_line ~= \".*\\:\\\\Program\\ Files\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\") or (action_process_cwd contains \":\\\\Program Files (x86)\" or action_process_cwd ~= \".*\\:\\\\Program\\ Files\\\\.*\" or action_process_cwd ~= \".*\\:\\\\Windows\\\\System32\\\\.*\" or action_process_cwd ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\.*\")) or (action_process_image_command_line contains \" /i:\" or action_process_image_command_line contains \"/U \") or (actor_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\RpcProxy\\\\RpcProxy\\.dll\" and action_process_image_command_line = \"regsvr32 /s rpcproxy.dll\"))\n\n\n\n"}
{"prompt": "I want to see all alerts related to high privilege registry value modifications on Windows systems, including details about the affected users, event types, and hostnames.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id in (\"4657\")\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = xdm.source.host.hostname\n| filter TYPE in (\"PAM_windows\")\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about rules added via Netsh.exe that forward RDP traffic on port 3389.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and (action_process_image_command_line contains \" i\" and action_process_image_command_line contains \" p\" and action_process_image_command_line contains \"=3389\" and action_process_image_command_line contains \" c\"))\n\n\n\n"}
{"prompt": "I want to see information about processes that start from potentially suspicious folders like Desktop, Temp, or Temporary Internet files.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\Desktop\\\\.*\" or action_process_image_path ~= \".*\\\\Temp\\\\.*\" or action_process_image_path contains \"\\\\Temporary Internet\") and  not ((actor_process_image_path in (\"C:\\\\Windows\\\\System32\\\\cleanmgr.exe\", \"C:\\\\Program Files (x86)\\\\Microsoft Visual Studio\\\\Installer\\\\resources\\\\app\\\\ServiceHub\\\\Services\\\\Microsoft.VisualStudio.Setup.Service\\\\BackgroundDownload.exe\", \"C:\\\\Windows\\\\System32\\\\dxgiadaptercache.exe\") or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\NVIDIA\\ Corporation\\\\.*\") or action_process_image_path ~= \".*setup\\.exe\" or (action_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\Temp\\\\.*\" and action_process_image_path ~= \".*\\.tmp\\\\MicrosoftEdgeUpdate\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect if someone is installing a new root certificate on the system using certutil.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_file_original_name = \"CertUtil.exe\") and (action_process_image_command_line contains \"-addstore\" or action_process_image_command_line contains \"/addstore\") and action_process_image_command_line contains \"root\")\n\n\n\n"}
{"prompt": "I want to find evidence of potential webshells in Windows access logs by looking for suspicious strings.", "response": "datamodel\n| filter (xdm.network.http.method = \"GET\" and ( contains \"=whoami\" or  contains \"=net%20user\" or  contains \"=net+user\" or  contains \"=net%2Buser\" or  contains \"=cmd%20/c%\" or  contains \"=cmd+/c+\" or  contains \"=cmd%2B/c%\" or  contains \"=cmd%20/r%\" or  contains \"=cmd+/r+\" or  contains \"=cmd%2B/r%\" or  contains \"=cmd%20/k%\" or  contains \"=cmd+/k+\" or  contains \"=cmd%2B/k%\" or  contains \"=powershell%\" or  contains \"=powershell+\" or  contains \"=tasklist%\" or  contains \"=tasklist+\" or  contains \"=wmic%\" or  contains \"=wmic+\" or  contains \"=ssh%\" or  contains \"=ssh+\" or  contains \"=python%\" or  contains \"=python+\" or  contains \"=python3%\" or  contains \"=python3+\" or  contains \"=ipconfig\" or  contains \"=wget%\" or  contains \"=wget+\" or  contains \"=curl%\" or  contains \"=curl+\" or  contains \"=certutil\" or  contains \"=copy%20%5C%5C\" or  contains \"=dsquery%\" or  contains \"=dsquery+\" or  contains \"=nltest%\" or  contains \"=nltest+\"))\n\n\n\n"}
{"prompt": "I want to find Cisco Catalyst switches that have had more than one \"ARP Exceeded\" event within a 5-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| bin _time span = 5m\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, eth_src, _time, _vendor,\n_product, _insert_time\n| filter msg_id in (\"ARP-4-ARPLEARNTHRES\")\n| comp count() as matched_events,\nvalues(*) as * by device_ip,\n_time\n| filter matched_events >= 2\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nduplicate_alert_count = subtract(floor(divide(matched_events, 2)), 1)"}
{"prompt": "I want to see all Cisco Catalyst devices that are configured with IP SLA tracking and their details, including timestamps.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| alter msg_id = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"\\%([^\\:]+)\"), 0),\ndevice_ip = cisco_catalyst_raw._final_reporting_device_ip,\neth_src = arrayindex(regextract(cisco_catalyst_raw._raw_log, \"client\\s\\(([^\\)]+)\"), 0)\n| alter msg_id = if(msg_id != null, msg_id, concat(xdm.observer.type, xdm.event.type)),\nxdm.source.host.mac_addresses = to_string(xdm.source.host.mac_addresses)\n| fields xdm.network.session_id, xdm.event.type, xdm.alert.severity,\nxdm.observer.type, xdm.event.description, xdm.observer.name,\nxdm.target.interface, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.port, xdm.source.process.name, xdm.source.vlan,\nxdm.source.ipv6, xdm.source.process.identifier, xdm.observer.action,\nxdm.event.outcome, msg_id, device_ip, xdm.event.outcome_reason,\nxdm.source.host.mac_addresses, _time, _vendor, _product,\n_insert_time, eth_src\n| filter xdm.event.description contains \"ip sla\"\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts related to the CVE-2021-21972 VSphere Exploitation exploit that involve POST requests to \"/ui/vropspluginui/rest/services/uploadova\".", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and xdm.network.http.url = \"/ui/vropspluginui/rest/services/uploadova\")\n\n\n\n"}
{"prompt": "I want to see indicators of malicious activity where the \"odbcconf.exe\" process spawns uncommon child processes.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\odbcconf\\.exe\"\n\n\n\n"}
{"prompt": "I want to find potential webshell creation attempts on static websites.", "response": "datamodel\n| filter ((xdm.target.file.filename ~= \".*\\\\inetpub\\\\wwwroot\\\\.*\" and (xdm.target.file.filename contains \".ashx\" or xdm.target.file.filename contains \".asp\" or xdm.target.file.filename contains \".ph\" or xdm.target.file.filename contains \".soap\")) or ((xdm.target.file.filename ~= \".*\\\\www\\\\.*\" or xdm.target.file.filename ~= \".*\\\\htdocs\\\\.*\" or xdm.target.file.filename ~= \".*\\\\html\\\\.*\") and xdm.target.file.filename contains \".ph\")) and  not ((xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or xdm.target.file.filename ~= \".*\\\\Windows\\\\Temp\\\\.*\") or (xdm.target.process.name = \"System\" or xdm.source.process.name = \"System\") or xdm.target.file.filename contains \"\\\\xampp\")\n\n\n\n"}
{"prompt": "I want to see alerts for when wget downloads files to potentially suspicious directories on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/wget\" and (action_process_image_command_line ~= \"\\s\\-O\\s\" or action_process_image_command_line contains \"--output-document\") and action_process_image_command_line contains \"/tmp/\")\n\n\n\n"}
{"prompt": "I want to understand what this complex rule about Windows registry changes is looking for.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\" and (action_registry_key_name contains \"\\\\ShellServiceObjectDelayLoad\" or action_registry_key_name ~= \".*\\\\Run\\\\.*\" or action_registry_key_name ~= \".*\\\\RunOnce\\\\.*\" or action_registry_key_name ~= \".*\\\\RunOnceEx\\\\.*\" or action_registry_key_name ~= \".*\\\\RunServices\\\\.*\" or action_registry_key_name ~= \".*\\\\RunServicesOnce\\\\.*\" or action_registry_key_name contains \"\\\\Policies\\\\System\\\\Shell\" or action_registry_key_name contains \"\\\\Policies\\\\Explorer\\\\Run\" or action_registry_key_name contains \"\\\\Group Policy\\\\Scripts\\\\Startup\" or action_registry_key_name contains \"\\\\Group Policy\\\\Scripts\\\\Shutdown\" or action_registry_key_name contains \"\\\\Group Policy\\\\Scripts\\\\Logon\" or action_registry_key_name contains \"\\\\Group Policy\\\\Scripts\\\\Logoff\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellServiceObjects\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellIconOverlayIdentifiers\" or action_registry_key_name contains \"\\\\Explorer\\\\ShellExecuteHooks\" or action_registry_key_name contains \"\\\\Explorer\\\\SharedTaskScheduler\" or action_registry_key_name contains \"\\\\Explorer\\\\Browser Helper Objects\" or action_registry_key_name contains \"\\\\Authentication\\\\PLAP Providers\" or action_registry_key_name contains \"\\\\Authentication\\\\Credential Providers\" or action_registry_key_name contains \"\\\\Authentication\\\\Credential Provider Filters\")) and  not (((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\") or action_registry_key_name ~= \".*\\\\NgcFirst\\\\ConsecutiveSwitchCount\" or (actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\Update\\\\OneDriveSetup\\.exe\" or actor_process_image_path ~= \".*\\\\AppData\\\\Roaming\\\\Spotify\\\\Spotify\\.exe\" or actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\WebEx\\\\WebexHost\\.exe\") or actor_process_image_path in (\"C:\\\\WINDOWS\\\\system32\\\\devicecensus.exe\", \"C:\\\\Windows\\\\system32\\\\winsat.exe\", \"C:\\\\Program Files\\\\Microsoft OneDrive\\\\StandaloneUpdater\\\\OneDriveSetup.exe\", \"C:\\\\Program Files\\\\Microsoft OneDrive\\\\Update\\\\OneDriveSetup.exe\", \"C:\\\\Program Files (x86)\\\\Microsoft OneDrive\\\\Update\\\\OneDriveSetup.exe\", \"C:\\\\Program Files\\\\KeePass Password Safe 2\\\\ShInstUtil.exe\", \"C:\\\\Program Files\\\\Everything\\\\Everything.exe\", \"C:\\\\Program Files (x86)\\\\Microsoft Office\\\\root\\\\integration\\\\integrator.exe\")) or (actor_process_image_path = \"C:\\\\Windows\\\\system32\\\\LogonUI.exe\" and (action_registry_key_name ~= \".*\\\\Authentication\\\\Credential\\ Providers\\\\\\{D6886603\\-9D2F\\-4EB2\\-B667\\-1971041FA96B\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\Authentication\\\\Credential\\ Providers\\\\\\{BEC09223\\-B018\\-416D\\-A0AC\\-523971B639F5\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\Authentication\\\\Credential\\ Providers\\\\\\{8AF662BF\\-65A0\\-4D0A\\-A540\\-A338A999D36F\\}\\\\.*\" or action_registry_key_name ~= \".*\\\\Authentication\\\\Credential\\ Providers\\\\\\{27FBDB57\\-B613\\-4AF2\\-9D7E\\-4FA7A66C21AD\\}\\\\.*\")) or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeUpdate\\\\Install\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\EdgeWebView\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\Edge\\\\Application\\\\msedge\\.exe.*\") or (actor_process_image_path = \"C:\\\\Windows\\\\system32\\\\regsvr32.exe\" and action_registry_key_name contains \"DropboxExt\" and (action_registry_value_name ~= \".*A251\\-47B7\\-93E1\\-CDD82E34AF8B\\}\" or action_registry_data ~= \".*A251\\-47B7\\-93E1\\-CDD82E34AF8B\\}\")) or (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\Opera\\ Browser\\ Assistant\" and (action_registry_value_name = \"C:\\\\Program Files\\\\Opera\\\\assistant\\\\browser_assistant.exe\" or action_registry_data = \"C:\\\\Program Files\\\\Opera\\\\assistant\\\\browser_assistant.exe\")) or (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\iTunesHelper\" and (action_registry_value_name = \"\\\"C:\\\\Program Files\\\\iTunes\\\\iTunesHelper.exe\\\"\" or action_registry_data = \"\\\"C:\\\\Program Files\\\\iTunes\\\\iTunesHelper.exe\\\"\")) or (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\zoommsirepair\" and (action_registry_value_name = \"\\\"C:\\\\Program Files\\\\Zoom\\\\bin\\\\installer.exe\\\" /repair\" or action_registry_data = \"\\\"C:\\\\Program Files\\\\Zoom\\\\bin\\\\installer.exe\\\" /repair\")) or (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\Greenshot\" and (action_registry_value_name = \"C:\\\\Program Files\\\\Greenshot\\\\Greenshot.exe\" or action_registry_data = \"C:\\\\Program Files\\\\Greenshot\\\\Greenshot.exe\")) or (action_registry_key_name ~= \".*\\\\Software\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\GoogleDriveFS\" and (action_registry_value_name ~= \"C\\:\\\\Program\\ Files\\\\Google\\\\Drive\\ File\\ Stream\\\\.*\" or action_registry_data ~= \"C\\:\\\\Program\\ Files\\\\Google\\\\Drive\\ File\\ Stream\\\\.*\") and (action_registry_value_name contains \"\\\\GoogleDriveFS.exe\" or action_registry_data contains \"\\\\GoogleDriveFS.exe\")) or (action_registry_key_name contains \"GoogleDrive\" and (action_registry_value_name in (\"{CFE8B367-77A7-41D7-9C90-75D16D7DC6B6}\", \"{A8E52322-8734-481D-A7E2-27B309EF8D56}\", \"{C973DA94-CBDF-4E77-81D1-E5B794FBD146}\", \"{51EF1569-67EE-4AD6-9646-E726C3FFC8A2}\") or action_registry_data in (\"{CFE8B367-77A7-41D7-9C90-75D16D7DC6B6}\", \"{A8E52322-8734-481D-A7E2-27B309EF8D56}\", \"{C973DA94-CBDF-4E77-81D1-E5B794FBD146}\", \"{51EF1569-67EE-4AD6-9646-E726C3FFC8A2}\"))) or (((action_registry_value_name ~= \"C\\:\\\\Windows\\\\system32\\\\cmd\\.exe\\ \\/q\\ \\/c\\ rmdir\\ \\/s\\ \\/q\\ \\\"C\\:\\\\Users\\\\.*\" or action_registry_value_name ~= \"C\\:\\\\Windows\\\\system32\\\\cmd\\.exe\\ \\/q\\ \\/c\\ del\\ \\/q\\ \\\"C\\:\\\\Users\\\\.*\") or (action_registry_data ~= \"C\\:\\\\Windows\\\\system32\\\\cmd\\.exe\\ \\/q\\ \\/c\\ rmdir\\ \\/s\\ \\/q\\ \\\"C\\:\\\\Users\\\\.*\" or action_registry_data ~= \"C\\:\\\\Windows\\\\system32\\\\cmd\\.exe\\ \\/q\\ \\/c\\ del\\ \\/q\\ \\\"C\\:\\\\Users\\\\.*\")) and (action_registry_value_name ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\.*\" or action_registry_data ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\OneDrive\\\\.*\")) or (action_registry_key_name contains \"\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\RunOnce\\\\{\" and ((action_registry_value_name contains \"\\\\AppData\\\\Local\\\\Package Cache\\\\{\" or action_registry_data contains \"\\\\AppData\\\\Local\\\\Package Cache\\\\{\") and (action_registry_value_name contains \"}\\\\python-\" or action_registry_data contains \"}\\\\python-\")) and (action_registry_value_name ~= \".*\\.exe\\\"\\ \\/burn\\.runonce\" or action_registry_data ~= \".*\\.exe\\\"\\ \\/burn\\.runonce\")) or ((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Common\\ Files\\\\Microsoft\\ Shared\\\\ClickToRun\\\\Updates\\\\.*\") and actor_process_image_path ~= \".*\\\\OfficeClickToRun\\.exe\") or actor_process_image_path = \"C:\\\\Program Files\\\\Windows Defender\\\\MsMpEng.exe\" or (actor_process_image_path ~= \".*\\\\Microsoft\\\\Teams\\\\current\\\\Teams\\.exe\" and (action_registry_value_name contains \"\\\\Microsoft\\\\Teams\\\\Update.exe --processStart \" or action_registry_data contains \"\\\\Microsoft\\\\Teams\\\\Update.exe --processStart \")) or (actor_process_image_path = \"C:\\\\Windows\\\\system32\\\\userinit.exe\" and (action_registry_value_name = \"ctfmon.exe /n\" or action_registry_data = \"ctfmon.exe /n\")) or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\AVG\\\\Antivirus\\\\Setup\\\\.*\" and (action_registry_value_name in (\"\\\"C:\\\\Program Files\\\\AVG\\\\Antivirus\\\\AvLaunch.exe\\\" /gui\", \"\\\"C:\\\\Program Files (x86)\\\\AVG\\\\Antivirus\\\\AvLaunch.exe\\\" /gui\", \"{472083B0-C522-11CF-8763-00608CC02F24}\") or action_registry_data in (\"\\\"C:\\\\Program Files\\\\AVG\\\\Antivirus\\\\AvLaunch.exe\\\" /gui\", \"\\\"C:\\\\Program Files (x86)\\\\AVG\\\\Antivirus\\\\AvLaunch.exe\\\" /gui\", \"{472083B0-C522-11CF-8763-00608CC02F24}\"))) or ((actor_process_image_path ~= \".*\\\\aurora\\-agent\\-64\\.exe\" or actor_process_image_path ~= \".*\\\\aurora\\-agent\\.exe\") and action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\aurora\\-dashboard\" and (action_registry_value_name = \"C:\\\\Program Files\\\\Aurora-Agent\\\\tools\\\\aurora-dashboard.exe\" or action_registry_data = \"C:\\\\Program Files\\\\Aurora-Agent\\\\tools\\\\aurora-dashboard.exe\")) or (action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Run\\\\Everything\" and (action_registry_value_name ~= \".*\\\\Everything\\\\Everything\\.exe\\\"\\ \\-startup\" or action_registry_data ~= \".*\\\\Everything\\\\Everything\\.exe\\\"\\ \\-startup\")))\n\n\n\n"}
{"prompt": "I want to see detections for Kavremover using LOLBIN techniques on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \" run run-cmd \" and  not ((actor_process_image_path ~= \".*\\\\kavremover\\.exe\" or actor_process_image_path ~= \".*\\\\cleanapi\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see all instances of locked out service accounts on managed IS systems, including details about the error code, hostname, and target domain.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4740\")\n| alter target_uname = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| join type = left\n(dataset = Epm_ServiceID_static_list\n| alter username_field = if(username ~= \"@ad.infosys.com\", rtrim(username, \"@ad.infosys.com\"), if(username ~= \"@infosys.com\", rtrim(username, \"@infosys.com\"), if(username ~= \"itlinfosys\", ltrim(username, \"itlinfosys\\\\\"), username)))\n) as JT1 JT1.username_field = target_uname\n| filter username_field != null\n\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, target_uname,\ntarget_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect activities that disable security tools on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\/service\" and (action_process_image_command_line contains \"iptables\" and action_process_image_command_line contains \"stop\")) or (action_process_image_path ~= \".*\\/service\" and (action_process_image_command_line contains \"ip6tables\" and action_process_image_command_line contains \"stop\")) or (action_process_image_path ~= \".*\\/chkconfig\" and (action_process_image_command_line contains \"iptables\" and action_process_image_command_line contains \"stop\")) or (action_process_image_path ~= \".*\\/chkconfig\" and (action_process_image_command_line contains \"ip6tables\" and action_process_image_command_line contains \"stop\")) or (action_process_image_path ~= \".*\\/systemctl\" and (action_process_image_command_line contains \"firewalld\" and action_process_image_command_line contains \"stop\")) or (action_process_image_path ~= \".*\\/systemctl\" and (action_process_image_command_line contains \"firewalld\" and action_process_image_command_line contains \"disable\")) or (action_process_image_path ~= \".*\\/service\" and (action_process_image_command_line contains \"cbdaemon\" and action_process_image_command_line contains \"stop\")) or (action_process_image_path ~= \".*\\/chkconfig\" and (action_process_image_command_line contains \"cbdaemon\" and action_process_image_command_line contains \"off\")) or (action_process_image_path ~= \".*\\/systemctl\" and (action_process_image_command_line contains \"cbdaemon\" and action_process_image_command_line contains \"stop\")) or (action_process_image_path ~= \".*\\/systemctl\" and (action_process_image_command_line contains \"cbdaemon\" and action_process_image_command_line contains \"disable\")) or (action_process_image_path ~= \".*\\/setenforce\" and action_process_image_command_line contains \"0\") or (action_process_image_path ~= \".*\\/systemctl\" and (action_process_image_command_line contains \"stop\" and action_process_image_command_line contains \"falcon-sensor\")) or (action_process_image_path ~= \".*\\/systemctl\" and (action_process_image_command_line contains \"disable\" and action_process_image_command_line contains \"falcon-sensor\")))\n\n\n\n"}
{"prompt": "I want to see events that involve deleting access log files on Linux systems.", "response": "datamodel dataset = linux_linux_raw\n| alter xdm.event.type = coalesce(xdm.event.type, arrayindex(regextract(linux_linux_raw._raw_log, \"\\stype=[^\\s]+\"), 0)),\ncommand_exe = arrayindex(regextract(linux_linux_raw._raw_log, \"\\sexe=\\\"([^\\\"]+)\"), 0),\ncommand = coalesce(arrayindex(regextract(xdm.event.description, \"\\[COMMAND\\=([^\\]]+)\\]\"), 0), arrayindex(regextract(xdm.event.description, \"COMMAND=(.*)\"), 0), arrayindex(regextract(xdm.event.description, \"\\s*\\[[^\\]]+\\]:\\s(.*)\"), 0))\n| alter xdm.target.process.command_line = coalesce(command_exe, command),\nxdm.target.user.groups = to_string(xdm.target.user.groups),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.target.process.command_line ~= \"rm|truncate\" and xdm.target.process.command_line contains \"access.log\"\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, device_ip\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events where a malicious actor creates a \"GoogleUpdate\" service using rundll32 and FileProtocolHandler, potentially indicating the Goofy Guineapig backdoor.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and ServiceName = \"GoogleUpdate\" and (actor_process_image_path contains \"rundll32\" and actor_process_image_path contains \"FileProtocolHandler\" and actor_process_image_path contains \"\\\\ProgramData\\\\GoogleUpdate\\\\GoogleUpdate.exe\"))\n\n\n\n"}
{"prompt": "I want to find instances where an attacker might be collecting browser bookmarks on endpoints using PowerShell.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Get-ChildItem\" and ScriptBlockText contains \" -Recurse \" and ScriptBlockText contains \" -Path \" and ScriptBlockText contains \" -Filter Bookmarks\" and ScriptBlockText contains \" -ErrorAction SilentlyContinue\" and ScriptBlockText contains \" -Force\")\n\n\n\n"}
{"prompt": "I want to find instances of malicious sideloading using \"LINK.EXE\" that are not part of legitimate Visual Studio installations.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\link\\.exe\" and action_process_image_command_line contains \"LINK /\") and  not (((actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Visual\\ Studio\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\ Visual\\ Studio\\\\.*\") and actor_process_image_path ~= \".*\\\\VC\\\\Tools\\\\MSVC\\\\.*\"))\n\n\n\n"}
{"prompt": " I want to see detections related to the Winnti Pipemon malware on endpoints. ", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"setup0.exe -p\" or (action_process_image_command_line contains \"setup.exe\" and (action_process_image_command_line ~= \".*\\-x\\:0\" or action_process_image_command_line ~= \".*\\-x\\:1\" or action_process_image_command_line ~= \".*\\-x\\:2\")))\n\n\n\n"}
{"prompt": "I want to detect suspicious uses of \"Diskshadow.exe\" that might be running scripts with uncommon extensions.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"diskshadow.exe\" or action_process_image_path ~= \".*\\\\diskshadow\\.exe\") and (action_process_image_command_line contains \"-s \" or action_process_image_command_line contains \"/s \")) and  not (action_process_image_command_line contains \".txt\")\n\n\n\n"}
{"prompt": "I want to see events related to Azure policy assignments being created in my environment.", "response": "dataset = microsoft_windows_raw\n| filter event_id = 1111 /*config case_sensitive = false\n|dataset = msft_azure_raw\n|filter tenantId IN (\"<id>\")\n|filter operationName IN (\"MICROSOFT.AUTHORIZATION/POLICYASSIGNMENTS/WRITE\")\n|alter username = json_extract_scalar(identity,\"$.claims.name\"), target_username = json_extract_scalar(properties,\"$.userPrincipalName\"), referenceid = arrayindex(split(resourceId,\"/\"),2), aliashost = arrayindex(split(resourceId,\"/\"),-1), protocol = json_extract_scalar(properties,\"$.eventProperties.protocol\")\n|fields username, target_username, operationName, referenceid, tenantId, resulttype, callerIpAddress, identity, aliashost, protocol, _time\n|alter aggregation_criteria = \"ilsourceuser\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)*/"}
{"prompt": "I want to find any PowerShell commands that are known to be malicious and associated with the Nishang toolkit.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Add-ConstrainedDelegationBackdoor\" or ScriptBlockText contains \"Copy-VSS\" or ScriptBlockText contains \"Create-MultipleSessions\" or ScriptBlockText contains \"DataToEncode\" or ScriptBlockText contains \"DNS_TXT_Pwnage\" or ScriptBlockText contains \"Do-Exfiltration-Dns\" or ScriptBlockText contains \"Download_Execute\" or ScriptBlockText contains \"Download-Execute-PS\" or ScriptBlockText contains \"DownloadAndExtractFromRemoteRegistry\" or ScriptBlockText contains \"DumpCerts\" or ScriptBlockText contains \"DumpCreds\" or ScriptBlockText contains \"DumpHashes\" or ScriptBlockText contains \"Enable-DuplicateToken\" or ScriptBlockText contains \"Enable-Duplication\" or ScriptBlockText contains \"Execute-Command-MSSQL\" or ScriptBlockText contains \"Execute-DNSTXT-Code\" or ScriptBlockText contains \"Execute-OnTime\" or ScriptBlockText contains \"ExetoText\" or ScriptBlockText contains \"exfill\" or ScriptBlockText contains \"ExfilOption\" or ScriptBlockText contains \"FakeDC\" or ScriptBlockText contains \"FireBuster\" or ScriptBlockText contains \"FireListener\" or ScriptBlockText contains \"Get-Information \" or ScriptBlockText contains \"Get-PassHints\" or ScriptBlockText contains \"Get-Web-Credentials\" or ScriptBlockText contains \"Get-WebCredentials\" or ScriptBlockText contains \"Get-WLAN-Keys\" or ScriptBlockText contains \"HTTP-Backdoor\" or ScriptBlockText contains \"Invoke-AmsiBypass\" or ScriptBlockText contains \"Invoke-BruteForce\" or ScriptBlockText contains \"Invoke-CredentialsPhish\" or ScriptBlockText contains \"Invoke-Decode\" or ScriptBlockText contains \"Invoke-Encode\" or ScriptBlockText contains \"Invoke-Interceptor\" or ScriptBlockText contains \"Invoke-JSRatRegsvr\" or ScriptBlockText contains \"Invoke-JSRatRundll\" or ScriptBlockText contains \"Invoke-MimikatzWDigestDowngrade\" or ScriptBlockText contains \"Invoke-NetworkRelay\" or ScriptBlockText contains \"Invoke-PowerShellIcmp\" or ScriptBlockText contains \"Invoke-PowerShellUdp\" or ScriptBlockText contains \"Invoke-Prasadhak\" or ScriptBlockText contains \"Invoke-PSGcat\" or ScriptBlockText contains \"Invoke-PsGcatAgent\" or ScriptBlockText contains \"Invoke-SessionGopher\" or ScriptBlockText contains \"Invoke-SSIDExfil\" or ScriptBlockText contains \"LoggedKeys\" or ScriptBlockText contains \"Nishang\" or ScriptBlockText contains \"NotAllNameSpaces\" or ScriptBlockText contains \"Out-CHM\" or ScriptBlockText contains \"OUT-DNSTXT\" or ScriptBlockText contains \"Out-HTA\" or ScriptBlockText contains \"Out-RundllCommand\" or ScriptBlockText contains \"Out-SCF\" or ScriptBlockText contains \"Out-SCT\" or ScriptBlockText contains \"Out-Shortcut\" or ScriptBlockText contains \"Out-WebQuery\" or ScriptBlockText contains \"Out-Word\" or ScriptBlockText contains \"Parse_Keys\" or ScriptBlockText contains \"Password-List\" or ScriptBlockText contains \"Powerpreter\" or ScriptBlockText contains \"Remove-Persistence\" or ScriptBlockText contains \"Remove-PoshRat\" or ScriptBlockText contains \"Remove-Update\" or ScriptBlockText contains \"Run-EXEonRemote\" or ScriptBlockText contains \"Set-DCShadowPermissions\" or ScriptBlockText contains \"Set-RemotePSRemoting\" or ScriptBlockText contains \"Set-RemoteWMI\" or ScriptBlockText contains \"Shellcode32\" or ScriptBlockText contains \"Shellcode64\" or ScriptBlockText contains \"StringtoBase64\" or ScriptBlockText contains \"TexttoExe\")\n\n\n\n"}
{"prompt": " I want to see alerts for potential malicious DLL loading using Winword.exe ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\WINWORD\\.exe\" or actor_process_file_original_name = \"WinWord.exe\") and (action_process_image_command_line contains \"/l \" and action_process_image_command_line contains \".dll\"))\n\n\n\n"}
{"prompt": "I want to see all instances where PowerShell is used to install the MSExchange Transport Agent on endpoints.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"Install-TransportAgent\"\n\n\n\n"}
{"prompt": "I want to see activity related to the Peach Sandstorm APT group, specifically looking for processes with \"QP's\\*(58vaP!tF4\" in their command line.", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"QP's\\*(58vaP!tF4\"\n\n\n\n"}
{"prompt": "I want to find suspicious outbound SMTP connections that might be used for data exfiltration.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter ((action_local_port in (25, 587, 465, 2525) or action_remote_port in (25, 587, 465, 2525)) and Initiated = \"true\") and  not ((actor_process_image_path ~= \".*\\\\thunderbird\\.exe\" or actor_process_image_path ~= \".*\\\\outlook\\.exe\") or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\\\Exchange\\ Server\\\\.*\" or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\WindowsApps\\\\microsoft\\.windowscommunicationsapps\\_.*\" and actor_process_image_path ~= \".*\\\\HxTsr\\.exe\"))\n\n\n\n"}
{"prompt": " I want to see alerts for potentially malicious use of Bash.exe with the \"-c\" flag. ", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\bash\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\bash\\.exe\") or actor_process_file_original_name = \"Bash.exe\") and action_process_image_command_line contains \" -c \")\n\n\n\n"}
{"prompt": "I want to detect if anyone is using an Azure Global Admin account, including admins, administrators, and root users.", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n\n\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = lowercase(arrayindex(split(resourceId, \"/\"), 2)),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| filter referenceid in (\"<id>\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| filter target_username in (\"admin\", \"administrator\", \"root\")\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where malware is using obfuscation techniques involving clipboard services.", "response": "datamodel\n| filter xdm.target.process.executable.path contains \"(Clipboard|i\"\n\n\n\n"}
{"prompt": "I want to detect potential exploitation attempts of CVE-2023-46214 in Splunk Enterprise using known public proof of concept code references.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and xdm.network.http.response_code in (200, 302)) and ((xdm.network.http.url contains \"/splunkd/__upload/indexing/preview\" and (xdm.network.http.url contains \"NO_BINARY_CHECK=1\" and xdm.network.http.url contains \"input.path=shell.xsl\")) or ((xdm.network.http.url contains \"/api/search/jobs\" and xdm.network.http.url contains \"/results\") and (xdm.network.http.url contains \"/opt/splunk/var/run/splunk/dispatch/\" and xdm.network.http.url contains \"/shell.xsl\")))\n\n\n\n"}
{"prompt": "I want to see when Cisco Catalyst routers or switches are restarted and get details like their IP addresses and timestamps.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_catalyst_raw\n| filter (xdm.event.description ~= \"System restarted\")\n| alter Rep_Device_IP = cisco_catalyst_raw._final_reporting_device_ip,\nBVM_IP = cisco_catalyst_raw._broker_ip_address,\nBVM_DeviceName = cisco_catalyst_raw._broker_device_name\n| fields _time, _vendor, _product, xdm.event.description,\nxdm.event.type, xdm.observer.unique_identifier, xdm.observer.name,\nRep_Device_IP, BVM_IP, BVM_DeviceName, *"}
{"prompt": "{I want to find instances of processes on endpoints that are decoding Base64 encoded text.} \n\n\nLet me know if you need help with any other Cortex XQL queries!", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/base64\" and action_process_image_command_line contains \"-d\")\n\n\n\n"}
{"prompt": " I want to find instances of suspicious PowerShell activity modifying service security descriptors using the `Set-Service` cmdlet. ", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_file_original_name = \"pwsh.dll\") and (action_process_image_command_line contains \"-SecurityDescriptorSddl \" or action_process_image_command_line contains \"-sd \") and ((action_process_image_command_line contains \"Set-Service \" and action_process_image_command_line contains \"D;;\") and (action_process_image_command_line contains \";;;IU\" or action_process_image_command_line contains \";;;SU\" or action_process_image_command_line contains \";;;BA\" or action_process_image_command_line contains \";;;SY\" or action_process_image_command_line contains \";;;WD\")))\n\n\n\n"}
{"prompt": "I want to see alerts related to NotPetya ransomware activity on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"wevtutil cl Application & fsutil usn deletejournal /D C:\" or action_process_image_command_line contains \"dllhost.dat %WINDIR%\\\\ransoms\") or (action_process_image_path ~= \".*\\\\rundll32\\.exe\" and (action_process_image_command_line ~= \".*\\.dat\\,\\#1\" or action_process_image_command_line ~= \".*\\.dat\\ \\#1\" or action_process_image_command_line ~= \".*\\.zip\\.dll\\\"\\,\\#1\")) or _raw_log contains \"\\\\perfc.dat\")\n\n\n\n"}
{"prompt": "I want to see all modifications to registry keys under CurrentControlSet that could indicate persistence, especially those related to autorun settings and system startup programs.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\SYSTEM\\\\CurrentControlSet\\\\Control\" and (action_registry_key_name contains \"\\\\Terminal Server\\\\WinStations\\\\RDP-Tcp\\\\InitialProgram\" or action_registry_key_name contains \"\\\\Terminal Server\\\\Wds\\\\rdpwd\\\\StartupPrograms\" or action_registry_key_name contains \"\\\\SecurityProviders\\\\SecurityProviders\" or action_registry_key_name contains \"\\\\SafeBoot\\\\AlternateShell\" or action_registry_key_name contains \"\\\\Print\\\\Providers\" or action_registry_key_name contains \"\\\\Print\\\\Monitors\" or action_registry_key_name contains \"\\\\NetworkProvider\\\\Order\" or action_registry_key_name contains \"\\\\Lsa\\\\Notification Packages\" or action_registry_key_name contains \"\\\\Lsa\\\\Authentication Packages\" or action_registry_key_name contains \"\\\\BootVerificationProgram\\\\ImagePath\")) and  not ((action_registry_value_name = \"(Empty)\" or action_registry_data = \"(Empty)\") or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\spoolsv.exe\" and action_registry_key_name contains \"\\\\Print\\\\Monitors\\\\CutePDF Writer Monitor\" and (action_registry_value_name in (\"cpwmon64_v40.dll\", \"CutePDF Writer\") or action_registry_data in (\"cpwmon64_v40.dll\", \"CutePDF Writer\"))) or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\spoolsv.exe\" and action_registry_key_name contains \"Print\\\\Monitors\\\\Appmon\\\\Ports\\\\Microsoft.Office.OneNote_\" and (actor_effective_username contains \"AUTHORI\" or actor_effective_username contains \"AUTORI\")) or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\poqexec.exe\" and action_registry_key_name ~= \".*\\\\NetworkProvider\\\\Order\\\\ProviderOrder\") or (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\spoolsv.exe\" and action_registry_key_name ~= \".*\\\\Print\\\\Monitors\\\\MONVNC\\\\Driver\" and (action_registry_value_name = \"VNCpm.dll\" or action_registry_data = \"VNCpm.dll\")))\n\n\n\n"}
{"prompt": "I want to find instances where a process is using nslookup to query _ldap._tcp.dc._msdcs, indicating potential network reconnaissance activity.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"nslookup\" and action_process_image_command_line contains \"_ldap._tcp.dc._msdcs.\")\n\n\n\n"}
{"prompt": "I want to see alerts for when crontab files are being modified.", "response": "datamodel\n| filter _raw_log contains \"REPLACE\"\n\n\n\n"}
{"prompt": "I want to see events related to revoked kernel drivers loaded on my system.", "response": "datamodel\n| filter xdm.event.id in (3021, 3022)\n\n\n\n"}
{"prompt": "I want to see events related to UAC bypass attempts that use Consent and Comctl32 files.", "response": "datamodel\n| filter (xdm.target.file.filename ~= \"C\\:\\\\Windows\\\\System32\\\\consent\\.exe\\.\\@.*\" and xdm.target.file.filename ~= \".*\\\\comctl32\\.dll\")\n\n\n\n"}
{"prompt": "I want to see which users are simultaneously accessing both LAN and VPN connections. I need to focus on those who have domain admin privileges or are part of \"Tier0Users\" security group. Also, the query should display the timestamps of these events.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| sort asc _time\n| bin _time span = 5m\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\"\n| alter target_user_username = if(xdm.target.user.username ~= \"@ad.infosys.com\", rtrim(xdm.target.user.username, \"@ad.infosys.com\"), if(xdm.target.user.username ~= \"@infosys.com\", rtrim(xdm.target.user.username, \"@infosys.com\"), if(xdm.target.user.username ~= \"itlinfosys\", ltrim(xdm.target.user.username, \"itlinfosys\\\\\"), xdm.target.user.username)))\n| filter target_user_username not in (\"ANONYMOUS LOGON\", \"deepak_ammanath\") and target_user_username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.event.id = \"4624\"\n| join type = left\n(dataset in (enterprise_admin_list, pan_dss_raw)\n| filter admin_type = \"domain_admin_win_admin\" or security_groups contains \"Tier0Users\"\n) as ent_admin_dst ent_admin_dst.username = xdm.target.user.username or ent_admin_dst.sam_account_name = xdm.target.user.username\n| filter username != null or sam_account_name != null\n| join type = left\n(dataset = enterprise_platform_static_list\n| fields ip_address, platform_type\n| filter platform_type in (\"ad_ip\", \"exchange_ip\")\n) as ent_platform ent_platform.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = enterprise_platform_static_list\n| filter platform_type in (\"is_ip\")\n| alter ip_range = split(ip_address, \"-\")\n| alter ip_range_start = ip_to_int(arrayindex(ip_range, 0)),\nip_range_end = ip_to_int(arrayindex(ip_range, 1))\n| fields ip_range_start, ip_range_end\n) as ent_platform_ip_range ip_to_int(xdm.source.ipv4) >= ent_platform_ip_range.ip_range_start and ip_to_int(xdm.source.ipv4) <= ent_platform_ip_range.ip_range_end\n| filter ip_range_start = null\n| join type = left\n(dataset = vpn_cidr_ip_static_list\n) as vpn_ips incidr(xdm.source.ipv4, vpn_ips.cidr_range)\n| alter pattern = if(cidr_range != null, \"E1\", \"E2\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, pattern, target_user_username\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\nlist(pattern) as pattern_events,\ncount() as matched_events by target_user_username,\n_time\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events ~= \"E1,E2\"\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances where root certificates are being installed on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\certutil\\.exe\" and (action_process_image_command_line contains \"-addstore\" and action_process_image_command_line contains \"root\")) or (action_process_image_path ~= \".*\\\\CertMgr\\.exe\" and (action_process_image_command_line contains \"/add\" and action_process_image_command_line contains \"root\"))\n\n\n\n"}
{"prompt": "I want to detect potential CobaltStrike activity based on named pipe patterns.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter (PipeName ~= \"\\\\mojo\\.5688\\.8052\\.(?\\:183894939787088877|35780273329370473)[0-9a-f]{2}\" or PipeName ~= \"\\\\wkssvc\\_?[0-9a-f]{2}\" or PipeName ~= \"\\\\ntsvcs[0-9a-f]{2}\" or PipeName ~= \"\\\\DserNamePipe[0-9a-f]{2}\" or PipeName ~= \"\\\\SearchTextHarvester[0-9a-f]{2}\" or PipeName ~= \"\\\\mypipe\\-(?\\:f|h)[0-9a-f]{2}\" or PipeName ~= \"\\\\windows\\.update\\.manager[0-9a-f]{2,3}\" or PipeName ~= \"\\\\ntsvcs\\_[0-9a-f]{2}\" or PipeName ~= \"\\\\scerpc\\_?[0-9a-f]{2}\" or PipeName ~= \"\\\\PGMessagePipe[0-9a-f]{2}\" or PipeName ~= \"\\\\MsFteWds[0-9a-f]{2}\" or PipeName ~= \"\\\\f4c3[0-9a-f]{2}\" or PipeName ~= \"\\\\fullduplex\\_[0-9a-f]{2}\" or PipeName ~= \"\\\\msrpc\\_[0-9a-f]{4}\" or PipeName ~= \"\\\\win\\\\msrpc\\_[0-9a-f]{2}\" or PipeName ~= \"\\\\f53f[0-9a-f]{2}\" or PipeName ~= \"\\\\rpc\\_[0-9a-f]{2}\" or PipeName ~= \"\\\\spoolss\\_[0-9a-f]{2}\" or PipeName ~= \"\\\\Winsock2\\\\CatalogChangeListener\\-[0-9a-f]{3}\\-0\\,\")\n\n\n\n"}
{"prompt": "I want to find instances where a new privileged user account was created on the system.", "response": "datamodel\n| filter (_raw_log contains \"new user\" and ( contains \"GID=0\" or  contains \"UID=0\" or  contains \"GID=10\" or  contains \"GID=27\"))\n\n\n\n"}
{"prompt": "I want to detect activities related to file and directory discovery on MacOS endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path = \"/usr/bin/file\" and action_process_image_command_line ~= \"(.){200,}\") or (action_process_image_path = \"/bin/ls\" and action_process_image_command_line contains \"-R\") or action_process_image_path = \"/usr/bin/find\" or action_process_image_path = \"/usr/bin/mdfind\" or action_process_image_path = \"/tree\")\n\n\n\n"}
{"prompt": " I want to see events related to suspicious activity involving the \"Desktopimgdownldr\" process that might be involved in command and control activities on my endpoints. ", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" /lockscreenurl:\" and  not ((action_process_image_command_line contains \".jpg\" or action_process_image_command_line contains \".jpeg\" or action_process_image_command_line contains \".png\"))) or (action_process_image_command_line contains \"reg delete\" and action_process_image_command_line contains \"\\\\PersonalizationCSP\")\n\n\n\n"}
{"prompt": "I want to find suspicious network connections from my systems that might be using Visual Studio Code tunnels for malicious activity.", "response": "#N/A"}
{"prompt": "I want to see alerts about potential Mustang Panda activity, specifically looking for processes that use SolidPDFCreator.dll and manipulate the Windows registry with \"SolidPDF\" entries.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"copy SolidPDFCreator.dll\" and action_process_image_command_line contains \"C:\\\\Users\\\\Public\\\\Libraries\\\\PhotoTvRHD\\\\SolidPDFCreator.dll\") or (action_process_image_command_line contains \"reg \" and action_process_image_command_line contains \"\\\\Windows\\\\CurrentVersion\\\\Run\" and action_process_image_command_line contains \"SolidPDF\" and action_process_image_command_line ~= \".*C\\:\\\\Users\\\\Public\\\\Libraries\\\\PhotoTvRHD\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see all VPN login failures from known bad actor IPs on both my Fortigate and ASA firewalls.", "response": "datamodel dataset in (fortinet_fortigate_raw, fortinet_fortigate1_raw, cisco_asa_raw)\n| filter ((xdm.event.original_event_type in (\"113005\")) or (xdm.event.original_event_type ~= \"39426\")) and (xdm.source.ipv4 in (\"<ips>\"))"}
{"prompt": "I want to see Cortex XDR events related to PsExec using its default named pipe.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter PipeName = \"\\\\PSEXESVC\"\n\n\n\n"}
{"prompt": "I want to see detections for when the \"cipher\" utility is used to overwrite deleted data on endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_file_original_name = \"CIPHER.EXE\" or action_process_image_path ~= \".*\\\\cipher\\.exe\") and action_process_image_command_line contains \" /w:\")\n\n\n\n"}
{"prompt": "I want to see alerts from Symantec Endpoint Protection that indicate a system infection, along with details like hostname, file name, IP addresses, and the requested action taken.", "response": "datamodel dataset = symantec_ep_raw\n| filter xdm.alert.name != null and xdm.alert.name !~= \"Tracking Cookies\" and symantec_ep_raw._raw_log not contains \"CIDS Signature string: Audit\"\n| filter xdm.source.ipv4 != NULL and xdm.target.ipv4 != NULL\n| alter hostname = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0)\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\n\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1),\nfile_hash = xdm.target.file.sha256,\nusername = xdm.source.user.username,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nprocess = xdm.target.file.path,\nrisk_name = xdm.alert.name\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\"),\naggregation_criteria = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect when new PortProxy registry entries are added, as this could indicate lateral movement activity.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\Services\\\\PortProxy\\\\v4tov4\\\\tcp\\\\.*\"\n\n\n\n"}
{"prompt": "I want to find potential web shell indicators on Linux endpoints by looking for suspicious process activity involving common web servers and commands used by attackers.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\/httpd\" or actor_process_image_path ~= \".*\\/lighttpd\" or actor_process_image_path ~= \".*\\/nginx\" or actor_process_image_path ~= \".*\\/apache2\" or actor_process_image_path ~= \".*\\/node\" or actor_process_image_path ~= \".*\\/caddy\") or (actor_process_image_command_line contains \"/bin/java\" and actor_process_image_command_line contains \"tomcat\") or (actor_process_image_command_line contains \"/bin/java\" and actor_process_image_command_line contains \"websphere\")) and (action_process_image_path ~= \".*\\/whoami\" or action_process_image_path ~= \".*\\/ifconfig\" or action_process_image_path ~= \".*\\/ip\" or action_process_image_path ~= \".*\\/bin\\/uname\" or action_process_image_path ~= \".*\\/bin\\/cat\" or action_process_image_path ~= \".*\\/bin\\/crontab\" or action_process_image_path ~= \".*\\/hostname\" or action_process_image_path ~= \".*\\/iptables\" or action_process_image_path ~= \".*\\/netstat\" or action_process_image_path ~= \".*\\/pwd\" or action_process_image_path ~= \".*\\/route\")\n\n\n\n"}
{"prompt": "I want to find potential instances of RjvPlatform.DLL being sideloaded from the default location on Windows.", "response": "preset = xdr_image_load\n| filter (actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\SystemResetPlatform\\\\SystemResetPlatform.exe\" and action_module_path = \"C:\\\\$SysReset\\\\Framework\\\\Stack\\\\RjvPlatform.dll\")\n\n\n\n"}
{"prompt": "{I want to detect potential RDP tunneling attempts using SSH.} \n\n\nLet me know if you need help with any other XQL prompts!", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\ssh\\.exe\" and action_process_image_command_line contains \":3389\")\n\n\n\n"}
{"prompt": "I want to see alerts about users who have been granted the \"SeEnableDelegationPrivilege\" right in Active Directory.", "response": "preset = xdr_event_log\n| alter PrivilegeList = regextract(to_json_string(action_evtlog_data_fields)->PrivilegeList{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4704 and PrivilegeList contains \"SeEnableDelegationPrivilege\")\n\n\n\n"}
{"prompt": "I want to see network traffic from potential exploit frameworks based on unusual user agent strings.", "response": "datamodel\n| filter xdm.network.http.browser in (\"Internet Explorer *\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1; SV1; InfoPath.2)\", \"Mozilla/4.0 (compatible; Metasploit RSPEC)\", \"Mozilla/4.0 (compatible; MSIE 6.1; Windows NT)\", \"Mozilla/4.0 (compatible; MSIE 6.0; Windows NT 5.1)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0)\", \"Mozilla/4.0 (compatible; MSIE 8.0; Windows NT 6.0; Trident/4.0)\", \"Mozilla/4.0 (compatible; MSIE 7.0; Windows NT 6.0; Trident/4.0; SIMBAR={7DB0F6DE-8DE7-4841-9084-28FA914B0F2E}; SLCC1; .N\", \"Mozilla/5.0 (compatible; Googlebot/2.1; +http:\n\n\n\n"}
{"prompt": "I want to see a list of infected machines with details about the System Infected alerts from Symantec Endpoint Protection.", "response": "datamodel dataset = symantec_ep_raw\n| filter xdm.alert.name ~= \"^System Infected\"\n| filter symantec_ep_raw._raw_log contains \",CIDS Signature string: System Infected:\"\n| alter host_name = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0)),\ncategory = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\"),\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\ntime = _time\n| alter Application = arrayindex(regextract(symantec_ep_raw._raw_log, \"Application:\\s([^,]+),\"), 0)\n\n\n\n| alter aggregation_criteria = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find events where an executable creates another executable file.", "response": "datamodel\n| filter ((xdm.target.process.name ~= \".*\\.exe\" or xdm.source.process.name ~= \".*\\.exe\") and xdm.target.file.filename ~= \".*\\.exe\") and  not (((xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\msiexec\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\cleanmgr\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\explorer\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\WINDOWS\\\\system32\\\\dxgiadaptercache\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\WINDOWS\\\\system32\\\\Dism\\.exe\" or xdm.target.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\wuauclt\\.exe\") or (xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\msiexec\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\cleanmgr\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\explorer\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\WINDOWS\\\\system32\\\\dxgiadaptercache\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\WINDOWS\\\\system32\\\\Dism\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\System32\\\\wuauclt\\.exe\")) or ((xdm.target.process.name ~= \".*\\:\\\\WINDOWS\\\\system32\\\\svchost\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\WINDOWS\\\\system32\\\\svchost\\.exe\") and xdm.target.file.filename ~= \".*\\:\\\\Windows\\\\SoftwareDistribution\\\\Download\\\\.*\") or ((xdm.target.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\svchost\\.exe\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\system32\\\\svchost\\.exe\") and (xdm.target.file.filename ~= \".*\\:\\\\WUDownloadCache\\\\.*\" and xdm.target.file.filename contains \"\\\\WindowsUpdateBox.exe\")) or ((xdm.target.process.name ~= \".*\\:\\\\WINDOWS\\\\SoftwareDistribution\\\\Download\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\WINDOWS\\\\SoftwareDistribution\\\\Download\\\\.*\") and (xdm.target.process.name ~= \".*\\\\WindowsUpdateBox\\.Exe\" or xdm.source.process.name ~= \".*\\\\WindowsUpdateBox\\.Exe\") and xdm.target.file.filename ~= \".*\\:\\\\\\$WINDOWS\\.\\~BT\\\\Sources\\\\.*\") or ((xdm.target.process.name ~= \".*\\:\\\\Windows\\\\WinSxS\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\WinSxS\\\\.*\") and (xdm.target.process.name ~= \".*\\\\TiWorker\\.exe\" or xdm.source.process.name ~= \".*\\\\TiWorker\\.exe\")) or (((xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\") or (xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\")) or (xdm.target.file.filename ~= \".*\\:\\\\Program\\ Files\\\\.*\" or xdm.target.file.filename ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\")) or ((xdm.target.process.name ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\.*\" or xdm.target.process.name ~= \".*\\:\\\\Program\\ Files\\\\Windows\\ Defender\\\\.*\") or (xdm.source.process.name ~= \".*\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Program\\ Files\\\\Windows\\ Defender\\\\.*\")) or xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\WindowsApps\\\\.*\" or ((xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\Update\\.exe\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\Update\\.exe\") and (xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\stage\\\\Teams\\.exe\" or xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\Teams\\\\stage\\\\Squirrel\\.exe\" or xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Microsoft\\\\SquirrelTemp\\\\tempb\\\\\")) or ((xdm.target.process.name ~= \".*\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\Windows\\\\Microsoft\\.NET\\\\Framework\\\\.*\") and (xdm.target.process.name ~= \".*\\\\mscorsvw\\.exe\" or xdm.source.process.name ~= \".*\\\\mscorsvw\\.exe\") and xdm.target.file.filename contains \":\\\\Windows\\\\assembly\\\\NativeImages_\") or ((xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\.*\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\.*\") and (xdm.target.process.name ~= \".*\\\\Microsoft\\ VS\\ Code\\\\Code\\.exe\" or xdm.source.process.name ~= \".*\\\\Microsoft\\ VS\\ Code\\\\Code\\.exe\") and xdm.target.file.filename ~= \".*\\\\\\.vscode\\\\extensions\\\\.*\") or ((xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\GitHubDesktop\\\\Update\\.exe\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\GitHubDesktop\\\\Update\\.exe\") and xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\SquirrelTemp\\\\.*\") or ((xdm.target.process.name ~= \".*\\:\\\\WINDOWS\\\\TEMP\\\\.*\" or xdm.source.process.name ~= \".*\\:\\\\WINDOWS\\\\TEMP\\\\.*\") or xdm.target.file.filename ~= \".*\\:\\\\WINDOWS\\\\TEMP\\\\.*\") or ((xdm.target.process.name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or xdm.source.process.name ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") or xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") or ((xdm.target.process.name contains \":\\\\Windows\\\\Microsoft.NET\\\\Framework\" or xdm.source.process.name contains \":\\\\Windows\\\\Microsoft.NET\\\\Framework\") and (xdm.target.process.name ~= \".*\\\\mscorsvw\\.exe\" or xdm.source.process.name ~= \".*\\\\mscorsvw\\.exe\") and xdm.target.file.filename contains \":\\\\Windows\\\\assembly\")) and  not (((xdm.target.process.name contains \"\\\\Python27\\\\python.exe\" or xdm.source.process.name contains \"\\\\Python27\\\\python.exe\") and (xdm.target.file.filename ~= \".*\\\\Python27\\\\Lib\\\\site\\-packages\\\\.*\" or xdm.target.file.filename ~= \".*\\\\Python27\\\\Scripts\\\\.*\" or xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\")) or ((xdm.target.process.name contains \"\\\\AppData\\\\Local\\\\SquirrelTemp\\\\Update.exe\" or xdm.source.process.name contains \"\\\\AppData\\\\Local\\\\SquirrelTemp\\\\Update.exe\") and xdm.target.file.filename contains \"\\\\AppData\\\\Local\") or ((xdm.target.process.name ~= \".*\\\\ChromeSetup\\.exe\" or xdm.source.process.name ~= \".*\\\\ChromeSetup\\.exe\") and xdm.target.file.filename contains \"\\\\Google\"))\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple Zscaler Suspicious category URLs within a day.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category ~= \"Suspicious Destination\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 10"}
{"prompt": "I want to see alerts for when processes are creating files using Bitsadmin that download from HTTP sources.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or actor_process_file_original_name = \"bitsadmin.exe\") and (action_process_image_command_line contains \" /transfer \" or ((action_process_image_command_line contains \" /create \" or action_process_image_command_line contains \" /addfile \") and action_process_image_command_line contains \"http\"))\n\n\n\n"}
{"prompt": "I want to find brute force attacks on the Network Admin account based on Windows Event Log data. The attack should have at least 5 failed login attempts within a minute.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter Target_UserName = if(xdm.target.user.username contains \"@\", arrayindex(split(xdm.target.user.username, \"@\"), 0), xdm.target.user.username)\n| filter microsoft_windows_raw._collector_type in (\"XDR Collector\") and (xdm.event.id in (\"4625\")) and (Target_UserName in (\"<user>\"))\n| alter Collector_Hostname = microsoft_windows_raw._collector_hostname,\nEvent_Data_Info = microsoft_windows_raw.event_data\n| fields xdm.target.user.username, xdm.event.id, xdm.event.description,\nxdm.event.outcome_reason, xdm.event.outcome, _time,\nCollector_Hostname, Event_Data_Info\n| comp earliest(_time) as First_EventTimestamp,\nlatest(_time) as Latest_EventTimestamp,\nvalues(Event_Data_Info) as Multiple_Event_Data,\ncount() as EventCount by xdm.target.user.username,\nxdm.event.id,\nCollector_Hostname addrawdata = true as Raw_Event_Data\n| alter Events_Time_Diff_in_SECONDs = timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\")\n| filter EventCount >= 5 and timestamp_diff(Latest_EventTimestamp, First_EventTimestamp, \"SECOND\") <= 60"}
{"prompt": "I want to detect if attackers are using BITS to create persistent backdoors on endpoints by scheduling commands after downloads.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or actor_process_file_original_name = \"bitsadmin.exe\") and ((action_process_image_command_line contains \"/SetNotifyCmdLine\" and (action_process_image_command_line contains \"%COMSPEC%\" or action_process_image_command_line contains \"cmd.exe\" or action_process_image_command_line contains \"regsvr32.exe\")) or (action_process_image_command_line contains \"/Addfile\" and (action_process_image_command_line contains \"http:\" or action_process_image_command_line contains \"https:\" or action_process_image_command_line contains \"ftp:\" or action_process_image_command_line contains \"ftps:\")))\n\n\n\n"}
{"prompt": "I want to find suspicious bit jobs by looking for connections with unusual domains and applications.", "response": "config case_sensitive = false\n| dataset in (zscaler_nssweblog_raw)\n| alter sld = if(dhost ~= \"[\\d]+\\.[\\d]+\\.[\\d]+\\.[\\d]+\", dhost, arrayindex(split(dhost, \".\"), -2))\n| filter requestClientApplication contains \"bits\"\n| filter dhost != null\n| filter sld != null\n| filter cat IN (\"Miscellaneous or Unknown\", \"Non Categorizable\", \"Anonymizer\")\n| filter sld not in (\"google\", \"microsoft\", \"edgesuite\", \"ansaldoenergia\", \"autodesk\", \"c-wss\", \"c-ij\", \"siemens\", \"cloudfront\", \"webex\", \"gvt1\", \"s-msn\", \"google-analytics\", \"googleapis\", \"googleusercontent\", \"windowsupdate\", \"adobe\", \"akamaized\", \"live\", \"gvt1-cn\")\n| fields suser, dhost, devicehostname, cat as category,\ncs3, act, dst, src, request, requestContext,\nrequestClientApplication, contenttype, deviceowner,\nrequestMethod, reason, fileType, sld"}
{"prompt": "I want to find instances of macros being enabled in potentially suspicious documents by looking at registry changes related to trusted documents and unusual file locations.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\Security\\\\Trusted Documents\\\\TrustRecords\" and (action_registry_key_name contains \"/AppData/Local/Microsoft/Windows/INetCache/\" or action_registry_key_name contains \"/AppData/Local/Temp/\" or action_registry_key_name contains \"/PerfLogs/\" or action_registry_key_name contains \"C:/Users/Public/\" or action_registry_key_name contains \"file:\n\n\n\n"}
{"prompt": "I need these strings to be decoded.", "response": "dataset = xdr_data\n| fields agent_hostname, action_file_path, actor_process_image_path,\ncausality_actor_process_image_sha256, causality_actor_process_image_path,\naction_file_md5\n| filter action_file_md5 in (\"*688c138fffbb4e7297289433c79d62f5*\", \"*0b4a0fe7db8400ef65ce7618177351cf*\", \"*6e3516775e7e009777dcdb7a314f1482*\", \"*ea5f6ab5666193f805d13a49009f0699*\", \"*63960dbc7d63767edb6e1e2dc6f0707b*\", \"*ddee86b84dcb72835b57b1d049e9e0cd*\", \"*19d99758b1f33b418cb008530b61a1e7*\", \"*f9aad310a5d5c80bbc61d10cc797e4f0*\", \"*ff43f91f2465504e5e67d0b37d92ef18*\", \"*45be5c0e7dfe37f88f1fa6c2fbb462c5*\", \"*26d6833b1875b138ea34d6ab430cafcd*\", \"*561bc6902367d9e43e27c5543e7a5818*\", \"*929b293090bcc7900c1e8f9ba519e219*\", \"*b500ee8d8cb045936d2996a1747bcded*\", \"*42200c8422347f63b3edb45ea5aa9c45*\", \"*48fc05c42549d0b3ec9e73bbb5be40dc*\", \"*bf13a2f4e2deb62b7dee98a012e94d61*\", \"*d66fc4e2f537566bb4d91cdea0ac64e5*\", \"*de4b5043c82ab3b36b4ae73a2e96d969*\", \"*cc29cf2294175315acbf33054151f3cd*\", \"*6e730cf4ebcd166d26414378cab3a6d8*\", \"*8e4d0f679b092296a2f74cf812907d05*\", \"*f8ccabcbe08bbd2c8420f4d1cffcefd8*\", \"*9f1d3b0fb49e063f4804aa60b7b708ac*\", \"*2bbfb9cb4550109da5ae336d3d3dd984*\", \"*42a417e54639c69f033f72bbafe6e09a*\", \"*7ee0c884e7d282958c5b3a9e47f23e13*\", \"*66c145233576766013688088b03103e3*\", \"*1f929fd617471c4977b522c71b4c91ed*\", \"*4a0f22286134a58d9d20f911a608f636*\", \"*947ebc3f481a7b9ee3cf3a34d9830159*\", \"*33b5485b35b33fd8ead5a38899522cce*\", \"*721b40a0c2a0257443f7dcc2c697e28a*\", \"*b44dfd8c5e7b0c8652d7a647dfe252e4*\", \"*1a57c1d80018bfef1e243f9eba2955f2*\", \"*ac2a1f2ae6b547619bef93dfadb48937*\", \"*8ac6ef2475ec89d3709fc124573cb380*\", \"*b34403502499741762912c7bfc9ff21f*\", \"*734b3a6e6cbd1f53fbb693140d2c3049*\", \"*c0471f78648643950217620f6e7e24cc*\", \"*228f9f0a0466fba21ac085626020a8e1*\", \"*65a3f812ea031f4d53ba09f33c058ab6*\", \"*7d78b5773845c5189ca09227d27a9d5a*\", \"*e7ff38a94ad765eb305fc7f0837f5913*\", \"*4e1f656001af3677856f664e96282a6f*\", \"*b164daf106566f444dfb280d743bc2f7*\", \"*dc564bac7258e16627b9de0ce39fae25*\", \"*22949977ce5cd96ba674b403a9c81285*\", \"*ee6b1a79cb6641aa44c762ee90786fe0*\", \"*f9844524fb0009e5b784c21c7bad4220*\", \"*acac842a46f3501fe407b1db1b247a0b*\", \"*7f9309f5e4defec132b622fadbcad511*\", \"*7ba744b584e28190eb03b9ecd1bb9374*\", \"*6fcf56f6ca3210ec397e55f727353c4a*\", \"*bd25be845c151370ff177509d95d5add*\", \"*1f2888e57fdd6aee466962c25ba7d62d*\", \"*909f3fc221acbe999483c87d9ead024a*\", \"*10f3679384a03cb487bda9621ceb5f90*\", \"*04a88f5974caa621cee18f34300fc08a*\", \"*0f16a43f7989034641fd2de3eb268bf1*\", \"*05a56a88f34718cabd078dfd6b180ed0*\", \"*2406150783d3ec5de13c2654db1a13d5*\", \"*29506adae5c1e97de49e3a0d3cd974d4*\", \"*48c1288cd35504de6f4bd97ec02decb1*\", \"*578e70a8a7c1972bbc35c3e14e53cbee*\", \"*6216fba5cf44aa99a73ca919301142e9*\", \"*69fa8946c326d4b66a371608d8ffbe5e*\", \"*6e4e37641e24edc89cfa3e999962ea34*\", \"*8a930742d1da0fcfe5492d4eb817727c*\", \"*8fbad6e5aa15857f761e6a7a75967e85*\", \"*976bac6cfb21288b4542d5afe7ce7be7*\", \"*aaeedaa5880e38dc63a5724cf18baf13*\", \"*ab5d85079e299ac49fcc9f12516243de*\", \"*c43de22826a424b2d24cf1b4b694ce07*\", \"*d312a6aeffec3cff78e9fad141d3aaba*\", \"*d36084aad079ca8d91c2985eca80327b*\", \"*e086d7d5a5657800a0d7e9c144fac16d*\", \"*0080fde587d6aedccb08db1317360d32*\", \"*ff985a86bfa60576a8e86b05603ac5fa*\", \"*b00c95692923b8c1e2d45c4a64a5ff05*\", \"*00a7538086c266e8bcf8a0b1c2b6a2e4*\", \"*62f289f3b55b0886c419a5077d11eb3c*\", \"*b0fea98c70e510f88b57f45a3f516326*\", \"*00dd476fa04da76fc2ed37cfdde59875*\", \"*024e92733def0b1180f0ee54b81e5836*\", \"*63d877650a3219f5991fd66bafc46bc5*\", \"*03710450e5bebd207bbe471c4685dc49*\", \"*64a81238d20dcbd4b21abb609040f698*\", \"*07bac50f875f09ad644827c8918e6837*\", \"*07c4309678ce891fdd868e10c6e7aad4*\", \"*66d2860a078fb11832ceef28b23481c2*\", \"*b5c73db8e70d6f46ad9b693f3ce060d2*\", \"*0ae78b90151ec2b0457bb0c2675048f5*\", \"*67ff9de8e72c4dfdf4b4404abf253e7e*\", \"*b7239e06bcbe6e2c7bb2f7a859cbf4f7*\", \"*b83d8761748abb032ab5ae75519eaf71*\", \"*0d0ffa28823276732a9e4dea5c25cc34*\", \"*688ca3c12b63fec9f921334d24cf6f78*\", \"*b849deae20052d72c3c623660fa97e64*\", \"*14a1d3e07520df607635a3356877f5b9*\", \"*6916b29893f618ba76b36bd8c297b7ac*\", \"*b8783155d6be5bb3a6d75edaa7ae7f71*\", \"*14e6507566a404e3158b3e36314bb3a1*\", \"*6a066d2be83cf83f343d0550b0b8f206*\", \"*b9d40581ae936662c37f2edc979d7e99*\", \"*1548b70d8581cbde703b1fb50b48a6a8*\", \"*6a23d752fbc30e603bbb050a83a580eb*\", \"*ba9907be3a0752369082199ed126f8d8*\", \"*163118c947aacd0978ad3e019c7d121f*\", \"*6a893aab7b79b73da7a049c2707aabf1*\", \"*bb46eb379caae3b05e32d3089c0dd6d0*\", \"*179ca82f2e523be47df0dcebe808408d*\", \"*6b0a733568d80be653fc9a568cdd88c5*\", \"*198877a8ce99289f7281b1475c13ba9f*\", \"*6c3180163e4a5371647e734c7c817de5*\", \"*19d14bf80b3dc4e5b774b362f079a102*\", \"*6c7479b5bb27f250fa32331b6457883a*\", \"*6d32d2d7a44584c92115ac2a2c3ba3af*\", \"*c0debd2cfb62fc2c56bfd4104b1ff760*\", \"*1e63ec5b89edb805956f347b5b5cfaae*\", \"*6e1bb443369973923c8eced16fcbd5cf*\", \"*c12d465743b9c167fc819b7872cd014c*\", \"*c35e6a0e1aef31ed9855499df4317acd*\", \"*1f46065ac9479253e4babc42b72bc4a8*\", \"*c5120095bf08655407c2f0215d10ac1d*\", \"*c77e931a6388b2040cc7c5a1a0f56d93*\", \"*207cfc647647419adcfcc44c6059a1d1*\", \"*7182ed3da406ba19bb9ffd8e4948d858*\", \"*c7850060cfe574a2ef278ba46a136a5e*\", \"*20f94c9cfc3cf012bf90546985f9f3c4*\", \"*c812fa7c628c3e19a3da5910acf6206e*\", \"*22519936cd9e8c7d524b0590826c3e6e*\", \"*72dbbd1dd61c6b0c2571e83f2c3d1825*\", \"*c8495649615bf1b9f839d7f357d6d02f*\", \"*cadc3e4090aed708526f0d6016aba7fd*\", \"*761939b0e442821985ab3281f97e6ceb*\", \"*cb68b7979bbb55bbde0a8c60fe3e5184*\", \"*232b0156173a9f8f5db6b65aa91e923b*\", \"*76c6ae0157ea7f41f55ed7e7d241f910*\", \"*cb6a416204b57470fab0b944d7b59756*\", \"*23cebc6b0eb76262d796577895f418d2*\", \"*7737e5e40a439899f326279b7face22c*\", \"*cbc3d1c88a5d0491b7b50bb77ada93fe*\", \"*24eb9eef69475e4980a555898b25f0c1*\", \"*77392be5eae901ae371c37861aa88589*\", \"*262c92f2437c80adf232ef147ca2d734*\", \"*787782e0395b3d5e32cda6fdea2faba0*\", \"*cd4b6d8bb762c2281c9b1142588ede4c*\", \"*267c30e484322ad31fa9e1374d6653f0*\", \"*79ebae9ab3f3b59c754ab1cc82bf7e95*\", \"*ce455358bf71c88b45fcb5789100969a*\", \"*26caf3361ec353593f51ebbd3fe5bbde*\", \"*7a5896673b81beb5589b512c6d781a85*\", \"*ce4d3a69331ff87920c903a4e4091904*\", \"*7a9df5c46c7c65b807f78c6c0bb2c38c*\", \"*ce658935ef6e223893121dce22908655*\", \"*2739311a6bb1a7b0b88ff24bf603a54d*\", \"*7b6e3fe75c5ae68d7d5a3ae7b00097e0*\", \"*ce6ef4dc1dd54baddaa51eaf594a496a*\", \"*27bb03f2659cd95bf9e7af899ee32728*\", \"*d11b9a4664ea03dfe3e8e1d737cd15f8*\", \"*286b10451fe364310f4a7baeb0e94a3f*\", \"*7c6c1b7e6378b4c0bcceee84e0e26fde*\", \"*d22a56e31b4e1fd5b06d46fa56f59151*\", \"*2a12b959c55f4a2d34f96e45e2417a71*\", \"*7cb012393114dfb35d60e70166a97986*\", \"*d27fac80339ad1f2ee86374884996c52*\", \"*2aa8dc7a5dff7817ce0a9c7cf30847bf*\", \"*d2ed678542a5d1db494dc47359861467*\", \"*2bec13be352db14fc9665ddf128deb8c*\", \"*7dd800f100a049a72983dd75f5286d70*\", \"*d47494b717c82eca8278dea610e1265d*\", \"*2cc14f20cf6847a2084f2c9cc0622015*\", \"*7e0a6a234a64350e684544e272c7fc41*\", \"*d60d8f3f12550dca4ba07ff61263b67f*\", \"*2d84c734d813af49cec3c3aa4aa4e6e3*\", \"*7e2e29707e7a601e8ea7f3e2f4d672a2*\", \"*d60e235b769cadbc7e83090b79b73ed3*\", \"*2e323c67a8781531a294684f7d2761ec*\", \"*7e7002dc10c62fb674a3184f4ad6688a*\", \"*d617c9a86328921a8caf924575faf2a2*\", \"*2f6daca66d2f64c7b1b6f8693ea09cb7*\", \"*7ee0b286003dc9e8006c22dcd70663f0*\", \"*309f16f50e9074ce797eb38eda279298*\", \"*d6b2947d8ff985fa84d697cc6cfdb7ff*\", \"*331113d1d54a3610f9c9bd72fc783721*\", \"*811f8d76ff00c9eda27b51a0fb2b0d39*\", \"*d6e506a1e0417c4507a5314529d84e34*\", \"*822bbdec4e5630c3170ee05119dcfb5c*\", \"*d77209a21352486435d85e339596eeae*\", \"*3452586b669e12c1c4ee9db3c1006018*\", \"*8264b3bdf46c0ece4f66151a613baed5*\", \"*d87f08d1e50f2a3423813bf161b40859*\", \"*35c95b6b5f4a6a0bda56276846dae17b*\", \"*832fe73a91993b387f9a49fafb9d4ea7*\", \"*dc170d9bba14b0421c2514465055a93f*\", \"*35deaa9d004714dc6ef9661b91889148*\", \"*84ce2a917e3d4aefcfc7d17e4a840a99*\", \"*3608b3a24736dea4bf24a8ac5ae00e30*\", \"*85063d67203b91bef9772446a1723021*\", \"*dd1a5bd34f8cfa56e439c6fb275356d6*\", \"*37d4ba16136986bfded2b6fc698abf02*\", \"*860f5812d65dc157a59c14e57bc0eaaf*\", \"*395ea8b7d0f257850a3a04a1484bac4d*\", \"*8986b5b6013cfb2bd3e6c8d22c453390*\", \"*398384a6cf2b7e26947d2e0acbfeeda5*\", \"*e051141b1dcb9e7f889fea7c8b1d6ba5*\", \"*39ee31f03fe1bb93d47f560f73deffa9*\", \"*8af6a129902a594ddaceafba38b7c060*\", \"*e0e0c46ba4f969919e2879717c60ef2a*\", \"*3d4b685dcaebc5bba5f9421572a4ab91*\", \"*8b423e0395ba6419fcedc0701327c97c*\", \"*e2465ea5c2d5dac4ae1b8d50da1d7cce*\", \"*3db8146544ee26866a8e99bacb11188c*\", \"*8d38a092ae5a3511bedadb7243a84409*\", \"*e2c146a2522e4f40e5036c3fe12c3560*\", \"*3ecaf3ba4e93916714cc43320f6f2c58*\", \"*e30830c05ed3d2a3178a3678f3169bec*\", \"*3fd815ebb7d2ab2b62cff3c777b51e30*\", \"*8fc8c6e1b2a1047752f60549878fb55f*\", \"*e5f62ef06b0dd656e1e47913f01f9f8a*\", \"*4070a8b16f318d108be0984e628421ad*\", \"*e6960ae657786979493da1786191bcf4*\", \"*40fda9a3c1be41be414f3795b25647f5*\", \"*90affc996a2932cb0fec4e31cd673ae9*\", \"*e777e5a8d2ba97c82128f04272e7841c*\", \"*415240633837ebcbd80e080ba99c03a9*\", \"*90b9a4328c4f712815760f9da49bcb6a*\", \"*913d50851abf337abc3c73f2d4e7fb34*\", \"*ea033ee6df904d863448ffef6386b6ae*\", \"*ea45419d992c15002c93067840568121*\", \"*4349378822e2316f18784c10c7ca08a1*\", \"*934d0cda4cba428e9b75ff16d5f4b0b1*\", \"*45991757d4ca2dab9e81f2fcbbc1ae23*\", \"*93c5faf90bc889963f10c608cbde5a14*\", \"*ee3bad1f5508e2129e0b423b009383e3*\", \"*467e60b9a0d1153057e0cfd0e721e198*\", \"*95a04866e6afb8e9b0426f5890681f9a*\", \"*f07506c30237c96e49eecafa0e5a4ed4*\", \"*48190fd615dcea5c6679b8e30a8bfec0*\", \"*9885d56d64ac2391a43f02abb2202181*\", \"*f111bd9b8e55f60f909649820e116430*\", \"*486b1afce3484a784a1662513ca1272a*\", \"*9a8323bc7187441a0d85b9a2e8f580e3*\", \"*f35a8a8f36c13769b9e9fff05fa4f720*\", \"*48bf11dd6c22e241b745d3bb1d562ca1*\", \"*9c4034691f6508e2361b6fca890671f9*\", \"*f4ee6bee04b2ed18024e3a64a0d58385*\", \"*9d1424c87d89095e3cd6785adb54d2ec*\", \"*f59a1409ce773658e72ad73424841890*\", \"*9dabf30a780794200cd068b145730317*\", \"*f783277840bbd2023879a87d0788f36e*\", \"*4b2e59a821589ab091a63770f4a658ed*\", \"*9e91e55c89f9c17c0a2acaf4376cd72b*\", \"*f78915cbf89d8749a0a4ab18a2b182bd*\", \"*4d4c17d8b52cd89da0b17cc9653b2010*\", \"*9f1d60d3cddea7f7558fad0217759094*\", \"*4d947e4163e8aeafbfc626eb033bc665*\", \"*a0fdc4543687a1b341b365d6dd16551c*\", \"*a2ee1cc9e80390ca248863004adbde60*\", \"*4e8d5c44bfdeffd0168f8a05f6a04e8b*\", \"*a2f3bce86beef23aede69396dcf7e184*\", \"*fa00cc96c5bea2979a59d0da0d22c83d*\", \"*4f5c7367f2ebae0097b6f2f1bebd19b6*\", \"*a55cb8be2887e99b4f662fc1ae08d265*\", \"*fa914061f5a40b324454d3fb9fc85ca5*\", \"*508d42f26f8bd562728e6fca866e05eb*\", \"*a7251aad1e81c6194b34dabf6edd6b4a*\", \"*faa5806826ff1ba749b70de0e14835c3*\", \"*50d13758b811c794bc13769ee3b42e85*\", \"*a9541530619a3ac2615b92603b705fe6*\", \"*fbd9ba2b8b2d677d41c30a01c02cfd01*\", \"*52494f624378ef6ee298f0fc73082d0e*\", \"*aba1be25da0691761f593725e9c067e5*\", \"*fd3b7234419fafc9bdd533f48896ed73*\", \"*52fc9ec7a5c177fe27fb00b6c2c5ff09*\", \"*fd4cee1c7b8167f25a8b4b864ede3c5d*\", \"*548d48b658305ffb77cc814ea080b542*\", \"*ac7f0fcb6040eb47ea9855d418c32510*\", \"*fdb6dae1e8c182089fdb86996436330c*\", \"*fe2f8e46ae540d7299c61ba083d52399*\", \"*5800a88d39fdf63e5a43bfcc6700d907*\", \"*adab615712eac2719691d01b69254f29*\", \"*fe7ecd399eec7036a63f0b7eb5ebcfb1*\", \"*5b281df4aaa915f660e075dc944a02c2*\", \"*add02792cfff7b19b8e526a247acb0ba*\", \"*5e5d9971c90287a6aa905e54b2a21b1c*\", \"*ae2f3e2412925a767e372c9c0ccf7ced*\")"}
{"prompt": "I want to see events related to changes in group memberships on network devices, especially when users are added to groups with high privileges.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n\n| join type = left\n(dataset = corporate_groups_static_list\n) as admins admins.GROUP_NAME = xdm.target.user.username\n| filter FEED_NAME IN (\"Network_Admin_Group\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilgroup\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where Libvlc.dll is loaded from an unexpected location, potentially indicating sideloading.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\libvlc\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\VideoLAN\\\\VLC\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\VideoLAN\\\\VLC\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find events related to the CVE-2022-31659 VMware Workspace ONE Access RCE vulnerability.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and xdm.network.http.url contains \"/SAAS/jersey/manager/api/migrate/tenant\")\n\n\n\n"}
{"prompt": "I want to detect processes created by Formbook malware that exhibit suspicious command-line arguments.", "response": "preset = xdr_process\n| filter (((actor_process_image_command_line ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or actor_process_image_command_line ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\") and actor_process_image_command_line ~= \".*\\.exe\") and ((action_process_image_command_line contains \"/c\" and action_process_image_command_line contains \"del\" and action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") or (action_process_image_command_line contains \"/c\" and action_process_image_command_line contains \"del\" and action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\") or (action_process_image_command_line contains \"/C\" and action_process_image_command_line contains \"type nul >\" and action_process_image_command_line ~= \".*C\\:\\\\Users\\\\.*\" and action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\")) and action_process_image_command_line ~= \".*\\.exe\")\n\n\n\n"}
{"prompt": "I want to see Cortex XQL queries that detect SMBExec service installations on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045) and (ServiceName = \"BTOBTO\" or (actor_process_image_path contains \".bat & del \" or actor_process_image_path contains \"__output 2^>^&1 >\"))\n\n\n\n"}
{"prompt": "I want to find instances of CrackMapExec PowerShell obfuscation on my endpoints.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"join*split\" or action_process_image_command_line contains \"( $ShellId[1]+$ShellId[13]+'x')\" or action_process_image_command_line contains \"( $PSHome[*]+$PSHOME[*]+\" or action_process_image_command_line contains \"( $env:Public[13]+$env:Public[5]+'x')\" or action_process_image_command_line contains \"( $env:ComSpec[4,*,25]-Join'')\" or action_process_image_command_line contains \"[1,3]+'x'-Join'')\"))\n\n\n\n"}
{"prompt": "I want to find instances where PowerShell is being set up as a service in the Windows Registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Services\\\\.*\" and action_registry_key_name ~= \".*\\\\ImagePath\" and ((action_registry_value_name contains \"powershell\" or action_registry_value_name contains \"pwsh\") or (action_registry_data contains \"powershell\" or action_registry_data contains \"pwsh\")))\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious attempts to access the Key Manager using rundll32.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and (action_process_image_command_line contains \"keymgr\" and action_process_image_command_line contains \"KRShowKeyMgr\"))\n\n\n\n"}
{"prompt": "I want to find potential malware that uses custom protocol handlers for persistence on Windows systems.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \"HKCR\\\\.*\" and (action_registry_value_name ~= \"URL\\:.*\" or action_registry_data ~= \"URL\\:.*\")) and  not ((action_registry_value_name ~= \"URL\\:ms\\-.*\" or action_registry_data ~= \"URL\\:ms\\-.*\") or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\).*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see alerts related to potential signing bypass attempts using Windows Developer Features through SystemSettingsAdminFlows.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\SystemSettingsAdminFlows\\.exe\" or actor_process_file_original_name = \"SystemSettingsAdminFlows.EXE\") and action_process_image_command_line contains \"TurnOnDeveloperFeatures\" and (action_process_image_command_line contains \"DeveloperUnlock\" or action_process_image_command_line contains \"EnableSideloading\"))\n\n\n\n"}
{"prompt": "{I want to see all failed Duo login attempts due to bad passwords from specific users on Windows machines.} \n\n\nThis prompt captures the essence of the provided XQL query details, focusing on:\n\n* **Failed Duo logins:**  Highlighted by \"failed login attempts\" and \"due to bad passwords\".\n* **Specific users:** Mentioned by  \"...from specific users\".\n* **Windows machines:** Clarified by \"...on Windows machines\". \n\n\n\nLet me know if you'd like to adjust the prompt further!", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter _collector_type in (\"XDR Collector\") and event_id in (4625)\n| alter SourceDomainName = event_data -> SubjectDomainName,\nTargetUserName = event_data -> TargetUserName,\nFailureReason = event_data -> FailureReason,\nSourceIPAddress = event_data -> IpAddress,\nIpPort = event_data -> IpPort,\nWorkstationName = event_data -> WorkstationName,\nStatusCode = event_data -> Status,\nLogonType = event_data -> LogonType,\nLogonProcessName = event_data -> LogonProcessName,\nAuthenticationPackageName = event_data -> AuthenticationPackageName,\nCorrelationRuleName = \"EU_PROD DUO Service IDs Failed Login Due To Bad Password\"\n| filter (StatusCode contains \"0XC000006A\" and FailureReason contains \"%%2313\") and (TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\" or TargetUserName contains \"<user>\")"}
{"prompt": "I want to see if there are any potential registry persistence attempts using the DbgManagedDebugger key.", "response": "preset = xdr_registry\n| filter action_registry_key_name ~= \".*\\\\Microsoft\\\\\\.NETFramework\\\\DbgManagedDebugger\" and  not ((action_registry_value_name = \"\\\"C:\\\\Windows\\\\system32\\\\vsjitdebugger.exe\\\" PID %d APPDOM %d EXTEXT \\\"%s\\\" EVTHDL %d\" or action_registry_data = \"\\\"C:\\\\Windows\\\\system32\\\\vsjitdebugger.exe\\\" PID %d APPDOM %d EXTEXT \\\"%s\\\" EVTHDL %d\"))\n\n\n\n"}
{"prompt": "I want to see XQL queries that detect malicious activity related to PAExec default named pipes on endpoints.", "response": "preset = xdr_event_log\n| alter PipeName = regextract(to_json_string(action_evtlog_data_fields)->PipeName{}, \"\\\"(.*)\\\"\")\n| filter PipeName ~= \"\\\\PAExec.*\"\n\n\n\n"}
{"prompt": "I want to see if any processes are using \"osacompile\" with potentially suspicious Applets or Osascripts on my endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\/applet\" or actor_process_image_path ~= \".*\\/osascript\") and action_process_image_command_line contains \"osacompile\")\n\n\n\n"}
{"prompt": "I want to find instances of malicious OCX file deployments associated with the EvilNum APT group. Specifically, I'm looking for processes that use `regsvr32` with `/s` and `/i` flags to register .ocx files, avoiding those in AppData folders.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"regsvr32\" and action_process_image_command_line contains \"/s\" and action_process_image_command_line contains \"/i\" and action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\" and action_process_image_command_line contains \".ocx\")\n\n\n\n"}
{"prompt": "I want to find instances where Python is being used to spawn a pretty terminal (TTY) on Windows systems.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*python\\.exe\" or action_process_image_path ~= \".*python3\\.exe\" or action_process_image_path ~= \".*python2\\.exe\") and ((action_process_image_command_line contains \"import pty\" and action_process_image_command_line contains \".spawn(\") or action_process_image_command_line contains \"from pty import spawn\")\n\n\n\n"}
{"prompt": "I want to see all events related to Hacktool Execution - PE Metadata, specifically focusing on Cube0x0 process signatures detected on endpoints.", "response": "preset = xdr_process\n| filter action_process_signature_vendor = \"Cube0x0\"\n\n\n\n"}
{"prompt": "I want to detect PowerShell keylogging activities on my endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"Get-Keystrokes\" or (ScriptBlockText contains \"Get-ProcAddress user32.dll GetAsyncKeyState\" and ScriptBlockText contains \"Get-ProcAddress user32.dll GetForegroundWindow\"))\n\n\n\n"}
{"prompt": "I want to see all instances where a user was added to the Domain Admins group on Windows systems.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4728)\n| alter TargetUserName = arrayindex(regextract(event_data -> MemberName, \"CN\\=(.*?)\\,OU\"), 0),\nSourceDomainName = event_data -> SubjectDomainName,\nSubjectUserSid = event_data -> SubjectUserSid,\nTargetDomainName = event_data -> TargetDomainName,\nStatus = event_data -> Status,\nGroupName = arrayindex(regextract(message, \"Group Name:\\t\\t(.*?)\\n\\tGroup Domain\"), 0),\nProcessId = event_data -> ProcessId,\nSourceUserName = event_data -> SubjectUserName,\nSourceLogonId = event_data -> SubjectLogonId,\nTargetUserSid = event_data -> TargetUserSid,\nFailureReason = event_data -> FailureReason,\nSubStatus = event_data -> SubStatus,\nSubStatusDescription = \"A member was added to a security-enabled global group.\",\nLogonType = event_data -> LogonType,\nLogonProcessName = event_data -> LogonProcessName,\nAuthenticationPackageName = event_data -> AuthenticationPackageName,\nWorkstationName = event_data -> WorkstationName,\nTransmittedServices = event_data -> TransmittedServices,\nLmPackageName = event_data -> LmPackageName,\nKeyLength = event_data -> KeyLength,\nProcessName = event_data -> ProcessName,\nIpAddress = event_data -> IpAddress,\nIpPort = event_data -> IpPort\n| filter (TargetUserName not in (\"\"\"\"\"\", null, NULL) and TargetUserName not contains \"\"\"$\"\"\") and (SourceUserName not in (\"\"\"\"\"\", null, NULL) and SourceUserName not contains \"\"\"$\"\"\") and GroupName in (\"Domain Admins\")\n| alter Desc_String = if(incidr(_collector_internal_ip_address, \"10.208.0.0/16\"), \"New Avalon\", if(incidr(_collector_internal_ip_address, \"10.38.0.0/16\"), \"New Avalon\", \".\"))"}
{"prompt": "I want to find potential shell exploits that involve bash or dash processes running under usernames like apache, nginx, www, or www-data according to XDR data.", "response": "config case_sensitive = false\n| datamodel dataset = xdr_data\n| filter ((xdm.source.process.name contains \"bash\" or xdm.source.process.name contains \"dash\") or (xdm.target.process.name contains \"bash\" or xdm.target.process.name contains \"dash\")) and (xdm.source.user.username contains \"apache\" or xdm.source.user.username contains \"nginx\" or xdm.source.user.username contains \"www\" or xdm.source.user.username contains \"www-data\")\n| fields *"}
{"prompt": "I want to see alerts about potential credential dumping attempts that involve modifying network providers in the Windows registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\System\\\\CurrentControlSet\\\\Services\\\\.*\" and action_registry_key_name contains \"\\\\NetworkProvider\") and  not ((action_registry_key_name contains \"\\\\System\\\\CurrentControlSet\\\\Services\\\\WebClient\\\\NetworkProvider\" or action_registry_key_name contains \"\\\\System\\\\CurrentControlSet\\\\Services\\\\LanmanWorkstation\\\\NetworkProvider\" or action_registry_key_name contains \"\\\\System\\\\CurrentControlSet\\\\Services\\\\RDPNP\\\\NetworkProvider\") or actor_process_image_path = \"C:\\\\Windows\\\\System32\\\\poqexec.exe\")\n\n\n\n"}
{"prompt": "I want to find users who have accessed multiple Zscaler Phishing category URLs based on behavioral analysis.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category\n| filter category ~= \"Phishing\" and user_dst contains \"@\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(URLCategory) as urlcategory,\nvalues(referer_url) as referer_url,\ncount() as matched_events by user_dst\n| filter matched_events >= 15"}
{"prompt": "I want to see events where Symantec detected a virus or Trojan, but didn't clean, quarantine, or delete it.  Please show me details like the alert name, file path, IP addresses, and user who triggered the event.", "response": "datamodel dataset = symantec_ep_raw\n| filter xdm.event.operation_sub_type ~= \"Virus found\"\n| filter xdm.observer.action !~= \"Cleaned|Quarantined|Deleted\"\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\n\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1),\nfile_hash = xdm.target.file.sha256,\nusername = xdm.source.user.username,\nsrc_ip = xdm.source.ipv4,\ndst_ip = xdm.target.ipv4,\nprocess = xdm.target.file.path,\nrisk_name = xdm.alert.name\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\"),\naggregation_criteria = \"ilipaddr\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see network traffic events related to known malicious domains from sources like Cisco ASA, Fortinet Fortigate, and Netskope. I need details like timestamps, protocols used, severity levels, and the specific domain involved.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate_raw, fortinet_fortigate1_raw, Netskope_Netskope_raw)\n| filter xdm.target.domain not in (null, NULL, \"\"\"\"\"\")\n| join\n(dataset = Intel_IOCs_DomainMarch\n) as iocs_ip(iocs_ip.DOMAIN = xdm.target.domain or xdm.network.http.url contains iocs_ip.DOMAIN)\n| fields _time, _insert_time, _product, _vendor, comment,\nxdm.alert.severity, xdm.event.duration, xdm.event.is_completed,\nxdm.event.operation_sub_type, xdm.event.original_event_type,\nxdm.network.application_protocol, xdm.network.ip_protocol,\nxdm.observer.action, xdm.observer.name, xdm.observer.product,\nxdm.observer.type, xdm.observer.unique_identifier,\nxdm.observer.vendor, xdm.session_context_id, xdm.source.asn.as_name,\nxdm.source.asn.as_number, xdm.source.ipv4, xdm.source.location.city,\nxdm.source.location.country, xdm.source.location.latitude,\nxdm.source.location.longitude, xdm.source.location.region,\nxdm.source.location.timezone, xdm.source.port, xdm.source.sent_bytes,\nxdm.source.sent_packets, xdm.source.user.domain,\nxdm.target.asn.as_name, xdm.target.asn.as_number,\nxdm.target.location.city, xdm.target.location.country,\nxdm.target.location.latitude, xdm.target.location.longitude,\nxdm.target.location.region, xdm.target.location.timezone,\nxdm.target.port, xdm.target.sent_packets, xdm.network.protocol_layers,\ncisco_asa_raw._raw_log, fortinet_fortigate1_raw._raw_log,\nfortinet_fortigate_raw._raw_log, xdm.target.domain,\nxdm.network.http.url, DOMAIN, xdm.source.user.username\n| alter bin_time = _time\n| bin bin_time span = 1m timeshift = 1707696000\n| alter FW_Raw_Log = coalesce(cisco_asa_raw._raw_log, fortinet_fortigate1_raw._raw_log, fortinet_fortigate_raw._raw_log)\n| comp earliest(_time) as Earliest_Event_Timestamp,\nvalues(FW_Raw_Log) as Event_RawLog,\nvalues(to_string(xdm.network.protocol_layers)) as Protocols,\nvalues(DOMAIN) as RecordedF_DOMAIN_IOC by bin_time,\n_product,\n_vendor,\ncomment,\nxdm.alert.severity,\nxdm.event.duration,\nxdm.event.is_completed,\nxdm.event.operation_sub_type,\nxdm.event.original_event_type,\nxdm.network.application_protocol,\nxdm.network.ip_protocol,\nxdm.observer.action,\nxdm.observer.name,\nxdm.observer.product,\nxdm.observer.type,\nxdm.observer.unique_identifier,\nxdm.observer.vendor,\nxdm.session_context_id,\nxdm.source.asn.as_name,\nxdm.source.asn.as_number,\nxdm.source.ipv4,\nxdm.source.location.city,\nxdm.source.location.country,\nxdm.source.location.latitude,\nxdm.source.location.longitude,\nxdm.source.location.region,\nxdm.source.location.timezone,\nxdm.source.port,\nxdm.source.sent_bytes,\nxdm.source.sent_packets,\nxdm.source.user.domain,\nxdm.target.asn.as_name,\nxdm.target.asn.as_number,\nxdm.target.location.city,\nxdm.target.location.country,\nxdm.target.location.latitude,\nxdm.target.location.longitude,\nxdm.target.location.region,\nxdm.target.location.timezone,\nxdm.target.port,\nxdm.target.sent_packets,\nxdm.target.domain,\nxdm.network.http.url,\nxdm.source.user.username\n| view column order = populated"}
{"prompt": "I want to find instances where a custom protocol handler named \"rogue\" is created in the Windows Registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\PROTOCOLS\\\\Handler\\\\rogue\\\\CLSID\" and (action_registry_value_name = \"{026CC6D7-34B2-33D5-B551-CA31EB6CE345}\" or action_registry_data = \"{026CC6D7-34B2-33D5-B551-CA31EB6CE345}\"))\n\n\n\n"}
{"prompt": "I want to see activity related to the ZxShell malware, specifically focusing on instances where rundll32.exe is used with command lines containing \"zxFunction\" or \"RemoteDiskXXXXX\".", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\rundll32\\.exe\" and (action_process_image_command_line contains \"zxFunction\" or action_process_image_command_line contains \"RemoteDiskXXXXX\"))\n\n\n\n"}
{"prompt": "I want to detect instances where the PingCastle binary has been renamed and executed with specific command-line arguments related to security scanning or health checks.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name in (\"PingCastleReporting.exe\", \"PingCastleCloud.exe\", \"PingCastle.exe\") or (action_process_image_command_line contains \"--scanner aclcheck\" or action_process_image_command_line contains \"--scanner antivirus\" or action_process_image_command_line contains \"--scanner computerversion\" or action_process_image_command_line contains \"--scanner foreignusers\" or action_process_image_command_line contains \"--scanner laps_bitlocker\" or action_process_image_command_line contains \"--scanner localadmin\" or action_process_image_command_line contains \"--scanner nullsession\" or action_process_image_command_line contains \"--scanner nullsession-trust\" or action_process_image_command_line contains \"--scanner oxidbindings\" or action_process_image_command_line contains \"--scanner remote\" or action_process_image_command_line contains \"--scanner share\" or action_process_image_command_line contains \"--scanner smb\" or action_process_image_command_line contains \"--scanner smb3querynetwork\" or action_process_image_command_line contains \"--scanner spooler\" or action_process_image_command_line contains \"--scanner startup\" or action_process_image_command_line contains \"--scanner zerologon\") or action_process_image_command_line contains \"--no-enum-limit\" or (action_process_image_command_line contains \"--healthcheck\" and action_process_image_command_line contains \"--level Full\") or (action_process_image_command_line contains \"--healthcheck\" and action_process_image_command_line contains \"--server \")) and  not ((action_process_image_path ~= \".*\\\\PingCastleReporting\\.exe\" or action_process_image_path ~= \".*\\\\PingCastleCloud\\.exe\" or action_process_image_path ~= \".*\\\\PingCastle\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see events related to known vulnerabilities being exploited that are logged by Windows systems.", "response": "preset = xdr_event_log\n| filter (provider_name in (\"Microsoft-Windows-Audit-CVE\", \"Audit-CVE\") and action_evtlog_event_id = 1)\n\n\n\n"}
{"prompt": "I want to detect PowerShell scripts that recursively list files with specific extensions (.doc, .docx, .xls, .xlsx, .ppt, .pptx, .rtf, .pdf, .txt) using \"Get-ChildItem\" and \" -Recurse \"  and \" -Include \". ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \".doc\" or ScriptBlockText contains \".docx\" or ScriptBlockText contains \".xls\" or ScriptBlockText contains \".xlsx\" or ScriptBlockText contains \".ppt\" or ScriptBlockText contains \".pptx\" or ScriptBlockText contains \".rtf\" or ScriptBlockText contains \".pdf\" or ScriptBlockText contains \".txt\") and (ScriptBlockText contains \"Get-ChildItem\" and ScriptBlockText contains \" -Recurse \" and ScriptBlockText contains \" -Include \"))\n\n\n\n"}
{"prompt": "I want to detect potential exploits of CVE-2021-42278 through Kerberos log events on endpoints.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Microsoft-Windows-Kerberos-Key-Distribution-Center\" and action_evtlog_event_id in (35, 36, 37, 38))\n\n\n\n"}
{"prompt": "I want to find instances of the \"dsenableroot\" process being used on macOS endpoints to potentially enable root accounts.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\/dsenableroot\" and  not (action_process_image_command_line contains \" -d \")\n\n\n\n"}
{"prompt": "I want to detect suspicious PowerShell scripts that export mailbox data to a share.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"New-MailboxExportRequest\" and ScriptBlockText contains \" -Mailbox \" and ScriptBlockText ~= \".*\\ \\-FilePath\\ \\\\\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect suspicious child processes launched by Bginfo.exe that target common system paths or execute known malicious tools like calc.exe, cmd.exe, etc.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\bginfo\\.exe\" or actor_process_image_path ~= \".*\\\\bginfo64\\.exe\") and ((action_process_image_path ~= \".*\\\\calc\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\notepad\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\") or (action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\.*\" or action_process_image_path ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\:\\\\PerfLogs\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find instances where there are at least 5 failed Duo login attempts and at least 1 successful login from the same IP address within a 3-hour period.", "response": "datamodel dataset = duo_duo_raw\n| filter incidr(xdm.source.ipv4, \"221.120.107.0/24\") = False\n| union\nwl_ip_cidrs\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter (xdm.source.ipv4 != wl_ipv4 and incidr(xdm.source.ipv4, wl_cidr) = false) and xdm.source.ipv4 not in (\"0.0.0.0\") and xdm.event.outcome in (\"SUCCESS\", \"denied\")\n| alter SuccessOutcome = if(xdm.event.outcome in (\"SUCCESS\"), xdm.event.outcome),\nDeniedOutcome = if(xdm.event.outcome in (\"denied\"), xdm.event.outcome)\n| fields xdm.auth.auth_method, xdm.auth.mfa.method, xdm.event.outcome,\nxdm.event.outcome_reason, xdm.event.type, xdm.observer.name,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.user.upn, xdm.source.location.country,\nxdm.source.host.os, xdm.source.host.os_family, SuccessOutcome,\nDeniedOutcome, _time\n| comp first(_time) as FirstTimestamp,\nlatest(_time) as LatestTimestamp,\ncount(DeniedOutcome) as DeniedOutcomeCount,\ncount(SuccessOutcome) as SuccessOutcomeCount,\ncount_distinct(xdm.event.outcome) as Multiple_UNIQ_EventTyes,\nvalues(xdm.event.outcome) as MultipleEvents by xdm.source.user.username,\nxdm.source.ipv4,\nxdm.source.application.name,\nxdm.source.location.country,\nxdm.auth.auth_method addrawdata = true as RawEventData\n| filter (DeniedOutcomeCount >= 5 and SuccessOutcomeCount >= 1) and timestamp_diff(LatestTimestamp, FirstTimestamp, \"MINUTE\") <= 180"}
{"prompt": "I want to see suspicious activity related to curl commands on Linux endpoints that are changing their user agents.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/curl\" and (action_process_image_command_line contains \" -A \" or action_process_image_command_line contains \" --user-agent \"))\n\n\n\n"}
{"prompt": "I want to detect suspicious activities related to Control Panel items on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\reg\\.exe\" or actor_process_file_original_name = \"reg.exe\") and (action_process_image_command_line contains \"add\" and action_process_image_command_line contains \"CurrentVersion\\\\Control Panel\\\\CPLs\")) or (action_process_image_command_line ~= \".*\\.cpl\" and  not ((action_process_image_command_line ~= \".*\\\\System32\\\\.*\" or action_process_image_command_line contains \"%System%\" or action_process_image_command_line contains \"|C:\\\\Windows\\\\system32|\") or (action_process_image_command_line contains \"regsvr32 \" and action_process_image_command_line contains \" /s \" and action_process_image_command_line contains \"igfxCPL.cpl\")))\n\n\n\n"}
{"prompt": "I want to find activity related to an attacker using Netsh.exe to harvest Wi-Fi credentials.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and (action_process_image_command_line contains \"wlan\" and action_process_image_command_line contains \" s\" and action_process_image_command_line contains \" p\" and action_process_image_command_line contains \" k\" and action_process_image_command_line contains \"=clear\"))\n\n\n\n"}
{"prompt": " I want to see processes on Linux endpoints that are related to local group management or display information about groups.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/groups\" or ((action_process_image_path ~= \".*\\/cat\" or action_process_image_path ~= \".*\\/head\" or action_process_image_path ~= \".*\\/tail\" or action_process_image_path ~= \".*\\/more\") and action_process_image_command_line contains \"/etc/group\"))\n\n\n\n"}
{"prompt": "I want to see alerts for potential Kerberos replay attacks, which involve duplicate requests with identical information.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4649\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"IS SOX winevent_nic\", \"IS Non-SOX winevent_nic\", \"ISTFS Windows Servers\", \"azure_isweb_windows\", \"isph2_windows_servers\", \"IS_azure_AD\", \"azure_com_windows\", \"azure_com_domaincontroller\", \"FIM_Server_Windows_Type\", \"IS_AWS_AD\", \"IS_AWS_windows\", \"Cloud AD Servers_Plano\", \"Windows_Servers_Cloud\", \"IS_Infosys-cloud_windows\", \"IS_Intranet\", \"IS_Azure_Useinfosys\", \"IS_Azure_Infosys-Cloud\", \"IS_Azure_ISweb\", \"IS_DMZ_ISweb\", \"is_intranet_isweb\")\n| filter xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\" and xdm.source.user.username != NULL\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, target_domain\n\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see a list of Zscaler proxy outbound traffic logs where Microsoft users are sending abnormally high amounts of data compared to their average daily traffic over the last seven days.", "response": "config case_sensitive = false\n| datamodel dataset = zscaler_nssweblog_raw\n| filter timestamp_diff(current_time(), _time, \"DAY\") = 0\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and user_agent ~= \"^Microsoft\" and user_agent !~= \"Microsoft-Delivery-Optimization\" and user_agent !~= \"Microsoft%20BITS/7.8\" and host_dst !~= \"ctldl.windowsupdate.com|msftconnecttest.com\"\n| comp count() as current_day_traffic,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| join type = left conflict_strategy = both\n(datamodel dataset = zscaler_nssweblog_raw\n| alter action = xdm.observer.action,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nhost_dst = xdm.network.http.domain,\nuser_dst = xdm.source.user.username,\nMachinename = xdm.source.host.hostname,\nuser_agent = xdm.source.user_agent,\nweb_page = xdm.network.http.url,\nresult = xdm.network.http.method,\nextension = xdm.target.process.executable.file_type,\nrbytes = to_integer(xdm.target.sent_bytes),\nbytes_src = to_integer(zscaler_nssweblog_raw.`in`),\ncategory = xdm.network.application_protocol_category,\nreferer_url = zscaler_nssweblog_raw.requestContext,\nURLCategory = xdm.network.http.url_category,\nuri_port = zscaler_nssweblog_raw.app,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter user_dst contains \"@\" and user_agent ~= \"^Microsoft\" and user_agent !~= \"Microsoft-Delivery-Optimization\"\n| comp count() as 7_days_traffic,\nvalues(action) as action,\nvalues(result) as result,\nvalues(host_dst) as host_dst,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(uri_port) as uri_port by day,\nuser_dst\n| comp avg(7_days_traffic) as 7_days_traffic_avg,\nvalues(to_string(action)) as action,\nvalues(to_string(result)) as result,\nvalues(to_string(ip_src)) as ip_src,\nvalues(to_string(ip_dst)) as ip_dst,\nvalues(to_string(host_dst)) as host_dst,\nvalues(to_string(user_agent)) as user_agent,\nvalues(to_string(category)) as category,\nvalues(to_string(referer_url)) as referer_url,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(to_string(web_page)) as web_page,\nvalues(to_string(uri_port)) as uri_port by user_dst\n| alter user = user_dst\n) as 7_days_risk_avg 7_days_risk_avg.user = user_dst\n| filter current_day_traffic > multiply(7_days_traffic_avg, 3.50)\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": " I want to find instances of Wmiexec being used with the default PowerShell command and its evasion techniques. ", "response": "preset = xdr_process\n| filter action_process_image_command_line contains \"-NoP -NoL -sta -NonI -W Hidden -Exec Bypass -Enc\"\n\n\n\n"}
{"prompt": "I want to detect potential PowerShell obfuscation techniques using character join, specifically looking for instances where \"-Alias\" and \" -Value (-join(\" are present.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"-Alias\" and ScriptBlockText contains \" -Value (-join(\")\n\n\n\n"}
{"prompt": "I want to find events related to modifications of the Winlogon registry keys on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter (ScriptBlockText contains \"CurrentVersion\\\\Winlogon\" and (ScriptBlockText contains \"Set-ItemProperty\" or ScriptBlockText contains \"New-Item\"))\n\n\n\n"}
{"prompt": "I want to see events where suspicious processes create Office macro files (.docm, .dotm, .xlsm, .xltm, .potm, .pptm).  ", "response": "datamodel\n| filter ((((xdm.target.process.name ~= \".*\\\\cscript\\.exe\" or xdm.target.process.name ~= \".*\\\\mshta\\.exe\" or xdm.target.process.name ~= \".*\\\\regsvr32\\.exe\" or xdm.target.process.name ~= \".*\\\\rundll32\\.exe\" or xdm.target.process.name ~= \".*\\\\wscript\\.exe\") or (xdm.source.process.name ~= \".*\\\\cscript\\.exe\" or xdm.source.process.name ~= \".*\\\\mshta\\.exe\" or xdm.source.process.name ~= \".*\\\\regsvr32\\.exe\" or xdm.source.process.name ~= \".*\\\\rundll32\\.exe\" or xdm.source.process.name ~= \".*\\\\wscript\\.exe\")) or (xdm.source.process.name ~= \".*\\\\cscript\\.exe\" or xdm.source.process.name ~= \".*\\\\mshta\\.exe\" or xdm.source.process.name ~= \".*\\\\regsvr32\\.exe\" or xdm.source.process.name ~= \".*\\\\rundll32\\.exe\" or xdm.source.process.name ~= \".*\\\\wscript\\.exe\")) and (xdm.target.file.filename ~= \".*\\.docm\" or xdm.target.file.filename ~= \".*\\.dotm\" or xdm.target.file.filename ~= \".*\\.xlsm\" or xdm.target.file.filename ~= \".*\\.xltm\" or xdm.target.file.filename ~= \".*\\.potm\" or xdm.target.file.filename ~= \".*\\.pptm\"))\n\n\n\n"}
{"prompt": "I want to find events where an image loaded Vssapi.dll and wasn't from common system or program locations.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\vssapi\\.dll\" and  not ((actor_process_image_path in (\"C:\\\\Windows\\\\explorer.exe\", \"C:\\\\Windows\\\\ImmersiveControlPanel\\\\SystemSettings.exe\") or (actor_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\Temp\\\\\\{.*\" or actor_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\")) or (actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\\\.*\" or actor_process_image_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\") or actor_process_image_path ~= \"C\\:\\\\ProgramData\\\\Package\\ Cache\\\\.*\")\n\n\n\n"}
{"prompt": "I want to find instances of suspicious Active Directory database snapshots being taken using ADExplorer.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\ADExplorer\\.exe\" or actor_process_file_original_name = \"AdExp\") and action_process_image_command_line contains \"snapshot\" and (action_process_image_command_line ~= \".*\\\\Downloads\\\\.*\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to Microsoft Teams object access events that aren't from the Teams.exe process.", "response": "preset = xdr_event_log\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter ProcessName = regextract(to_json_string(action_evtlog_data_fields)->ProcessName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4663 and (ObjectName contains \"\\\\Microsoft\\\\Teams\\\\Cookies\" or ObjectName contains \"\\\\Microsoft\\\\Teams\\\\Local Storage\\\\leveldb\")) and  not (ProcessName contains \"\\\\Microsoft\\\\Teams\\\\current\\\\Teams.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts about security events on Windows systems that match Common Criteria Security Audit Analysis requirements.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4618\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"Domain Controllers\", \"Domain Controllers -EMSG Plano\", \"winevent_exchange_servers\", \"adfs_server_blr\", \"adfs_server_pln\", \"Kone server\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances of suspicious Extrac32 execution on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"extrac32.exe\" or action_process_image_path ~= \".*\\\\extrac32\\.exe\" or actor_process_file_original_name = \"extrac32.exe\") and action_process_image_command_line contains \".cab\" and (action_process_image_command_line contains \"/C\" or action_process_image_command_line contains \"/Y\" or action_process_image_command_line ~= \".*\\ \\\\\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances where the same user tries to log into Mobile VPN from two different devices within a short period.", "response": "config case_sensitive = false\n| dataset = check_point_connectra_raw\n| filter act = \"Failed Log In\" and origin = \"<ip>\" and requestClientApplication = \"Mobile VPN\" and (_final_reporting_device_ip != \"<ip>\" or _final_reporting_device_ip != \"<ip>\")\n| alter hostname = arrayindex(regextract(more, \"CN\\=([^\\,]+)\"), 0),\nuser_dst = lowercase(replace(if(duser contains \"@\", arrayindex(split(duser, \"@\"), 0), if(duser contains \"(\", replace(arrayindex(split(duser, \"(\"), -1), \")\", \"\"), if(array_length(regextract(duser, \"[a-zA-Z]+\\\\(.*)\")) > 0, arrayindex(regextract(duser, \"[a-zA-Z]+\\\\(.*)\"), 0), duser))), \"itlinfosys\", \"\"))\n| alter action = act,\nsource_port = spt,\ndest_port = dpt,\nsource_ip = src,\ndst_ip = host_ip,\nresult = outcome,\nuser_agent = requestClientApplication,\nos_edition = os_edition,\nproduct = _product\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestTime,\nvalues(source_ip) as src_ip,\nvalues(host_ip) as dst_ip,\nvalues(source_port) as src_port,\nvalues(dest_port) as dst_port,\nvalues(action) as action,\nvalues(hostname) as hostname,\nvalues(origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(product) as product,\ncount() as matched_events by user_dst\n| filter array_length(hostname) >= 2\n| alter aggregation_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 2)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances of malicious VBS scripts registering applications on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"\\\\register_app.vbs\" and action_process_image_command_line contains \"-register\")\n\n\n\n"}
{"prompt": " I want to see alerts about Cmdlet executions that grant full mailbox permissions to users other than owners in Office 365. ", "response": "config case_sensitive = false\n| datamodel dataset = msft_admin_audit_raw\n| filter xdm.observer.action ~= \"Add-MailboxPermission\"\n| alter parameter_length = array_length(split(xdm.event.description, \" \")),\nparameter_values = split(xdm.event.operation, \" \")\n| alter mailbox = arrayindex(split(xdm.target.user.username, \"/\"), -1),\nMailboxAccessGivenTo = if(parameter_length = 3, arrayindex(parameter_values, 1), arrayindex(parameter_values, 3)),\naccessrights = if(parameter_length = 3, arrayindex(parameter_values, 2), arrayindex(parameter_values, 1)),\nlog_src_name = \"AdminAudit\",\nserver_name = msft_admin_audit_raw._collector_hostname\n| filter MailboxAccessGivenTo != concat(\"acl_\", mailbox) and MailboxAccessGivenTo != concat(\"acl.\", mailbox)\n| fields xdm.target.user.username, xdm.source.user.username,\nxdm.observer.action, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.event.id, xdm.event.description, xdm.event.operation,\nxdm.event.operation_sub_type, xdm.observer.type,\nxdm.event.is_completed, xdm.logon.is_elevated, MailboxAccessGivenTo,\nmailbox, _time, _insert_time, accessrights, log_src_name,\nserver_name, msft_admin_audit_raw.rundate\n| alter aggregation_criteria = \"ilsourceuser\",\naggregation_criteria1 = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential persistence threats related to Microsoft Office startup folders.", "response": "datamodel\n| filter (((xdm.target.file.filename contains \"\\\\Microsoft\\\\Word\\\\STARTUP\" or (xdm.target.file.filename contains \"\\\\Office\" and xdm.target.file.filename contains \"\\\\Program Files\" and xdm.target.file.filename contains \"\\\\STARTUP\")) and (xdm.target.file.filename ~= \".*\\.doc\" or xdm.target.file.filename ~= \".*\\.docm\" or xdm.target.file.filename ~= \".*\\.docx\" or xdm.target.file.filename ~= \".*\\.dot\" or xdm.target.file.filename ~= \".*\\.dotm\" or xdm.target.file.filename ~= \".*\\.rtf\")) or ((xdm.target.file.filename contains \"\\\\Microsoft\\\\Excel\\\\XLSTART\" or (xdm.target.file.filename contains \"\\\\Office\" and xdm.target.file.filename contains \"\\\\Program Files\" and xdm.target.file.filename contains \"\\\\XLSTART\")) and (xdm.target.file.filename ~= \".*\\.xls\" or xdm.target.file.filename ~= \".*\\.xlsm\" or xdm.target.file.filename ~= \".*\\.xlsx\" or xdm.target.file.filename ~= \".*\\.xlt\" or xdm.target.file.filename ~= \".*\\.xltm\"))) and  not (((xdm.target.process.name ~= \".*\\\\WINWORD\\.exe\" or xdm.target.process.name ~= \".*\\\\EXCEL\\.exe\") or (xdm.source.process.name ~= \".*\\\\WINWORD\\.exe\" or xdm.source.process.name ~= \".*\\\\EXCEL\\.exe\")))\n\n\n\n"}
{"prompt": "I want to detect suspicious scheduled tasks that create temporary folders using schtasks.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \" /create \" and action_process_image_command_line contains \" /sc once \" and action_process_image_command_line ~= \".*\\\\Temp\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see the list of IP addresses that have had at least 2500 matched events within a 5-minute window.", "response": "config case_sensitive = false\n| datamodel dataset = check_point_vpn_1_firewall_1_raw\n| bin _time span = 5s\n| filter check_point_vpn_1_firewall_1_raw.origin not in (\"10.73.62.138\", \"10.73.62.139\") and check_point_vpn_1_firewall_1_raw._final_reporting_device_ip != \"10.67.122.132\" and xdm.observer.action = \"drop\" and (incidr(xdm.target.ipv4, \"224.0.0.0/4\") = false and xdm.target.is_internal_ip = false) and xdm.target.ipv4 not in (\"192.228.79.201\", \"192.58.128.30\", \"193.0.14.129\", \"198.32.64.12\", \"202.12.27.33\", \"192.36.148.17\", \"192.203.230.10\", \"128.8.10.90\", \"198.41.0.4\", \"128.63.2.53\", \"192.33.4.12\", \"192.112.36.4\", \"192.5.5.241\") and xdm.source.ipv4 !~= \"(10)\\.(94)\\.(124)\\.([0-9]{1,3})|(10)\\.(94)\\.(98)\\.([0-9]{1,2}|1[0-1][0-9]|12[0-6])|(10)\\.(94)\\.(80)\\.(12[8-9]|1[3-9][0-9]|2[0-4][0-9]|25[0-5])|(10)\\.(95)\\.(67)\\.([0-9]|[1-5][0-9]|6[0-2])|(10)\\.(95)\\.(77)\\.([0-9]{1,3})|(10)\\.(95)\\.(107)\\.([0-9]{1,3})|(10)\\.(219)\\.(81)\\.([0-9]{1,3})|(10)\\.(138)\\.(185)\\.([0-9]{1,3})|(10)\\.(118)\\.(74)\\.([4-9]|[1-9][0-9]|1[0-1][0-9]|12[0-6])|(10)\\.(118)\\.(162)\\.([4-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|(10)\\.(118)\\.(137)\\.([4-9]|[1-9][0-9]|1[0-1][0-9]|12[0-6])|(10)\\.(118)\\.(140)\\.([4-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|(10)\\.(118)\\.(141)\\.([4-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|(10)\\.(118)\\.(201)\\.(12[8-9]|1[3-9][0-9]|2[0-4][0-9]|25[0-5])|(10)\\.(174)\\.(148)\\.(12[8-9]|1[3-9][0-9]|2[0-4][0-9]|25[0-5])|(10)\\.(155)\\.(157)\\.([0-9]{1,2}|1[0-1][0-9]|12[0-6])|(10)\\.(155)\\.(225)\\.([0-9]{1,3})|(10)\\.(72)\\.(5)\\.([0-9]{1,3})|(10)\\.(72)\\.(6)\\.([0-9]{1,3})|(10)\\.(72)\\.(15)\\.([0-9]{1,3})|(10)\\.(72)\\.(28)\\.(12[8-9]|1[3-9][0-9]|2[0-4][0-9]|25[0-5])|(10)\\.(87)\\.(66)\\.([0-9]{1,2}|1[0-1][0-9]|12[0-6])|(10)\\.(87)\\.(137)\\.([0-9]|1[0-4])|(10)\\.(94)\\.(100)\\.(12[8-9]|1[3-4][0-9]|15[0-8])|(10)\\.(94)\\.(86)\\.(19[2-9]|2[0-4][0-9]|25[0-5])|(10)\\.(94)\\.(89)\\.([0-9]|[1-5][0-9]|6[0-2])|(10)\\.(95)\\.(117)\\.(12[8-9]|1[3-4][0-9]|15[0-8])|(10)\\.(95)\\.(91)\\.(19[2-9]|2[0-4][0-9]|25[0-5])|(10)\\.(95)\\.(93)\\.(6[4-9]|[7-9][0-9]|1[0-1][0-9]|12[0-6])|(10)\\.(95)\\.(206)\\.(6[4-9]|[7-9][0-9]|1[0-1][0-9]|12[0-6])|(10)\\.(95)\\.(126)\\.(1[6-9]|2[0-2])|(10)\\.(95)\\.(127)\\.(19[2-9]|20[0-6])|(10)\\.(136)\\.(178)\\.(1[6-9]|2[0-9]|30)|(10)\\.(138)\\.(183)\\.(9[6-9]|10[0-9]|110)|(10)\\.(138)\\.(189)\\.([0-9]|[1-5][0-9]|6[0-2])|(10)\\.(138)\\.(201)\\.(6[4-9]|[7-9][0-9]|1[0-1][0-9]|12[0-6])|(10)\\.(219)\\.(57)\\.(19[2-9]|2[0-4][0-9]|25[0-5])|(10)\\.(219)\\.(59)\\.(9[6-9]|1[0-1][0-9]|12[0-6])|(10)\\.(219)\\.(115)\\.(19[2-9]|2[0-4][0-9]|25[0-5])|(10)\\.(174)\\.(170)\\.(12[8-9]|1[3-8][0-9]|190)|(10)\\.(118)\\.(242)\\.(6[4-9]|[7-9][0-9]|1[0-1][0-9]|12[0-6])|(10)\\.(118)\\.(242)\\.(12[8-9]|1[3-8][0-9]|190])|(10)\\.(118)\\.(243)\\.([0-9]{1,2}|1[0-1][0-9]|12[0-6])|(10)\\.(155)\\.(177)\\.(12[8-9]|1[3-9][0-9]|2[0-4][0-9]|25[0-5])|(10)\\.(155)\\.(184)\\.([0-9]{1,2}|1[0-1][0-9]|12[0-6])|(10)\\.(72)\\.(4)\\.([0-9]{1,3})|(10)\\.(72)\\.(13)\\.(19[2-9]|2[0-4][0-9]|25[0-5])|(10)\\.(72)\\.(28)\\.([0-9]{1,2}|1[0-1][0-9]|12[0-6])|(10)\\.(72)\\.(31)\\.([5-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])|(10)\\.(72)\\.(27)\\.([0-9]{1,3})|(10)\\.(87)\\.(90)\\.(19[2-9]|2[0-1][0-9]|22[0-2])|(10)\\.(87)\\.(240)\\.(2[4-9]|30)|(10)\\.(87)\\.(250)\\.(12[8-9]|1[3-8][0-9]|190)|(10)\\.(87)\\.(181)\\.(1[3-4][0-9]|15[0-8])\" and xdm.target.ipv4 !~= \"169\\.254\\.[0-9]{1,3}\\.[0-9]{1,3}\"\n| join type = left\n(dataset = dmz_ip_address_list\n) as dmzips dmzips.ip_address = xdm.source.ipv4\n| filter (ip_address != NULL or xdm.source.is_internal_ip = true)\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address as vascanips\n) as iisavips iisavips.vascanips = xdm.source.ipv4\n| filter vascanips in (null, NULL)\n| filter xdm.target.asn.as_name !~= \"google|amazon.com|lumen|cisco webex llc|microsoft azure|akamai technologies|microsoft corporation|at&t services|level 3 communications|verizon communications\"\n| alter result = null,\nuser_agent = null,\nos_edition = null\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(xdm.target.ipv4) as dst_ip,\nvalues(xdm.source.port) as src_port,\nvalues(xdm.target.port) as dst_port,\nvalues(xdm.observer.action) as action,\nvalues(xdm.target.user.username) as username,\nvalues(check_point_vpn_1_firewall_1_raw.origin) as origin,\nvalues(result) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\nvalues(xdm.target.asn.as_name) as dst_org,\nvalues(xdm.source.host.hostname) as hostname,\ncount() as matched_events by _time,\nxdm.source.ipv4\n| alter Time_Diff_in_Seconds = timestamp_diff(LatestEventTime, FirstEventTime, \"MINUTE\")\n| filter matched_events >= 2500\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see events related to Empire PowerShell launching with specific command-line parameters.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \" -NoP -sta -NonI -W Hidden -Enc \" or action_process_image_command_line contains \" -noP -sta -w 1 -enc \" or action_process_image_command_line contains \" -NoP -NonI -W Hidden -enc \" or action_process_image_command_line contains \" -noP -sta -w 1 -enc\" or action_process_image_command_line contains \" -enc  SQB\" or action_process_image_command_line contains \" -nop -exec bypass -EncodedCommand \")\n\n\n\n"}
{"prompt": "I want to see network connections initiated from processes located in suspicious folders that target known file sharing domains.", "response": "preset = network_story\n| alter Initiated = regextract(to_json_string(action_evtlog_data_fields)->Initiated{}, \"\\\"(.*)\\\"\")\n| filter ((actor_process_image_path ~= \".*\\:\\\\PerfLogs\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Temp\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\" or actor_process_image_path ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or actor_process_image_path ~= \".*\\\\AppData\\\\Temp\\\\.*\") and (Initiated = \"true\" and (action_external_hostname ~= \".*\\.githubusercontent\\.com\" or action_external_hostname ~= \".*anonfiles\\.com\" or action_external_hostname ~= \".*cdn\\.discordapp\\.com\" or action_external_hostname ~= \".*cdn\\.discordapp\\.com\\/attachments\\/\" or action_external_hostname ~= \".*ddns\\.net\" or action_external_hostname ~= \".*dl\\.dropboxusercontent\\.com\" or action_external_hostname ~= \".*ghostbin\\.co\" or action_external_hostname ~= \".*glitch\\.me\" or action_external_hostname ~= \".*gofile\\.io\" or action_external_hostname ~= \".*hastebin\\.com\" or action_external_hostname ~= \".*mediafire\\.com\" or action_external_hostname ~= \".*mega\\.co\\.nz\" or action_external_hostname ~= \".*mega\\.nz\" or action_external_hostname ~= \".*onrender\\.com\" or action_external_hostname ~= \".*paste\\.ee\" or action_external_hostname ~= \".*pastebin\\.com\" or action_external_hostname ~= \".*pastebin\\.pl\" or action_external_hostname ~= \".*pastetext\\.net\" or action_external_hostname ~= \".*privatlab\\.com\" or action_external_hostname ~= \".*privatlab\\.net\" or action_external_hostname ~= \".*send\\.exploit\\.in\" or action_external_hostname ~= \".*sendspace\\.com\" or action_external_hostname ~= \".*storage\\.googleapis\\.com\" or action_external_hostname ~= \".*storjshare\\.io\" or action_external_hostname ~= \".*supabase\\.co\" or action_external_hostname ~= \".*temp\\.sh\" or action_external_hostname ~= \".*transfer\\.sh\" or action_external_hostname ~= \".*ufile\\.io\")))\n\n\n\n"}
{"prompt": "I want to find ICMP DDoS attacks happening within my network, focusing on instances with over 500 unique source IPs and at least 5000 events per minute. Please show me the data for Cisco ASA, Fortinet Fortigate, and SonicWall NS devices.", "response": "config case_sensitive = false\n| datamodel dataset in (cisco_asa_raw, fortinet_fortigate1_raw, fortinet_fortigate_raw, sonicwall_ns_raw)\n| filter xdm.network.ip_protocol = \"\"\"ICMP\"\"\" and xdm.target.is_internal_ip = true and xdm.source.is_internal_ip = false and xdm.source.ipv4 not in (\"8.8.8.8\")\n| alter bin_time = _time\n| bin bin_time span = 1m timeshift = 1705881600\n| comp count_distinct(xdm.source.ipv4) as Unique_SrcIPs,\ncount(xdm.source.ipv4) as Event_Count,\nvalues(xdm.source.ipv4) as SrcIPS by bin_time,\nxdm.target.ipv4,\nxdm.network.ip_protocol\n| filter Unique_SrcIPs >= 500 and Event_Count >= 5000\n| fields *"}
{"prompt": "I want to detect potential executions of the RedMimicry Winnti Playbook based on specific process paths and command line arguments.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\") and (action_process_image_command_line contains \"gthread-3.6.dll\" or action_process_image_command_line contains \"\\\\Windows\\\\Temp\\\\tmp.bat\" or action_process_image_command_line contains \"sigcmm-2.4.dll\"))\n\n\n\n"}
{"prompt": "I want to find instances of F5 BIG-IP iControl Rest API Command Execution through Proxy attacks.", "response": "datamodel\n| filter (xdm.network.http.method = \"POST\" and xdm.network.http.url ~= \".*\\/mgmt\\/tm\\/util\\/bash\")\n\n\n\n"}
{"prompt": "I want to find instances of successful IIS Shortname Fuzzing Scans where URLs contain \"~1\" and are either GET or OPTIONS requests with a response code of 200 or 301.", "response": "datamodel\n| filter (xdm.network.http.url contains \"~1\" and xdm.network.http.url ~= \".*a\\.aspx\" and xdm.network.http.method in (\"GET\", \"OPTIONS\") and xdm.network.http.response_code in (200, 301))\n\n\n\n"}
{"prompt": "I want to find activities that might indicate a web shell is being used for credential dumping or exfiltration on my endpoints.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\caddy\\.exe\" or actor_process_image_path ~= \".*\\\\httpd\\.exe\" or actor_process_image_path ~= \".*\\\\nginx\\.exe\" or actor_process_image_path ~= \".*\\\\php\\-cgi\\.exe\" or actor_process_image_path ~= \".*\\\\w3wp\\.exe\" or actor_process_image_path ~= \".*\\\\ws\\_tomcatservice\\.exe\") or ((actor_process_image_path ~= \".*\\\\java\\.exe\" or actor_process_image_path ~= \".*\\\\javaw\\.exe\") and (actor_process_image_path contains \"-tomcat-\" or actor_process_image_path contains \"\\\\tomcat\")) or ((actor_process_image_path ~= \".*\\\\java\\.exe\" or actor_process_image_path ~= \".*\\\\javaw\\.exe\") and (action_process_image_command_line contains \"catalina.jar\" or action_process_image_command_line contains \"CATALINA_HOME\"))) and ((action_process_image_command_line contains \"rundll32\" and action_process_image_command_line contains \"comsvcs\") or (action_process_image_command_line contains \" -hp\" and action_process_image_command_line contains \" a \" and action_process_image_command_line contains \" -m\") or (action_process_image_command_line contains \"net\" and action_process_image_command_line contains \" user \" and action_process_image_command_line contains \" /add\") or (action_process_image_command_line contains \"net\" and action_process_image_command_line contains \" localgroup \" and action_process_image_command_line contains \" administrators \" and action_process_image_command_line contains \"/add\") or (action_process_image_path ~= \".*\\\\ntdsutil\\.exe\" or action_process_image_path ~= \".*\\\\ldifde\\.exe\" or action_process_image_path ~= \".*\\\\adfind\\.exe\" or action_process_image_path ~= \".*\\\\procdump\\.exe\" or action_process_image_path ~= \".*\\\\Nanodump\\.exe\" or action_process_image_path ~= \".*\\\\vssadmin\\.exe\" or action_process_image_path ~= \".*\\\\fsutil\\.exe\") or (action_process_image_command_line contains \" -decode \" or action_process_image_command_line contains \" -NoP \" or action_process_image_command_line contains \" -W Hidden \" or action_process_image_command_line contains \" /decode \" or action_process_image_command_line contains \" /ticket:\" or action_process_image_command_line contains \" sekurlsa\" or action_process_image_command_line contains \".dmp full\" or action_process_image_command_line contains \".downloadfile(\" or action_process_image_command_line contains \".downloadstring(\" or action_process_image_command_line contains \"FromBase64String\" or action_process_image_command_line contains \"process call create\" or action_process_image_command_line contains \"reg save \" or action_process_image_command_line contains \"whoami /priv\"))\n\n\n\n"}
{"prompt": "I want to detect processes on macOS endpoints that are using `sw_vers` to retrieve system information like build version, product name, and product version.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/sw\\_vers\" and (action_process_image_command_line contains \"-buildVersion\" or action_process_image_command_line contains \"-productName\" or action_process_image_command_line contains \"-productVersion\"))\n\n\n\n"}
{"prompt": "I want to see all instances where someone deleted a firewall rule using Netsh.exe.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and (action_process_image_command_line contains \"firewall\" and action_process_image_command_line contains \"delete \")) and  not ((actor_process_image_path ~= \".*\\\\Dropbox\\.exe\" and action_process_image_command_line contains \"name=Dropbox\"))\n\n\n\n"}
{"prompt": "I want to find instances of Lazarus APT DLL sideloading activity based on suspicious image loads in Windows Event Logs.", "response": "preset = xdr_image_load\n| filter ((actor_process_image_path = \"C:\\\\ProgramShared\\\\PresentationHost.exe\" and action_module_path = \":\\\\ProgramShared\\\\mscoree.dll\") or (actor_process_image_path = \"C:\\\\ProgramData\\\\Adobe\\\\colorcpl.exe\" and action_module_path = \"C:\\\\ProgramData\\\\Adobe\\\\colorui.dll\") or (actor_process_image_path = \"C:\\\\ProgramData\\\\Oracle\\\\Java\\\\fixmapi.exe\" and action_module_path = \"C:\\\\ProgramData\\\\Oracle\\\\Java\\\\mapistub.dll\") or (actor_process_image_path = \"C:\\\\ProgramData\\\\Adobe\\\\ARM\\\\tabcal.exe\" and action_module_path = \"C:\\\\ProgramData\\\\Adobe\\\\ARM\\\\HID.dll\"))\n\n\n\n"}
{"prompt": "I want to find instances of credential dumping tools being executed on my system.", "response": "datamodel\n| filter ((xdm.target.process.executable.filename contains \"cachedump\" or xdm.target.process.executable.filename contains \"dumpsvc\" or xdm.target.process.executable.filename contains \"fgexec\" or xdm.target.process.executable.filename contains \"gsecdump\" or xdm.target.process.executable.filename contains \"mimidrv\" or xdm.target.process.executable.filename contains \"pwdump\" or xdm.target.process.executable.filename contains \"servpw\") or (xdm.source.process.executable.filename contains \"cachedump\" or xdm.source.process.executable.filename contains \"dumpsvc\" or xdm.source.process.executable.filename contains \"fgexec\" or xdm.source.process.executable.filename contains \"gsecdump\" or xdm.source.process.executable.filename contains \"mimidrv\" or xdm.source.process.executable.filename contains \"pwdump\" or xdm.source.process.executable.filename contains \"servpw\"))\n\n\n\n"}
{"prompt": "I want to see events related to DirLister.exe being executed on endpoints.", "response": "preset = xdr_process\n| filter (actor_process_file_original_name = \"DirLister.exe\" or action_process_image_path ~= \".*\\\\dirlister\\.exe\")\n\n\n\n"}
{"prompt": "I want to see potential activity from the Snatch ransomware based on command line arguments like \"shutdown /r /f /t 00\" or \"net stop SuperBackupMan\".", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"shutdown /r /f /t 00\" or action_process_image_command_line contains \"net stop SuperBackupMan\")\n\n\n\n"}
{"prompt": "I want to find instances where the process \"vmnat.exe\" has been renamed and executed.", "response": "preset = xdr_process\n| filter actor_process_file_original_name = \"vmnat.exe\" and  not (action_process_image_path ~= \".*vmnat\\.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential attacks targeting LSASS processes detected by Attack Surface Reduction.", "response": "datamodel\n| filter (xdm.event.id = 1121 and xdm.target.process.executable.path ~= \".*\\\\lsass\\.exe\") and  not (((xdm.target.process.name ~= \"C\\:\\\\Windows\\\\Temp\\\\asgard2\\-agent\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Windows\\\\Temp\\\\asgard2\\-agent\\\\.*\") and ((xdm.target.process.name ~= \".*\\\\thor64\\.exe\" or xdm.target.process.name ~= \".*\\\\thor\\.exe\") or (xdm.source.process.name ~= \".*\\\\thor64\\.exe\" or xdm.source.process.name ~= \".*\\\\thor\\.exe\"))) or (xdm.target.process.name in (\"C:\\\\Windows\\\\System32\\\\atiesrxx.exe\", \"C:\\\\Windows\\\\System32\\\\CompatTelRunner.exe\", \"C:\\\\Windows\\\\System32\\\\msiexec.exe\", \"C:\\\\Windows\\\\System32\\\\nvwmi64.exe\", \"C:\\\\Windows\\\\System32\\\\svchost.exe\", \"C:\\\\Windows\\\\System32\\\\Taskmgr.exe\", \"C:\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe\", \"C:\\\\Windows\\\\SysWOW64\\\\msiexec.exe\") or xdm.source.process.name in (\"C:\\\\Windows\\\\System32\\\\atiesrxx.exe\", \"C:\\\\Windows\\\\System32\\\\CompatTelRunner.exe\", \"C:\\\\Windows\\\\System32\\\\msiexec.exe\", \"C:\\\\Windows\\\\System32\\\\nvwmi64.exe\", \"C:\\\\Windows\\\\System32\\\\svchost.exe\", \"C:\\\\Windows\\\\System32\\\\Taskmgr.exe\", \"C:\\\\Windows\\\\System32\\\\wbem\\\\WmiPrvSE.exe\", \"C:\\\\Windows\\\\SysWOW64\\\\msiexec.exe\")) or ((xdm.target.process.name ~= \"C\\:\\\\Windows\\\\System32\\\\DriverStore\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\WINDOWS\\\\Installer\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\\\.*\" or xdm.target.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\") or (xdm.source.process.name ~= \"C\\:\\\\Windows\\\\System32\\\\DriverStore\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\WINDOWS\\\\Installer\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\\\.*\" or xdm.source.process.name ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find events where an attacker bypasses UAC using modified MSConfig tokens on endpoints.", "response": "preset = xdr_process\n| filter (action_process_integrity_level in (\"High\", \"System\") and actor_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\pkgmgr\\.exe\" and action_process_image_command_line = \"\\\"C:\\\\Windows\\\\system32\\\\msconfig.exe\\\" -5\")\n\n\n\n"}
{"prompt": " I want to monitor for changes made to Network Security Group rules in Azure. ", "response": "dataset = microsoft_windows_raw\n| filter event_id = 1111 /*config case_sensitive = false\n|dataset = msft_azure_raw\n|filter tenantId IN (\"<id>\")\n|filter operationName IN (\"MICROSOFT.NETWORK/NETWORKSECURITYGROUPS/SECURITYRULES/WRITE\")\n|alter username = json_extract_scalar(identity,\"$.claims.name\"), target_username = json_extract_scalar(properties,\"$.userPrincipalName\"), referenceid = arrayindex(split(resourceId,\"/\"),2), aliashost = arrayindex(split(resourceId,\"/\"),-1), protocol = json_extract_scalar(properties,\"$.eventProperties.protocol\")\n|fields username, target_username, operationName, referenceid, tenantId, resulttype, callerIpAddress, identity, aliashost, protocol, _time\n|alter aggregation_criteria = \"ilsourceuser\", event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)*/"}
{"prompt": "I want to see events related to AWS Route 53 domains being transferred to different accounts.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"route53.amazonaws.com\" and eventName = \"TransferDomainToAnotherAwsAccount\")\n\n\n\n"}
{"prompt": "I want to see events related to new users created with \"Password Never Expire\" enabled.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| alter c_type = microsoft_windows_raw._collector_type\n| filter c_type ~= \"WEC|XDR\"\n| filter xdm.event.id in (\"4738\")\n| alter action = arrayindex(regextract(microsoft_windows_raw.message, \"User Account Control:\\t\\n\\t\\t'Password Not Required' - Disabled\\n\\t\\t'Don't Expire Password' - (.*)\\n\\t\"), 0)\n| filter action contains \"enabled\"\n| alter error_code = arrayindex(regextract(microsoft_windows_raw.message, \"Error Code:\\t(.+)\\s\"), 0),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\ntarget_domain = arrayindex(regextract(xdm.event.description, \"Account Domain:\\t\\t([^\\n]+)\"), 1)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, _insert_time, xdm.target.user.sam_account_name,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, xdm.source.ipv4, device_ip, action, target_domain\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect when the 'AllowMultipleTSSessions' value is enabled in the Windows registry.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\Winlogon\\\\AllowMultipleTSSessions\" and (action_registry_value_name ~= \".*DWORD\\ \\(0x00000001\\)\" or action_registry_data ~= \".*DWORD\\ \\(0x00000001\\)\"))\n\n\n\n"}
{"prompt": "I want to find instances where Xwizard is executed from a location outside of the default system directories.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\xwizard\\.exe\" or actor_process_file_original_name = \"xwizard.exe\") and  not ((action_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find out which users and groups have been granted privileged access on my Active Directory domain.", "response": "preset = xdr_event_log\n| alter ObjectType = regextract(to_json_string(action_evtlog_data_fields)->ObjectType{}, \"\\\"(.*)\\\"\")\n| alter ObjectName = regextract(to_json_string(action_evtlog_data_fields)->ObjectName{}, \"\\\"(.*)\\\"\")\n| alter SubjectUserName = regextract(to_json_string(action_evtlog_data_fields)->SubjectUserName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 4661 and ObjectType in (\"SAM_USER\", \"SAM_GROUP\")) and ((ObjectName ~= \".*\\-512\" or ObjectName ~= \".*\\-502\" or ObjectName ~= \".*\\-500\" or ObjectName ~= \".*\\-505\" or ObjectName ~= \".*\\-519\" or ObjectName ~= \".*\\-520\" or ObjectName ~= \".*\\-544\" or ObjectName ~= \".*\\-551\" or ObjectName ~= \".*\\-555\") or ObjectName contains \"admin\") and  not (SubjectUserName ~= \".*\\$\")\n\n\n\n"}
{"prompt": "I want to find indicators of PrinterNightmare exploits using Mimikatz.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\Control\\\\Print\\\\Environments\\\\Windows\\ x64\\\\Drivers\\\\Version\\-3\\\\QMS\\ 810\\\\.*\" or action_registry_key_name contains \"\\\\Control\\\\Print\\\\Environments\\\\Windows x64\\\\Drivers\\\\Version-3\\\\mimikatz\") or (action_registry_key_name contains \"legitprinter\" and action_registry_key_name contains \"\\\\Control\\\\Print\\\\Environments\\\\Windows\") or ((action_registry_key_name contains \"\\\\Control\\\\Print\\\\Environments\" or action_registry_key_name contains \"\\\\CurrentVersion\\\\Print\\\\Printers\") and (action_registry_key_name contains \"Gentil Kiwi\" or action_registry_key_name contains \"mimikatz printer\" or action_registry_key_name contains \"Kiwi Legit Printer\"))\n\n\n\n"}
{"prompt": "I want to find instances of the \"PUA - Advanced IP/Port Scanner Update Check\" threat where the URL includes specific parameters like \"lng=\", \"ver=\", \"beta=\", \"type=\", \"rmode=\", and \"product=\".", "response": "datamodel\n| filter (xdm.network.http.url contains \"/checkupdate.php\" and (xdm.network.http.url contains \"lng=\" and xdm.network.http.url contains \"ver=\" and xdm.network.http.url contains \"beta=\" and xdm.network.http.url contains \"type=\" and xdm.network.http.url contains \"rmode=\" and xdm.network.http.url contains \"product=\"))\n\n\n\n"}
{"prompt": "I want to see indicators of credential dumping tools accessing LSASS memory on my endpoints.", "response": "preset = xdr_event_log\n| alter TargetImage = regextract(to_json_string(action_evtlog_data_fields)->TargetImage{}, \"\\\"(.*)\\\"\")\n| alter GrantedAccess = regextract(to_json_string(action_evtlog_data_fields)->GrantedAccess{}, \"\\\"(.*)\\\"\")\n| alter SourceImage = regextract(to_json_string(action_evtlog_data_fields)->SourceImage{}, \"\\\"(.*)\\\"\")\n| alter CallTrace = regextract(to_json_string(action_evtlog_data_fields)->CallTrace{}, \"\\\"(.*)\\\"\")\n| filter (TargetImage ~= \".*\\\\lsass\\.exe\" and (GrantedAccess ~= \"0x40.*\" or GrantedAccess ~= \"0x100000.*\" or GrantedAccess ~= \"0x1410.*\" or GrantedAccess ~= \"0x1438.*\" or GrantedAccess ~= \"0x143a.*\" or GrantedAccess ~= \"0x1418.*\" or GrantedAccess ~= \"0x1f0fff.*\" or GrantedAccess ~= \"0x1f1fff.*\" or GrantedAccess ~= \"0x1f2fff.*\" or GrantedAccess ~= \"0x1f3fff.*\")) and  not (SourceImage in (\"C:\\\\WINDOWS\\\\system32\\\\taskmgr.exe\", \"C:\\\\Windows\\\\System32\\\\perfmon.exe\") or ((SourceImage ~= \"C\\:\\\\Program\\ Files\\\\.*\" or SourceImage ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\.*\") and GrantedAccess in (\"0x1410\", \"0x410\")) or ((SourceImage ~= \"C\\:\\\\ProgramData\\\\Microsoft\\\\Windows\\ Defender\\\\.*\" or SourceImage ~= \"C\\:\\\\Program\\ Files\\\\Windows\\ Defender\\\\.*\" or SourceImage ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Security\\ Client\\\\MsMpEng\\.exe.*\") and SourceImage ~= \".*\\\\MsMpEng\\.exe\") or (SourceImage = \"C:\\\\Windows\\\\System32\\\\svchost.exe\" and (CallTrace contains \"|C:\\\\ProgramData\\\\Microsoft\\\\Windows Defender\\\\Definition Updates\\\\{\" and CallTrace contains \"}\\\\mpengine.dll+\") and GrantedAccess = \"0x1418\") or (CallTrace contains \"|c:\\\\program files\\\\windows defender\\\\mprtp.dll\" or CallTrace contains \"|c:\\\\program files\\\\windows defender\\\\MpClient.dll\") or (SourceImage ~= \"C\\:\\\\Program\\ Files\\\\WindowsApps\\\\.*\" and SourceImage ~= \".*\\\\GamingServices\\.exe\" and GrantedAccess in (\"0x1410\", \"0x410\")) or ((SourceImage ~= \".*\\\\PROCEXP64\\.EXE\" or SourceImage ~= \".*\\\\PROCEXP\\.EXE\" or SourceImage ~= \".*C\\:\\\\WINDOWS\\\\system32\\\\taskhostw\\.exe\" or SourceImage ~= \".*\\\\MBAMInstallerService\\.exe\") and GrantedAccess in (\"0x1410\", \"0x410\", \"0x40\")) or (SourceImage in (\"C:\\\\WINDOWS\\\\system32\\\\wbem\\\\wmiprvse.exe\", \"C:\\\\Windows\\\\syswow64\\\\MsiExec.exe\", \"C:\\\\Windows\\\\System32\\\\msiexec.exe\") and GrantedAccess in (\"0x1410\", \"0x410\", \"0x1f1fff\", \"0x1f3fff\")) or (SourceImage in (\"C:\\\\Windows\\\\system32\\\\wininit.exe\", \"C:\\\\Windows\\\\System32\\\\lsass.exe\") and GrantedAccess = \"0x1000000\") or (SourceImage ~= \"C\\:\\\\ProgramData\\\\VMware\\\\VMware\\ Tools\\\\.*\" and SourceImage ~= \".*\\\\vmtoolsd\\.exe\") or (SourceImage = \"C:\\\\WINDOWS\\\\system32\\\\svchost.exe\" and GrantedAccess in (\"0x100000\", \"0x1410\")) or ((SourceImage ~= \".*\\\\thor\\.exe\" or SourceImage ~= \".*\\\\thor64\\.exe\" or SourceImage ~= \".*\\\\aurora\\-agent\\.exe\" or SourceImage ~= \".*\\\\aurora\\-agent\\-64\\.exe\") and GrantedAccess in (\"0x40\", \"0x1010\")) or (SourceImage ~= \".*\\\\explorer\\.exe\" and GrantedAccess = \"0x401\") or (SourceImage = \"C:\\\\Windows\\\\system32\\\\MRT.exe\" and GrantedAccess in (\"0x1410\", \"0x1418\")) or (GrantedAccess = \"0x40\" and (SourceImage ~= \".*\\\\handle\\.exe\" or SourceImage ~= \".*\\\\handle64\\.exe\")) or (SourceImage ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Microsoft\\\\Edge\\\\Application\\\\.*\" and SourceImage ~= \".*\\\\Installer\\\\setup\\.exe\") or (SourceImage ~= \".*\\\\AppData\\\\Local\\\\WebEx\\\\WebexHost\\.exe\" and GrantedAccess = \"0x401\") or (SourceImage = \"C:\\\\PROGRAMDATA\\\\MALWAREBYTES\\\\MBAMSERVICE\\\\ctlrupdate\\\\mbupdatr.exe\" and GrantedAccess = \"0x1410\") or ((SourceImage ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or SourceImage ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\") and SourceImage ~= \".*\\.tmp\\\\DropboxUpdate\\.exe\" and GrantedAccess in (\"0x410\", \"0x1410\")) or (SourceImage ~= \"C\\:\\\\Program\\ Files\\\\Microsoft\\ Visual\\ Studio\\\\.*\" and SourceImage ~= \".*\\\\MSBuild\\\\Current\\\\Bin\\\\MSBuild\\.exe\" and GrantedAccess = \"0x1F3FFF\") or SourceImage ~= \".*\\\\SteamLibrary\\\\steamapps\\\\.*\")\n\n\n\n"}
{"prompt": "I want to detect if someone is using tools like tcpdump or tshark on macOS systems to sniff network traffic.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\/tcpdump\" or action_process_image_path ~= \".*\\/tshark\")\n\n\n\n"}
{"prompt": "I want to see alerts for when the SCX RunAsProvider ExecuteShellCommand is used to run a UNIX/Linux command with /bin/sh.", "response": "preset = xdr_process\n| filter (action_process_username = \"root\" and action_process_logon_id = 0 and action_process_cwd = \"/var/opt/microsoft/scx/tmp\" and action_process_image_command_line contains \"/bin/sh\")\n\n\n\n"}
{"prompt": "I want to find indicators of exploitation for CVE-2022-42475 on my system.", "response": "datamodel\n| filter ( contains \"/data/etc/wxd.conf\" or  contains \"/data/lib/libgif.so\" or  contains \"/data/lib/libips.bak\" or  contains \"/data/lib/libiptcp.so\" or  contains \"/data/lib/libipudp.so\" or  contains \"/data/lib/libjepg.so\" or  contains \"/var/.sslvpnconfigbk\")\n\n\n\n"}
{"prompt": "I want to find suspicious events related to the \"GetSigninToken\" API call on Amazon AWS that might indicate potential lateral movement by an adversary using tools like aws_consoler.", "response": "dataset = amazon_aws_raw\n| filter (eventSource = \"signin.amazonaws.com\" and eventName = \"GetSigninToken\") and  not (userAgent contains \"Jersey/${project.version}\")\n\n\n\n"}
{"prompt": " I want to see events where a Java process spawns a shell like bash, cmd, PowerShell or pwsh. ", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\java\\.exe\" and (action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\")) and  not ((actor_process_image_path contains \"build\" and action_process_image_command_line contains \"build\"))\n\n\n\n"}
{"prompt": "I want to find instances where an attacker might be changing default file associations using the \"assoc\" command.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and action_process_image_command_line contains \"assoc\")\n\n\n\n"}
{"prompt": "I want to see Windows events where a user is added to specific privileged groups like grp_cnx_phl_it_system_admin_privileged_access, SQLDBAGLOBAL, Domain Admins, etc., in Concentrix and Daksh domains.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (4728, 632)\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = arrayindex(regextract(message, \"Account Name:\\t\\tCN\\=([^\\,]+)\\,\"), 0),\nTargetGroupName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| filter SubjectUserName not contains \"$\" and TargetUserName not contains \"$\" and TargetUserName not in (null, NULL, \"\"\"\"\"\")\n| fields SubjectUserName, SubjectDomainName, TargetUserName,\nTargetDomainName, event_id, event_result, event_action,\nevent_data, _collector_name, _collector_type, _collector_hostname,\n_collector_ip_address, _collector_id, *\n| filter (TargetDomainName contains \"concentrix\" and (TargetGroupName contains \"grp_cnx_phl_it_system_admin_privileged_access\" or TargetGroupName contains \"SQLDBAGLOBAL\" or TargetGroupName contains \"Domain Admins\" or TargetGroupName contains \"emea_Serverteam\" or TargetGroupName contains \"SGP-SAGE-Admin\")) or (TargetDomainName contains \"Daksh\" and TargetGroupName contains \"Domain Admins\")"}
{"prompt": "I want to find users who have accessed multiple SymantecWSS hacking category URLs within an hour.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_swg_raw\n| alter action = xdm.event.outcome,\nipaddr = xdm.intermediate.ipv4,\nevent_source = xdm.intermediate.host.hostname,\nhost_dst = xdm.target.host.hostname,\ncategory = xdm.network.http.url_category,\nuser_dst = xdm.source.user.username,\nalias_host = xdm.source.host.hostname,\ntcp_action = xdm.event.operation_sub_type,\nresult = xdm.network.http.method,\nrbytes = xdm.source.sent_bytes,\nip_src = xdm.source.ipv4,\nip_dst = xdm.target.ipv4,\nweb_page = xdm.network.http.url,\nquery = xdm.target.resource.value,\ngroups = to_string(xdm.source.user.groups),\nbytes_src = xdm.target.sent_bytes,\nextension = xdm.target.file.extension,\nuser_agent = xdm.source.user_agent,\nreferer_url = xdm.network.http.referrer,\nuri_port = xdm.target.port,\nsc_status = xdm.network.http.response_code,\nsupplier_country = xdm.intermediate.location.country,\nclient_ip_country = xdm.source.location.country,\nuri_scheme = xdm.network.application_protocol,\nday = extract_time(_time, \"DAYOFWEEK\")\n| filter (user_dst not in (\"\"\"-\"\"\", \"\"\"Unauthenticated User\"\"\", null, \"\"\"\"\"\")) and user_agent not in (\"-\")\n| filter category ~= \"hacking\"\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(action) as action,\nvalues(result) as result,\nvalues(ipaddr) as ipaddr,\nvalues(event_source) as event_source,\nvalues(host_dst) as host_dst,\nvalues(tcp_action) as tcp_action,\nvalues(alias_host) as alias_host,\nvalues(ip_src) as ip_src,\nvalues(ip_dst) as ip_dst,\nvalues(web_page) as web_page,\nvalues(query) as query,\nvalues(groups) as groups,\nsum(rbytes) as rbytes,\nsum(bytes_src) as bytes_src,\nvalues(extension) as extension,\nvalues(user_agent) as user_agent,\nvalues(category) as category,\nvalues(referer_url) as referer_url,\nvalues(sc_status) as sc_status,\nvalues(supplier_country) as supplier_country,\nvalues(client_ip_country) as client_ip_country,\nvalues(uri_scheme) as uri_scheme,\nvalues(uri_port) as uri_port,\ncount() as matched_events by user_dst\n| filter matched_events >= 5\n| alter ip_src = replace(replace(replace(to_string(ip_src), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nip_dst = replace(replace(replace(to_string(ip_dst), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\"),\nweb_page = replace(replace(replace(to_string(web_page), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")"}
{"prompt": "I want to see if any processes are starting from suspicious locations on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\:\\\\RECYCLER\\\\.*\" or action_process_image_path ~= \".*\\:\\\\SystemVolumeInformation\\\\.*\") or (action_process_image_path ~= \"C\\:\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\debug\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\fonts\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\help\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\drivers\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\addins\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\cursors\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\system32\\\\tasks\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see all DNS requests made to known TOR proxy domains.", "response": "datamodel\n| filter xdm.network.dns.dns_question.name in (\"tor2web.org\", \"tor2web.com\", \"torlink.co\", \"onion.to\", \"onion.ink\", \"onion.cab\", \"onion.nu\", \"onion.link\", \"onion.it\", \"onion.city\", \"onion.direct\", \"onion.top\", \"onion.casa\", \"onion.plus\", \"onion.rip\", \"onion.dog\", \"tor2web.fi\", \"tor2web.blutmagie.de\", \"onion.sh\", \"onion.lu\", \"onion.pet\", \"t2w.pw\", \"tor2web.ae.org\", \"tor2web.io\", \"tor2web.xyz\", \"onion.lt\", \"s1.tor-gateways.de\", \"s2.tor-gateways.de\", \"s3.tor-gateways.de\", \"s4.tor-gateways.de\", \"s5.tor-gateways.de\", \"hiddenservice.net\")\n\n\n\n"}
{"prompt": "I want to find malicious activity related to obfuscation techniques using compression services within processes.", "response": "datamodel\n| filter ((xdm.target.process.executable.path contains \"new-object\" and xdm.target.process.executable.path contains \"text.encoding]::ascii\") and (xdm.target.process.executable.path contains \"system.io.compression.deflatestream\" or xdm.target.process.executable.path contains \"system.io.streamreader\") and xdm.target.process.executable.path ~= \".*readtoend\")\n\n\n\n"}
{"prompt": "I want to see alerts about potential process injection using Msra.exe that spawns other suspicious processes like arp.exe, cmd.exe, net.exe, etc.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\msra\\.exe\" and actor_process_image_command_line ~= \".*msra\\.exe\" and (action_process_image_path ~= \".*\\\\arp\\.exe\" or action_process_image_path ~= \".*\\\\cmd\\.exe\" or action_process_image_path ~= \".*\\\\net\\.exe\" or action_process_image_path ~= \".*\\\\netstat\\.exe\" or action_process_image_path ~= \".*\\\\nslookup\\.exe\" or action_process_image_path ~= \".*\\\\route\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\whoami\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect when an attacker disables the firewall using Netsh.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\netsh\\.exe\" or actor_process_file_original_name = \"netsh.exe\") and ((action_process_image_command_line contains \"firewall\" and action_process_image_command_line contains \"set\" and action_process_image_command_line contains \"opmode\" and action_process_image_command_line contains \"disable\") or (action_process_image_command_line contains \"advfirewall\" and action_process_image_command_line contains \"set\" and action_process_image_command_line contains \"state\" and action_process_image_command_line contains \"off\"))\n\n\n\n"}
{"prompt": "I want to see alerts about MFA service accounts being locked out on Windows systems.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id = \"4740\" and xdm.target.user.username in (\"secadmin\", \"mfaadmin\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find suspicious processes that have parents like Minesweeper, Winver, or Bitsadmin, or parents that are common Windows utilities except for some specific safe ones.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\minesweeper\\.exe\" or actor_process_image_path ~= \".*\\\\winver\\.exe\" or actor_process_image_path ~= \".*\\\\bitsadmin\\.exe\") or ((actor_process_image_path ~= \".*\\\\csrss\\.exe\" or actor_process_image_path ~= \".*\\\\certutil\\.exe\" or actor_process_image_path ~= \".*\\\\eventvwr\\.exe\" or actor_process_image_path ~= \".*\\\\calc\\.exe\" or actor_process_image_path ~= \".*\\\\notepad\\.exe\") and  not ((action_process_image_path ~= \".*\\\\WerFault\\.exe\" or action_process_image_path ~= \".*\\\\wermgr\\.exe\" or action_process_image_path ~= \".*\\\\conhost\\.exe\" or action_process_image_path ~= \".*\\\\mmc\\.exe\" or action_process_image_path ~= \".*\\\\win32calc\\.exe\" or action_process_image_path ~= \".*\\\\notepad\\.exe\") or action_process_image_path = \"None\"))\n\n\n\n"}
{"prompt": "I want to see which users were added to which privilege groups on Windows systems.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter _collector_type = \"XDR Collector\"\n| filter event_id in (4756, 4728, 632, 4732)\n| alter TargetGroupName = event_data -> TargetUserName,\nTargetSID = event_data -> MemberSid,\nTargetDomainName = event_data -> TargetDomainName,\nSubjectUserName = event_data -> SubjectUserName,\nAction = regextract(message, \"(.*)\\n\\nSubject:\"),\nTargetUserName = User -> name\n| alter Groupname = concat(TargetDomainName, \"\\\", TargetGroupName)\n| filter TargetGroupName in (\"Admins du domaine\", \"Administrateurs du schema\", \"Administrateurs de l'entreprise\", \"Administrateurs\", \"Op\u00e9rateurs de serveur\", \"Op\u00e9rateurs de sauvegarde\", \"Op\u00e9rateurs d'impression\")\n| filter SubjectUserName !~= \"\\$$\"\n| fields Action, Groupname, SubjectUserName, TargetUserName,\nTargetSID, TargetGroupName, host_name"}
{"prompt": "I want to find suspicious activity where processes are using \"del\" or \"erase\" commands to delete specific types of files on endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_file_original_name = \"Cmd.Exe\") and (action_process_image_command_line contains \"del \" or action_process_image_command_line contains \"erase \") and (action_process_image_command_line contains \"\\\\\\*.au3\" or action_process_image_command_line contains \"\\\\\\*.dll\" or action_process_image_command_line contains \"\\\\\\*.exe\" or action_process_image_command_line contains \"\\\\\\*.js\"))\n\n\n\n"}
{"prompt": "I want to find suspicious activity related to applications using the \"RegisterApplicationRestart\" API for persistence on Windows.", "response": "preset = xdr_registry\n| filter (action_registry_key_name ~= \".*\\\\SOFTWARE\\\\Microsoft\\\\Windows\\ NT\\\\CurrentVersion\\\\AppCompatFlags\\\\Layers\\\\.*\" and (action_registry_value_name contains \"REGISTERAPPRESTART\" or action_registry_data contains \"REGISTERAPPRESTART\"))\n\n\n\n"}
{"prompt": "I want to see activity related to Blue Mockingbird malware, specifically focusing on instances where it uses cmd.exe or wmic.exe to manipulate system configurations and potentially deploy malicious payloads.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\cmd\\.exe\" and (action_process_image_command_line contains \"sc config\" and action_process_image_command_line contains \"wercplsupporte.dll\")) or (action_process_image_path ~= \".*\\\\wmic\\.exe\" and action_process_image_command_line ~= \".*COR\\_PROFILER\")\n\n\n\n"}
{"prompt": "I want to find out if any processes on my endpoints are downloading files from file-sharing websites using Bitsadmin.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or actor_process_file_original_name = \"bitsadmin.exe\") and (action_process_image_command_line contains \" /transfer \" or action_process_image_command_line contains \" /create \" or action_process_image_command_line contains \" /addfile \") and (action_process_image_command_line contains \".githubusercontent.com\" or action_process_image_command_line contains \"anonfiles.com\" or action_process_image_command_line contains \"cdn.discordapp.com\" or action_process_image_command_line contains \"cdn.discordapp.com/attachments/\" or action_process_image_command_line contains \"ddns.net\" or action_process_image_command_line contains \"dl.dropboxusercontent.com\" or action_process_image_command_line contains \"ghostbin.co\" or action_process_image_command_line contains \"glitch.me\" or action_process_image_command_line contains \"gofile.io\" or action_process_image_command_line contains \"hastebin.com\" or action_process_image_command_line contains \"mediafire.com\" or action_process_image_command_line contains \"mega.nz\" or action_process_image_command_line contains \"onrender.com\" or action_process_image_command_line contains \"paste.ee\" or action_process_image_command_line contains \"pastebin.com\" or action_process_image_command_line contains \"pastebin.pl\" or action_process_image_command_line contains \"pastetext.net\" or action_process_image_command_line contains \"privatlab.com\" or action_process_image_command_line contains \"privatlab.net\" or action_process_image_command_line contains \"send.exploit.in\" or action_process_image_command_line contains \"sendspace.com\" or action_process_image_command_line contains \"storage.googleapis.com\" or action_process_image_command_line contains \"storjshare.io\" or action_process_image_command_line contains \"supabase.co\" or action_process_image_command_line contains \"temp.sh\" or action_process_image_command_line contains \"transfer.sh\" or action_process_image_command_line contains \"ufile.io\"))\n\n\n\n"}
{"prompt": "I want to see when and where Wermgr.exe is being executed outside of its expected locations.", "response": "preset = xdr_process\n| filter action_process_image_path ~= \".*\\\\wermgr\\.exe\" and  not ((action_process_image_path ~= \"C\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\.*\" or action_process_image_path ~= \"C\\:\\\\Windows\\\\WinSxS\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see if anyone has tried to access unattend.xml files, which often store credentials.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\unattend\\.xml\"\n\n\n\n"}
{"prompt": " I want to see potential instances of malicious WinAPI calls being made through PowerShell scripts on my endpoints. ", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"VirtualAlloc\" and ScriptBlockText contains \"OpenProcess\" and ScriptBlockText contains \"WriteProcessMemory\" and ScriptBlockText contains \"CreateRemoteThread\") or (ScriptBlockText contains \"OpenProcessToken\" and ScriptBlockText contains \"LookupPrivilegeValue\" and ScriptBlockText contains \"AdjustTokenPrivileges\") or (ScriptBlockText contains \"OpenProcessToken\" and ScriptBlockText contains \"DuplicateTokenEx\" and ScriptBlockText contains \"CloseHandle\") or (ScriptBlockText contains \"WriteProcessMemory\" and ScriptBlockText contains \"VirtualAlloc\" and ScriptBlockText contains \"ReadProcessMemory\" and ScriptBlockText contains \"VirtualFree\"))\n\n\n\n"}
{"prompt": "I want to see DNS queries made to \"update.onelaunch.com\", especially if they come from processes related to the OneLaunch application.", "response": "datamodel\n| filter (xdm.network.dns.dns_question.name = \"update.onelaunch.com\" and (xdm.target.process.name ~= \".*\\\\OneLaunch\\.exe\" or xdm.source.process.name ~= \".*\\\\OneLaunch\\.exe\"))\n\n\n\n"}
{"prompt": "I want to detect attempts to execute malicious JavaScript code using Rundll32 and RunHTMLApplication.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \"rundll32\" and action_process_image_command_line contains \"javascript\" and action_process_image_command_line contains \"..\\\\..\\\\mshtml,\" and action_process_image_command_line contains \"RunHTMLApplication\") or action_process_image_command_line contains \";document.write();GetObject(\\\"script\")\n\n\n\n"}
{"prompt": "I want to find instances where someone adds a custom download source to Winget.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\winget\\.exe\" or actor_process_file_original_name = \"winget.exe\") and (action_process_image_command_line contains \"source \" and action_process_image_command_line contains \"add \"))\n\n\n\n"}
{"prompt": " I want to see all Intune admin activities related to device creation, wiping, and retirement from Microsoft Azure. ", "response": "config case_sensitive = false\n| dataset = msft_azure_raw\n| filter operationName in (\"CreateImportedCorporateDevice ImportedDeviceIdentity\", \"wipe ManagedDevice\", \"retire ManagedDevice\")\n| alter username = json_extract_scalar(identity, \"$.claims.name\"),\ntarget_username = json_extract_scalar(properties, \"$.userPrincipalName\"),\nreferenceid = arrayindex(split(resourceId, \"/\"), 2),\naliashost = arrayindex(split(resourceId, \"/\"), -1),\nprotocol = json_extract_scalar(properties, \"$.eventProperties.protocol\")\n| fields username, target_username, operationName, referenceid,\ntenantId, resulttype, callerIpAddress, identity,\naliashost, protocol, _time\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect suspicious commands using CertReq.exe that download files from the internet and modify the Windows configuration.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\certreq\\.exe\" or actor_process_file_original_name = \"CertReq.exe\") and (action_process_image_command_line contains \" -Post \" and action_process_image_command_line contains \" -config \" and action_process_image_command_line contains \" http\" and action_process_image_command_line contains \" C:\\\\windows\\\\win.ini \"))\n\n\n\n"}
{"prompt": "I want to see PowerShell commands that use Invoke-AzureHound on endpoints.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"Invoke-AzureHound\"\n\n\n\n"}
{"prompt": "I want to see alerts about suspicious installations of the \"RTCore64\" service on endpoints.", "response": "preset = xdr_event_log\n| alter ServiceName = regextract(to_json_string(action_evtlog_data_fields)->ServiceName{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"Service Control Manager\" and action_evtlog_event_id = 7045 and ServiceName = \"RTCore64\")\n\n\n\n"}
{"prompt": "I want to detect Blackbyte Ransomware activity based on changes it makes to specific registry keys.", "response": "preset = xdr_registry\n| filter (action_registry_key_name in (\"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\LocalAccountTokenFilterPolicy\", \"HKLM\\\\SOFTWARE\\\\Microsoft\\\\Windows\\\\CurrentVersion\\\\Policies\\\\System\\\\EnableLinkedConnections\", \"HKLM\\\\SYSTEM\\\\CurrentControlSet\\\\Control\\\\FileSystem\\\\LongPathsEnabled\") and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\"))\n\n\n\n"}
{"prompt": "I want to see which users attempted privileged operations on Windows devices and if those attempts were successful or failed.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4897\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"PAM_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time, xdm.target.user.sam_account_name\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find potential brute force attacks based on failed login attempts over the past five minutes.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| bin _time span = 5m\n| filter microsoft_windows_raw._collector_type ~= \"WEC|XDR\" and xdm.event.id = \"4625\" and xdm.logon.type in (XDM_CONST.LOGON_TYPE_INTERACTIVE, XDM_CONST.LOGON_TYPE_REMOTE_INTERACTIVE) and xdm.source.user.username !~= \"$\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip,\nxdm.target.user.groups = to_string(xdm.target.user.groups)\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, _time, xdm.event.description, event_type,\nxdm.event.original_event_type, logon_session_id,\nevent_description, failure_reason, result, xdm.source.ipv4,\ndevice_ip, _insert_time\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as wingrps wingrps.host_name = arrayindex(split(xdm.source.host.hostname, \".\"),\n0)\n| filter TYPE in (\"PAM_windows\")\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as *,\ncount() as matched_events by xdm.target.user.username,\n_time\n| filter matched_events >= 5\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime),\nduplicate_alert_count = subtract(floor(divide(matched_events, 5)), 1)"}
{"prompt": "I want to see events related to suspicious child processes spawned by WindowsTerminal.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\WindowsTerminal\\.exe\" or actor_process_image_path ~= \".*\\\\wt\\.exe\") and ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\" or action_process_image_path ~= \".*\\\\csc\\.exe\") or (action_process_image_path ~= \".*C\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\\\Downloads\\\\.*\" or action_process_image_path ~= \".*\\\\Desktop\\\\.*\" or action_process_image_path ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\TEMP\\\\.*\") or (action_process_image_command_line contains \" iex \" or action_process_image_command_line contains \" icm\" or action_process_image_command_line contains \"Invoke-\" or action_process_image_command_line contains \"Import-Module \" or action_process_image_command_line contains \"ipmo \" or action_process_image_command_line contains \"DownloadString(\" or action_process_image_command_line contains \" /c \" or action_process_image_command_line contains \" /k \" or action_process_image_command_line contains \" /r \"))) and  not ((action_process_image_command_line contains \"Import-Module\" and action_process_image_command_line contains \"Microsoft.VisualStudio.DevShell.dll\" and action_process_image_command_line contains \"Enter-VsDevShell\") or (action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Packages\\\\Microsoft.WindowsTerminal_\" and action_process_image_command_line contains \"\\\\LocalState\\\\settings.json\") or (action_process_image_command_line ~= \".*C\\:\\\\Program\\ Files\\\\Microsoft\\ Visual\\ Studio\\\\.*\" and action_process_image_command_line contains \"\\\\Common7\\\\Tools\\\\VsDevCmd.bat\"))\n\n\n\n"}
{"prompt": "I want to find suspicious processes on endpoints that might be using obfuscated code execution techniques like Invoke-Obfuscation VAR+ Launcher.", "response": "preset = xdr_process\n| filter action_process_image_command_line ~= \"cmd.{0,5}(?\\:\\/c|\\/r)(?\\:\\s|)\\\"set\\s[a-zA-Z]{3,6}.*(?\\:\\{\\d\\}){1,}\\\\\\\"\\s+?\\-f(?\\:.*\\)){1,}.*\\\"\"\n\n\n\n"}
{"prompt": "I want to see processes that are potentially suspicious because they involve PowerShell spawning child processes with known malicious tools.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\powershell\\_ise\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\") and (action_process_image_path ~= \".*\\\\bash\\.exe\" or action_process_image_path ~= \".*\\\\bitsadmin\\.exe\" or action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\forfiles\\.exe\" or action_process_image_path ~= \".*\\\\hh\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\schtasks\\.exe\" or action_process_image_path ~= \".*\\\\scrcons\\.exe\" or action_process_image_path ~= \".*\\\\scriptrunner\\.exe\" or action_process_image_path ~= \".*\\\\sh\\.exe\" or action_process_image_path ~= \".*\\\\wmic\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\")) and  not ((actor_process_image_command_line ~= \".*\\\\Program\\ Files\\\\Amazon\\\\WorkspacesConfig\\\\Scripts\\\\.*\" and action_process_image_command_line ~= \".*\\\\Program\\ Files\\\\Amazon\\\\WorkspacesConfig\\\\Scripts\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to find instances where DiskShadow.EXE is spawning potentially suspicious child processes like Certutil.exe, Cscript.exe, Mshta.exe, PowerShell.exe, etc.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\diskshadow\\.exe\" and (action_process_image_path ~= \".*\\\\certutil\\.exe\" or action_process_image_path ~= \".*\\\\cscript\\.exe\" or action_process_image_path ~= \".*\\\\mshta\\.exe\" or action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\" or action_process_image_path ~= \".*\\\\regsvr32\\.exe\" or action_process_image_path ~= \".*\\\\rundll32\\.exe\" or action_process_image_path ~= \".*\\\\wscript\\.exe\"))\n\n\n\n"}
{"prompt": "I want to see Duo login activity for Domain Admins and Cloud Admins where they have used more than one operating system within the last 24 hours.", "response": "dataset = duo_duo_raw\n| filter email not in (NULL, null, \"\"\"\"\"\") and result in (\"success\") and eventtype in (\"authentication\")\n| alter DuoUserName = user -> name,\nIPAddress = access_device -> ip,\nDeviceTrustLevel = adaptive_trust_assessments -> remember_me.trust_level,\nAccDevLocationCN = access_device -> location.country,\nAccDevLocationST = access_device -> location.state,\nAccDevLocationCY = access_device -> location.city,\nAccDevOS = access_device -> os,\nAccDevOSVer = access_device -> os_version,\nAccDevBrowser = access_device -> browser,\nAccDevBrowserVer = access_device -> browser_version,\nAppSrc = application -> name\n| union (dataset = wl_ip_cidrs)\n| alter wl_ipv4 = if(wl_type = \"ipv4\", wl_value),\nwl_cidr = if(wl_type = \"cidr\", wl_value)\n| filter (IPAddress not contains \"0.0.0.0\" and IPAddress != wl_ipv4 and incidr(IPAddress, wl_cidr) = false) and AccDevOS not in (\"iOS\", \"Android\") and AccDevLocationCN != NULL\n| alter Domain_Admin_User = if(DuoUserName in (\"<names>\"), \"Yes\", \"No\"),\nCloud_Admin_User = if(DuoUserName in (\"<user>\"), \"Yes\", \"No\")\n\n| filter Domain_Admin_User = \"Yes\" or Cloud_Admin_User = \"Yes\"\n| fields AccDevLocationCN, AccDevBrowser, AccDevOS, DuoUserName,\nresult, reason, email, eventtype, access_device,\nDomain_Admin_User, Cloud_Admin_User, AppSrc, IPAddress,\nDeviceTrustLevel, _product, _vendor, _collector_name,\n_collector_type, AccDevOSVer, AccDevBrowser, AccDevBrowserVer\n\n| comp values(Domain_Admin_User) as Domain_Admin_User,\nvalues(Cloud_Admin_User) as Cloud_Admin_User,\nvalues(IPAddress) as MultipleIPs,\nvalues(AccDevLocationCN) as Countries,\nvalues(AccDevOs) as MultipleOSes,\nvalues(AccDevOSVer) as MultipleOsVer,\nvalues(AccDevBrowserVer) as MultipleBrowserVers by DuoUserName,\nemail,\nresult,\neventtype\n| filter array_length(MultipleOSes) > 1"}
{"prompt": "I want to see alerts about high privilege admin activity where the SID history was added to an account.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id IN (\"4765\")\n| join type = left\n(dataset = device_group_static_list\n| alter host_name = arrayindex(split(HOSTNAME, \".\"), 0)\n) as JT1(JT1.host_name = arrayindex(split(xdm.source.host.hostname, \".\"), 0) or JT1.IP = microsoft_windows_raw._final_reporting_device_ip)\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect suspicious process creations that use paths found in folders known to be commonly exploited by malicious actors.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\\\$Recycle\\.bin\\\\.*\" or action_process_image_path ~= \".*\\\\config\\\\systemprofile\\\\.*\" or action_process_image_path ~= \".*\\\\Intel\\\\Logs\\\\.*\" or action_process_image_path ~= \".*\\\\RSA\\\\MachineKeys\\\\.*\" or action_process_image_path ~= \".*\\\\Users\\\\All\\ Users\\\\.*\" or action_process_image_path ~= \".*\\\\Users\\\\Default\\\\.*\" or action_process_image_path ~= \".*\\\\Users\\\\NetworkService\\\\.*\" or action_process_image_path ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\addins\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\debug\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Fonts\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Help\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\IME\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Media\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\repair\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\security\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\System32\\\\Tasks\\\\.*\" or action_process_image_path ~= \".*\\\\Windows\\\\Tasks\\\\.*\") or action_process_image_path ~= \"C\\:\\\\Perflogs\\\\.*\") and  not (action_process_image_path ~= \"C\\:\\\\Users\\\\Public\\\\IBM\\\\ClientSolutions\\\\Start\\_Programs\\\\.*\" or (action_process_image_path ~= \"C\\:\\\\Windows\\\\SysWOW64\\\\config\\\\systemprofile\\\\Citrix\\\\UpdaterBinaries\\\\.*\" and action_process_image_path ~= \".*\\\\CitrixReceiverUpdater\\.exe\"))\n\n\n\n"}
{"prompt": " I want to find suspicious activity related to the CVE-2021-40444 vulnerability, specifically focusing on Word document files (.docx) and CAB file writing. ", "response": "datamodel\n| filter (((xdm.target.process.name ~= \".*\\\\winword\\.exe\" or xdm.source.process.name ~= \".*\\\\winword\\.exe\") and xdm.target.file.filename contains \"\\\\Windows\\\\INetCache\" and xdm.target.file.filename ~= \".*\\.cab\") or ((xdm.target.process.name ~= \".*\\\\winword\\.exe\" or xdm.source.process.name ~= \".*\\\\winword\\.exe\") and (xdm.target.file.filename ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" and xdm.target.file.filename contains \".inf\"))) and  not ((xdm.target.file.filename ~= \"C\\:\\\\Users\\\\.*\" and xdm.target.file.filename contains \"AppData\\\\Local\\\\Temp\" and xdm.target.file.filename ~= \".*\\\\Content\\.inf\"))\n\n\n\n"}
{"prompt": "I want to see alerts about changes made to Azure Kubernetes service accounts, like modifications or deletions.", "response": "dataset = msft_azure_raw\n| alter properties_operationName = json_extract_scalar(properties , \"$.operationName\")\n| filter properties.operationName in (\"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SERVICEACCOUNTS/WRITE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SERVICEACCOUNTS/DELETE\", \"MICROSOFT.KUBERNETES/CONNECTEDCLUSTERS/SERVICEACCOUNTS/IMPERSONATE/ACTION\")\n\n\n\n"}
{"prompt": "I want to see detections of Rundll32 being spawned by Explorer.exe that aren't running standard commands.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\explorer\\.exe\" and (action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\")) and  not ((action_process_image_command_line ~= \".*\\ C\\:\\\\Windows\\\\System32\\\\.*\" or action_process_image_command_line ~= \".*\\ \\-localserver\\ 22d8c27b\\-47a1\\-48d1\\-ad08\\-7da7abd79617\"))\n\n\n\n"}
{"prompt": "I want to see alerts from Symantec EP that indicate infected machines used by members of the RedCarpet users group.", "response": "config case_sensitive = false\n| datamodel dataset = symantec_ep_raw\n| filter xdm.alert.name != null and xdm.alert.name !~= \"Tracking Cookies\" and xdm.event.description !~= \"CCD Notification: REMEDIATION NOT REQUIRED\"\n| join type = left\n(dataset = redcarpet_users_list\n) as redcarpusers xdm.source.user.username = redcarpusers.username\n| filter username != NULL\n| alter category = if(xdm.alert.name ~= \"^System Infected\", arrayindex(split(xdm.alert.name, \":\"), 0), to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category set:\\s([^,]+),\"), 0))),\nevent_desc = if(xdm.alert.name ~= \"^System Infected\", xdm.alert.name, xdm.event.description),\nevent_type = to_string(arrayindex(regextract(symantec_ep_raw._raw_log, \"Category type:\\s([^,]+),\"), 0)),\ntarget_src_ip = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s(\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}),\"), 0),\nrequested_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Requested action:\\s([^,]+),\"), 0),\nsecondary_action = arrayindex(regextract(symantec_ep_raw._raw_log, \"Secondary action:\\s([^,]+),\"), 0),\nip_address = arrayindex(regextract(symantec_ep_raw._raw_log, \"IP Address:\\s([^,]+),\"), 0),\nsymantec_server_name = arrayindex(regextract(symantec_ep_raw._raw_log, \"SymantecServer:\\s([^,]+),\"), 0),\naliashost = arrayindex(regextract(symantec_ep_raw._raw_log, \"Server Name:\\s([^,]+),\"), 0),\nfile_name = arrayindex(split(xdm.target.file.path, \"\\\"), -1)\n| alter file_extension = if(array_length(split(file_name, \".\")) > 1, arrayindex(split(file_name, \".\"), -1), null),\ndirectory = replace(xdm.target.file.path, file_name, \"\"),\naction = xdm.observer.action,\nfile_hash = xdm.target.file.sha256,\nrisk_name = xdm.alert.name,\nprocess = xdm.target.file.path,\nsrc_ips = xdm.source.ipv4,\ndst_ips = xdm.target.ipv4,\nalert_category = xdm.alert.category\n| alter aggregation_criteria1 = \"ildestinationuser\",\naggregation_criteria2 = \"ilhostsource\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to detect attempts to dump Veeam backup database credentials using sqlcmd.exe.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\sqlcmd\\.exe\" and (action_process_image_command_line contains \"SELECT\" and action_process_image_command_line contains \"TOP\" and action_process_image_command_line contains \"[VeeamBackup].[dbo].[Credentials]\"))\n\n\n\n"}
{"prompt": "I want to find instances of SNAKE malware installers by looking for files named \"jpsetup.exe\" or \"jpinst.exe\".", "response": "datamodel\n| filter (xdm.target.file.filename ~= \".*\\\\jpsetup\\.exe\" or xdm.target.file.filename ~= \".*\\\\jpinst\\.exe\")\n\n\n\n"}
{"prompt": "I want to see all security threats detected by Okta.", "response": "datamodel dataset = okta_okta_raw\n| filter xdm.event.type = \"security.threat.detected\"\n\n\n\n"}
{"prompt": "I want to see events where winget is used to install a package from a local manifest file.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\winget\\.exe\" or actor_process_file_original_name = \"winget.exe\") and (action_process_image_command_line contains \"install\" or action_process_image_command_line contains \" add \") and (action_process_image_command_line contains \"-m \" or action_process_image_command_line contains \"--manifest\"))\n\n\n\n"}
{"prompt": "I want to see activity related to potential DNS exfiltration tools being executed on my endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\iodine\\.exe\" or action_process_image_path contains \"\\\\dnscat2\")\n\n\n\n"}
{"prompt": "I want to see all Duo successful authentication events from countries outside of the EU and identify any potential security risks.", "response": "config case_sensitive = false\n| dataset = duo_duo_raw\n| filter host = \"api-c7e21466.duosecurity.com\"\n| filter email != NULL\n| filter result in (\"success\") and eventtype in (\"authentication\")\n| alter DuoUserName = json_extract(user, \"$.name\"),\nIPAddress = json_extract_scalar(access_device, \"$.ip\"),\nDeviceTrustLevel = json_extract(adaptive_trust_assessments, \"$.remember_me.trust_level\")\n| alter AccDevLocationCN = json_extract_scalar(access_device, \"$.location.country\"),\nAccDevLocationST = json_extract(access_device, \"$.location.state\"),\nAccDevLocationCY = json_extract(access_device, \"$.location.city\"),\nAccDevOS = json_extract(access_device, \"$.os\"),\nAccDevOSVer = json_extract(access_device, \"$.os_version\"),\nAccDevBrowser = json_extract(access_device, \"$.browser\"),\nAccDevBrowserVer = json_extract(access_device, \"$.browser_version\"),\nIntegration = json_extract_scalar(application, \"$.name\")\n| alter AccDevLocationCN = replace(AccDevLocationCN, \"\\\"\", \"\"),\nIPAddress = replace(IPAddress, \"\\\"\", \"\"),\nPhoneNumber = auth_device -> name\n| filter incidr(IPAddress, \"<ip>\") = False\n| join type = left\n(dataset = wl_ip_cidrs\n| filter wl_type = \"ipv4\"\n| fields wl_value as ipv4_value\n) as wl IPAddress = wl.ipv4_value\n| filter (ipv4_value in (null, \"\"\"\"\"\"))\n| join type = left\n(dataset = wl_ip_cidrs\n| filter wl_type = \"cidr\"\n| fields wl_value as cidr_value\n) as wl(incidr(IPAddress, wl.cidr_value) = True)\n| filter (cidr_value in (null, \"\"\"\"\"\"))\n| alter Private_IP_Segment_192 = incidr(IPAddress, \"<ip>\"),\nPrivate_IP_Segment_10 = incidr(IPAddress, \"<ip>\"),\nPrivate_IP_Segment_172 = incidr(IPAddress, \"<ip>\")\n| filter IPAddress not contains \"0.0.0.0\"\n| alter DuoUserName = replace(DuoUserName, \"\\\"\", \"\")\n| filter AccDevLocationCN not in (\"Argentina\", \"Australia\", \"Brazil\", \"Bulgaria\", \"Canada\", \"China\", \"Colombia\", \"Costa Rica\", \"Cura\u00e7ao\", \"Czech Republic\", \"Czechia\", \"Denmark\", \"Dominican Republic\", \"Egypt\", \"El Salvador\", \"France\", \"Georgia\", \"Germany\", \"Greece\", \"Honduras\", \"Hong Kong\", \"Hungary\", \"India\", \"Indonesia\", \"Ireland\", \"Italy\", \"Jamaica\", \"Japan\", \"Korea, Republic of\", \"Malaysia\", \"Mauritius\", \"Mexico\", \"Netherlands\", \"The Netherlands\", \"New Zealand\", \"Nicaragua\", \"Philippines\", \"Poland\", \"Portugal\", \"Romania\", \"Singapore\", \"Slovakia\", \"South Africa\", \"South Korea\", \"Spain\", \"Sweden\", \"Thailand\", \"Tunisia\", \"United Arab Emirates\", \"United Kingdom\", \"United States\", \"Vietnam\", \"Suriname\", \"Peru\", \"Guatemala\", \"Albania\", \"Algeria\", \"Austria\", \"Belgium\", \"Benin\", \"Bosnia and Herzegovina\", \"Estonia\", \"Finland\", \"Ghana\", \"Israel\", \"Ivory Coast\", \"Cote D'Ivoire\", \"Jordan\", \"Kosovo\", \"Latvia\", \"Madagascar\", \"Morocco\", \"North Macedonia\", \"Norway\", \"Saudi Arabia\", \"Senegal\", \"Serbia\", \"Switzerland\", \"Turkey\", \"T\u00fcrkiye\")\n| alter CorrelationAlertName = \"CNX_EU_PROD DUO Successful Authentication from Non-business Country\"\n| filter (AccDevLocationCN != NULL)\n| fields DuoUserName, IPAddress, email, reason, result,\neventtype, AccDevLocationCN, AccDevLocationST, AccDevLocationCY,\nAccDevBrowser, AccDevBrowserVer, AccDevOS, AccDevOSVer,\nIntegration, access_device, *"}
{"prompt": "I want to find instances where \"wmic.exe\" was used with the \"group\" flag to potentially gather information about local system groups and permissions.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\wmic\\.exe\" or actor_process_file_original_name = \"wmic.exe\") and action_process_image_command_line contains \" group\")\n\n\n\n"}
{"prompt": "I want to detect and alert on situations where there are unusually high numbers of object deletions performed by non-administrators within a 5-minute window.", "response": "config case_sensitive = false\n| dataset in (check_point_smartconsole_raw, check_point_smartview_tracker_raw, check_point_query_database_raw, check_point_smartdashboard_raw, check_point_license_mgmt_raw, check_point_cli_raw, check_point_web_ui_raw, check_point_web_api_raw)\n| bin _time span = 5m\n| filter operation = \"Delete Object\" and administrator not in (\"localhost\", \"fwadmin\", \"smartupdate\", \"system\") and _final_reporting_device_ip != \"10.67.122.132\"\n| join type = left\n(preset = ad_users\n| fields security_identifier, full_user_name, security_group_list,\ndisplay_name, sam_account_name, member_of\n) as cieusers administrator = cieusers.sam_account_name\n| filter security_group_list not contains \"INTEG-Nsec-PRVDR1\" and member_of not contains \"INTEG-Nsec-PRVDR1\"\n| alter user_agent = null,\nos_edition = null,\nsrc_port = null,\ndst_port = null,\nhostname = arrayindex(regextract(originsicname, \"o\\=([^\\,]+)\"), 0)\n| comp earliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(src) as source_ip,\nvalues(origin) as dst_ip,\nvalues(src_port) as src_port,\nvalues(dst_port) as dst_port,\nvalues(operation) as action,\nvalues(origin) as origin,\nvalues(hostname) as hostname,\nvalues(additional_info) as result,\nvalues(user_agent) as user_agent,\nvalues(os_edition) as os_edition,\nvalues(_product) as product,\ncount() as matched_events by _time,\nadministrator\n| filter matched_events >= 3\n| alter aggregate_criteria = \"ildestinationuser\",\nduplicate_alert_count = subtract(floor(divide(matched_events, 3)), 1),\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to see Swift application raw data events where the outcome reason is \"dispose error(from)\". I need the timestamp formatted as YYYY-MM-DD HH:MM:SS.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"dispose error(from)\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find out if someone has recently changed an identity provider in our AWS Identity Center setup.", "response": "dataset = amazon_aws_raw\n| filter (eventSource in (\"sso-directory.amazonaws.com\", \"sso.amazonaws.com\") and eventName in (\"AssociateDirectory\", \"DisableExternalIdPConfigurationForDirectory\", \"DisassociateDirectory\", \"EnableExternalIdPConfigurationForDirectory\"))\n\n\n\n"}
{"prompt": "I want to find out if any unauthorized users have rebooted our servers.", "response": "datamodel dataset = linux_linux_raw\n| join type = left\n(dataset = device_group_static_list\n| fields IP, TYPE\n| filter TYPE in (\"RSD-Unix-servers\", \"sdam_unix\")\n) as device_grps device_grps.IP = linux_linux_raw._final_reporting_device_ip\n| filter IP != null\n| filter xdm.event.description ~= \"shutdown|reboot|poweroff|telinit|init \\d+\" and xdm.event.type in (\"sudo\", \"su\")\n| alter xdm.source.user.username = coalesce(arrayindex(regextract(xdm.event.description, \"(?i)\\s+USER\\=([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"(?:authenticat\\w+|invalid|illegal|for|by)\\s+user\\s+[\\\"\\(]*([\\w\\-\\.]+)\"), 0), arrayindex(regextract(xdm.event.description, \"for\\s+([\\w\\-\\.]+)\\s+from\"), 0), xdm.source.user.username),\ndevice_ip = linux_linux_raw._final_reporting_device_ip\n| filter xdm.source.user.username not in (NULL, null, \"root\", \"reboot\")\n| fields xdm.event.type, xdm.event.original_event_type, xdm.event.description,\nxdm.event.log_level, xdm.event.operation_sub_type,\nxdm.event.outcome, xdm.event.outcome_reason, xdm.network.application_protocol,\nxdm.network.application_protocol_category, xdm.network.application_protocol_subcategory,\nxdm.network.session_id, xdm.source.host.hostname,\nxdm.source.application.name, xdm.source.ipv4, xdm.source.user.username,\nxdm.source.process.name, xdm.source.process.pid,\nxdm.source.process.executable.path, xdm.source.user.identifier,\nxdm.source.interface, xdm.source.port, xdm.source.process.executable.sha256,\nxdm.target.ipv4, xdm.target.port, xdm.target.file.path,\nxdm.target.file.directory, xdm.target.host.hostname,\nxdm.target.process.pid, xdm.target.process.name,\nxdm.target.process.command_line, xdm.target.user.identifier,\nxdm.target.user.username, xdm.target.user.groups,\n_time, _insert_time, _vendor, _product, device_ip\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events related to user account creation and deletion within one hour of each other.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\" and xdm.event.id in (\"4720\", \"4726\") and xdm.source.user.username != null and xdm.target.user.username != null\n| sort asc _time\n| alter pattern = if(xdm.event.id = \"4720\", \"E1\", \"E2\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip, pattern\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| comp list(pattern) as pattern_events,\nearliest(_time) as FirstEventTime,\nlatest(_time) as LatestEventTime,\nvalues(*) as * by xdm.target.user.username\n| alter pattern_events = replace(replace(replace(to_string(pattern_events), \"\\\"\", \"\"), \"[\", \"\"), \"]\", \"\")\n| filter pattern_events contains \"E1,E2\"\n\n| alter aggregation_criteria = \"ilsourceuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances where many accounts are deleted on Windows systems within a short period of time.", "response": "dataset = microsoft_windows_raw\n| filter event_id in (4726)\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| filter SubjectUserName not contains \"$\" and TargetUserName not contains \"$\" and SubjectUserName not contains \"MIISSvc\" and TargetUserName not contains \"MIISSvc\" and _collector_type not in (\"Cortex Agent\")\n| fields SubjectUserName, SubjectDomainName, TargetUserName,\nTargetDomainName, event_id, event_result, event_action,\nevent_data, _collector_name, _collector_type, _collector_hostname,\n_collector_ip_address, _collector_id\n| comp earliest(_time) as FirstTimestamp,\nlatest(_time) as LatestTimestamp,\ncount() as MultipleAccountCount,\nvalues(TargetUserName) as UniqueAccounts,\nvalues(event_data) as MultipleAccounts by SubjectUserName,\nTargetDomainName,\nevent_id,\nevent_result,\nevent_action,\n_collector_hostname addrawdata = true as ExtraInfo\n| filter array_length(UniqueAccounts) >= 100"}
{"prompt": "I want to find suspicious activity related to changes in the desktop background through registry modifications.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"Control Panel\\\\Desktop\" or action_registry_key_name contains \"CurrentVersion\\\\Policies\\\\ActiveDesktop\" or action_registry_key_name contains \"CurrentVersion\\\\Policies\\\\System\") and ((action_registry_key_name ~= \".*NoChangingWallpaper\" and (action_registry_value_name = \"DWORD (0x00000001)\" or action_registry_data = \"DWORD (0x00000001)\")) or action_registry_key_name ~= \".*\\\\Wallpaper\" or (action_registry_key_name ~= \".*\\\\WallpaperStyle\" and (action_registry_value_name = 2 or action_registry_data = 2))) and  not (actor_process_image_path ~= \".*\\\\svchost\\.exe\")\n\n\n\n"}
{"prompt": "I want to find commands that clear or remove the syslog file.", "response": "datamodel\n| filter ( contains \"rm /var/log/syslog\" or  contains \"rm -r /var/log/syslog\" or  contains \"rm -f /var/log/syslog\" or  contains \"rm -rf /var/log/syslog\" or  contains \"mv /var/log/syslog\" or  contains \" >/var/log/syslog\" or  contains \" > /var/log/syslog\") and  not (_raw_log contains \"/syslog.\")\n\n\n\n"}
{"prompt": "I want to see detections of Insecure Direct Object References in IIS webservers, including details about the source IP, username, target hostname and URL, HTTP method, response code, and timestamps.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| join type = left\n(dataset = device_group_static_list\n| filter TYPE ~= \"microsoft iis\"\n| fields IP\n) as device_group device_group.IP = xdm.target.ipv4\n| filter IP != null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.target.url ~= \"/c\\+dir\" OR xdm.target.url ~= \"etc/ shadow\"\n| filter xdm.target.ipv4 not in (\"<ip>\") and xdm.source.ipv4 not in (\"<ip>\")\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see information about Sysmon blocked executables on my endpoints.", "response": "preset = xdr_event_log\n| filter action_evtlog_event_id = 27\n\n\n\n"}
{"prompt": "I want to see events related to protected storage service access on endpoints where the action involves IPC sharing.", "response": "preset = xdr_event_log\n| alter ShareName = regextract(to_json_string(action_evtlog_data_fields)->ShareName{}, \"\\\"(.*)\\\"\")\n| alter RelativeTargetName = regextract(to_json_string(action_evtlog_data_fields)->RelativeTargetName{}, \"\\\"(.*)\\\"\")\n| filter (action_evtlog_event_id = 5145 and ShareName contains \"IPC\" and RelativeTargetName = \"protected_storage\")\n\n\n\n"}
{"prompt": "I want to see alerts about service accounts being disabled or deleted on Windows systems.", "response": "config case_sensitive = false\n| dataset = microsoft_windows_raw\n| filter event_id in (4725, 4726) and _collector_type in (\"XDR Collector\")\n| alter SubjectUserName = event_data -> SubjectUserName,\nSubjectDomainName = event_data -> SubjectDomainName,\nTargetUserName = event_data -> TargetUserName,\nTargetDomainName = event_data -> TargetDomainName\n| filter TargetUserName ~= \"^svc\"\n| fields SubjectUserName, SubjectDomainName, TargetUserName,\nTargetDomainName, event_id, event_result, event_action,\nevent_data, _collector_name, _collector_type, _collector_hostname,\n_collector_ip_address, _collector_id, *"}
{"prompt": " I want to see all events where traffic from a public IP address is going to an Intranet application, excluding known IPs like Google.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| filter xdm.source.user.username not in (null, \"-\") and xdm.source.ipv4 not in (null, \"-\") and xdm.source.location.country != null and xdm.source.is_internal_ip = false and xdm.source.ipv4 !~= \"216\\.251\\.48\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"216\\.251\\.49\\.[0-9]{1,3}\" and xdm.source.ipv4 !~= \"216\\.251\\.59\\.[0-9]{1,3}\" and xdm.target.ipv4 not in (\"<ip>\")\n| join type = left\n(dataset = device_group_static_list\n| filter TYPE ~= \"microsoft iis\"\n| fields IP\n) as device_group device_group.IP = xdm.target.ipv4\n| filter IP != null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as iisva_scan_ips iisva_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| join type = left\n(dataset = dmz_ip_address_list\n| fields ip_address as ip\n) as dmz_ips dmz_ips.ip = xdm.source.ipv4\n| filter ip = null\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| comp count() as matched_events,\nearliest(_time) as FirstEventTime,\nvalues(*) as * by xdm.source.ipv4,\nxdm.source.user.username\n| filter matched_events >= 0\n| alter aggregation_criteria = \"ildestinationuser\",\naggregation_criteria1 = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", FirstEventTime)"}
{"prompt": "I want to find instances of Invoke-Obfuscation STDIN+ Launcher, which uses obfuscated commands loaded from STDIN.", "response": "datamodel\n| filter xdm.target.process.executable.path ~= \".*cmd.{0,5}(?\\:\\/c|\\/r).+powershell.+(?\\:\\$\\{?input\\}?|noexit).+\\\"\"\n\n\n\n"}
{"prompt": "I want to detect when an attacker modifies existing scheduled tasks to run from suspicious locations.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\schtasks\\.exe\" and (action_process_image_command_line contains \" /Change \" and action_process_image_command_line contains \" /TN \")) and (action_process_image_command_line contains \"\\\\AppData\\\\Local\\\\Temp\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\WINDOWS\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\" or action_process_image_command_line ~= \".*\\\\Downloads\\\\.*\" or action_process_image_command_line contains \"\\\\Temporary Internet\" or action_process_image_command_line ~= \".*C\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*C\\:\\\\Perflogs\\\\.*\" or action_process_image_command_line contains \"%ProgramData%\" or action_process_image_command_line contains \"%appdata%\" or action_process_image_command_line contains \"%comspec%\" or action_process_image_command_line contains \"%localappdata%\") and (action_process_image_command_line contains \"regsvr32\" or action_process_image_command_line contains \"rundll32\" or action_process_image_command_line contains \"cmd /c \" or action_process_image_command_line contains \"cmd /k \" or action_process_image_command_line contains \"cmd /r \" or action_process_image_command_line contains \"cmd.exe /c \" or action_process_image_command_line contains \"cmd.exe /k \" or action_process_image_command_line contains \"cmd.exe /r \" or action_process_image_command_line contains \"powershell\" or action_process_image_command_line contains \"mshta\" or action_process_image_command_line contains \"wscript\" or action_process_image_command_line contains \"cscript\" or action_process_image_command_line contains \"certutil\" or action_process_image_command_line contains \"bitsadmin\" or action_process_image_command_line contains \"bash.exe\" or action_process_image_command_line contains \"bash \" or action_process_image_command_line contains \"scrcons\" or action_process_image_command_line contains \"wmic \" or action_process_image_command_line contains \"wmic.exe\" or action_process_image_command_line contains \"forfiles\" or action_process_image_command_line contains \"scriptrunner\" or action_process_image_command_line contains \"hh.exe\" or action_process_image_command_line contains \"hh \"))\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts on endpoints that contain the text \"PS ATTACK!!!\"", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"PS ATTACK!!!\"\n\n\n\n"}
{"prompt": " I want to see events related to system audit policy changes on Windows systems, including details about who made the change and why. ", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4719\")\n| join type = left\n(dataset = device_group_static_list\n) as evhosts evhosts.HOSTNAME = xdm.source.host.hostname or evhosts.IP = microsoft_windows_raw._reporting_device_ip\n| filter TYPE IN (\"ev-windows\", \"ev_aws_dc\", \"ev_aws_windows\")\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = microsoft_windows_raw._final_reporting_device_ip\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ileventcomputer\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see alerts about unusual scheduled tasks created at midnight using tools like vbscript or powershell that are set to run only once.", "response": "preset = xdr_process\n| filter ((action_process_image_path contains \"\\\\schtasks.exe\" or actor_process_file_original_name = \"schtasks.exe\") and (action_process_image_command_line contains \"wscript\" or action_process_image_command_line contains \"vbscript\" or action_process_image_command_line contains \"cscript\" or action_process_image_command_line contains \"wmic \" or action_process_image_command_line contains \"wmic.exe\" or action_process_image_command_line contains \"regsvr32.exe\" or action_process_image_command_line contains \"powershell\" or action_process_image_command_line ~= \".*\\\\AppData\\\\.*\") and (action_process_image_command_line contains \"once\" and action_process_image_command_line contains \"00:00\"))\n\n\n\n"}
{"prompt": "I want to see events related to security group creation or deletion by users who are not admins.", "response": "config case_sensitive = false\n| datamodel dataset = microsoft_windows_raw\n| filter microsoft_windows_raw._collector_type ~= \"^WEC|^XDR Collector\"\n| filter xdm.event.id in (\"4730\", \"4734\", \"4654\", \"4758\", \"4727\", \"4731\") and xdm.source.user.username !~= \"[a-zA-Z\\d]+\\$$\"\n| alter error_code = json_extract_scalar(microsoft_windows_raw.event_data, \"$.Status\"),\nmessage_id = concat(xdm.event.type, \"_\", xdm.event.id, \"_\", xdm.observer.type),\nevent_type = microsoft_windows_raw.keywords,\nlogon_session_id = json_extract_scalar(microsoft_windows_raw.event_data, \"$.SubjectLogonId\"),\nevent_description = arrayindex(regextract(microsoft_windows_raw.message, \"([^\\.]+)\"), 0),\nfailure_reason = arrayindex(regextract(microsoft_windows_raw.message, \"Failure Reason:\\s*([^\\.]+)\"), 0),\nxdm.source.host.hostname = arrayindex(split(xdm.source.host.hostname, \".\"), 0)\n| alter result = if(failure_reason = null, error_code, failure_reason),\ndevice_ip = null\n| fields message_id, xdm.event.id, xdm.target.user.username,\nerror_code, xdm.source.host.hostname, xdm.event.outcome,\nxdm.target.user.groups, xdm.source.user.username,\nxdm.logon.type, xdm.source.ipv4, _time, _insert_time,\nxdm.event.description, event_type, xdm.event.original_event_type,\nlogon_session_id, event_description, failure_reason,\nresult, device_ip\n| alter xdm.target.user.groups = to_string(xdm.target.user.groups)\n| alter aggregation_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find any processes that are downloading files or executing code using PowerShell commands like Invoke-WebRequest, DownloadString, and then executing the downloaded content with commands like  Invoke-Expression or IEX.", "response": "preset = xdr_process\n| filter ((action_process_image_command_line contains \".DownloadString(\" or action_process_image_command_line contains \".DownloadFile(\" or action_process_image_command_line contains \"Invoke-WebRequest \" or action_process_image_command_line contains \"iwr \") and (action_process_image_command_line contains \";iex $\" or action_process_image_command_line contains \"| IEX\" or action_process_image_command_line contains \"|IEX \" or action_process_image_command_line contains \"I`E`X\" or action_process_image_command_line contains \"I`EX\" or action_process_image_command_line contains \"IE`X\" or action_process_image_command_line contains \"iex \" or action_process_image_command_line contains \"IEX (\" or action_process_image_command_line contains \"IEX(\" or action_process_image_command_line contains \"Invoke-Expression\"))\n\n\n\n"}
{"prompt": "I want to detect failed login attempts on the Hitachi PAM platform and alert me if there are continuous locked outs, which could indicate a brute force attack.", "response": "config case_sensitive = false\n| dataset = hitachi_pam_raw\n| filter result ~= \"locked out\" and resultcode not in (-1, 3)\n| alter aggregate_criteria = \"ildestinationuser\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time),\nevent_desc = \"The Transaction Monitor Service or Password Manager service runs a connector to verify a password for a target system account.\",\ndevice_type = \"pam\""}
{"prompt": "I want to find suspicious processes that might be trying to change the \"DisableRestrictedAdmin\" registry value.", "response": "preset = xdr_process\n| filter (action_process_image_command_line ~= \".*\\\\System\\\\CurrentControlSet\\\\Control\\\\Lsa\\\\.*\" and action_process_image_command_line contains \"DisableRestrictedAdmin\")\n\n\n\n"}
{"prompt": "I want to find suspicious PowerShell activity that downloads files using .DownloadFile and System.Net.WebClient.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"powershell\" and action_process_image_command_line contains \".DownloadFile\" and action_process_image_command_line contains \"System.Net.WebClient\")\n\n\n\n"}
{"prompt": "I want to see events related to the creation of the \"wpbbin.exe\" file in the Windows System32 folder, as this might indicate UEFI persistence using Wpbbin.", "response": "datamodel\n| filter xdm.target.file.filename = \"C:\\\\Windows\\\\System32\\\\wpbbin.exe\"\n\n\n\n"}
{"prompt": "I want to detect processes on endpoints that use Base64 encoded shebang lines in their command line arguments.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"IyEvYmluL2Jhc2\" or action_process_image_command_line contains \"IyEvYmluL2Rhc2\" or action_process_image_command_line contains \"IyEvYmluL3pza\" or action_process_image_command_line contains \"IyEvYmluL2Zpc2\" or action_process_image_command_line contains \"IyEvYmluL3No\")\n\n\n\n"}
{"prompt": "I want to detect potential sideloading of the Iviewers.DLL file using Windows Event Logs.", "response": "preset = xdr_image_load\n| filter action_module_path ~= \".*\\\\iviewers\\.dll\" and  not ((action_module_path ~= \"C\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Windows\\ Kits\\\\.*\" or action_module_path ~= \"C\\:\\\\Program\\ Files\\\\Windows\\ Kits\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to see potential Rundll32 executions with DLLs stored in ADS.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\rundll32\\.exe\" or actor_process_file_original_name = \"RUNDLL32.EXE\") and action_process_image_command_line ~= \"[Rr][Uu][Nn][Dd][Ll][Ll]32(\\.[Ee][Xx][Ee])?\\ S+?\\w\\:S+?\\:\")\n\n\n\n"}
{"prompt": "I want to detect suspicious activity related to using the \"tasklist\" command on endpoints.", "response": "preset = xdr_process\n| filter (action_process_image_command_line contains \"tasklist\" or action_process_image_path ~= \".*\\\\tasklist\\.exe\" or actor_process_file_original_name = \"tasklist.exe\")\n\n\n\n"}
{"prompt": " I want to detect processes using indirect command execution techniques, specifically looking for \"pcalua.exe\" or \"forfiles.exe\". ", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\pcalua\\.exe\" or actor_process_image_path ~= \".*\\\\forfiles\\.exe\")\n\n\n\n"}
{"prompt": "I want to see alerts for Network Allocation Vector (NAV) attacks detected on my Cisco Wireless LAN Controllers.", "response": "config case_sensitive = false\n| datamodel dataset = cisco_wlc_raw\n| alter msg_id = concat(xdm.event.original_event_type, \"-\", xdm.alert.severity, \"-\", xdm.event.operation_sub_type),\ndevice_ip = cisco_wlc_raw._final_reporting_device_ip,\nserver_name = arrayindex(regextract(cisco_wlc_raw._raw_log, \"\\<\\d+\\>([^\\:]+)\"), 0),\nmac_address = arrayindex(regextract(cisco_wlc_raw._raw_log, \"for\\s+client\\s([^\\s]+)\"), 0),\nxdm.source.user.username = if(xdm.source.user.username = null, arrayindex(regextract(cisco_wlc_raw._raw_log, \"user\\saccount\\s\\(([^\\)]+)\"), 0), xdm.source.user.username)\n| alter mac_address = coalesce(mac_address, if(xdm.source.host.mac_addresses = null, null, to_string(xdm.source.host.mac_addresses)))\n| filter msg_id in (\"LWAPP-1-BIG_NAV\")\n| fields msg_id, xdm.event.original_event_type, xdm.alert.severity,\nxdm.event.operation_sub_type, xdm.event.description,\nxdm.event.log_level, xdm.event.outcome, xdm.event.outcome_reason,\nxdm.source.ipv4, xdm.source.ipv6, xdm.source.port,\nmac_address, xdm.source.process.name, xdm.source.user.username,\nxdm.source.agent.identifier, xdm.source.agent.type,\nxdm.target.ipv4, xdm.target.ipv6, xdm.target.port,\nxdm.target.host.ipv4_addresses, xdm.target.host.ipv6_addresses,\nxdm.target.interface, xdm.target.agent.identifier,\nxdm.target.host.hostname, xdm.target.host.mac_addresses,\nxdm.target.resource.type, xdm.target.resource_before.value,\nxdm.target.resource.value, xdm.session_context_id,\nxdm.alert.description, xdm.network.rule, xdm.network.ip_protocol,\nxdm.network.tls.cipher, cisco_wlc_raw._raw_log, device_ip,\nserver_name, _time, _insert_time, _product, _vendor\n| alter aggregation_criteria = \"ildeviceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to find instances where a file named \"ErrorHandler.cmd\" is created in the \"C:\\WINDOWS\\Setup\\Scripts\\\" directory.", "response": "datamodel\n| filter xdm.target.file.filename ~= \".*\\\\WINDOWS\\\\Setup\\\\Scripts\\\\ErrorHandler\\.cmd\"\n\n\n\n"}
{"prompt": "I want to find instances of an asynchronous TCP reverse shell script named \"PSAsyncShell\" within Windows event logs.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ScriptBlockText contains \"PSAsyncShell\"\n\n\n\n"}
{"prompt": "I want to see alerts about Windows update errors on my endpoints.", "response": "preset = xdr_event_log\n| filter (provider_name = \"Microsoft-Windows-WindowsUpdateClient\" and action_evtlog_event_id in (16, 20, 24, 213, 217))\n\n\n\n"}
{"prompt": "I want to see information about unusual processes started by the Userinit program on my endpoints.", "response": "preset = xdr_process\n| filter actor_process_image_path ~= \".*\\\\userinit\\.exe\" and  not (action_process_image_path ~= \".*\\:\\\\WINDOWS\\\\explorer\\.exe\") and  not ((action_process_image_command_line contains \"netlogon.bat\" or action_process_image_command_line contains \"UsrLogon.cmd\") or action_process_image_command_line = \"PowerShell.exe\" or (action_process_image_path ~= \".*\\:\\\\Windows\\\\System32\\\\proquota\\.exe\" or action_process_image_path ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\proquota\\.exe\") or (action_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Citrix\\\\HDX\\\\bin\\\\cmstart\\.exe\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Citrix\\\\HDX\\\\bin\\\\icast\\.exe\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\ \\(x86\\)\\\\Citrix\\\\System32\\\\icast\\.exe\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Citrix\\\\HDX\\\\bin\\\\cmstart\\.exe\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Citrix\\\\HDX\\\\bin\\\\icast\\.exe\" or action_process_image_path ~= \".*\\:\\\\Program\\ Files\\\\Citrix\\\\System32\\\\icast\\.exe\") or action_process_image_path = \"None\")\n\n\n\n"}
{"prompt": "I want to see events related to changes made to the xp_cmdshell option in MSSQL Server logs.", "response": "preset = xdr_event_log\n| alter Data = regextract(to_json_string(action_evtlog_data_fields)->Data{}, \"\\\"(.*)\\\"\")\n| filter (provider_name = \"MSSQLSERVER\" and action_evtlog_event_id = 15457 and Data contains \"xp_cmdshell\")\n\n\n\n"}
{"prompt": "I want to see all instances where PowerShell is used to download files from suspicious file sharing domains.", "response": "preset = xdr_process\n| filter (((action_process_image_path ~= \".*\\\\powershell\\.exe\" or action_process_image_path ~= \".*\\\\pwsh\\.exe\") or actor_process_file_original_name in (\"PowerShell.EXE\", \"pwsh.dll\")) and (action_process_image_command_line contains \"anonfiles.com\" or action_process_image_command_line contains \"cdn.discordapp.com\" or action_process_image_command_line contains \"cdn.discordapp.com/attachments/\" or action_process_image_command_line contains \"ddns.net\" or action_process_image_command_line contains \"dl.dropboxusercontent.com\" or action_process_image_command_line contains \"ghostbin.co\" or action_process_image_command_line contains \"glitch.me\" or action_process_image_command_line contains \"gofile.io\" or action_process_image_command_line contains \"hastebin.com\" or action_process_image_command_line contains \"mediafire.com\" or action_process_image_command_line contains \"mega.nz\" or action_process_image_command_line contains \"onrender.com\" or action_process_image_command_line contains \"paste.ee\" or action_process_image_command_line contains \"pastebin.com\" or action_process_image_command_line contains \"pastebin.pl\" or action_process_image_command_line contains \"pastetext.net\" or action_process_image_command_line contains \"privatlab.com\" or action_process_image_command_line contains \"privatlab.net\" or action_process_image_command_line contains \"send.exploit.in\" or action_process_image_command_line contains \"sendspace.com\" or action_process_image_command_line contains \"storage.googleapis.com\" or action_process_image_command_line contains \"storjshare.io\" or action_process_image_command_line contains \"supabase.co\" or action_process_image_command_line contains \"temp.sh\" or action_process_image_command_line contains \"transfer.sh\" or action_process_image_command_line contains \"ufile.io\") and (action_process_image_command_line contains \".DownloadString(\" or action_process_image_command_line contains \".DownloadFile(\" or action_process_image_command_line contains \"Invoke-WebRequest \" or action_process_image_command_line contains \"iwr \" or action_process_image_command_line contains \"wget \"))\n\n\n\n"}
{"prompt": "I want to see alerts for when Odbcconf.EXE is running from suspicious locations on my endpoints.", "response": "preset = xdr_process\n| filter ((action_process_image_path ~= \".*\\\\odbcconf\\.exe\" or actor_process_file_original_name = \"odbcconf.exe\") and (action_process_image_command_line ~= \".*\\:\\\\PerfLogs\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line contains \":\\\\Windows\\\\Registration\\\\CRMLog\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\com\\\\dmp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\FxsTmp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\Microsoft\\\\Crypto\\\\RSA\\\\MachineKeys\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\spool\\\\drivers\\\\color\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\spool\\\\PRINTERS\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\spool\\\\SERVERS\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\_Migrated\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\System32\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\com\\\\dmp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\FxsTmp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\PLA\\\\System\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\SysWOW64\\\\Tasks\\\\Microsoft\\\\Windows\\\\SyncCenter\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Tasks\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Windows\\\\Tracing\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\"))\n\n\n\n"}
{"prompt": "I want to detect suspicious executions of AddinUtil.exe with unusual paths for AddinRoot or PipelineRoot.", "response": "preset = xdr_process\n| filter (action_process_image_path ~= \".*\\\\addinutil\\.exe\" or actor_process_file_original_name = \"AddInUtil.exe\") and (((action_process_image_command_line contains \"-AddInRoot:\" or action_process_image_command_line contains \"-PipelineRoot:\") and (action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\Desktop\\\\.*\" or action_process_image_command_line ~= \".*\\\\Downloads\\\\.*\" or action_process_image_command_line ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\Windows\\\\Temp\\\\.*\")) or ((action_process_image_command_line contains \"-AddInRoot:.\" or action_process_image_command_line contains \"-AddInRoot:\\\".\\\"\" or action_process_image_command_line contains \"-PipelineRoot:.\" or action_process_image_command_line contains \"-PipelineRoot:\\\".\\\"\") and (action_process_cwd ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_cwd ~= \".*\\\\Desktop\\\\.*\" or action_process_cwd ~= \".*\\\\Downloads\\\\.*\" or action_process_cwd ~= \".*\\\\Users\\\\Public\\\\.*\" or action_process_cwd ~= \".*\\\\Windows\\\\Temp\\\\.*\")))\n\n\n\n"}
{"prompt": "I want to find suspicious DLL loads related to LSASS that aren't from the expected locations.", "response": "preset = xdr_registry\n| filter (action_registry_key_name contains \"\\\\CurrentControlSet\\\\Services\\\\NTDS\\\\DirectoryServiceExtPt\" or action_registry_key_name contains \"\\\\CurrentControlSet\\\\Services\\\\NTDS\\\\LsaDbExtPt\") and  not ((actor_process_image_path = \"C:\\\\Windows\\\\system32\\\\lsass.exe\" and (action_registry_value_name in (\"%%systemroot%%\\\\system32\\\\ntdsa.dll\", \"%%systemroot%%\\\\system32\\\\lsadb.dll\") or action_registry_data in (\"%%systemroot%%\\\\system32\\\\ntdsa.dll\", \"%%systemroot%%\\\\system32\\\\lsadb.dll\"))))\n\n\n\n"}
{"prompt": "I want to see events related to potential Qakbot infections where rundll32.exe is used with suspicious command lines accessing specific directories like ProgramData, Users\\Public, Temp, or AppData Roaming.", "response": "preset = xdr_process\n| filter ((actor_process_image_path ~= \".*\\\\cmd\\.exe\" or actor_process_image_path ~= \".*\\\\cscript\\.exe\" or actor_process_image_path ~= \".*\\\\curl\\.exe\" or actor_process_image_path ~= \".*\\\\mshta\\.exe\" or actor_process_image_path ~= \".*\\\\powershell\\.exe\" or actor_process_image_path ~= \".*\\\\pwsh\\.exe\" or actor_process_image_path ~= \".*\\\\wscript\\.exe\") and action_process_image_path ~= \".*\\\\rundll32\\.exe\" and (action_process_image_command_line ~= \".*\\:\\\\ProgramData\\\\.*\" or action_process_image_command_line ~= \".*\\:\\\\Users\\\\Public\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Local\\\\Temp\\\\.*\" or action_process_image_command_line ~= \".*\\\\AppData\\\\Roaming\\\\.*\")) and  not (action_process_image_command_line contains \".dll\")\n\n\n\n"}
{"prompt": "I want to find PowerShell scripts on endpoints that search for sensitive files like password files (.pass), KDBX databases (.kdbx), and .kdb files using commands like \"ls\", \"get-childitem\", or \"gci\" with the \"-recurse\" flag.", "response": "preset = xdr_event_log\n| alter ScriptBlockText = regextract(to_json_string(action_evtlog_data_fields)->ScriptBlockText{}, \"\\\"(.*)\\\"\")\n| filter ((ScriptBlockText contains \"ls\" or ScriptBlockText contains \"get-childitem\" or ScriptBlockText contains \"gci\") and ScriptBlockText contains \"-recurse\" and (ScriptBlockText contains \".pass\" or ScriptBlockText contains \".kdbx\" or ScriptBlockText contains \".kdb\"))\n\n\n\n"}
{"prompt": "I want to find instances of lateral movement using MMC20, specifically when svchost.exe spawns mmc.exe with the \"-Embedding\" parameter.", "response": "preset = xdr_process\n| filter (actor_process_image_path ~= \".*\\\\svchost\\.exe\" and action_process_image_path ~= \".*\\\\mmc\\.exe\" and action_process_image_command_line contains \"-Embedding\")\n\n\n\n"}
{"prompt": "I want to see alerts for potential Cross Site Scripting attacks on IIS webservers.", "response": "config case_sensitive = false\n| datamodel dataset = iis_iis_raw\n| join type = left\n(dataset = device_group_static_list\n| filter TYPE ~= \"microsoft iis\"\n| fields IP\n) as device_group device_group.IP = xdm.target.ipv4\n| filter IP != null\n| join type = left\n(dataset = iisvascan_ip_address_list\n| fields ip_address\n) as qualys_scan_ips qualys_scan_ips.ip_address = xdm.source.ipv4\n| filter ip_address = null\n| filter xdm.target.url ~= \"<script>\" or xdm.target.url ~= \"</script>\" or xdm.target.url ~= \"%3Cscript%3E\" or xdm.target.url ~= \"%3C/script%3E\"\n| filter xdm.target.ipv4 not in (\"<ip>\") and xdm.source.ipv4 not in (\"<ip>\")\n| fields xdm.source.ipv4, xdm.source.user.username, xdm.observer.unique_identifier,\nxdm.target.host.hostname, xdm.network.http.url, xdm.target.ipv4,\nxdm.source.port, xdm.network.http.method, xdm.network.http.response_code,\nxdm.event.duration, xdm.network.session_id, xdm.network.http.referrer,\nxdm.source.sent_bytes, xdm.target.sent_bytes, xdm.source.user_agent,\nxdm.target.url, xdm.target.host.hostname, _insert_time,\n_time\n| alter aggregation_criteria = \"ilsourceip\",\nevent_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
{"prompt": "I want to see events from Swift where an operator password changed, specifically when the \"Administrator\" password was updated.", "response": "config case_sensitive = false\n| datamodel dataset = swift_application_raw\n| filter xdm.event.outcome_reason = \"operator password changed\" and xdm.event.description contains \"Password of operator 'Administrator' changed.\"\n| alter event_time = format_timestamp(\"%Y-%m-%d %H:%M:%S\", _time)"}
